
-- generated by using spec/Declarations.yaml

{-# LANGUAGE DataKinds #-}
{-# LANGUAGE PolyKinds #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE OverloadedStrings #-}

module Aten.Unmanaged.TH where


import Foreign.C.String
import Foreign.C.Types
import Foreign
import Aten.Type
import Aten.Class

import qualified Language.C.Inline.Cpp as C
import qualified Language.C.Inline.Cpp.Exceptions as C
import qualified Language.C.Inline.Context as C
import qualified Language.C.Types as C
import qualified Data.Map as Map

C.context $ C.cppCtx <> mempty { C.ctxTypesTable = typeTable }

C.include "<vector>"
C.include "<ATen/ATen.h>"


_th_set__tS
  :: Ptr Tensor
  -> Ptr Storage
  -> IO (Ptr Tensor)
_th_set__tS _self _source =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_set_(
    *$(at::Tensor* _self)
  , *$(at::Storage* _source)));
  }|]

_th_set__tSlll
  :: Ptr Tensor
  -> Ptr Storage
  -> Int64
  -> Ptr IntArray
  -> Ptr IntArray
  -> IO (Ptr Tensor)
_th_set__tSlll _self _source _storage_offset _size _stride =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_set_(
    *$(at::Tensor* _self)
  , *$(at::Storage* _source)
  , $(int64_t _storage_offset)
  , *$(std::vector<int64_t>* _size)
  , *$(std::vector<int64_t>* _stride)));
  }|]

_th_set__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_set__tt _self _source =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_set_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _source)));
  }|]

_th_set__t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_set__t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_set_(
    *$(at::Tensor* _self)));
  }|]

_th_fill__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_fill__ts _self _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_fill_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _value)));
  }|]

_th_fill__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_fill__tt _self _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_fill_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _value)));
  }|]

_th_is_set_to_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (CBool)
_th_is_set_to_tt _self _tensor =
  [C.throwBlock| bool { return (at::_th_is_set_to(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _tensor)));
  }|]

_th_masked_fill__tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_masked_fill__tts _self _mask _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_masked_fill_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _mask)
  , *$(at::Scalar* _value)));
  }|]

_th_masked_fill__ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_masked_fill__ttt _self _mask _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_masked_fill_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _mask)
  , *$(at::Tensor* _value)));
  }|]

_th_masked_scatter__ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_masked_scatter__ttt _self _mask _source =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_masked_scatter_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _mask)
  , *$(at::Tensor* _source)));
  }|]

_th_masked_select_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_masked_select_out_ttt _result _self _mask =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_masked_select_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _mask)));
  }|]

_th_masked_select_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_masked_select_tt _self _mask =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_masked_select(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _mask)));
  }|]

_th_nonzero_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_nonzero_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_nonzero_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_nonzero_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_nonzero_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_nonzero(
    *$(at::Tensor* _self)));
  }|]

_th_clone_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_clone_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_clone(
    *$(at::Tensor* _self)));
  }|]

_th_view_tl
  :: Ptr Tensor
  -> Ptr IntArray
  -> IO (Ptr Tensor)
_th_view_tl _self _size =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_view(
    *$(at::Tensor* _self)
  , *$(std::vector<int64_t>* _size)));
  }|]

_th_resize_as__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_resize_as__tt _self _the_template =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_resize_as_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _the_template)));
  }|]

_th_index_select_out_ttlt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_index_select_out_ttlt _result _self _dim _index =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_index_select_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)
  , *$(at::Tensor* _index)));
  }|]

_th_index_select_tlt
  :: Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_index_select_tlt _self _dim _index =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_index_select(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , *$(at::Tensor* _index)));
  }|]

_th_index_copy__tltt
  :: Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_index_copy__tltt _self _dim _index _source =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_index_copy_(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , *$(at::Tensor* _index)
  , *$(at::Tensor* _source)));
  }|]

_th_take_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_take_out_ttt _result _self _index =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_take_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _index)));
  }|]

_th_take_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_take_tt _self _index =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_take(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _index)));
  }|]

_th_put__tttb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> IO (Ptr Tensor)
_th_put__tttb _self _index _source _accumulate =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_put_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _index)
  , *$(at::Tensor* _source)
  , $(bool _accumulate)));
  }|]

_th_index_add__tltt
  :: Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_index_add__tltt _self _dim _index _source =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_index_add_(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , *$(at::Tensor* _index)
  , *$(at::Tensor* _source)));
  }|]

_th_index_fill__tlts
  :: Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_index_fill__tlts _self _dim _index _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_index_fill_(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , *$(at::Tensor* _index)
  , *$(at::Scalar* _value)));
  }|]

_th_index_fill__tltt
  :: Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_index_fill__tltt _self _dim _index _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_index_fill_(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , *$(at::Tensor* _index)
  , *$(at::Tensor* _value)));
  }|]

_th_unfold_out_ttlll
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> Int64
  -> Int64
  -> IO (Ptr Tensor)
_th_unfold_out_ttlll _result _self _dimension _size _step =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_unfold_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , $(int64_t _dimension)
  , $(int64_t _size)
  , $(int64_t _step)));
  }|]

_th_unfold_tlll
  :: Ptr Tensor
  -> Int64
  -> Int64
  -> Int64
  -> IO (Ptr Tensor)
_th_unfold_tlll _self _dimension _size _step =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_unfold(
    *$(at::Tensor* _self)
  , $(int64_t _dimension)
  , $(int64_t _size)
  , $(int64_t _step)));
  }|]

_th_scatter__tltt
  :: Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_scatter__tltt _self _dim _index _src =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_scatter_(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , *$(at::Tensor* _index)
  , *$(at::Tensor* _src)));
  }|]

_th_scatter__tlts
  :: Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_scatter__tlts _self _dim _index _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_scatter_(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , *$(at::Tensor* _index)
  , *$(at::Scalar* _value)));
  }|]

_th_scatter_add__tltt
  :: Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_scatter_add__tltt _self _dim _index _src =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_scatter_add_(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , *$(at::Tensor* _index)
  , *$(at::Tensor* _src)));
  }|]

_th_gather_out_ttlt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_gather_out_ttlt _result _self _dim _index =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_gather_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)
  , *$(at::Tensor* _index)));
  }|]

_th_gather_tlt
  :: Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_gather_tlt _self _dim _index =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_gather(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , *$(at::Tensor* _index)));
  }|]

_th_equal_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (CBool)
_th_equal_tt _self _other =
  [C.throwBlock| bool { return (at::_th_equal(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_and_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_and_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_and_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_and_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_and_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_and(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_and_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_and_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_and_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_and_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_and_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_and(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_iand__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_iand__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_iand_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_iand__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_iand__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_iand_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_or_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_or_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_or_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_or_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_or_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_or(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_or_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_or_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_or_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_or_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_or_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_or(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_ior__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_ior__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ior_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_ior__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_ior__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ior_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_xor_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_xor_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_xor_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_xor_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_xor_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_xor(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_xor_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_xor_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_xor_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_xor_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_xor_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_xor(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_ixor__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_ixor__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ixor_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_ixor__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_ixor__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ixor_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_lshift_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_lshift_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lshift_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_lshift_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_lshift_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lshift(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_lshift_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_lshift_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lshift_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_lshift_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_lshift_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lshift(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_ilshift__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_ilshift__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ilshift_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_ilshift__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_ilshift__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ilshift_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_rshift_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_rshift_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_rshift_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_rshift_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_rshift_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_rshift(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_rshift_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_rshift_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_rshift_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_rshift_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_rshift_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_rshift(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_irshift__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_irshift__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_irshift_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_irshift__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_irshift__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_irshift_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_lt_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_lt_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lt_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_lt_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_lt_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lt(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_lt_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_lt_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lt_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_lt_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_lt_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lt(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_lt__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_lt__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lt_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_lt__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_lt__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lt_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_gt_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_gt_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_gt_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_gt_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_gt_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_gt(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_gt_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_gt_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_gt_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_gt_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_gt_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_gt(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_gt__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_gt__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_gt_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_gt__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_gt__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_gt_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_le_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_le_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_le_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_le_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_le_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_le(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_le_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_le_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_le_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_le_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_le_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_le(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_le__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_le__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_le_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_le__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_le__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_le_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_ge_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_ge_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ge_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_ge_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_ge_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ge(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_ge_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_ge_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ge_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_ge_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_ge_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ge(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_ge__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_ge__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ge_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_ge__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_ge__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ge_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_eq_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_eq_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_eq_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_eq_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_eq_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_eq(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_eq_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_eq_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_eq_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_eq_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_eq_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_eq(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_eq__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_eq__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_eq_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_eq__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_eq__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_eq_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_ne_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_ne_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ne_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_ne_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_ne_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ne(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_ne_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_ne_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ne_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_ne_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_ne_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ne(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_ne__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_ne__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ne_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_ne__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_ne__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ne_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_min_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_min_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_min_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_min_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_min_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_min(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_min_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_min_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_min(
    *$(at::Tensor* _self)));
  }|]

_th_min_out_tttlb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_min_out_tttlb _min _min_indices _self _dim _keepdim =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_min_out(
    *$(at::Tensor* _min)
  , *$(at::Tensor* _min_indices)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _keepdim)));
  }|]

_th_min_tlb
  :: Ptr Tensor
  -> Int64
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_min_tlb _self _dim _keepdim =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_min(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _keepdim)));
  }|]

_th_max_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_max_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_max_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_max_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_max_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_max(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_max_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_max_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_max(
    *$(at::Tensor* _self)));
  }|]

_th_max_out_tttlb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_max_out_tttlb _max _max_indices _self _dim _keepdim =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_max_out(
    *$(at::Tensor* _max)
  , *$(at::Tensor* _max_indices)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _keepdim)));
  }|]

_th_max_tlb
  :: Ptr Tensor
  -> Int64
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_max_tlb _self _dim _keepdim =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_max(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _keepdim)));
  }|]

_th_mode_out_tttlb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_mode_out_tttlb _values _indices _self _dim _keepdim =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_mode_out(
    *$(at::Tensor* _values)
  , *$(at::Tensor* _indices)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _keepdim)));
  }|]

_th_mode_tlb
  :: Ptr Tensor
  -> Int64
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_mode_tlb _self _dim _keepdim =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_mode(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _keepdim)));
  }|]

_th_sort_out_tttlb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_sort_out_tttlb _values _indices _self _dim _descending =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_sort_out(
    *$(at::Tensor* _values)
  , *$(at::Tensor* _indices)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _descending)));
  }|]

_th_sort_tlb
  :: Ptr Tensor
  -> Int64
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_sort_tlb _self _dim _descending =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_sort(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _descending)));
  }|]

_th_topk_out_tttllbb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> Int64
  -> CBool
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_topk_out_tttllbb _values _indices _self _k _dim _largest _sorted =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_topk_out(
    *$(at::Tensor* _values)
  , *$(at::Tensor* _indices)
  , *$(at::Tensor* _self)
  , $(int64_t _k)
  , $(int64_t _dim)
  , $(bool _largest)
  , $(bool _sorted)));
  }|]

_th_topk_tllbb
  :: Ptr Tensor
  -> Int64
  -> Int64
  -> CBool
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_topk_tllbb _self _k _dim _largest _sorted =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_topk(
    *$(at::Tensor* _self)
  , $(int64_t _k)
  , $(int64_t _dim)
  , $(bool _largest)
  , $(bool _sorted)));
  }|]

_th_abs_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_abs_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_abs_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_abs_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_abs_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_abs(
    *$(at::Tensor* _self)));
  }|]

_th_sigmoid_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_sigmoid_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_sigmoid_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_sigmoid_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_sigmoid_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_sigmoid(
    *$(at::Tensor* _self)));
  }|]

_th_log_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_log_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_log_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_log_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_log_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_log(
    *$(at::Tensor* _self)));
  }|]

_th_log10_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_log10_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_log10_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_log10_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_log10_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_log10(
    *$(at::Tensor* _self)));
  }|]

_th_log1p_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_log1p_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_log1p_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_log1p_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_log1p_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_log1p(
    *$(at::Tensor* _self)));
  }|]

_th_log2_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_log2_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_log2_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_log2_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_log2_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_log2(
    *$(at::Tensor* _self)));
  }|]

_th_lgamma_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_lgamma_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lgamma_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_lgamma_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_lgamma_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lgamma(
    *$(at::Tensor* _self)));
  }|]

_th_lgamma__t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_lgamma__t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_lgamma_(
    *$(at::Tensor* _self)));
  }|]

_th_digamma_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_digamma_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_digamma_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_digamma_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_digamma_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_digamma(
    *$(at::Tensor* _self)));
  }|]

_th_digamma__t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_digamma__t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_digamma_(
    *$(at::Tensor* _self)));
  }|]

_th_polygamma_out_tlt
  :: Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_polygamma_out_tlt _result _n _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_polygamma_out(
    *$(at::Tensor* _result)
  , $(int64_t _n)
  , *$(at::Tensor* _self)));
  }|]

_th_polygamma_lt
  :: Int64
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_polygamma_lt _n _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_polygamma(
    $(int64_t _n)
  , *$(at::Tensor* _self)));
  }|]

_th_polygamma__tl
  :: Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_th_polygamma__tl _self _n =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_polygamma_(
    *$(at::Tensor* _self)
  , $(int64_t _n)));
  }|]

_th_exp_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_exp_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_exp_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_exp_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_exp_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_exp(
    *$(at::Tensor* _self)));
  }|]

_th_expm1_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_expm1_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_expm1_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_expm1_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_expm1_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_expm1(
    *$(at::Tensor* _self)));
  }|]

_th_cos_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_cos_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cos_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_cos_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_cos_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cos(
    *$(at::Tensor* _self)));
  }|]

_th_acos_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_acos_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_acos_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_acos_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_acos_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_acos(
    *$(at::Tensor* _self)));
  }|]

_th_cosh_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_cosh_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cosh_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_cosh_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_cosh_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cosh(
    *$(at::Tensor* _self)));
  }|]

_th_sin_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_sin_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_sin_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_sin_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_sin_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_sin(
    *$(at::Tensor* _self)));
  }|]

_th_asin_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_asin_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_asin_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_asin_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_asin_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_asin(
    *$(at::Tensor* _self)));
  }|]

_th_sinh_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_sinh_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_sinh_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_sinh_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_sinh_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_sinh(
    *$(at::Tensor* _self)));
  }|]

_th_tan_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_tan_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_tan_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_tan_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_tan_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_tan(
    *$(at::Tensor* _self)));
  }|]

_th_atan_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_atan_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_atan_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_atan_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_atan_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_atan(
    *$(at::Tensor* _self)));
  }|]

_th_tanh_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_tanh_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_tanh_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_tanh_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_tanh_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_tanh(
    *$(at::Tensor* _self)));
  }|]

_th_erf_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_erf_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_erf_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_erf_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_erf_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_erf(
    *$(at::Tensor* _self)));
  }|]

_th_erfc_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_erfc_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_erfc_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_erfc_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_erfc_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_erfc(
    *$(at::Tensor* _self)));
  }|]

_th_erfinv__t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_erfinv__t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_erfinv_(
    *$(at::Tensor* _self)));
  }|]

_th_erfinv_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_erfinv_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_erfinv_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_erfinv_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_erfinv_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_erfinv(
    *$(at::Tensor* _self)));
  }|]

_th_sqrt_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_sqrt_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_sqrt_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_sqrt_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_sqrt_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_sqrt(
    *$(at::Tensor* _self)));
  }|]

_th_rsqrt_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_rsqrt_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_rsqrt_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_rsqrt_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_rsqrt_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_rsqrt(
    *$(at::Tensor* _self)));
  }|]

_th_ceil_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_ceil_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ceil_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_ceil_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_ceil_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ceil(
    *$(at::Tensor* _self)));
  }|]

_th_floor_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_floor_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_floor_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_floor_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_floor_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_floor(
    *$(at::Tensor* _self)));
  }|]

_th_round_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_round_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_round_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_round_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_round_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_round(
    *$(at::Tensor* _self)));
  }|]

_th_trunc_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_trunc_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_trunc_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_trunc_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_trunc_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_trunc(
    *$(at::Tensor* _self)));
  }|]

_th_frac__t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_frac__t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_frac_(
    *$(at::Tensor* _self)));
  }|]

_th_frac_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_frac_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_frac_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_frac_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_frac_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_frac(
    *$(at::Tensor* _self)));
  }|]

_th_var_out_ttlbb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> CBool
  -> CBool
  -> IO (Ptr Tensor)
_th_var_out_ttlbb _result _self _dim _unbiased _keepdim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_var_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _unbiased)
  , $(bool _keepdim)));
  }|]

_th_var_tlbb
  :: Ptr Tensor
  -> Int64
  -> CBool
  -> CBool
  -> IO (Ptr Tensor)
_th_var_tlbb _self _dim _unbiased _keepdim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_var(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _unbiased)
  , $(bool _keepdim)));
  }|]

_th_var_tb
  :: Ptr Tensor
  -> CBool
  -> IO (Ptr Tensor)
_th_var_tb _self _unbiased =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_var(
    *$(at::Tensor* _self)
  , $(bool _unbiased)));
  }|]

_th_std_out_ttlbb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> CBool
  -> CBool
  -> IO (Ptr Tensor)
_th_std_out_ttlbb _result _self _dim _unbiased _keepdim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_std_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _unbiased)
  , $(bool _keepdim)));
  }|]

_th_std_tlbb
  :: Ptr Tensor
  -> Int64
  -> CBool
  -> CBool
  -> IO (Ptr Tensor)
_th_std_tlbb _self _dim _unbiased _keepdim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_std(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _unbiased)
  , $(bool _keepdim)));
  }|]

_th_std_tb
  :: Ptr Tensor
  -> CBool
  -> IO (Ptr Tensor)
_th_std_tb _self _unbiased =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_std(
    *$(at::Tensor* _self)
  , $(bool _unbiased)));
  }|]

_th_renorm_out_ttsls
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Int64
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_renorm_out_ttsls _result _self _p _dim _maxnorm =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_renorm_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _p)
  , $(int64_t _dim)
  , *$(at::Scalar* _maxnorm)));
  }|]

_th_renorm_tsls
  :: Ptr Tensor
  -> Ptr Scalar
  -> Int64
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_renorm_tsls _self _p _dim _maxnorm =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_renorm(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _p)
  , $(int64_t _dim)
  , *$(at::Scalar* _maxnorm)));
  }|]

_th_renorm__tsls
  :: Ptr Tensor
  -> Ptr Scalar
  -> Int64
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_renorm__tsls _self _p _dim _maxnorm =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_renorm_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _p)
  , $(int64_t _dim)
  , *$(at::Scalar* _maxnorm)));
  }|]

_th_dist_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_dist_tts _self _other _p =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_dist(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)
  , *$(at::Scalar* _p)));
  }|]

_th_reciprocal_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_reciprocal_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_reciprocal_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_reciprocal_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_reciprocal_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_reciprocal(
    *$(at::Tensor* _self)));
  }|]

_th_reciprocal__t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_reciprocal__t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_reciprocal_(
    *$(at::Tensor* _self)));
  }|]

_th_neg_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_neg_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_neg_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_neg_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_neg_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_neg(
    *$(at::Tensor* _self)));
  }|]

_th_neg__t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_neg__t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_neg_(
    *$(at::Tensor* _self)));
  }|]

_th_atan2_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_atan2_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_atan2_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_atan2_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_atan2_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_atan2(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_atan2__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_atan2__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_atan2_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_pow_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_pow_out_tts _result _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_pow_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _exponent)));
  }|]

_th_pow_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_pow_ts _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_pow(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _exponent)));
  }|]

_th_pow_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_pow_out_ttt _result _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_pow_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _exponent)));
  }|]

_th_pow_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_pow_tt _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_pow(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _exponent)));
  }|]

_th_pow_out_tst
  :: Ptr Tensor
  -> Ptr Scalar
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_pow_out_tst _result _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_pow_out(
    *$(at::Tensor* _result)
  , *$(at::Scalar* _self)
  , *$(at::Tensor* _exponent)));
  }|]

_th_pow_st
  :: Ptr Scalar
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_pow_st _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_pow(
    *$(at::Scalar* _self)
  , *$(at::Tensor* _exponent)));
  }|]

_th_pow__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_pow__ts _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_pow_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _exponent)));
  }|]

_th_pow__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_pow__tt _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_pow_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _exponent)));
  }|]

_th_histc_out_ttlss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_histc_out_ttlss _result _self _bins _min _max =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_histc_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , $(int64_t _bins)
  , *$(at::Scalar* _min)
  , *$(at::Scalar* _max)));
  }|]

_th_histc_tlss
  :: Ptr Tensor
  -> Int64
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_histc_tlss _self _bins _min _max =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_histc(
    *$(at::Tensor* _self)
  , $(int64_t _bins)
  , *$(at::Scalar* _min)
  , *$(at::Scalar* _max)));
  }|]

_th_zero__t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_zero__t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_zero_(
    *$(at::Tensor* _self)));
  }|]

_th_cumsum_out_ttl
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_th_cumsum_out_ttl _result _self _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cumsum_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)));
  }|]

_th_cumsum_tl
  :: Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_th_cumsum_tl _self _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cumsum(
    *$(at::Tensor* _self)
  , $(int64_t _dim)));
  }|]

_th_cumprod_out_ttl
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_th_cumprod_out_ttl _result _self _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cumprod_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)));
  }|]

_th_cumprod_tl
  :: Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_th_cumprod_tl _self _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cumprod(
    *$(at::Tensor* _self)
  , $(int64_t _dim)));
  }|]

_th_sign_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_sign_out_tt _result _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_sign_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)));
  }|]

_th_sign_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_sign_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_sign(
    *$(at::Tensor* _self)));
  }|]

_th_sign__t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_sign__t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_sign_(
    *$(at::Tensor* _self)));
  }|]

_th_trace_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_trace_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_trace(
    *$(at::Tensor* _self)));
  }|]

_th_fmod_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_fmod_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_fmod_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_fmod_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_fmod_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_fmod(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_fmod_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_fmod_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_fmod_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_fmod_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_fmod_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_fmod(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_fmod__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_fmod__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_fmod_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_fmod__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_fmod__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_fmod_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_remainder_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_remainder_out_tts _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_remainder_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_remainder_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_remainder_ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_remainder(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_remainder_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_remainder_out_ttt _result _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_remainder_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_remainder_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_remainder_tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_remainder(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_remainder__ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_remainder__ts _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_remainder_(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _other)));
  }|]

_th_remainder__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_remainder__tt _self _other =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_remainder_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

_th_clamp_out_ttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_clamp_out_ttss _result _self _min _max =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_clamp_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _min)
  , *$(at::Scalar* _max)));
  }|]

_th_clamp_tss
  :: Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_clamp_tss _self _min _max =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_clamp(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _min)
  , *$(at::Scalar* _max)));
  }|]

_th_clamp_min_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_clamp_min_out_tts _result _self _min =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_clamp_min_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _min)));
  }|]

_th_clamp_min_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_clamp_min_ts _self _min =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_clamp_min(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _min)));
  }|]

_th_clamp_max_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_clamp_max_out_tts _result _self _max =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_clamp_max_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _max)));
  }|]

_th_clamp_max_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_clamp_max_ts _self _max =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_clamp_max(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _max)));
  }|]

_th_dot_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_dot_tt _self _tensor =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_dot(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _tensor)));
  }|]

_th_cross_kernel_out_tttl
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_th_cross_kernel_out_tttl _result _self _other _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cross_kernel_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _other)
  , $(int64_t _dim)));
  }|]

_th_cross_kernel_ttl
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_th_cross_kernel_ttl _self _other _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cross_kernel(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)
  , $(int64_t _dim)));
  }|]

_th_diag_out_ttl
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_th_diag_out_ttl _result _self _diagonal =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_diag_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , $(int64_t _diagonal)));
  }|]

_th_diag_tl
  :: Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_th_diag_tl _self _diagonal =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_diag(
    *$(at::Tensor* _self)
  , $(int64_t _diagonal)));
  }|]

_th_addmm_out_ttttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addmm_out_ttttss _result _self _mat1 _mat2 _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addmm_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _mat1)
  , *$(at::Tensor* _mat2)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_addmm_tttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addmm_tttss _self _mat1 _mat2 _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addmm(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _mat1)
  , *$(at::Tensor* _mat2)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_addmm__tttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addmm__tttss _self _mat1 _mat2 _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addmm_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _mat1)
  , *$(at::Tensor* _mat2)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_addmv_out_ttttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addmv_out_ttttss _result _self _mat _vec _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addmv_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _mat)
  , *$(at::Tensor* _vec)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_addmv_tttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addmv_tttss _self _mat _vec _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addmv(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _mat)
  , *$(at::Tensor* _vec)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_addmv__tttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addmv__tttss _self _mat _vec _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addmv_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _mat)
  , *$(at::Tensor* _vec)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_addr_out_ttttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addr_out_ttttss _result _self _vec1 _vec2 _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addr_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _vec1)
  , *$(at::Tensor* _vec2)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_addr_tttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addr_tttss _self _vec1 _vec2 _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addr(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _vec1)
  , *$(at::Tensor* _vec2)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_addr__tttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addr__tttss _self _vec1 _vec2 _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addr_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _vec1)
  , *$(at::Tensor* _vec2)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_ger_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_ger_out_ttt _result _self _vec2 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ger_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _vec2)));
  }|]

_th_ger_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_ger_tt _self _vec2 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ger(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _vec2)));
  }|]

_th_mv_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_mv_out_ttt _result _self _vec =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_mv_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _vec)));
  }|]

_th_mv_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_mv_tt _self _vec =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_mv(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _vec)));
  }|]

_th_mm_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_mm_out_ttt _result _self _mat2 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_mm_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _mat2)));
  }|]

_th_mm_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_mm_tt _self _mat2 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_mm(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _mat2)));
  }|]

_th_bmm_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_bmm_out_ttt _result _self _mat2 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_bmm_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _mat2)));
  }|]

_th_bmm_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_bmm_tt _self _mat2 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_bmm(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _mat2)));
  }|]

_th_addbmm_out_ttttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addbmm_out_ttttss _result _self _batch1 _batch2 _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addbmm_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _batch1)
  , *$(at::Tensor* _batch2)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_addbmm_tttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addbmm_tttss _self _batch1 _batch2 _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addbmm(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _batch1)
  , *$(at::Tensor* _batch2)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_addbmm__tttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addbmm__tttss _self _batch1 _batch2 _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addbmm_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _batch1)
  , *$(at::Tensor* _batch2)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_baddbmm_out_ttttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_baddbmm_out_ttttss _result _self _batch1 _batch2 _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_baddbmm_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _batch1)
  , *$(at::Tensor* _batch2)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_baddbmm_tttss
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_baddbmm_tttss _self _batch1 _batch2 _beta _alpha =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_baddbmm(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _batch1)
  , *$(at::Tensor* _batch2)
  , *$(at::Scalar* _beta)
  , *$(at::Scalar* _alpha)));
  }|]

_th_addcmul_out_tttts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addcmul_out_tttts _result _self _tensor1 _tensor2 _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addcmul_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _tensor1)
  , *$(at::Tensor* _tensor2)
  , *$(at::Scalar* _value)));
  }|]

_th_addcmul_ttts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addcmul_ttts _self _tensor1 _tensor2 _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addcmul(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _tensor1)
  , *$(at::Tensor* _tensor2)
  , *$(at::Scalar* _value)));
  }|]

_th_addcmul__ttts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addcmul__ttts _self _tensor1 _tensor2 _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addcmul_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _tensor1)
  , *$(at::Tensor* _tensor2)
  , *$(at::Scalar* _value)));
  }|]

_th_addcdiv_out_tttts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addcdiv_out_tttts _result _self _tensor1 _tensor2 _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addcdiv_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _tensor1)
  , *$(at::Tensor* _tensor2)
  , *$(at::Scalar* _value)));
  }|]

_th_addcdiv_ttts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addcdiv_ttts _self _tensor1 _tensor2 _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addcdiv(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _tensor1)
  , *$(at::Tensor* _tensor2)
  , *$(at::Scalar* _value)));
  }|]

_th_addcdiv__ttts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
_th_addcdiv__ttts _self _tensor1 _tensor2 _value =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_addcdiv_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _tensor1)
  , *$(at::Tensor* _tensor2)
  , *$(at::Scalar* _value)));
  }|]

_th_gels_out_tttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr (Tensor,Tensor))
_th_gels_out_tttt _res1 _res2 _self _A =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_gels_out(
    *$(at::Tensor* _res1)
  , *$(at::Tensor* _res2)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _A)));
  }|]

_th_gels_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr (Tensor,Tensor))
_th_gels_tt _self _A =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_gels(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _A)));
  }|]

_th_symeig_out_tttbb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_symeig_out_tttbb _res1 _res2 _self _eigenvectors _upper =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_symeig_out(
    *$(at::Tensor* _res1)
  , *$(at::Tensor* _res2)
  , *$(at::Tensor* _self)
  , $(bool _eigenvectors)
  , $(bool _upper)));
  }|]

_th_symeig_tbb
  :: Ptr Tensor
  -> CBool
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_symeig_tbb _self _eigenvectors _upper =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_symeig(
    *$(at::Tensor* _self)
  , $(bool _eigenvectors)
  , $(bool _upper)));
  }|]

_th_eig_out_tttb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_eig_out_tttb _res1 _res2 _self _eigenvectors =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_eig_out(
    *$(at::Tensor* _res1)
  , *$(at::Tensor* _res2)
  , *$(at::Tensor* _self)
  , $(bool _eigenvectors)));
  }|]

_th_eig_tb
  :: Ptr Tensor
  -> CBool
  -> IO (Ptr (Tensor,Tensor))
_th_eig_tb _self _eigenvectors =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_eig(
    *$(at::Tensor* _self)
  , $(bool _eigenvectors)));
  }|]

_th_svd_out_ttttbb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> CBool
  -> IO (Ptr (Tensor,Tensor,Tensor))
_th_svd_out_ttttbb _res1 _res2 _res3 _self _some _compute_uv =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor,at::Tensor>(at::_th_svd_out(
    *$(at::Tensor* _res1)
  , *$(at::Tensor* _res2)
  , *$(at::Tensor* _res3)
  , *$(at::Tensor* _self)
  , $(bool _some)
  , $(bool _compute_uv)));
  }|]

_th_svd_tbb
  :: Ptr Tensor
  -> CBool
  -> CBool
  -> IO (Ptr (Tensor,Tensor,Tensor))
_th_svd_tbb _self _some _compute_uv =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor,at::Tensor>(at::_th_svd(
    *$(at::Tensor* _self)
  , $(bool _some)
  , $(bool _compute_uv)));
  }|]

_th_getri_single_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_getri_single_out_tt _output _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_getri_single_out(
    *$(at::Tensor* _output)
  , *$(at::Tensor* _self)));
  }|]

_th_getri_single_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_getri_single_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_getri_single(
    *$(at::Tensor* _self)));
  }|]

_th_potri_out_ttb
  :: Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> IO (Ptr Tensor)
_th_potri_out_ttb _output _self _upper =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_potri_out(
    *$(at::Tensor* _output)
  , *$(at::Tensor* _self)
  , $(bool _upper)));
  }|]

_th_potri_tb
  :: Ptr Tensor
  -> CBool
  -> IO (Ptr Tensor)
_th_potri_tb _self _upper =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_potri(
    *$(at::Tensor* _self)
  , $(bool _upper)));
  }|]

_th_pstrf_out_tttbs
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> Ptr Scalar
  -> IO (Ptr (Tensor,Tensor))
_th_pstrf_out_tttbs _res1 _res2 _self _upper _tol =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_pstrf_out(
    *$(at::Tensor* _res1)
  , *$(at::Tensor* _res2)
  , *$(at::Tensor* _self)
  , $(bool _upper)
  , *$(at::Scalar* _tol)));
  }|]

_th_pstrf_tbs
  :: Ptr Tensor
  -> CBool
  -> Ptr Scalar
  -> IO (Ptr (Tensor,Tensor))
_th_pstrf_tbs _self _upper _tol =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_pstrf(
    *$(at::Tensor* _self)
  , $(bool _upper)
  , *$(at::Scalar* _tol)));
  }|]

_th_qr_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr (Tensor,Tensor))
_th_qr_out_ttt _res1 _res2 _self =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_qr_out(
    *$(at::Tensor* _res1)
  , *$(at::Tensor* _res2)
  , *$(at::Tensor* _self)));
  }|]

_th_qr_t
  :: Ptr Tensor
  -> IO (Ptr (Tensor,Tensor))
_th_qr_t _self =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_qr(
    *$(at::Tensor* _self)));
  }|]

_th_geqrf_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr (Tensor,Tensor))
_th_geqrf_out_ttt _res1 _res2 _self =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_geqrf_out(
    *$(at::Tensor* _res1)
  , *$(at::Tensor* _res2)
  , *$(at::Tensor* _self)));
  }|]

_th_geqrf_t
  :: Ptr Tensor
  -> IO (Ptr (Tensor,Tensor))
_th_geqrf_t _self =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_geqrf(
    *$(at::Tensor* _self)));
  }|]

_th_orgqr_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_orgqr_out_ttt _result _self _input2 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_orgqr_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _input2)));
  }|]

_th_orgqr_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_orgqr_tt _self _input2 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_orgqr(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _input2)));
  }|]

_th_ormqr_out_ttttbb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> CBool
  -> IO (Ptr Tensor)
_th_ormqr_out_ttttbb _result _self _input2 _input3 _left _transpose =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ormqr_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _input2)
  , *$(at::Tensor* _input3)
  , $(bool _left)
  , $(bool _transpose)));
  }|]

_th_ormqr_tttbb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> CBool
  -> IO (Ptr Tensor)
_th_ormqr_tttbb _self _input2 _input3 _left _transpose =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_ormqr(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _input2)
  , *$(at::Tensor* _input3)
  , $(bool _left)
  , $(bool _transpose)));
  }|]

_th_btrisolve_out_tttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_btrisolve_out_tttt _result _self _LU_data _LU_pivots =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_btrisolve_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _LU_data)
  , *$(at::Tensor* _LU_pivots)));
  }|]

_th_btrisolve_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_btrisolve_ttt _self _LU_data _LU_pivots =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_btrisolve(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _LU_data)
  , *$(at::Tensor* _LU_pivots)));
  }|]

_th_random__tllp
  :: Ptr Tensor
  -> Int64
  -> Int64
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_random__tllp _self _from _to _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_random_(
    *$(at::Tensor* _self)
  , $(int64_t _from)
  , $(int64_t _to)
  , $(at::Generator * _generator)));
  }|]

_th_random__tlp
  :: Ptr Tensor
  -> Int64
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_random__tlp _self _to _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_random_(
    *$(at::Tensor* _self)
  , $(int64_t _to)
  , $(at::Generator * _generator)));
  }|]

_th_random__tp
  :: Ptr Tensor
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_random__tp _self _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_random_(
    *$(at::Tensor* _self)
  , $(at::Generator * _generator)));
  }|]

_th_multinomial_alias_setup_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr (Tensor,Tensor))
_th_multinomial_alias_setup_out_ttt _J _q _probs =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_multinomial_alias_setup_out(
    *$(at::Tensor* _J)
  , *$(at::Tensor* _q)
  , *$(at::Tensor* _probs)));
  }|]

_th_multinomial_alias_setup_t
  :: Ptr Tensor
  -> IO (Ptr (Tensor,Tensor))
_th_multinomial_alias_setup_t _probs =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_th_multinomial_alias_setup(
    *$(at::Tensor* _probs)));
  }|]

_th_multinomial_alias_draw_out_tttlp
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_multinomial_alias_draw_out_tttlp _result _q _J _num_samples _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_multinomial_alias_draw_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _q)
  , *$(at::Tensor* _J)
  , $(int64_t _num_samples)
  , $(at::Generator * _generator)));
  }|]

_th_multinomial_alias_draw_ttlp
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_multinomial_alias_draw_ttlp _q _J _num_samples _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_multinomial_alias_draw(
    *$(at::Tensor* _q)
  , *$(at::Tensor* _J)
  , $(int64_t _num_samples)
  , $(at::Generator * _generator)));
  }|]

_th_multinomial_out_ttlbp
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> CBool
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_multinomial_out_ttlbp _result _self _num_samples _replacement _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_multinomial_out(
    *$(at::Tensor* _result)
  , *$(at::Tensor* _self)
  , $(int64_t _num_samples)
  , $(bool _replacement)
  , $(at::Generator * _generator)));
  }|]

_th_multinomial_tlbp
  :: Ptr Tensor
  -> Int64
  -> CBool
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_multinomial_tlbp _self _num_samples _replacement _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_multinomial(
    *$(at::Tensor* _self)
  , $(int64_t _num_samples)
  , $(bool _replacement)
  , $(at::Generator * _generator)));
  }|]

_th_uniform__tddp
  :: Ptr Tensor
  -> CDouble
  -> CDouble
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_uniform__tddp _self _from _to _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_uniform_(
    *$(at::Tensor* _self)
  , $(double _from)
  , $(double _to)
  , $(at::Generator * _generator)));
  }|]

_th_normal_out_ttdp
  :: Ptr Tensor
  -> Ptr Tensor
  -> CDouble
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_normal_out_ttdp _output _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_normal_out(
    *$(at::Tensor* _output)
  , *$(at::Tensor* _mean)
  , $(double _std)
  , $(at::Generator * _generator)));
  }|]

_th_normal_tdp
  :: Ptr Tensor
  -> CDouble
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_normal_tdp _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_normal(
    *$(at::Tensor* _mean)
  , $(double _std)
  , $(at::Generator * _generator)));
  }|]

_th_normal_out_tdtp
  :: Ptr Tensor
  -> CDouble
  -> Ptr Tensor
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_normal_out_tdtp _output _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_normal_out(
    *$(at::Tensor* _output)
  , $(double _mean)
  , *$(at::Tensor* _std)
  , $(at::Generator * _generator)));
  }|]

_th_normal_dtp
  :: CDouble
  -> Ptr Tensor
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_normal_dtp _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_normal(
    $(double _mean)
  , *$(at::Tensor* _std)
  , $(at::Generator * _generator)));
  }|]

_th_normal_out_tttp
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_normal_out_tttp _output _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_normal_out(
    *$(at::Tensor* _output)
  , *$(at::Tensor* _mean)
  , *$(at::Tensor* _std)
  , $(at::Generator * _generator)));
  }|]

_th_normal_ttp
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_normal_ttp _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_normal(
    *$(at::Tensor* _mean)
  , *$(at::Tensor* _std)
  , $(at::Generator * _generator)));
  }|]

_th_normal__tddp
  :: Ptr Tensor
  -> CDouble
  -> CDouble
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_normal__tddp _self _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_normal_(
    *$(at::Tensor* _self)
  , $(double _mean)
  , $(double _std)
  , $(at::Generator * _generator)));
  }|]

_th_cauchy__tddp
  :: Ptr Tensor
  -> CDouble
  -> CDouble
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_cauchy__tddp _self _median _sigma _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cauchy_(
    *$(at::Tensor* _self)
  , $(double _median)
  , $(double _sigma)
  , $(at::Generator * _generator)));
  }|]

_th_log_normal__tddp
  :: Ptr Tensor
  -> CDouble
  -> CDouble
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_log_normal__tddp _self _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_log_normal_(
    *$(at::Tensor* _self)
  , $(double _mean)
  , $(double _std)
  , $(at::Generator * _generator)));
  }|]

_th_exponential__tdp
  :: Ptr Tensor
  -> CDouble
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_exponential__tdp _self _lambd _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_exponential_(
    *$(at::Tensor* _self)
  , $(double _lambd)
  , $(at::Generator * _generator)));
  }|]

_th_geometric__tdp
  :: Ptr Tensor
  -> CDouble
  -> Ptr Generator
  -> IO (Ptr Tensor)
_th_geometric__tdp _self _p _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_geometric_(
    *$(at::Tensor* _self)
  , $(double _p)
  , $(at::Generator * _generator)));
  }|]

_th_dirichlet_grad_out_tttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_dirichlet_grad_out_tttt _output _x _alpha _total =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_dirichlet_grad_out(
    *$(at::Tensor* _output)
  , *$(at::Tensor* _x)
  , *$(at::Tensor* _alpha)
  , *$(at::Tensor* _total)));
  }|]

_th_dirichlet_grad_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_dirichlet_grad_ttt _x _alpha _total =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_dirichlet_grad(
    *$(at::Tensor* _x)
  , *$(at::Tensor* _alpha)
  , *$(at::Tensor* _total)));
  }|]

_th_alias_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_th_alias_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_alias(
    *$(at::Tensor* _self)));
  }|]

_th_copy_ignoring_overlaps__tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_th_copy_ignoring_overlaps__tt _self _src =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_copy_ignoring_overlaps_(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _src)));
  }|]

_th_cat_out_tll
  :: Ptr Tensor
  -> Ptr TensorList
  -> Int64
  -> IO (Ptr Tensor)
_th_cat_out_tll _self _tensors _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cat_out(
    *$(at::Tensor* _self)
  , *$(std::vector<at::Tensor>* _tensors)
  , $(int64_t _dim)));
  }|]

_th_cat_ll
  :: Ptr TensorList
  -> Int64
  -> IO (Ptr Tensor)
_th_cat_ll _tensors _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_th_cat(
    *$(std::vector<at::Tensor>* _tensors)
  , $(int64_t _dim)));
  }|]

