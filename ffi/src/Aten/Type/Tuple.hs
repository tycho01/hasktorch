
-- generated by using spec/tuples.yaml

{-# LANGUAGE DataKinds #-}
{-# LANGUAGE PolyKinds #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}

module Aten.Type.Tuple where

import qualified Language.C.Inline.Cpp as C
import qualified Language.C.Inline.Cpp.Exceptions as C
import qualified Language.C.Inline.Context as C
import qualified Language.C.Types as C
import qualified Data.Map as Map
import Foreign.C.String
import Foreign.C.Types
import Foreign hiding (newForeignPtr)
import Foreign.Concurrent
import Aten.Type
import Aten.Class

C.context $ C.cppCtx <> mempty { C.ctxTypesTable = typeTable }

C.include "<ATen/ATen.h>"



-----------------(RawTensor,RawTensor)---------------------

instance CppObject (RawTensor,RawTensor) where
  fromPtr ptr = newForeignPtr ptr [C.block| void { delete $(std::tuple<at::Tensor,at::Tensor>* ptr); return; }|]

instance CppTuple2 (Ptr (RawTensor,RawTensor)) where
  type A (Ptr (RawTensor,RawTensor)) = Ptr RawTensor
  type B (Ptr (RawTensor,RawTensor)) = Ptr RawTensor
  get0 v = [C.block| at::Tensor* { return new at::Tensor(std::get<0>(*$(std::tuple<at::Tensor,at::Tensor>* v)));}|]
  get1 v = [C.block| at::Tensor* { return new at::Tensor(std::get<1>(*$(std::tuple<at::Tensor,at::Tensor>* v)));}|]


-----------------(RawTensor,RawTensor,RawTensor)---------------------

instance CppObject (RawTensor,RawTensor,RawTensor) where
  fromPtr ptr = newForeignPtr ptr [C.block| void { delete $(std::tuple<at::Tensor,at::Tensor,at::Tensor>* ptr); return; }|]

instance CppTuple2 (Ptr (RawTensor,RawTensor,RawTensor)) where
  type A (Ptr (RawTensor,RawTensor,RawTensor)) = Ptr RawTensor
  type B (Ptr (RawTensor,RawTensor,RawTensor)) = Ptr RawTensor
  get0 v = [C.block| at::Tensor* { return new at::Tensor(std::get<0>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor>* v)));}|]
  get1 v = [C.block| at::Tensor* { return new at::Tensor(std::get<1>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor>* v)));}|]

instance CppTuple3 (Ptr (RawTensor,RawTensor,RawTensor)) where
  type C (Ptr (RawTensor,RawTensor,RawTensor)) = Ptr RawTensor
  get2 v = [C.block| at::Tensor* { return new at::Tensor(std::get<2>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor>* v)));}|]


-----------------(RawTensor,RawTensor,RawTensor,RawTensor)---------------------

instance CppObject (RawTensor,RawTensor,RawTensor,RawTensor) where
  fromPtr ptr = newForeignPtr ptr [C.block| void { delete $(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor>* ptr); return; }|]

instance CppTuple2 (Ptr (RawTensor,RawTensor,RawTensor,RawTensor)) where
  type A (Ptr (RawTensor,RawTensor,RawTensor,RawTensor)) = Ptr RawTensor
  type B (Ptr (RawTensor,RawTensor,RawTensor,RawTensor)) = Ptr RawTensor
  get0 v = [C.block| at::Tensor* { return new at::Tensor(std::get<0>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor>* v)));}|]
  get1 v = [C.block| at::Tensor* { return new at::Tensor(std::get<1>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor>* v)));}|]

instance CppTuple3 (Ptr (RawTensor,RawTensor,RawTensor,RawTensor)) where
  type C (Ptr (RawTensor,RawTensor,RawTensor,RawTensor)) = Ptr RawTensor
  get2 v = [C.block| at::Tensor* { return new at::Tensor(std::get<2>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor>* v)));}|]

instance CppTuple4 (Ptr (RawTensor,RawTensor,RawTensor,RawTensor)) where
  type D (Ptr (RawTensor,RawTensor,RawTensor,RawTensor)) = Ptr RawTensor
  get3 v = [C.block| at::Tensor* { return new at::Tensor(std::get<3>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor>* v)));}|]


-----------------(RawTensor,RawTensor,RawTensor,RawTensor,RawTensor)---------------------

instance CppObject (RawTensor,RawTensor,RawTensor,RawTensor,RawTensor) where
  fromPtr ptr = newForeignPtr ptr [C.block| void { delete $(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>* ptr); return; }|]

instance CppTuple2 (Ptr (RawTensor,RawTensor,RawTensor,RawTensor,RawTensor)) where
  type A (Ptr (RawTensor,RawTensor,RawTensor,RawTensor,RawTensor)) = Ptr RawTensor
  type B (Ptr (RawTensor,RawTensor,RawTensor,RawTensor,RawTensor)) = Ptr RawTensor
  get0 v = [C.block| at::Tensor* { return new at::Tensor(std::get<0>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>* v)));}|]
  get1 v = [C.block| at::Tensor* { return new at::Tensor(std::get<1>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>* v)));}|]

instance CppTuple3 (Ptr (RawTensor,RawTensor,RawTensor,RawTensor,RawTensor)) where
  type C (Ptr (RawTensor,RawTensor,RawTensor,RawTensor,RawTensor)) = Ptr RawTensor
  get2 v = [C.block| at::Tensor* { return new at::Tensor(std::get<2>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>* v)));}|]

instance CppTuple4 (Ptr (RawTensor,RawTensor,RawTensor,RawTensor,RawTensor)) where
  type D (Ptr (RawTensor,RawTensor,RawTensor,RawTensor,RawTensor)) = Ptr RawTensor
  get3 v = [C.block| at::Tensor* { return new at::Tensor(std::get<3>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>* v)));}|]

instance CppTuple5 (Ptr (RawTensor,RawTensor,RawTensor,RawTensor,RawTensor)) where
  type E (Ptr (RawTensor,RawTensor,RawTensor,RawTensor,RawTensor)) = Ptr RawTensor
  get4 v = [C.block| at::Tensor* { return new at::Tensor(std::get<4>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>* v)));}|]


-----------------(RawTensor,RawTensor,RawTensor,RawTensorList)---------------------

instance CppObject (RawTensor,RawTensor,RawTensor,RawTensorList) where
  fromPtr ptr = newForeignPtr ptr [C.block| void { delete $(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::TensorList>* ptr); return; }|]

instance CppTuple2 (Ptr (RawTensor,RawTensor,RawTensor,RawTensorList)) where
  type A (Ptr (RawTensor,RawTensor,RawTensor,RawTensorList)) = Ptr RawTensor
  type B (Ptr (RawTensor,RawTensor,RawTensor,RawTensorList)) = Ptr RawTensor
  get0 v = [C.block| at::Tensor* { return new at::Tensor(std::get<0>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::TensorList>* v)));}|]
  get1 v = [C.block| at::Tensor* { return new at::Tensor(std::get<1>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::TensorList>* v)));}|]

instance CppTuple3 (Ptr (RawTensor,RawTensor,RawTensor,RawTensorList)) where
  type C (Ptr (RawTensor,RawTensor,RawTensor,RawTensorList)) = Ptr RawTensor
  get2 v = [C.block| at::Tensor* { return new at::Tensor(std::get<2>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::TensorList>* v)));}|]

instance CppTuple4 (Ptr (RawTensor,RawTensor,RawTensor,RawTensorList)) where
  type D (Ptr (RawTensor,RawTensor,RawTensor,RawTensorList)) = Ptr RawTensorList
  get3 v = [C.block| at::TensorList* { return new at::TensorList(std::get<3>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,at::TensorList>* v)));}|]


-----------------(RawTensor,RawTensor,CDouble,Int64)---------------------

instance CppObject (RawTensor,RawTensor,CDouble,Int64) where
  fromPtr ptr = newForeignPtr ptr [C.block| void { delete $(std::tuple<at::Tensor,at::Tensor,double,int64_t>* ptr); return; }|]

instance CppTuple2 (Ptr (RawTensor,RawTensor,CDouble,Int64)) where
  type A (Ptr (RawTensor,RawTensor,CDouble,Int64)) = Ptr RawTensor
  type B (Ptr (RawTensor,RawTensor,CDouble,Int64)) = Ptr RawTensor
  get0 v = [C.block| at::Tensor* { return new at::Tensor(std::get<0>(*$(std::tuple<at::Tensor,at::Tensor,double,int64_t>* v)));}|]
  get1 v = [C.block| at::Tensor* { return new at::Tensor(std::get<1>(*$(std::tuple<at::Tensor,at::Tensor,double,int64_t>* v)));}|]

instance CppTuple3 (Ptr (RawTensor,RawTensor,CDouble,Int64)) where
  type C (Ptr (RawTensor,RawTensor,CDouble,Int64)) = CDouble
  get2 v = [C.block| double { return (std::get<2>(*$(std::tuple<at::Tensor,at::Tensor,double,int64_t>* v)));}|]

instance CppTuple4 (Ptr (RawTensor,RawTensor,CDouble,Int64)) where
  type D (Ptr (RawTensor,RawTensor,CDouble,Int64)) = Int64
  get3 v = [C.block| int64_t { return (std::get<3>(*$(std::tuple<at::Tensor,at::Tensor,double,int64_t>* v)));}|]


-----------------(RawTensor,RawTensor,CFloat,CInt)---------------------

instance CppObject (RawTensor,RawTensor,CFloat,CInt) where
  fromPtr ptr = newForeignPtr ptr [C.block| void { delete $(std::tuple<at::Tensor,at::Tensor,float,int>* ptr); return; }|]

instance CppTuple2 (Ptr (RawTensor,RawTensor,CFloat,CInt)) where
  type A (Ptr (RawTensor,RawTensor,CFloat,CInt)) = Ptr RawTensor
  type B (Ptr (RawTensor,RawTensor,CFloat,CInt)) = Ptr RawTensor
  get0 v = [C.block| at::Tensor* { return new at::Tensor(std::get<0>(*$(std::tuple<at::Tensor,at::Tensor,float,int>* v)));}|]
  get1 v = [C.block| at::Tensor* { return new at::Tensor(std::get<1>(*$(std::tuple<at::Tensor,at::Tensor,float,int>* v)));}|]

instance CppTuple3 (Ptr (RawTensor,RawTensor,CFloat,CInt)) where
  type C (Ptr (RawTensor,RawTensor,CFloat,CInt)) = CFloat
  get2 v = [C.block| float { return (std::get<2>(*$(std::tuple<at::Tensor,at::Tensor,float,int>* v)));}|]

instance CppTuple4 (Ptr (RawTensor,RawTensor,CFloat,CInt)) where
  type D (Ptr (RawTensor,RawTensor,CFloat,CInt)) = CInt
  get3 v = [C.block| int { return (std::get<3>(*$(std::tuple<at::Tensor,at::Tensor,float,int>* v)));}|]


-----------------(RawTensor,RawTensor,RawTensor,Int64)---------------------

instance CppObject (RawTensor,RawTensor,RawTensor,Int64) where
  fromPtr ptr = newForeignPtr ptr [C.block| void { delete $(std::tuple<at::Tensor,at::Tensor,at::Tensor,int64_t>* ptr); return; }|]

instance CppTuple2 (Ptr (RawTensor,RawTensor,RawTensor,Int64)) where
  type A (Ptr (RawTensor,RawTensor,RawTensor,Int64)) = Ptr RawTensor
  type B (Ptr (RawTensor,RawTensor,RawTensor,Int64)) = Ptr RawTensor
  get0 v = [C.block| at::Tensor* { return new at::Tensor(std::get<0>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,int64_t>* v)));}|]
  get1 v = [C.block| at::Tensor* { return new at::Tensor(std::get<1>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,int64_t>* v)));}|]

instance CppTuple3 (Ptr (RawTensor,RawTensor,RawTensor,Int64)) where
  type C (Ptr (RawTensor,RawTensor,RawTensor,Int64)) = Ptr RawTensor
  get2 v = [C.block| at::Tensor* { return new at::Tensor(std::get<2>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,int64_t>* v)));}|]

instance CppTuple4 (Ptr (RawTensor,RawTensor,RawTensor,Int64)) where
  type D (Ptr (RawTensor,RawTensor,RawTensor,Int64)) = Int64
  get3 v = [C.block| int64_t { return (std::get<3>(*$(std::tuple<at::Tensor,at::Tensor,at::Tensor,int64_t>* v)));}|]

