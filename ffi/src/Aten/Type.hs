
-- generated by using spec/Declarations.yaml

{-# LANGUAGE DataKinds #-}
{-# LANGUAGE PolyKinds #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE OverloadedStrings #-}

module Aten.Type
  ( RawIntArrayRef
  , RawScalar
  , ScalarType
  , DeviceType
  , RawSparseTensorRef
  , RawStorage
  , RawTensor
  , RawTensorList
  , RawTensorOptions
  , TensorAVector
  , StdArray
  , StdString
  , Generator
  , Device
  , typeTable
) where

import qualified Language.C.Inline.Cpp as C
import qualified Language.C.Inline.Cpp.Exceptions as C
import qualified Language.C.Inline.Context as C
import qualified Language.C.Types as C
import qualified Data.Map as Map

import Foreign.C.String
import Foreign.C.Types
import Foreign

import Aten.Type.IntArrayRef.RawType (RawIntArrayRef)
import Aten.Type.Scalar.RawType (RawScalar)
import Aten.Type.SparseTensorRef.RawType (RawSparseTensorRef)
import Aten.Type.Storage.RawType (RawStorage)
import Aten.Type.Tensor.RawType (RawTensor)
import Aten.Type.TensorList.RawType (RawTensorList)
import Aten.Type.TensorOptions.RawType (RawTensorOptions)

type ScalarType = CChar
type DeviceType = CShort

data TensorAVector
data StdArray a b
data StdString
data Generator
data Device

typeTable = Map.fromList [
        (C.TypeName "at::Scalar", [t|RawScalar|])
      , (C.TypeName "at::Tensor", [t|RawTensor|])
      , (C.TypeName "at::TensorOptions", [t|RawTensorOptions|])
      , (C.TypeName "at::TensorList", [t|RawTensorList|])
      , (C.TypeName "at::IntArrayRef", [t|RawIntArrayRef|])
      , (C.TypeName "at::ScalarType", [t|ScalarType|])
      , (C.TypeName "at::DeviceType", [t|DeviceType|])
      , (C.TypeName "at::SparseTensorRef", [t|RawSparseTensorRef|])
      , (C.TypeName "at::Storage", [t|RawStorage|])
      , (C.TypeName "at::Device", [t|Device|])
      , (C.TypeName "at::Generator", [t|Generator|])
      , (C.TypeName "std::string", [t|StdString|])
      , (C.TypeName "std::array<bool,2>", [t|StdArray CBool 2|])
      , (C.TypeName "std::array<bool,3>", [t|StdArray CBool 3|])
      , (C.TypeName "std::array<bool,4>", [t|StdArray CBool 4|])
      , (C.TypeName "std::tuple<at::Tensor,at::Tensor>", [t|(RawTensor,RawTensor)|])
      , (C.TypeName "std::tuple<at::Tensor,at::Tensor,at::Tensor>", [t|(RawTensor,RawTensor,RawTensor)|])
      , (C.TypeName "std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor>", [t|(RawTensor,RawTensor,RawTensor,RawTensor)|])
      , (C.TypeName "std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>", [t|(RawTensor,RawTensor,RawTensor,RawTensor,RawTensor)|])
      , (C.TypeName "std::tuple<at::Tensor,at::Tensor,at::Tensor,at::TensorList>", [t|(RawTensor,RawTensor,RawTensor,RawTensorList)|])
      , (C.TypeName "std::tuple<at::Tensor,at::Tensor,double,int64_t>", [t|(RawTensor,RawTensor,CDouble,Int64)|])
      , (C.TypeName "std::tuple<at::Tensor,at::Tensor,float,int>", [t|(RawTensor,RawTensor,CFloat,CInt)|])
      , (C.TypeName "std::tuple<at::Tensor,at::Tensor,at::Tensor,int64_t>", [t|(RawTensor,RawTensor,RawTensor,Int64)|])
      , (C.TypeName "std::vector<at::Tensor>", [t|TensorAVector|])
    ]
