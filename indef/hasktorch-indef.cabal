cabal-version: 2.2
-- * * * * * * * * * * * * WARNING * * * * * * * * * * * *
-- This file has been AUTO-GENERATED by dhall-to-cabal.
--
-- Do not edit it by hand, because your changes will be over-written!
--
-- Instead, edit the source Dhall file, namely
-- 'indef/hasktorch-indef.dhall', and re-generate this file by running
-- 'dhall-to-cabal -- indef/hasktorch-indef.dhall > hasktorch-indef.cabal'.
-- * * * * * * * * * * * * WARNING * * * * * * * * * * * *
name: hasktorch-indef
version: 0.0.1.0
license: BSD-3-Clause
author: Hasktorch dev team (Sam Stites, Austin Huang)
homepage: https://github.com/hasktorch/hasktorch#readme
bug-reports: https://github.com/hasktorch/hasktorch/issues
synopsis: Torch for tensors and neural networks in Haskell
description:
    Core tensor abstractions wrapping raw TH bindings
category: Tensors, Machine Learning
build-type: Simple

source-repository head
    type: git
    location: https://github.com/hasktorch/hasktorch

flag cuda
    description:
        build with THC support
    default: False

library
    exposed-modules:
        Torch.Indef.Storage
        Torch.Indef.Storage.Copy
        Torch.Indef.Types
    signatures: Torch.Sig.Index.Tensor
                Torch.Sig.Index.TensorFree
                Torch.Sig.Mask.Tensor
                Torch.Sig.Mask.TensorFree
                Torch.Sig.Mask.MathReduce
    cpp-options: -DCUDA -DHASKTORCH_INTERNAL_CUDA
    hs-source-dirs: src
    other-modules:
        Torch.Indef.Internal
    default-language: Haskell2010
    default-extensions: LambdaCase DataKinds TypeFamilies
                        TypeSynonymInstances ScopedTypeVariables FlexibleContexts
    build-depends:
        base (==4.7 || >4.7) && <5,
        backprop ==0.2.5 || >0.2.5,
        containers -any,
        deepseq ==1.3.0.0 || >1.3.0.0,
        dimensions ==1.0 || >1.0,
        hasktorch-signatures -any,
        hasktorch-types-th -any,
        hasktorch-raw-th -any,
        managed (==1.0.0 || >1.0.0) && <1.1,
        mtl -any,
        safe-exceptions ==0.1.0.0 || >0.1.0.0,
        singletons ==2.2 || >2.2,
        ghc-typelits-natnormalise -any,
        transformers -any,
        text ==1.2.2.2 || >1.2.2.2
    
    if flag(cuda)
    else
        build-depends:
            hasktorch-types-thc -any,
            cuda -any

test-suite spec-double-th
    type: exitcode-stdio-1.0
    main-is: Spec.hs
    hs-source-dirs: tests
    other-modules:
        Torch.Indef.StorageSpec
    default-language: Haskell2010
    default-extensions: LambdaCase DataKinds TypeFamilies
                        TypeSynonymInstances ScopedTypeVariables FlexibleContexts
    build-depends:
        QuickCheck -any,
        base (==4.7 || >4.7) && <5,
        dimensions ==1.0 || >1.0,
        hasktorch-indef -any,
        hspec ==2.4.4 || >2.4.4,
        singletons ==2.2 || >2.2,
        text ==1.2.2.2 || >1.2.2.2
    mixins: hasktorch-indef requires (Torch.Sig.State as Torch.Types.TH, Torch.Sig.Types.Global as Torch.Types.TH, Torch.Sig.Types as Torch.Types.TH.Double, Torch.Sig.Storage as Torch.FFI.TH.Double.Storage, Torch.Sig.Storage.Copy as Torch.FFI.TH.Double.StorageCopy, Torch.Sig.Storage.Memory as Torch.FFI.TH.Double.FreeStorage, Torch.Sig.Tensor as Torch.FFI.TH.Double.Tensor, Torch.Sig.Tensor.Copy as Torch.FFI.TH.Double.TensorCopy, Torch.Sig.Tensor.Memory as Torch.FFI.TH.Double.FreeTensor, Torch.Sig.Tensor.Index as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Masked as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math.Compare as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math.CompareT as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math.Pairwise as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math.Pointwise as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math.Reduce as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math.Scan as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Mode as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.ScatterGather as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Sort as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.TopK as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math.Pointwise.Signed as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math.Pointwise.Floating as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math.Reduce.Floating as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math.Floating as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math.Blas as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Math.Lapack as Torch.FFI.TH.Double.TensorLapack, Torch.Sig.NN as Torch.FFI.TH.NN.Double, Torch.Sig.Types.NN as Torch.Types.TH, Torch.Sig.Tensor.Math.Random.TH as Torch.FFI.TH.Double.TensorMath, Torch.Sig.Tensor.Random.TH as Torch.FFI.TH.Double.TensorRandom, Torch.Sig.Tensor.Random.THC as Torch.Undefined.Double.Tensor.Random.THC, Torch.Sig.Index.Tensor as Torch.FFI.TH.Long.Tensor, Torch.Sig.Index.TensorFree as Torch.FFI.TH.Long.FreeTensor, Torch.Sig.Mask.Tensor as Torch.FFI.TH.Byte.Tensor, Torch.Sig.Mask.TensorFree as Torch.FFI.TH.Byte.FreeTensor, Torch.Sig.Mask.MathReduce as Torch.FFI.TH.Byte.TensorMath)

