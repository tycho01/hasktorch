defaults: &default
  environment:
    PATH: ~/cmake-3.10.0-Linux-x86_64/bin/:~/.local/bin/:~/.cabal/bin/:/usr/local/bin:$PATH
    LD_LIBRARY_PATH: /home/ubuntu/hasktorch/vendor/build/:/usr/local/lib/:/usr/lib/x86_64-linux-gnu/
    C_INCLUDE_PATH: /usr/local/include
    LLVM_CONFIG: /usr/lib/llvm-3.8/bin/llvm-config
version: 2
jobs:
  build_cmake:
    # <<: *defaults
    machine: true
    steps:
      - restore_cache:
         keys:
           - cmake-3.10.0-cachekey # {{ checksum "pom.xml" }}
           - cmake- # used if checksum fails
      - run:
          name: get llvm and cmake
          command: |
            wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo apt-add-repository "deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-4.0 main"
            sudo apt-get update --fix-missing
            sudo apt-get install clang-4.0 lldb-4.0 --fix-missing
            if [ ! -d ~/cmake-3.10.0-Linux-x86_64 ]; then
              echo "No cache - building CMake"
              cd ~ && wget --no-check-certificate --quiet https://cmake.org/files/v3.10/cmake-3.10.0-Linux-x86_64.tar.gz && tar -xvf cmake-3.10.0-Linux-x86_64.tar.gz
            else
              echo "Cached CMake found"
            fi
            which cmake
            cmake --version
      - save_cache:
         key: cmake-3.10.0-cachekey
         paths:
           - ~/cmake-3.10.0-Linux-x86_64
           - /usr/lib/llvm-4.0

  build_cabal_2_3:
    # <<: *defaults
    machine: true
    steps:
      - restore_cache:
         keys:
           - cabal-2.3-cachekey # {{ checksum "pom.xml" }}
           - cabal- # used if checksum fails
      - run:
          name: Install GHC-8.4 on this build of Ubuntu (12.04)
          command: |
            if [ ! -d ~/ghc-8.4.2 ]; then
              echo "No cache - building GHC-8.4.2" ;
              cd ~ && wget --no-check-certificate --quiet https://downloads.haskell.org/~ghc/8.4.2/ghc-8.4.2-x86_64-deb8-linux.tar.xz && tar xf ghc-8.4.2-x86_64-deb8-linux.tar.xz ;
              cd ghc-8.4.2 ;
              ./configure ;
              sudo make install ;
              # could `sudo update-alternatives` instead
              sudo ln -fs /usr/local/bin/ghc-8.4.2         /usr/local/bin/ghc ;
              sudo ln -fs /usr/local/bin/ghci-8.4.2        /usr/local/bin/ghci ;
              sudo ln -fs /usr/local/bin/ghc-pkg-8.4.2     /usr/local/bin/ghc-pkg ;
              sudo ln -fs /usr/local/bin/haddock-ghc-8.4.2 /usr/local/bin/haddock-ghc ;
              sudo ln -fs /usr/local/bin/runghc-8.4.2      /usr/local/bin/runghc ;
            else
              echo "Cached ~/ghc-8.4.2 directory found" ;
            fi
            which ghc
            ghc --version
      - run:
          name: Get cabal-install head (this will one-day break. We really just want cabal-install-2.3)
          command: |
            mkdir -p ~/.cabal/bin
            if [ ! -d ~/cabal ]; then
              echo "No cache - building cabal-install from git" ;
              sudo apt-get install cabal-install -y ;
              cabal update ;
              git clone git@github.com:haskell/cabal.git ~/cabal --recursive ;
              (cd ~/cabal && git checkout d6b829ddc77859e6b2b5d49bb249e9859b81248b) ;
              (cd ~/cabal/Cabal;         cabal install) ;
              (cd ~/cabal/cabal-install; cabal install) ;
            else
              echo "Cached ~/cabal found"
            fi
            which cabal
            cabal --version
            cabal new-update
      - run:
          name: Get haskell binary dependencies with cabal-install-2.3
          command: cabal install hspec-discover
      - save_cache:
         key: cabal-2.3-cachekey
         paths:
           - /home/ubuntu/.cabal
           - /home/ubuntu/cabal
           - /home/ubuntu/ghc-8.4.2
           - /usr/local/bin
  build_aten:
    # <<: *defaults
    machine: true
    steps:
      - restore_cache:
         keys:
           - aten-cachekey # {{ checksum "pom.xml" }}
           - aten- # used if checksum fails
      - run:
          name: Build ATen dependency
          command: |
            if [ ! -f ${PWD}/vendor/build/libATen.so ]; then
              echo "No cached libATen.so - building" ;
              sudo pip install pyyaml typing ;
              pip install pyyaml typing ;
              cd ./vendor ;
              ./build-aten.sh ;
              sudo rm /usr/local/lib/libATen.so ;
              sudo cp /usr/local/lib/libATen.so{.1,} ;
              sed -i -e 's/\S*-- \(extra-lib-dirs:\)/\1 \/usr\/local\/lib/'         ~/.cabal/config
              sed -i -e 's/\S*-- \(extra-include-dirs:\)/\1 \/usr\/local\/include/' ~/.cabal/config
              ls ${PWD}/vendor/build/
              ls /usr/local/lib/
            else
              echo "Cached ${PWD}/vendor/build/libATen.so found"
            fi
      - save_cache:
         key: aten-cachekey
         paths:
           - /home/ubuntu/hasktorch/vendor/build/
           - /usr/local/lib/
  build_hasktorch:
    # <<: *defaults
    machine: true
    steps:
      - restore_cache:
         keys:
           - hasktorch-cachekey # {{ checksum "pom.xml" }}
           - hasktorch- # used if checksum fails
      - run:
          name: Update git submodules
          command: git submodule update --init --recursive
      - run:
          name: Ensure we are using the right cabal across circle builds
          command: cabal --version
      - run:
          name: Use cabal.project.local-example for CI settings
          command: ln -s ~/hasktorch/cabal.project.local{-example,}
      - run: cabal new-build all

      - save_cache:
         key: hasktorch-cachekey
         paths:
           - /home/ubuntu/hasktorch/dist-newstyle
  test:
    machine: true
    steps:
      - run: cabal new-test hasktorch-raw-th
      - run: cabal new-test hasktorch-core
      - run: cabal new-test hasktorch-codegen
  run_codegen_executable:
    # <<: *defaults
    machine: true
    steps:
      - run:
          name: Hasktorch codegen binary can run on all libraries
          command: |
            for l in TH THNN THC THCUNN; do
              for t in generic concrete; do
                cabal new-run hasktorch-codegen:ht-codegen -- --type ${t} --lib ${l} --verbose;
              done;
            done
  run_simple_examples:
    # <<: *defaults
    machine: true
    steps:
      - run: cabal new-run hasktorch-examples:download-mnist
      - run: cabal new-run hasktorch-examples:ff-typed
      - run: cabal new-run hasktorch-examples:ff-untyped
      - run: cabal new-run hasktorch-examples:static-tensor-usage
  run_examples:
    # <<: *defaults
    machine: true
    steps:
      - run: cabal new-run hasktorch-examples:ad
      - run: cabal new-run hasktorch-examples:bayesian-regression
      - run: cabal new-run hasktorch-examples:gradient-descent
      - run: cabal new-run hasktorch-examples:multivariate-normal

workflows:
  version: 2
  build:
    jobs:
      - build_cabal_2_3
      - build_cmake
      - build_aten:
          requires:
            - build_cmake
      - build_hasktorch:
          requires:
            - build_aten
            - build_cabal_2_3
      - test:
          requires:
            - build_hasktorch
      - run_codegen_executable:
          requires:
            - build_hasktorch
      - run_simple_examples:
          requires:
            - build_hasktorch
      - run_examples:
          requires:
            - build_hasktorch
# THIS IS FROM CIRCLE V1.0
# cache_directories:
#   - "/home/ubuntu/hasktorch/.stack-work"
#   - "/home/ubuntu/.stack"
# # Install stack
# # =============
# - mkdir -p ~/.local/bin
# # full path to curl circumvents errors with /usr/local/bin/curl incompatabilities with libcurl
# - /usr/bin/curl -L --retry 3 https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
# - stack upgrade
# - stack update

