generatedTypes:
  '0':
  - Bool
  - Int
  - Char
  '1':
  - '[]'
  - Maybe
  '2':
  - (,)
  - Either
  - HashMap
longestExprString: 6596
restInstantiationInputs:
- - type: '[((,) Int Int, [] Bool)]'
  - - expr: '[(((-2), (-2)), [True, False]), (((-4), (-4)), [True])]'
    - expr: '[(((-2), (-2)), [True, False])]'
- - type: '[([] Char, Int)]'
  - - expr: |-
        [(['3', '5', '7', '0'], (-2)), (['3', '5', '7'], (-4)),
         (['3'], (15)), (['3', '5'], (-20))]
    - expr: |-
        [(['3', '5', '7', '0'], (-2)), (['3', '5', '7'], (-4)),
         (['3'], (15))]
    - expr: '[([''3'', ''5'', ''7'', ''0''], (-2))]'
    - expr: '[([''3'', ''5'', ''7'', ''0''], (-2)), ([''3'', ''5'', ''7''], (-4))]'
- - type: '[(Int, Int)]'
  - - expr: |-
        [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
         ((-9), (-9))]
    - expr: '[((-2), (-2)), ((-4), (-4)), ((15), (15))]'
    - expr: '[((-2), (-2))]'
    - expr: '[((-2), (-2)), ((-4), (-4))]'
    - expr: '[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))]'
- - type: Maybe ([] Char)
  - - expr: Just ['3', '5', '7', '0']
    - expr: Just ['3', '5', '7']
    - expr: Just ['3']
    - expr: Nothing
- - type: '[((,) Int Int, (,) Int Int)]'
  - - expr: |-
        [(((-2), (-2)), ((-2), (-2))), (((-4), (-4)), ((-4), (-4))),
         (((15), (15)), ((15), (15))), (((-20), (-20)), ((-20), (-20))),
         (((-9), (-9)), ((-9), (-9)))]
    - expr: |-
        [(((-2), (-2)), ((-2), (-2))), (((-4), (-4)), ((-4), (-4))),
         (((15), (15)), ((15), (15)))]
    - expr: '[(((-2), (-2)), ((-2), (-2)))]'
    - expr: '[(((-2), (-2)), ((-2), (-2))), (((-4), (-4)), ((-4), (-4)))]'
    - expr: |-
        [(((-2), (-2)), ((-2), (-2))), (((-4), (-4)), ((-4), (-4))),
         (((15), (15)), ((15), (15))), (((-20), (-20)), ((-20), (-20)))]
- - type: '[] ([] Char)'
  - - expr: '[[''3'', ''5'', ''7'', ''0''], [''3'', ''5'', ''7''], [''3''], [''3'',
        ''5'']]'
    - expr: '[[''3'', ''5'', ''7'', ''0''], [''3'', ''5'', ''7''], [''3'']]'
    - expr: '[[''3'', ''5'', ''7'', ''0'']]'
    - expr: '[[''3'', ''5'', ''7'', ''0''], [''3'', ''5'', ''7'']]'
- - type: '[([] Char, HashMap Char Bool)]'
  - - expr: |-
        [(['3', '5', '7', '0'],
          HashMap.fromList [('3', True), ('5', False)]),
         (['3', '5', '7'], HashMap.fromList [('3', True)])]
    - expr: |-
        [(['3', '5', '7', '0'],
          HashMap.fromList [('3', True), ('5', False)])]
- - type: Maybe ((,) Int Int)
  - - expr: Just ((-2), (-2))
    - expr: Just ((-4), (-4))
    - expr: Just ((15), (15))
    - expr: Nothing
    - expr: Just ((11), (11))
- - type: '[] ((,) Int Int)'
  - - expr: |-
        [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
         ((-9), (-9))]
    - expr: '[((-2), (-2)), ((-4), (-4)), ((15), (15))]'
    - expr: '[((-2), (-2))]'
    - expr: '[((-2), (-2)), ((-4), (-4))]'
    - expr: '[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))]'
- - type: '[(Int, [] Char)]'
  - - expr: |-
        [((-2), ['3', '5', '7', '0']), ((-4), ['3', '5', '7']),
         ((15), ['3']), ((-20), ['3', '5'])]
    - expr: |-
        [((-2), ['3', '5', '7', '0']), ((-4), ['3', '5', '7']),
         ((15), ['3'])]
    - expr: '[((-2), [''3'', ''5'', ''7'', ''0''])]'
    - expr: '[((-2), [''3'', ''5'', ''7'', ''0'']), ((-4), [''3'', ''5'', ''7''])]'
- - type: '[([] Char, (,) Int Int)]'
  - - expr: |-
        [(['3', '5', '7', '0'], ((-2), (-2))),
         (['3', '5', '7'], ((-4), (-4))), (['3'], ((15), (15))),
         (['3', '5'], ((-20), (-20)))]
    - expr: |-
        [(['3', '5', '7', '0'], ((-2), (-2))),
         (['3', '5', '7'], ((-4), (-4))), (['3'], ((15), (15)))]
    - expr: '[([''3'', ''5'', ''7'', ''0''], ((-2), (-2)))]'
    - expr: |-
        [(['3', '5', '7', '0'], ((-2), (-2))),
         (['3', '5', '7'], ((-4), (-4)))]
- - type: '[] Int'
  - - expr: '[(-2), (-4), (15), (-20), (-9)]'
    - expr: '[(-2), (-4), (15)]'
    - expr: '[(-2)]'
    - expr: '[(-2), (-4)]'
    - expr: '[(-2), (-4), (15), (-20)]'
- - type: Maybe ([] ((,) Int Int))
  - - expr: |-
        Just
          [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
           ((-9), (-9))]
    - expr: Just [((-2), (-2)), ((-4), (-4)), ((15), (15))]
    - expr: Just [((-2), (-2))]
    - expr: Nothing
- - type: '[Int]'
  - - expr: '[(-2), (-4), (15), (-20), (-9)]'
    - expr: '[(-2), (-4), (15)]'
    - expr: '[(-2)]'
    - expr: '[(-2), (-4)]'
    - expr: '[(-2), (-4), (15), (-20)]'
- - type: '[(HashMap Char Bool, HashMap Char Bool)]'
  - - expr: |-
        [(HashMap.fromList [('3', True), ('5', False)],
          HashMap.fromList [('3', True), ('5', False)]),
         (HashMap.fromList [('3', True)], HashMap.fromList [('3', True)])]
    - expr: |-
        [(HashMap.fromList [('3', True), ('5', False)],
          HashMap.fromList [('3', True), ('5', False)])]
- - type: Maybe (Maybe ((,) Int Int))
  - - expr: Just (Just ((-2), (-2)))
    - expr: Just (Just ((-4), (-4)))
    - expr: Just (Just ((15), (15)))
    - expr: Nothing
- - type: '[([] Char, [] Bool)]'
  - - expr: '[([''3'', ''5'', ''7'', ''0''], [True, False]), ([''3'', ''5'', ''7''],
        [True])]'
    - expr: '[([''3'', ''5'', ''7'', ''0''], [True, False])]'
- - type: Maybe Int
  - - expr: Just (-2)
    - expr: Just (-4)
    - expr: Just (15)
    - expr: Nothing
    - expr: Just (11)
- - type: '[] ([] ((,) Int Int))'
  - - expr: |-
        [[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
          ((-9), (-9))],
         [((-2), (-2)), ((-4), (-4)), ((15), (15))], [((-2), (-2))],
         [((-2), (-2)), ((-4), (-4))],
         [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))]]
    - expr: |-
        [[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
          ((-9), (-9))],
         [((-2), (-2)), ((-4), (-4)), ((15), (15))], [((-2), (-2))]]
    - expr: |-
        [[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
          ((-9), (-9))]]
    - expr: |-
        [[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
          ((-9), (-9))],
         [((-2), (-2)), ((-4), (-4)), ((15), (15))]]
    - expr: |-
        [[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
          ((-9), (-9))],
         [((-2), (-2)), ((-4), (-4)), ((15), (15))], [((-2), (-2))],
         [((-2), (-2)), ((-4), (-4))]]
- - type: '[] (Maybe ((,) Int Int))'
  - - expr: '[Just ((-2), (-2)), Just ((-4), (-4)), Just ((15), (15)), Nothing]'
    - expr: '[Just ((-2), (-2)), Just ((-4), (-4)), Just ((15), (15))]'
    - expr: '[Just ((-2), (-2))]'
    - expr: '[Just ((-2), (-2)), Just ((-4), (-4))]'
- - type: '[(HashMap Char Bool, (,) Int Int)]'
  - - expr: |-
        [(HashMap.fromList [('3', True), ('5', False)], ((-2), (-2))),
         (HashMap.fromList [('3', True)], ((-4), (-4)))]
    - expr: '[(HashMap.fromList [(''3'', True), (''5'', False)], ((-2), (-2)))]'
- - type: '[(Int, HashMap Char Bool)]'
  - - expr: |-
        [((-2), HashMap.fromList [('3', True), ('5', False)]),
         ((-4), HashMap.fromList [('3', True)])]
    - expr: '[((-2), HashMap.fromList [(''3'', True), (''5'', False)])]'
- - type: '[(HashMap Char Bool, [] Bool)]'
  - - expr: |-
        [(HashMap.fromList [('3', True), ('5', False)], [True, False]),
         (HashMap.fromList [('3', True)], [True])]
    - expr: '[(HashMap.fromList [(''3'', True), (''5'', False)], [True, False])]'
- - type: '[(Int, [] Bool)]'
  - - expr: '[((-2), [True, False]), ((-4), [True])]'
    - expr: '[((-2), [True, False])]'
- - type: HashMap Char Bool
  - - expr: HashMap.fromList [('3', True), ('5', False)]
    - expr: HashMap.fromList [('3', True)]
- - type: '[[] Bool]'
  - - expr: '[[True, False], [True]]'
    - expr: '[[True, False]]'
- - type: Maybe (HashMap Char Bool)
  - - expr: Just (HashMap.fromList [('3', True), ('5', False)])
    - expr: Just (HashMap.fromList [('3', True)])
- - type: Int
  - - expr: (-2)
    - expr: (-4)
    - expr: (15)
    - expr: (-20)
    - expr: (-9)
    - expr: (-5)
    - expr: (-11)
    - expr: (11)
    - expr: (-7)
- - type: '[] (HashMap Char Bool)'
  - - expr: |-
        [HashMap.fromList [('3', True), ('5', False)],
         HashMap.fromList [('3', True)]]
    - expr: '[HashMap.fromList [(''3'', True), (''5'', False)]]'
- - type: '[((,) Int Int, Int)]'
  - - expr: |-
        [(((-2), (-2)), (-2)), (((-4), (-4)), (-4)), (((15), (15)), (15)),
         (((-20), (-20)), (-20)), (((-9), (-9)), (-9))]
    - expr: '[(((-2), (-2)), (-2)), (((-4), (-4)), (-4)), (((15), (15)), (15))]'
    - expr: '[(((-2), (-2)), (-2))]'
    - expr: '[(((-2), (-2)), (-2)), (((-4), (-4)), (-4))]'
    - expr: |-
        [(((-2), (-2)), (-2)), (((-4), (-4)), (-4)), (((15), (15)), (15)),
         (((-20), (-20)), (-20))]
- - type: '[([] Bool, [] Char)]'
  - - expr: '[([True, False], [''3'', ''5'', ''7'', ''0'']), ([True], [''3'', ''5'',
        ''7''])]'
    - expr: '[([True, False], [''3'', ''5'', ''7'', ''0''])]'
- - type: '[] ([] (HashMap Char Bool))'
  - - expr: |-
        [[HashMap.fromList [('3', True), ('5', False)],
          HashMap.fromList [('3', True)]],
         [HashMap.fromList [('3', True), ('5', False)]]]
    - expr: |-
        [[HashMap.fromList [('3', True), ('5', False)],
          HashMap.fromList [('3', True)]]]
- - type: '[((,) Int Int, [] Char)]'
  - - expr: |-
        [(((-2), (-2)), ['3', '5', '7', '0']),
         (((-4), (-4)), ['3', '5', '7']), (((15), (15)), ['3']),
         (((-20), (-20)), ['3', '5'])]
    - expr: |-
        [(((-2), (-2)), ['3', '5', '7', '0']),
         (((-4), (-4)), ['3', '5', '7']), (((15), (15)), ['3'])]
    - expr: '[(((-2), (-2)), [''3'', ''5'', ''7'', ''0''])]'
    - expr: |-
        [(((-2), (-2)), ['3', '5', '7', '0']),
         (((-4), (-4)), ['3', '5', '7'])]
- - type: '[] (Maybe (HashMap Char Bool))'
  - - expr: |-
        [Just (HashMap.fromList [('3', True), ('5', False)]),
         Just (HashMap.fromList [('3', True)])]
    - expr: '[Just (HashMap.fromList [(''3'', True), (''5'', False)])]'
- - type: '[([] Bool, Int)]'
  - - expr: '[([True, False], (-2)), ([True], (-4))]'
    - expr: '[([True, False], (-2))]'
- - type: Maybe (Maybe (HashMap Char Bool))
  - - expr: Just (Just (HashMap.fromList [('3', True), ('5', False)]))
    - expr: Just (Just (HashMap.fromList [('3', True)]))
- - type: '[HashMap Char Bool]'
  - - expr: |-
        [HashMap.fromList [('3', True), ('5', False)],
         HashMap.fromList [('3', True)]]
    - expr: '[HashMap.fromList [(''3'', True), (''5'', False)]]'
- - type: '[] Bool'
  - - expr: '[True, False]'
    - expr: '[True]'
- - type: Maybe ([] (HashMap Char Bool))
  - - expr: |-
        Just
          [HashMap.fromList [('3', True), ('5', False)],
           HashMap.fromList [('3', True)]]
    - expr: Just [HashMap.fromList [('3', True), ('5', False)]]
- - type: '[(,) Int Int]'
  - - expr: |-
        [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
         ((-9), (-9))]
    - expr: '[((-2), (-2)), ((-4), (-4)), ((15), (15))]'
    - expr: '[((-2), (-2))]'
    - expr: '[((-2), (-2)), ((-4), (-4))]'
    - expr: '[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))]'
- - type: '[([] Bool, HashMap Char Bool)]'
  - - expr: |-
        [([True, False], HashMap.fromList [('3', True), ('5', False)]),
         ([True], HashMap.fromList [('3', True)])]
    - expr: '[([True, False], HashMap.fromList [(''3'', True), (''5'', False)])]'
- - type: '[[] Char]'
  - - expr: '[[''3'', ''5'', ''7'', ''0''], [''3'', ''5'', ''7''], [''3''], [''3'',
        ''5'']]'
    - expr: '[[''3'', ''5'', ''7'', ''0''], [''3'', ''5'', ''7''], [''3'']]'
    - expr: '[[''3'', ''5'', ''7'', ''0'']]'
    - expr: '[[''3'', ''5'', ''7'', ''0''], [''3'', ''5'', ''7'']]'
- - type: Maybe (Maybe ([] Bool))
  - - expr: Just (Just [True, False])
    - expr: Just (Just [True])
- - type: '[] (Maybe ([] Bool))'
  - - expr: '[Just [True, False], Just [True]]'
    - expr: '[Just [True, False]]'
- - type: '[] ([] ([] Bool))'
  - - expr: '[[[True, False], [True]], [[True, False]]]'
    - expr: '[[[True, False], [True]]]'
- - type: '[([] Bool, (,) Int Int)]'
  - - expr: '[([True, False], ((-2), (-2))), ([True], ((-4), (-4)))]'
    - expr: '[([True, False], ((-2), (-2)))]'
- - type: Maybe ([] ([] Bool))
  - - expr: Just [[True, False], [True]]
    - expr: Just [[True, False]]
- - type: '[([] Bool, [] Bool)]'
  - - expr: '[([True, False], [True, False]), ([True], [True])]'
    - expr: '[([True, False], [True, False])]'
- - type: '[] ([] Int)'
  - - expr: |-
        [[(-2), (-4), (15), (-20), (-9)], [(-2), (-4), (15)], [(-2)],
         [(-2), (-4)], [(-2), (-4), (15), (-20)]]
    - expr: '[[(-2), (-4), (15), (-20), (-9)], [(-2), (-4), (15)], [(-2)]]'
    - expr: '[[(-2), (-4), (15), (-20), (-9)]]'
    - expr: '[[(-2), (-4), (15), (-20), (-9)], [(-2), (-4), (15)]]'
    - expr: |-
        [[(-2), (-4), (15), (-20), (-9)], [(-2), (-4), (15)], [(-2)],
         [(-2), (-4)]]
- - type: Maybe ([] Int)
  - - expr: Just [(-2), (-4), (15), (-20), (-9)]
    - expr: Just [(-2), (-4), (15)]
    - expr: Just [(-2)]
    - expr: Nothing
- - type: Maybe (Maybe Int)
  - - expr: Just (Just (-2))
    - expr: Just (Just (-4))
    - expr: Just (Just (15))
    - expr: Nothing
- - type: '[] Char'
  - - expr: '[''3'', ''5'', ''7'', ''0'']'
    - expr: '[''3'', ''5'', ''7'']'
    - expr: '[''3'']'
    - expr: '[''3'', ''5'']'
- - type: '[] (Maybe Int)'
  - - expr: '[Just (-2), Just (-4), Just (15), Nothing]'
    - expr: '[Just (-2), Just (-4), Just (15)]'
    - expr: '[Just (-2)]'
    - expr: '[Just (-2), Just (-4)]'
- - type: '[] ([] Bool)'
  - - expr: '[[True, False], [True]]'
    - expr: '[[True, False]]'
- - type: Maybe ([] Bool)
  - - expr: Just [True, False]
    - expr: Just [True]
- - type: (,) Int Int
  - - expr: ((-2), (-2))
    - expr: ((-4), (-4))
    - expr: ((15), (15))
    - expr: ((-20), (-20))
    - expr: ((-9), (-9))
    - expr: ((-5), (-5))
    - expr: ((-11), (-11))
    - expr: ((11), (11))
    - expr: ((-7), (-7))
- - type: '[(HashMap Char Bool, [] Char)]'
  - - expr: |-
        [(HashMap.fromList [('3', True), ('5', False)],
          ['3', '5', '7', '0']),
         (HashMap.fromList [('3', True)], ['3', '5', '7'])]
    - expr: |-
        [(HashMap.fromList [('3', True), ('5', False)],
          ['3', '5', '7', '0'])]
- - type: Maybe (Maybe ([] Char))
  - - expr: Just (Just ['3', '5', '7', '0'])
    - expr: Just (Just ['3', '5', '7'])
    - expr: Just (Just ['3'])
    - expr: Nothing
- - type: '[] ([] ([] Char))'
  - - expr: |-
        [[['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
         [['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
         [['3', '5', '7', '0']], [['3', '5', '7', '0'], ['3', '5', '7']]]
    - expr: |-
        [[['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
         [['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
         [['3', '5', '7', '0']]]
    - expr: '[[[''3'', ''5'', ''7'', ''0''], [''3'', ''5'', ''7''], [''3''], [''3'',
        ''5'']]]'
    - expr: |-
        [[['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
         [['3', '5', '7', '0'], ['3', '5', '7'], ['3']]]
- - type: '[(HashMap Char Bool, Int)]'
  - - expr: |-
        [(HashMap.fromList [('3', True), ('5', False)], (-2)),
         (HashMap.fromList [('3', True)], (-4))]
    - expr: '[(HashMap.fromList [(''3'', True), (''5'', False)], (-2))]'
- - type: '[] (Maybe ([] Char))'
  - - expr: |-
        [Just ['3', '5', '7', '0'], Just ['3', '5', '7'], Just ['3'],
         Nothing]
    - expr: '[Just [''3'', ''5'', ''7'', ''0''], Just [''3'', ''5'', ''7''], Just
        [''3'']]'
    - expr: '[Just [''3'', ''5'', ''7'', ''0'']]'
    - expr: '[Just [''3'', ''5'', ''7'', ''0''], Just [''3'', ''5'', ''7'']]'
- - type: '[((,) Int Int, HashMap Char Bool)]'
  - - expr: |-
        [(((-2), (-2)), HashMap.fromList [('3', True), ('5', False)]),
         (((-4), (-4)), HashMap.fromList [('3', True)])]
    - expr: '[(((-2), (-2)), HashMap.fromList [(''3'', True), (''5'', False)])]'
- - type: Maybe ([] ([] Char))
  - - expr: Just [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']]
    - expr: Just [['3', '5', '7', '0'], ['3', '5', '7'], ['3']]
    - expr: Just [['3', '5', '7', '0']]
    - expr: Nothing
- - type: '[(Int, (,) Int Int)]'
  - - expr: |-
        [((-2), ((-2), (-2))), ((-4), ((-4), (-4))), ((15), ((15), (15))),
         ((-20), ((-20), (-20))), ((-9), ((-9), (-9)))]
    - expr: '[((-2), ((-2), (-2))), ((-4), ((-4), (-4))), ((15), ((15), (15)))]'
    - expr: '[((-2), ((-2), (-2)))]'
    - expr: '[((-2), ((-2), (-2))), ((-4), ((-4), (-4)))]'
    - expr: |-
        [((-2), ((-2), (-2))), ((-4), ((-4), (-4))), ((15), ((15), (15))),
         ((-20), ((-20), (-20)))]
- - type: '[([] Char, [] Char)]'
  - - expr: |-
        [(['3', '5', '7', '0'], ['3', '5', '7', '0']),
         (['3', '5', '7'], ['3', '5', '7']), (['3'], ['3']),
         (['3', '5'], ['3', '5'])]
    - expr: |-
        [(['3', '5', '7', '0'], ['3', '5', '7', '0']),
         (['3', '5', '7'], ['3', '5', '7']), (['3'], ['3'])]
    - expr: '[([''3'', ''5'', ''7'', ''0''], [''3'', ''5'', ''7'', ''0''])]'
    - expr: |-
        [(['3', '5', '7', '0'], ['3', '5', '7', '0']),
         (['3', '5', '7'], ['3', '5', '7'])]
exprBlocks:
- - zip
  - expr: zip
- - zip
  - expr: 'zip (undefined :: [a])'
- - zip
  - expr: 'zip (undefined :: [a]) (undefined :: [b])'
- - show
  - expr: show
- - show
  - expr: 'show (undefined :: Show a => a)'
- - succ
  - expr: succ
- - succ
  - expr: 'succ (undefined :: Enum a => a)'
- - traverse
  - expr: traverse
- - traverse
  - expr: |-
      traverse
        (undefined :: (Traversable t, Applicative f) => (a -> f b))
- - traverse
  - expr: |-
      traverse
        (undefined :: (Traversable t, Applicative f) => (a -> f b))
        (undefined :: (Traversable t, Applicative f) => t a)
- - unzip
  - expr: unzip
- - unzip
  - expr: 'unzip (undefined :: [(a, b)])'
- - elem
  - expr: elem
- - elem
  - expr: 'elem (undefined :: (Foldable t, Eq a) => a)'
- - elem
  - expr: |-
      elem (undefined :: (Foldable t, Eq a) => a)
        (undefined :: (Foldable t, Eq a) => t a)
- - conc
  - expr: conc
- - conc
  - expr: 'conc (undefined :: Semigroup a => a)'
- - conc
  - expr: |-
      conc (undefined :: Semigroup a => a)
        (undefined :: Semigroup a => a)
- - just
  - expr: just
- - just
  - expr: 'just (undefined :: a)'
- - pure
  - expr: pure
- - pure
  - expr: 'pure (undefined :: Applicative f => a)'
- - mempty
  - expr: mempty
- - toEnum
  - expr: toEnum
- - toEnum
  - expr: 'toEnum (undefined :: Enum a => Int)'
- - length
  - expr: length
- - length
  - expr: 'length (undefined :: Foldable t => t a)'
- - bind
  - expr: bind
- - bind
  - expr: 'bind (undefined :: Monad m => m a)'
- - bind
  - expr: |-
      bind (undefined :: Monad m => m a)
        (undefined :: Monad m => (a -> m b))
- - compose
  - expr: compose
- - compose
  - expr: 'compose (undefined :: (b -> c))'
- - compose
  - expr: 'compose (undefined :: (b -> c)) (undefined :: (a -> b))'
- - compose
  - expr: |-
      compose (undefined :: (b -> c)) (undefined :: (a -> b))
        (undefined :: a)
- - empty
  - expr: empty
- - foldr1
  - expr: foldr1
- - foldr1
  - expr: 'foldr1 (undefined :: Foldable t => (a -> a -> a))'
- - foldr1
  - expr: |-
      foldr1 (undefined :: Foldable t => (a -> a -> a))
        (undefined :: Foldable t => t a)
- - sequence
  - expr: sequence
- - sequence
  - expr: 'sequence (undefined :: (Traversable t, Monad m) => t (m a))'
- - sequenceA
  - expr: sequenceA
- - sequenceA
  - expr: 'sequenceA (undefined :: (Traversable t, Applicative f) => t (f a))'
- - fromEnum
  - expr: fromEnum
- - fromEnum
  - expr: 'fromEnum (undefined :: Enum a => a)'
- - mapM
  - expr: mapM
- - mapM
  - expr: 'mapM (undefined :: (Traversable t, Monad m) => (a -> m b))'
- - mapM
  - expr: |-
      mapM (undefined :: (Traversable t, Monad m) => (a -> m b))
        (undefined :: (Traversable t, Monad m) => t a)
- - const
  - expr: const
- - const
  - expr: 'const (undefined :: a)'
- - const
  - expr: 'const (undefined :: a) (undefined :: b)'
- - zero
  - expr: zero
- - prepend
  - expr: prepend
- - prepend
  - expr: 'prepend (undefined :: a)'
- - prepend
  - expr: 'prepend (undefined :: a) (undefined :: [a])'
- - foldMap
  - expr: foldMap
- - foldMap
  - expr: 'foldMap (undefined :: (Foldable t, Monoid m) => (a -> m))'
- - foldMap
  - expr: |-
      foldMap (undefined :: (Foldable t, Monoid m) => (a -> m))
        (undefined :: (Foldable t, Monoid m) => t a)
- - fmap
  - expr: fmap
- - fmap
  - expr: 'fmap (undefined :: Functor f => (a -> b))'
- - fmap
  - expr: |-
      fmap (undefined :: Functor f => (a -> b))
        (undefined :: Functor f => f a)
- - app
  - expr: app
- - app
  - expr: 'app (undefined :: Applicative f => f (a -> b))'
- - app
  - expr: |-
      app (undefined :: Applicative f => f (a -> b))
        (undefined :: Applicative f => f a)
- - 'null'
  - expr: 'null'
- - 'null'
  - expr: 'null (undefined :: Foldable t => t a)'
- - maybe
  - expr: maybe
- - maybe
  - expr: 'maybe (undefined :: b)'
- - maybe
  - expr: 'maybe (undefined :: b) (undefined :: (a -> b))'
- - maybe
  - expr: |-
      maybe (undefined :: b) (undefined :: (a -> b))
        (undefined :: Maybe a)
- - foldr
  - expr: foldr
- - foldr
  - expr: 'foldr (undefined :: Foldable t => (a -> b -> b))'
- - foldr
  - expr: |-
      foldr (undefined :: Foldable t => (a -> b -> b))
        (undefined :: Foldable t => b)
- - foldr
  - expr: |-
      foldr (undefined :: Foldable t => (a -> b -> b))
        (undefined :: Foldable t => b)
        (undefined :: Foldable t => t a)
- - tpl
  - expr: tpl
- - tpl
  - expr: 'tpl (undefined :: a)'
- - tpl
  - expr: 'tpl (undefined :: a) (undefined :: b)'
- - insert
  - expr: insert
- - insert
  - expr: 'insert (undefined :: (Eq k, Hashable k) => k)'
- - insert
  - expr: |-
      insert (undefined :: (Eq k, Hashable k) => k)
        (undefined :: (Eq k, Hashable k) => v)
- - insert
  - expr: |-
      insert (undefined :: (Eq k, Hashable k) => k)
        (undefined :: (Eq k, Hashable k) => v)
        (undefined :: (Eq k, Hashable k) => HashMap k v)
longestString: 6596
fnTypeIOs:
- - expr: toEnum
  - - - - type: Int
        - type: Int
      - - - expr: ((-2))
          - Right:
              expr: (-2)
        - - expr: ((-4))
          - Right:
              expr: (-4)
        - - expr: ((15))
          - Right:
              expr: '15'
        - - expr: ((-20))
          - Right:
              expr: (-20)
        - - expr: ((-9))
          - Right:
              expr: (-9)
        - - expr: ((-5))
          - Right:
              expr: (-5)
        - - expr: ((-11))
          - Right:
              expr: (-11)
        - - expr: ((11))
          - Right:
              expr: '11'
        - - expr: ((-7))
          - Right:
              expr: (-7)
- - expr: sequenceA
  - - - - type: '[] (Maybe ([] Bool))'
        - type: Maybe ([] ([] Bool))
      - - - expr: ([Just [True, False], Just [True]])
          - Right:
              expr: (Just [[True, False], [True]])
        - - expr: ([Just [True, False]])
          - Right:
              expr: (Just [[True, False]])
    - - - type: Maybe ([] (HashMap Char Bool))
        - type: '[] (Maybe (HashMap Char Bool))'
      - - - expr: |-
              (Just
                 [HashMap.fromList [('3', True), ('5', False)],
                  HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [Just (fromList [('3', True), ('5', False)]),
                 Just (fromList [('3', True)])]
        - - expr: (Just [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[Just (fromList [(''3'', True), (''5'', False)])]'
    - - - type: '[] ([] Int)'
        - type: '[] ([] Int)'
      - - - expr: |-
              ([[(-2), (-4), (15), (-20), (-9)], [(-2), (-4), (15)], [(-2)],
                [(-2), (-4)], [(-2), (-4), (15), (-20)]])
          - Right:
              expr: |-
                [[-2, -2, -2, -2, -2], [-2, -2, -2, -2, -4], [-2, -2, -2, -2, 15],
                 [-2, -2, -2, -2, -20], [-2, -2, -2, -4, -2], [-2, -2, -2, -4, -4],
                 [-2, -2, -2, -4, 15], [-2, -2, -2, -4, -20], [-2, -4, -2, -2, -2],
                 [-2, -4, -2, -2, -4], [-2, -4, -2, -2, 15], [-2, -4, -2, -2, -20],
                 [-2, -4, -2, -4, -2], [-2, -4, -2, -4, -4], [-2, -4, -2, -4, 15],
                 [-2, -4, -2, -4, -20], [-2, 15, -2, -2, -2], [-2, 15, -2, -2, -4],
                 [-2, 15, -2, -2, 15], [-2, 15, -2, -2, -20], [-2, 15, -2, -4, -2],
                 [-2, 15, -2, -4, -4], [-2, 15, -2, -4, 15], [-2, 15, -2, -4, -20],
                 [-4, -2, -2, -2, -2], [-4, -2, -2, -2, -4], [-4, -2, -2, -2, 15],
                 [-4, -2, -2, -2, -20], [-4, -2, -2, -4, -2], [-4, -2, -2, -4, -4],
                 [-4, -2, -2, -4, 15], [-4, -2, -2, -4, -20], [-4, -4, -2, -2, -2],
                 [-4, -4, -2, -2, -4], [-4, -4, -2, -2, 15], [-4, -4, -2, -2, -20],
                 [-4, -4, -2, -4, -2], [-4, -4, -2, -4, -4], [-4, -4, -2, -4, 15],
                 [-4, -4, -2, -4, -20], [-4, 15, -2, -2, -2], [-4, 15, -2, -2, -4],
                 [-4, 15, -2, -2, 15], [-4, 15, -2, -2, -20], [-4, 15, -2, -4, -2],
                 [-4, 15, -2, -4, -4], [-4, 15, -2, -4, 15], [-4, 15, -2, -4, -20],
                 [15, -2, -2, -2, -2], [15, -2, -2, -2, -4], [15, -2, -2, -2, 15],
                 [15, -2, -2, -2, -20], [15, -2, -2, -4, -2], [15, -2, -2, -4, -4],
                 [15, -2, -2, -4, 15], [15, -2, -2, -4, -20], [15, -4, -2, -2, -2],
                 [15, -4, -2, -2, -4], [15, -4, -2, -2, 15], [15, -4, -2, -2, -20],
                 [15, -4, -2, -4, -2], [15, -4, -2, -4, -4], [15, -4, -2, -4, 15],
                 [15, -4, -2, -4, -20], [15, 15, -2, -2, -2], [15, 15, -2, -2, -4],
                 [15, 15, -2, -2, 15], [15, 15, -2, -2, -20], [15, 15, -2, -4, -2],
                 [15, 15, -2, -4, -4], [15, 15, -2, -4, 15], [15, 15, -2, -4, -20],
                 [-20, -2, -2, -2, -2], [-20, -2, -2, -2, -4],
                 [-20, -2, -2, -2, 15], [-20, -2, -2, -2, -20],
                 [-20, -2, -2, -4, -2], [-20, -2, -2, -4, -4],
                 [-20, -2, -2, -4, 15], [-20, -2, -2, -4, -20],
                 [-20, -4, -2, -2, -2], [-20, -4, -2, -2, -4],
                 [-20, -4, -2, -2, 15], [-20, -4, -2, -2, -20],
                 [-20, -4, -2, -4, -2], [-20, -4, -2, -4, -4],
                 [-20, -4, -2, -4, 15], [-20, -4, -2, -4, -20],
                 [-20, 15, -2, -2, -2], [-20, 15, -2, -2, -4],
                 [-20, 15, -2, -2, 15], [-20, 15, -2, -2, -20],
                 [-20, 15, -2, -4, -2], [-20, 15, -2, -4, -4],
                 [-20, 15, -2, -4, 15], [-20, 15, -2, -4, -20],
                 [-9, -2, -2, -2, -2], [-9, -2, -2, -2, -4], [-9, -2, -2, -2, 15],
                 [-9, -2, -2, -2, -20], [-9, -2, -2, -4, -2], [-9, -2, -2, -4, -4],
                 [-9, -2, -2, -4, 15], [-9, -2, -2, -4, -20], [-9, -4, -2, -2, -2],
                 [-9, -4, -2, -2, -4], [-9, -4, -2, -2, 15], [-9, -4, -2, -2, -20],
                 [-9, -4, -2, -4, -2], [-9, -4, -2, -4, -4], [-9, -4, -2, -4, 15],
                 [-9, -4, -2, -4, -20], [-9, 15, -2, -2, -2], [-9, 15, -2, -2, -4],
                 [-9, 15, -2, -2, 15], [-9, 15, -2, -2, -20], [-9, 15, -2, -4, -2],
                 [-9, 15, -2, -4, -4], [-9, 15, -2, -4, 15], [-9, 15, -2, -4, -20]]
        - - expr: ([[(-2), (-4), (15), (-20), (-9)], [(-2), (-4), (15)], [(-2)]])
          - Right:
              expr: |-
                [[-2, -2, -2], [-2, -4, -2], [-2, 15, -2], [-4, -2, -2],
                 [-4, -4, -2], [-4, 15, -2], [15, -2, -2], [15, -4, -2],
                 [15, 15, -2], [-20, -2, -2], [-20, -4, -2], [-20, 15, -2],
                 [-9, -2, -2], [-9, -4, -2], [-9, 15, -2]]
        - - expr: ([[(-2), (-4), (15), (-20), (-9)]])
          - Right:
              expr: '[[-2], [-4], [15], [-20], [-9]]'
        - - expr: ([[(-2), (-4), (15), (-20), (-9)], [(-2), (-4), (15)]])
          - Right:
              expr: |-
                [[-2, -2], [-2, -4], [-2, 15], [-4, -2], [-4, -4], [-4, 15],
                 [15, -2], [15, -4], [15, 15], [-20, -2], [-20, -4], [-20, 15],
                 [-9, -2], [-9, -4], [-9, 15]]
        - - expr: |-
              ([[(-2), (-4), (15), (-20), (-9)], [(-2), (-4), (15)], [(-2)],
                [(-2), (-4)]])
          - Right:
              expr: |-
                [[-2, -2, -2, -2], [-2, -2, -2, -4], [-2, -4, -2, -2],
                 [-2, -4, -2, -4], [-2, 15, -2, -2], [-2, 15, -2, -4],
                 [-4, -2, -2, -2], [-4, -2, -2, -4], [-4, -4, -2, -2],
                 [-4, -4, -2, -4], [-4, 15, -2, -2], [-4, 15, -2, -4],
                 [15, -2, -2, -2], [15, -2, -2, -4], [15, -4, -2, -2],
                 [15, -4, -2, -4], [15, 15, -2, -2], [15, 15, -2, -4],
                 [-20, -2, -2, -2], [-20, -2, -2, -4], [-20, -4, -2, -2],
                 [-20, -4, -2, -4], [-20, 15, -2, -2], [-20, 15, -2, -4],
                 [-9, -2, -2, -2], [-9, -2, -2, -4], [-9, -4, -2, -2],
                 [-9, -4, -2, -4], [-9, 15, -2, -2], [-9, 15, -2, -4]]
    - - - type: '[] (Maybe ([] Char))'
        - type: Maybe ([] ([] Char))
      - - - expr: |-
              ([Just ['3', '5', '7', '0'], Just ['3', '5', '7'], Just ['3'],
                Nothing])
          - Right:
              expr: Nothing
        - - expr: ([Just ['3', '5', '7', '0'], Just ['3', '5', '7'], Just ['3']])
          - Right:
              expr: (Just ["3570", "357", "3"])
        - - expr: ([Just ['3', '5', '7', '0']])
          - Right:
              expr: (Just ["3570"])
        - - expr: ([Just ['3', '5', '7', '0'], Just ['3', '5', '7']])
          - Right:
              expr: (Just ["3570", "357"])
    - - - type: '[] ([] (HashMap Char Bool))'
        - type: '[] ([] (HashMap Char Bool))'
      - - - expr: |-
              ([[HashMap.fromList [('3', True), ('5', False)],
                 HashMap.fromList [('3', True)]],
                [HashMap.fromList [('3', True), ('5', False)]]])
          - Right:
              expr: |-
                [[fromList [('3', True), ('5', False)],
                  fromList [('3', True), ('5', False)]],
                 [fromList [('3', True)], fromList [('3', True), ('5', False)]]]
        - - expr: |-
              ([[HashMap.fromList [('3', True), ('5', False)],
                 HashMap.fromList [('3', True)]]])
          - Right:
              expr: '[[fromList [(''3'', True), (''5'', False)]], [fromList [(''3'',
                True)]]]'
    - - - type: '[] (Maybe Int)'
        - type: Maybe ([] Int)
      - - - expr: ([Just (-2), Just (-4), Just (15), Nothing])
          - Right:
              expr: Nothing
        - - expr: ([Just (-2), Just (-4), Just (15)])
          - Right:
              expr: (Just [-2, -4, 15])
        - - expr: ([Just (-2)])
          - Right:
              expr: (Just [-2])
        - - expr: ([Just (-2), Just (-4)])
          - Right:
              expr: (Just [-2, -4])
    - - - type: '[] (Maybe (HashMap Char Bool))'
        - type: Maybe ([] (HashMap Char Bool))
      - - - expr: |-
              ([Just (HashMap.fromList [('3', True), ('5', False)]),
                Just (HashMap.fromList [('3', True)])])
          - Right:
              expr: |-
                (Just
                   [fromList [('3', True), ('5', False)], fromList [('3', True)]])
        - - expr: ([Just (HashMap.fromList [('3', True), ('5', False)])])
          - Right:
              expr: (Just [fromList [('3', True), ('5', False)]])
    - - - type: Maybe (Maybe (HashMap Char Bool))
        - type: Maybe (Maybe (HashMap Char Bool))
      - - - expr: (Just (Just (HashMap.fromList [('3', True), ('5', False)])))
          - Right:
              expr: (Just (Just (fromList [('3', True), ('5', False)])))
        - - expr: (Just (Just (HashMap.fromList [('3', True)])))
          - Right:
              expr: (Just (Just (fromList [('3', True)])))
    - - - type: Maybe (Maybe Int)
        - type: Maybe (Maybe Int)
      - - - expr: (Just (Just (-2)))
          - Right:
              expr: (Just (Just (-2)))
        - - expr: (Just (Just (-4)))
          - Right:
              expr: (Just (Just (-4)))
        - - expr: (Just (Just (15)))
          - Right:
              expr: (Just (Just 15))
        - - expr: (Nothing)
          - Right:
              expr: (Just Nothing)
    - - - type: Maybe ([] Int)
        - type: '[] (Maybe Int)'
      - - - expr: (Just [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[Just (-2), Just (-4), Just 15, Just (-20), Just (-9)]'
        - - expr: (Just [(-2), (-4), (15)])
          - Right:
              expr: '[Just (-2), Just (-4), Just 15]'
        - - expr: (Just [(-2)])
          - Right:
              expr: '[Just (-2)]'
        - - expr: (Nothing)
          - Right:
              expr: '[Nothing]'
    - - - type: Maybe (Maybe ((,) Int Int))
        - type: Maybe (Maybe ((,) Int Int))
      - - - expr: (Just (Just ((-2), (-2))))
          - Right:
              expr: (Just (Just (-2, -2)))
        - - expr: (Just (Just ((-4), (-4))))
          - Right:
              expr: (Just (Just (-4, -4)))
        - - expr: (Just (Just ((15), (15))))
          - Right:
              expr: (Just (Just (15, 15)))
        - - expr: (Nothing)
          - Right:
              expr: (Just Nothing)
    - - - type: Maybe ([] ([] Bool))
        - type: '[] (Maybe ([] Bool))'
      - - - expr: (Just [[True, False], [True]])
          - Right:
              expr: '[Just [True, False], Just [True]]'
        - - expr: (Just [[True, False]])
          - Right:
              expr: '[Just [True, False]]'
    - - - type: Maybe ([] ((,) Int Int))
        - type: '[] (Maybe ((,) Int Int))'
      - - - expr: |-
              (Just
                 [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                  ((-9), (-9))])
          - Right:
              expr: |-
                [Just (-2, -2), Just (-4, -4), Just (15, 15), Just (-20, -20),
                 Just (-9, -9)]
        - - expr: (Just [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[Just (-2, -2), Just (-4, -4), Just (15, 15)]'
        - - expr: (Just [((-2), (-2))])
          - Right:
              expr: '[Just (-2, -2)]'
        - - expr: (Nothing)
          - Right:
              expr: '[Nothing]'
    - - - type: Maybe (Maybe ([] Char))
        - type: Maybe (Maybe ([] Char))
      - - - expr: (Just (Just ['3', '5', '7', '0']))
          - Right:
              expr: (Just (Just "3570"))
        - - expr: (Just (Just ['3', '5', '7']))
          - Right:
              expr: (Just (Just "357"))
        - - expr: (Just (Just ['3']))
          - Right:
              expr: (Just (Just "3"))
        - - expr: (Nothing)
          - Right:
              expr: (Just Nothing)
    - - - type: '[] ([] ([] Char))'
        - type: '[] ([] ([] Char))'
      - - - expr: |-
              ([[['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
                [['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
                [['3', '5', '7', '0']], [['3', '5', '7', '0'], ['3', '5', '7']]])
          - Right:
              expr: |-
                [["3570", "3570", "3570", "3570"], ["3570", "3570", "3570", "357"],
                 ["3570", "357", "3570", "3570"], ["3570", "357", "3570", "357"],
                 ["3570", "3", "3570", "3570"], ["3570", "3", "3570", "357"],
                 ["357", "3570", "3570", "3570"], ["357", "3570", "3570", "357"],
                 ["357", "357", "3570", "3570"], ["357", "357", "3570", "357"],
                 ["357", "3", "3570", "3570"], ["357", "3", "3570", "357"],
                 ["3", "3570", "3570", "3570"], ["3", "3570", "3570", "357"],
                 ["3", "357", "3570", "3570"], ["3", "357", "3570", "357"],
                 ["3", "3", "3570", "3570"], ["3", "3", "3570", "357"],
                 ["35", "3570", "3570", "3570"], ["35", "3570", "3570", "357"],
                 ["35", "357", "3570", "3570"], ["35", "357", "3570", "357"],
                 ["35", "3", "3570", "3570"], ["35", "3", "3570", "357"]]
        - - expr: |-
              ([[['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
                [['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
                [['3', '5', '7', '0']]])
          - Right:
              expr: |-
                [["3570", "3570", "3570"], ["3570", "357", "3570"],
                 ["3570", "3", "3570"], ["357", "3570", "3570"],
                 ["357", "357", "3570"], ["357", "3", "3570"],
                 ["3", "3570", "3570"], ["3", "357", "3570"], ["3", "3", "3570"],
                 ["35", "3570", "3570"], ["35", "357", "3570"], ["35", "3", "3570"]]
        - - expr: ([[['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']]])
          - Right:
              expr: '[["3570"], ["357"], ["3"], ["35"]]'
        - - expr: |-
              ([[['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
                [['3', '5', '7', '0'], ['3', '5', '7'], ['3']]])
          - Right:
              expr: |-
                [["3570", "3570"], ["3570", "357"], ["3570", "3"], ["357", "3570"],
                 ["357", "357"], ["357", "3"], ["3", "3570"], ["3", "357"],
                 ["3", "3"], ["35", "3570"], ["35", "357"], ["35", "3"]]
    - - - type: '[] ([] ((,) Int Int))'
        - type: '[] ([] ((,) Int Int))'
      - - - expr: |-
              ([[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                 ((-9), (-9))],
                [((-2), (-2)), ((-4), (-4)), ((15), (15))], [((-2), (-2))],
                [((-2), (-2)), ((-4), (-4))],
                [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))]])
          - Right:
              expr: |-
                [[(-2, -2), (-2, -2), (-2, -2), (-2, -2), (-2, -2)],
                 [(-2, -2), (-2, -2), (-2, -2), (-2, -2), (-4, -4)],
                 [(-2, -2), (-2, -2), (-2, -2), (-2, -2), (15, 15)],
                 [(-2, -2), (-2, -2), (-2, -2), (-2, -2), (-20, -20)],
                 [(-2, -2), (-2, -2), (-2, -2), (-4, -4), (-2, -2)],
                 [(-2, -2), (-2, -2), (-2, -2), (-4, -4), (-4, -4)],
                 [(-2, -2), (-2, -2), (-2, -2), (-4, -4), (15, 15)],
                 [(-2, -2), (-2, -2), (-2, -2), (-4, -4), (-20, -20)],
                 [(-2, -2), (-4, -4), (-2, -2), (-2, -2), (-2, -2)],
                 [(-2, -2), (-4, -4), (-2, -2), (-2, -2), (-4, -4)],
                 [(-2, -2), (-4, -4), (-2, -2), (-2, -2), (15, 15)],
                 [(-2, -2), (-4, -4), (-2, -2), (-2, -2), (-20, -20)],
                 [(-2, -2), (-4, -4), (-2, -2), (-4, -4), (-2, -2)],
                 [(-2, -2), (-4, -4), (-2, -2), (-4, -4), (-4, -4)],
                 [(-2, -2), (-4, -4), (-2, -2), (-4, -4), (15, 15)],
                 [(-2, -2), (-4, -4), (-2, -2), (-4, -4), (-20, -20)],
                 [(-2, -2), (15, 15), (-2, -2), (-2, -2), (-2, -2)],
                 [(-2, -2), (15, 15), (-2, -2), (-2, -2), (-4, -4)],
                 [(-2, -2), (15, 15), (-2, -2), (-2, -2), (15, 15)],
                 [(-2, -2), (15, 15), (-2, -2), (-2, -2), (-20, -20)],
                 [(-2, -2), (15, 15), (-2, -2), (-4, -4), (-2, -2)],
                 [(-2, -2), (15, 15), (-2, -2), (-4, -4), (-4, -4)],
                 [(-2, -2), (15, 15), (-2, -2), (-4, -4), (15, 15)],
                 [(-2, -2), (15, 15), (-2, -2), (-4, -4), (-20, -20)],
                 [(-4, -4), (-2, -2), (-2, -2), (-2, -2), (-2, -2)],
                 [(-4, -4), (-2, -2), (-2, -2), (-2, -2), (-4, -4)],
                 [(-4, -4), (-2, -2), (-2, -2), (-2, -2), (15, 15)],
                 [(-4, -4), (-2, -2), (-2, -2), (-2, -2), (-20, -20)],
                 [(-4, -4), (-2, -2), (-2, -2), (-4, -4), (-2, -2)],
                 [(-4, -4), (-2, -2), (-2, -2), (-4, -4), (-4, -4)],
                 [(-4, -4), (-2, -2), (-2, -2), (-4, -4), (15, 15)],
                 [(-4, -4), (-2, -2), (-2, -2), (-4, -4), (-20, -20)],
                 [(-4, -4), (-4, -4), (-2, -2), (-2, -2), (-2, -2)],
                 [(-4, -4), (-4, -4), (-2, -2), (-2, -2), (-4, -4)],
                 [(-4, -4), (-4, -4), (-2, -2), (-2, -2), (15, 15)],
                 [(-4, -4), (-4, -4), (-2, -2), (-2, -2), (-20, -20)],
                 [(-4, -4), (-4, -4), (-2, -2), (-4, -4), (-2, -2)],
                 [(-4, -4), (-4, -4), (-2, -2), (-4, -4), (-4, -4)],
                 [(-4, -4), (-4, -4), (-2, -2), (-4, -4), (15, 15)],
                 [(-4, -4), (-4, -4), (-2, -2), (-4, -4), (-20, -20)],
                 [(-4, -4), (15, 15), (-2, -2), (-2, -2), (-2, -2)],
                 [(-4, -4), (15, 15), (-2, -2), (-2, -2), (-4, -4)],
                 [(-4, -4), (15, 15), (-2, -2), (-2, -2), (15, 15)],
                 [(-4, -4), (15, 15), (-2, -2), (-2, -2), (-20, -20)],
                 [(-4, -4), (15, 15), (-2, -2), (-4, -4), (-2, -2)],
                 [(-4, -4), (15, 15), (-2, -2), (-4, -4), (-4, -4)],
                 [(-4, -4), (15, 15), (-2, -2), (-4, -4), (15, 15)],
                 [(-4, -4), (15, 15), (-2, -2), (-4, -4), (-20, -20)],
                 [(15, 15), (-2, -2), (-2, -2), (-2, -2), (-2, -2)],
                 [(15, 15), (-2, -2), (-2, -2), (-2, -2), (-4, -4)],
                 [(15, 15), (-2, -2), (-2, -2), (-2, -2), (15, 15)],
                 [(15, 15), (-2, -2), (-2, -2), (-2, -2), (-20, -20)],
                 [(15, 15), (-2, -2), (-2, -2), (-4, -4), (-2, -2)],
                 [(15, 15), (-2, -2), (-2, -2), (-4, -4), (-4, -4)],
                 [(15, 15), (-2, -2), (-2, -2), (-4, -4), (15, 15)],
                 [(15, 15), (-2, -2), (-2, -2), (-4, -4), (-20, -20)],
                 [(15, 15), (-4, -4), (-2, -2), (-2, -2), (-2, -2)],
                 [(15, 15), (-4, -4), (-2, -2), (-2, -2), (-4, -4)],
                 [(15, 15), (-4, -4), (-2, -2), (-2, -2), (15, 15)],
                 [(15, 15), (-4, -4), (-2, -2), (-2, -2), (-20, -20)],
                 [(15, 15), (-4, -4), (-2, -2), (-4, -4), (-2, -2)],
                 [(15, 15), (-4, -4), (-2, -2), (-4, -4), (-4, -4)],
                 [(15, 15), (-4, -4), (-2, -2), (-4, -4), (15, 15)],
                 [(15, 15), (-4, -4), (-2, -2), (-4, -4), (-20, -20)],
                 [(15, 15), (15, 15), (-2, -2), (-2, -2), (-2, -2)],
                 [(15, 15), (15, 15), (-2, -2), (-2, -2), (-4, -4)],
                 [(15, 15), (15, 15), (-2, -2), (-2, -2), (15, 15)],
                 [(15, 15), (15, 15), (-2, -2), (-2, -2), (-20, -20)],
                 [(15, 15), (15, 15), (-2, -2), (-4, -4), (-2, -2)],
                 [(15, 15), (15, 15), (-2, -2), (-4, -4), (-4, -4)],
                 [(15, 15), (15, 15), (-2, -2), (-4, -4), (15, 15)],
                 [(15, 15), (15, 15), (-2, -2), (-4, -4), (-20, -20)],
                 [(-20, -20), (-2, -2), (-2, -2), (-2, -2), (-2, -2)],
                 [(-20, -20), (-2, -2), (-2, -2), (-2, -2), (-4, -4)],
                 [(-20, -20), (-2, -2), (-2, -2), (-2, -2), (15, 15)],
                 [(-20, -20), (-2, -2), (-2, -2), (-2, -2), (-20, -20)],
                 [(-20, -20), (-2, -2), (-2, -2), (-4, -4), (-2, -2)],
                 [(-20, -20), (-2, -2), (-2, -2), (-4, -4), (-4, -4)],
                 [(-20, -20), (-2, -2), (-2, -2), (-4, -4), (15, 15)],
                 [(-20, -20), (-2, -2), (-2, -2), (-4, -4), (-20, -20)],
                 [(-20, -20), (-4, -4), (-2, -2), (-2, -2), (-2, -2)],
                 [(-20, -20), (-4, -4), (-2, -2), (-2, -2), (-4, -4)],
                 [(-20, -20), (-4, -4), (-2, -2), (-2, -2), (15, 15)],
                 [(-20, -20), (-4, -4), (-2, -2), (-2, -2), (-20, -20)],
                 [(-20, -20), (-4, -4), (-2, -2), (-4, -4), (-2, -2)],
                 [(-20, -20), (-4, -4), (-2, -2), (-4, -4), (-4, -4)],
                 [(-20, -20), (-4, -4), (-2, -2), (-4, -4), (15, 15)],
                 [(-20, -20), (-4, -4), (-2, -2), (-4, -4), (-20, -20)],
                 [(-20, -20), (15, 15), (-2, -2), (-2, -2), (-2, -2)],
                 [(-20, -20), (15, 15), (-2, -2), (-2, -2), (-4, -4)],
                 [(-20, -20), (15, 15), (-2, -2), (-2, -2), (15, 15)],
                 [(-20, -20), (15, 15), (-2, -2), (-2, -2), (-20, -20)],
                 [(-20, -20), (15, 15), (-2, -2), (-4, -4), (-2, -2)],
                 [(-20, -20), (15, 15), (-2, -2), (-4, -4), (-4, -4)],
                 [(-20, -20), (15, 15), (-2, -2), (-4, -4), (15, 15)],
                 [(-20, -20), (15, 15), (-2, -2), (-4, -4), (-20, -20)],
                 [(-9, -9), (-2, -2), (-2, -2), (-2, -2), (-2, -2)],
                 [(-9, -9), (-2, -2), (-2, -2), (-2, -2), (-4, -4)],
                 [(-9, -9), (-2, -2), (-2, -2), (-2, -2), (15, 15)],
                 [(-9, -9), (-2, -2), (-2, -2), (-2, -2), (-20, -20)],
                 [(-9, -9), (-2, -2), (-2, -2), (-4, -4), (-2, -2)],
                 [(-9, -9), (-2, -2), (-2, -2), (-4, -4), (-4, -4)],
                 [(-9, -9), (-2, -2), (-2, -2), (-4, -4), (15, 15)],
                 [(-9, -9), (-2, -2), (-2, -2), (-4, -4), (-20, -20)],
                 [(-9, -9), (-4, -4), (-2, -2), (-2, -2), (-2, -2)],
                 [(-9, -9), (-4, -4), (-2, -2), (-2, -2), (-4, -4)],
                 [(-9, -9), (-4, -4), (-2, -2), (-2, -2), (15, 15)],
                 [(-9, -9), (-4, -4), (-2, -2), (-2, -2), (-20, -20)],
                 [(-9, -9), (-4, -4), (-2, -2), (-4, -4), (-2, -2)],
                 [(-9, -9), (-4, -4), (-2, -2), (-4, -4), (-4, -4)],
                 [(-9, -9), (-4, -4), (-2, -2), (-4, -4), (15, 15)],
                 [(-9, -9), (-4, -4), (-2, -2), (-4, -4), (-20, -20)],
                 [(-9, -9), (15, 15), (-2, -2), (-2, -2), (-2, -2)],
                 [(-9, -9), (15, 15), (-2, -2), (-2, -2), (-4, -4)],
                 [(-9, -9), (15, 15), (-2, -2), (-2, -2), (15, 15)],
                 [(-9, -9), (15, 15), (-2, -2), (-2, -2), (-20, -20)],
                 [(-9, -9), (15, 15), (-2, -2), (-4, -4), (-2, -2)],
                 [(-9, -9), (15, 15), (-2, -2), (-4, -4), (-4, -4)],
                 [(-9, -9), (15, 15), (-2, -2), (-4, -4), (15, 15)],
                 [(-9, -9), (15, 15), (-2, -2), (-4, -4), (-20, -20)]]
        - - expr: |-
              ([[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                 ((-9), (-9))],
                [((-2), (-2)), ((-4), (-4)), ((15), (15))], [((-2), (-2))]])
          - Right:
              expr: |-
                [[(-2, -2), (-2, -2), (-2, -2)], [(-2, -2), (-4, -4), (-2, -2)],
                 [(-2, -2), (15, 15), (-2, -2)], [(-4, -4), (-2, -2), (-2, -2)],
                 [(-4, -4), (-4, -4), (-2, -2)], [(-4, -4), (15, 15), (-2, -2)],
                 [(15, 15), (-2, -2), (-2, -2)], [(15, 15), (-4, -4), (-2, -2)],
                 [(15, 15), (15, 15), (-2, -2)], [(-20, -20), (-2, -2), (-2, -2)],
                 [(-20, -20), (-4, -4), (-2, -2)], [(-20, -20), (15, 15), (-2, -2)],
                 [(-9, -9), (-2, -2), (-2, -2)], [(-9, -9), (-4, -4), (-2, -2)],
                 [(-9, -9), (15, 15), (-2, -2)]]
        - - expr: |-
              ([[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                 ((-9), (-9))]])
          - Right:
              expr: '[[(-2, -2)], [(-4, -4)], [(15, 15)], [(-20, -20)], [(-9, -9)]]'
        - - expr: |-
              ([[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                 ((-9), (-9))],
                [((-2), (-2)), ((-4), (-4)), ((15), (15))]])
          - Right:
              expr: |-
                [[(-2, -2), (-2, -2)], [(-2, -2), (-4, -4)], [(-2, -2), (15, 15)],
                 [(-4, -4), (-2, -2)], [(-4, -4), (-4, -4)], [(-4, -4), (15, 15)],
                 [(15, 15), (-2, -2)], [(15, 15), (-4, -4)], [(15, 15), (15, 15)],
                 [(-20, -20), (-2, -2)], [(-20, -20), (-4, -4)],
                 [(-20, -20), (15, 15)], [(-9, -9), (-2, -2)], [(-9, -9), (-4, -4)],
                 [(-9, -9), (15, 15)]]
        - - expr: |-
              ([[((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                 ((-9), (-9))],
                [((-2), (-2)), ((-4), (-4)), ((15), (15))], [((-2), (-2))],
                [((-2), (-2)), ((-4), (-4))]])
          - Right:
              expr: |-
                [[(-2, -2), (-2, -2), (-2, -2), (-2, -2)],
                 [(-2, -2), (-2, -2), (-2, -2), (-4, -4)],
                 [(-2, -2), (-4, -4), (-2, -2), (-2, -2)],
                 [(-2, -2), (-4, -4), (-2, -2), (-4, -4)],
                 [(-2, -2), (15, 15), (-2, -2), (-2, -2)],
                 [(-2, -2), (15, 15), (-2, -2), (-4, -4)],
                 [(-4, -4), (-2, -2), (-2, -2), (-2, -2)],
                 [(-4, -4), (-2, -2), (-2, -2), (-4, -4)],
                 [(-4, -4), (-4, -4), (-2, -2), (-2, -2)],
                 [(-4, -4), (-4, -4), (-2, -2), (-4, -4)],
                 [(-4, -4), (15, 15), (-2, -2), (-2, -2)],
                 [(-4, -4), (15, 15), (-2, -2), (-4, -4)],
                 [(15, 15), (-2, -2), (-2, -2), (-2, -2)],
                 [(15, 15), (-2, -2), (-2, -2), (-4, -4)],
                 [(15, 15), (-4, -4), (-2, -2), (-2, -2)],
                 [(15, 15), (-4, -4), (-2, -2), (-4, -4)],
                 [(15, 15), (15, 15), (-2, -2), (-2, -2)],
                 [(15, 15), (15, 15), (-2, -2), (-4, -4)],
                 [(-20, -20), (-2, -2), (-2, -2), (-2, -2)],
                 [(-20, -20), (-2, -2), (-2, -2), (-4, -4)],
                 [(-20, -20), (-4, -4), (-2, -2), (-2, -2)],
                 [(-20, -20), (-4, -4), (-2, -2), (-4, -4)],
                 [(-20, -20), (15, 15), (-2, -2), (-2, -2)],
                 [(-20, -20), (15, 15), (-2, -2), (-4, -4)],
                 [(-9, -9), (-2, -2), (-2, -2), (-2, -2)],
                 [(-9, -9), (-2, -2), (-2, -2), (-4, -4)],
                 [(-9, -9), (-4, -4), (-2, -2), (-2, -2)],
                 [(-9, -9), (-4, -4), (-2, -2), (-4, -4)],
                 [(-9, -9), (15, 15), (-2, -2), (-2, -2)],
                 [(-9, -9), (15, 15), (-2, -2), (-4, -4)]]
    - - - type: '[] ([] ([] Bool))'
        - type: '[] ([] ([] Bool))'
      - - - expr: ([[[True, False], [True]], [[True, False]]])
          - Right:
              expr: '[[[True, False], [True, False]], [[True], [True, False]]]'
        - - expr: ([[[True, False], [True]]])
          - Right:
              expr: '[[[True, False]], [[True]]]'
    - - - type: Maybe ([] ([] Char))
        - type: '[] (Maybe ([] Char))'
      - - - expr: (Just [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[Just "3570", Just "357", Just "3", Just "35"]'
        - - expr: (Just [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[Just "3570", Just "357", Just "3"]'
        - - expr: (Just [['3', '5', '7', '0']])
          - Right:
              expr: '[Just "3570"]'
        - - expr: (Nothing)
          - Right:
              expr: '[Nothing]'
    - - - type: Maybe (Maybe ([] Bool))
        - type: Maybe (Maybe ([] Bool))
      - - - expr: (Just (Just [True, False]))
          - Right:
              expr: (Just (Just [True, False]))
        - - expr: (Just (Just [True]))
          - Right:
              expr: (Just (Just [True]))
    - - - type: '[] (Maybe ((,) Int Int))'
        - type: Maybe ([] ((,) Int Int))
      - - - expr: |-
              ([Just ((-2), (-2)), Just ((-4), (-4)), Just ((15), (15)),
                Nothing])
          - Right:
              expr: Nothing
        - - expr: ([Just ((-2), (-2)), Just ((-4), (-4)), Just ((15), (15))])
          - Right:
              expr: (Just [(-2, -2), (-4, -4), (15, 15)])
        - - expr: ([Just ((-2), (-2))])
          - Right:
              expr: (Just [(-2, -2)])
        - - expr: ([Just ((-2), (-2)), Just ((-4), (-4))])
          - Right:
              expr: (Just [(-2, -2), (-4, -4)])
- - expr: length
  - - - - type: Maybe ([] Char)
        - type: Int
      - - - expr: (Just ['3', '5', '7', '0'])
          - Right:
              expr: '1'
        - - expr: (Just ['3', '5', '7'])
          - Right:
              expr: '1'
        - - expr: (Just ['3'])
          - Right:
              expr: '1'
        - - expr: (Nothing)
          - Right:
              expr: '0'
    - - - type: '[] ([] Char)'
        - type: Int
      - - - expr: ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '4'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '3'
        - - expr: ([['3', '5', '7', '0']])
          - Right:
              expr: '1'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '2'
    - - - type: Maybe ([] Bool)
        - type: Int
      - - - expr: (Just [True, False])
          - Right:
              expr: '1'
        - - expr: (Just [True])
          - Right:
              expr: '1'
    - - - type: '[] ([] Bool)'
        - type: Int
      - - - expr: ([[True, False], [True]])
          - Right:
              expr: '2'
        - - expr: ([[True, False]])
          - Right:
              expr: '1'
    - - - type: '[] (HashMap Char Bool)'
        - type: Int
      - - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: '2'
        - - expr: ([HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '1'
    - - - type: Maybe (HashMap Char Bool)
        - type: Int
      - - - expr: (Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '1'
        - - expr: (Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '1'
    - - - type: Maybe ((,) Int Int)
        - type: Int
      - - - expr: (Just ((-2), (-2)))
          - Right:
              expr: '1'
        - - expr: (Just ((-4), (-4)))
          - Right:
              expr: '1'
        - - expr: (Just ((15), (15)))
          - Right:
              expr: '1'
        - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just ((11), (11)))
          - Right:
              expr: '1'
    - - - type: '[] ((,) Int Int)'
        - type: Int
      - - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '5'
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '3'
        - - expr: ([((-2), (-2))])
          - Right:
              expr: '1'
        - - expr: ([((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '2'
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '4'
    - - - type: Maybe Int
        - type: Int
      - - - expr: (Just (-2))
          - Right:
              expr: '1'
        - - expr: (Just (-4))
          - Right:
              expr: '1'
        - - expr: (Just (15))
          - Right:
              expr: '1'
        - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just (11))
          - Right:
              expr: '1'
    - - - type: '[] Int'
        - type: Int
      - - - expr: ([(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '5'
        - - expr: ([(-2), (-4), (15)])
          - Right:
              expr: '3'
        - - expr: ([(-2)])
          - Right:
              expr: '1'
        - - expr: ([(-2), (-4)])
          - Right:
              expr: '2'
        - - expr: ([(-2), (-4), (15), (-20)])
          - Right:
              expr: '4'
- - expr: zip
  - - - - type: ([Int], [HashMap Char Bool])
        - type: '[(Int, HashMap Char Bool)]'
      - - - expr: |-
              ([(-2), (-4), (15), (-20), (-9)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [(-2, fromList [('3', True), ('5', False)]),
                 (-4, fromList [('3', True)])]
        - - expr: |-
              ([(-2), (-4), (15), (-20), (-9)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[(-2, fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([(-2), (-4), (15)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [(-2, fromList [('3', True), ('5', False)]),
                 (-4, fromList [('3', True)])]
        - - expr: |-
              ([(-2), (-4), (15)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[(-2, fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([(-2)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: '[(-2, fromList [(''3'', True), (''5'', False)])]'
        - - expr: ([(-2)], [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[(-2, fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([(-2), (-4)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [(-2, fromList [('3', True), ('5', False)]),
                 (-4, fromList [('3', True)])]
        - - expr: ([(-2), (-4)], [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[(-2, fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([(-2), (-4), (15), (-20)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [(-2, fromList [('3', True), ('5', False)]),
                 (-4, fromList [('3', True)])]
        - - expr: |-
              ([(-2), (-4), (15), (-20)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[(-2, fromList [(''3'', True), (''5'', False)])]'
    - - - type: ([HashMap Char Bool], [[] Bool])
        - type: '[(HashMap Char Bool, [] Bool)]'
      - - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [[True, False], [True]])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)], [True, False]),
                 (fromList [('3', True)], [True])]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [[True, False]])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], [True, False])]'
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [[True, False], [True]])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], [True, False])]'
        - - expr: ([HashMap.fromList [('3', True), ('5', False)]], [[True, False]])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], [True, False])]'
    - - - type: ([HashMap Char Bool], [Int])
        - type: '[(HashMap Char Bool, Int)]'
      - - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)], -2),
                 (fromList [('3', True)], -4)]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [(-2), (-4), (15)])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)], -2),
                 (fromList [('3', True)], -4)]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [(-2)])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], -2)]'
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [(-2), (-4)])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)], -2),
                 (fromList [('3', True)], -4)]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [(-2), (-4), (15), (-20)])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)], -2),
                 (fromList [('3', True)], -4)]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], -2)]'
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [(-2), (-4), (15)])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], -2)]'
        - - expr: ([HashMap.fromList [('3', True), ('5', False)]], [(-2)])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], -2)]'
        - - expr: ([HashMap.fromList [('3', True), ('5', False)]], [(-2), (-4)])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], -2)]'
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], -2)]'
    - - - type: ([HashMap Char Bool], [(,) Int Int])
        - type: '[(HashMap Char Bool, (,) Int Int)]'
      - - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)], (-2, -2)),
                 (fromList [('3', True)], (-4, -4))]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)], (-2, -2)),
                 (fromList [('3', True)], (-4, -4))]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [((-2), (-2))])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], (-2, -2))]'
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)], (-2, -2)),
                 (fromList [('3', True)], (-4, -4))]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)], (-2, -2)),
                 (fromList [('3', True)], (-4, -4))]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], (-2, -2))]'
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], (-2, -2))]'
        - - expr: ([HashMap.fromList [('3', True), ('5', False)]], [((-2), (-2))])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], (-2, -2))]'
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], (-2, -2))]'
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], (-2, -2))]'
    - - - type: ([Int], [(,) Int Int])
        - type: '[(Int, (,) Int Int)]'
      - - - expr: |-
              ([(-2), (-4), (15), (-20), (-9)],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: |-
                [(-2, (-2, -2)), (-4, (-4, -4)), (15, (15, 15)), (-20, (-20, -20)),
                 (-9, (-9, -9))]
        - - expr: |-
              ([(-2), (-4), (15), (-20), (-9)],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4)), (15, (15, 15))]'
        - - expr: ([(-2), (-4), (15), (-20), (-9)], [((-2), (-2))])
          - Right:
              expr: '[(-2, (-2, -2))]'
        - - expr: ([(-2), (-4), (15), (-20), (-9)], [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4))]'
        - - expr: |-
              ([(-2), (-4), (15), (-20), (-9)],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4)), (15, (15, 15)), (-20, (-20,
                -20))]'
        - - expr: |-
              ([(-2), (-4), (15)],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4)), (15, (15, 15))]'
        - - expr: ([(-2), (-4), (15)], [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4)), (15, (15, 15))]'
        - - expr: ([(-2), (-4), (15)], [((-2), (-2))])
          - Right:
              expr: '[(-2, (-2, -2))]'
        - - expr: ([(-2), (-4), (15)], [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4))]'
        - - expr: |-
              ([(-2), (-4), (15)],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4)), (15, (15, 15))]'
        - - expr: |-
              ([(-2)],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(-2, (-2, -2))]'
        - - expr: ([(-2)], [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(-2, (-2, -2))]'
        - - expr: ([(-2)], [((-2), (-2))])
          - Right:
              expr: '[(-2, (-2, -2))]'
        - - expr: ([(-2)], [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(-2, (-2, -2))]'
        - - expr: |-
              ([(-2)],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(-2, (-2, -2))]'
        - - expr: |-
              ([(-2), (-4)],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4))]'
        - - expr: ([(-2), (-4)], [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4))]'
        - - expr: ([(-2), (-4)], [((-2), (-2))])
          - Right:
              expr: '[(-2, (-2, -2))]'
        - - expr: ([(-2), (-4)], [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4))]'
        - - expr: |-
              ([(-2), (-4)],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4))]'
        - - expr: |-
              ([(-2), (-4), (15), (-20)],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4)), (15, (15, 15)), (-20, (-20,
                -20))]'
        - - expr: |-
              ([(-2), (-4), (15), (-20)],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4)), (15, (15, 15))]'
        - - expr: ([(-2), (-4), (15), (-20)], [((-2), (-2))])
          - Right:
              expr: '[(-2, (-2, -2))]'
        - - expr: ([(-2), (-4), (15), (-20)], [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4))]'
        - - expr: |-
              ([(-2), (-4), (15), (-20)],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(-2, (-2, -2)), (-4, (-4, -4)), (15, (15, 15)), (-20, (-20,
                -20))]'
    - - - type: ([[] Bool], [[] Bool])
        - type: '[([] Bool, [] Bool)]'
      - - - expr: ([[True, False], [True]], [[True, False], [True]])
          - Right:
              expr: '[([True, False], [True, False]), ([True], [True])]'
        - - expr: ([[True, False], [True]], [[True, False]])
          - Right:
              expr: '[([True, False], [True, False])]'
        - - expr: ([[True, False]], [[True, False], [True]])
          - Right:
              expr: '[([True, False], [True, False])]'
        - - expr: ([[True, False]], [[True, False]])
          - Right:
              expr: '[([True, False], [True, False])]'
    - - - type: ([(,) Int Int], [Int])
        - type: '[((,) Int Int, Int)]'
      - - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: |-
                [((-2, -2), -2), ((-4, -4), -4), ((15, 15), 15), ((-20, -20), -20),
                 ((-9, -9), -9)]
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [(-2), (-4), (15)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4), ((15, 15), 15)]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [(-2)])
          - Right:
              expr: '[((-2, -2), -2)]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [(-2), (-4)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4)]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4), ((15, 15), 15), ((-20, -20),
                -20)]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4), ((15, 15), 15)]'
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15))], [(-2), (-4), (15)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4), ((15, 15), 15)]'
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15))], [(-2)])
          - Right:
              expr: '[((-2, -2), -2)]'
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15))], [(-2), (-4)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4)]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4), ((15, 15), 15)]'
        - - expr: ([((-2), (-2))], [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[((-2, -2), -2)]'
        - - expr: ([((-2), (-2))], [(-2), (-4), (15)])
          - Right:
              expr: '[((-2, -2), -2)]'
        - - expr: ([((-2), (-2))], [(-2)])
          - Right:
              expr: '[((-2, -2), -2)]'
        - - expr: ([((-2), (-2))], [(-2), (-4)])
          - Right:
              expr: '[((-2, -2), -2)]'
        - - expr: ([((-2), (-2))], [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[((-2, -2), -2)]'
        - - expr: ([((-2), (-2)), ((-4), (-4))], [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4)]'
        - - expr: ([((-2), (-2)), ((-4), (-4))], [(-2), (-4), (15)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4)]'
        - - expr: ([((-2), (-2)), ((-4), (-4))], [(-2)])
          - Right:
              expr: '[((-2, -2), -2)]'
        - - expr: ([((-2), (-2)), ((-4), (-4))], [(-2), (-4)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4)]'
        - - expr: ([((-2), (-2)), ((-4), (-4))], [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4)]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4), ((15, 15), 15), ((-20, -20),
                -20)]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [(-2), (-4), (15)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4), ((15, 15), 15)]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [(-2)])
          - Right:
              expr: '[((-2, -2), -2)]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [(-2), (-4)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4)]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[((-2, -2), -2), ((-4, -4), -4), ((15, 15), 15), ((-20, -20),
                -20)]'
    - - - type: ([(,) Int Int], [[] Bool])
        - type: '[((,) Int Int, [] Bool)]'
      - - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [[True, False], [True]])
          - Right:
              expr: '[((-2, -2), [True, False]), ((-4, -4), [True])]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [[True, False]])
          - Right:
              expr: '[((-2, -2), [True, False])]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [[True, False], [True]])
          - Right:
              expr: '[((-2, -2), [True, False]), ((-4, -4), [True])]'
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15))], [[True, False]])
          - Right:
              expr: '[((-2, -2), [True, False])]'
        - - expr: ([((-2), (-2))], [[True, False], [True]])
          - Right:
              expr: '[((-2, -2), [True, False])]'
        - - expr: ([((-2), (-2))], [[True, False]])
          - Right:
              expr: '[((-2, -2), [True, False])]'
        - - expr: ([((-2), (-2)), ((-4), (-4))], [[True, False], [True]])
          - Right:
              expr: '[((-2, -2), [True, False]), ((-4, -4), [True])]'
        - - expr: ([((-2), (-2)), ((-4), (-4))], [[True, False]])
          - Right:
              expr: '[((-2, -2), [True, False])]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [[True, False], [True]])
          - Right:
              expr: '[((-2, -2), [True, False]), ((-4, -4), [True])]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [[True, False]])
          - Right:
              expr: '[((-2, -2), [True, False])]'
    - - - type: ([Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: ([(-2), (-4), (15), (-20), (-9)], [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[(-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)]'
        - - expr: ([(-2), (-4), (15), (-20), (-9)], [(-2), (-4), (15)])
          - Right:
              expr: '[(-2, -2), (-4, -4), (15, 15)]'
        - - expr: ([(-2), (-4), (15), (-20), (-9)], [(-2)])
          - Right:
              expr: '[(-2, -2)]'
        - - expr: ([(-2), (-4), (15), (-20), (-9)], [(-2), (-4)])
          - Right:
              expr: '[(-2, -2), (-4, -4)]'
        - - expr: ([(-2), (-4), (15), (-20), (-9)], [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[(-2, -2), (-4, -4), (15, 15), (-20, -20)]'
        - - expr: ([(-2), (-4), (15)], [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[(-2, -2), (-4, -4), (15, 15)]'
        - - expr: ([(-2), (-4), (15)], [(-2), (-4), (15)])
          - Right:
              expr: '[(-2, -2), (-4, -4), (15, 15)]'
        - - expr: ([(-2), (-4), (15)], [(-2)])
          - Right:
              expr: '[(-2, -2)]'
        - - expr: ([(-2), (-4), (15)], [(-2), (-4)])
          - Right:
              expr: '[(-2, -2), (-4, -4)]'
        - - expr: ([(-2), (-4), (15)], [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[(-2, -2), (-4, -4), (15, 15)]'
        - - expr: ([(-2)], [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[(-2, -2)]'
        - - expr: ([(-2)], [(-2), (-4), (15)])
          - Right:
              expr: '[(-2, -2)]'
        - - expr: ([(-2)], [(-2)])
          - Right:
              expr: '[(-2, -2)]'
        - - expr: ([(-2)], [(-2), (-4)])
          - Right:
              expr: '[(-2, -2)]'
        - - expr: ([(-2)], [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[(-2, -2)]'
        - - expr: ([(-2), (-4)], [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[(-2, -2), (-4, -4)]'
        - - expr: ([(-2), (-4)], [(-2), (-4), (15)])
          - Right:
              expr: '[(-2, -2), (-4, -4)]'
        - - expr: ([(-2), (-4)], [(-2)])
          - Right:
              expr: '[(-2, -2)]'
        - - expr: ([(-2), (-4)], [(-2), (-4)])
          - Right:
              expr: '[(-2, -2), (-4, -4)]'
        - - expr: ([(-2), (-4)], [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[(-2, -2), (-4, -4)]'
        - - expr: ([(-2), (-4), (15), (-20)], [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[(-2, -2), (-4, -4), (15, 15), (-20, -20)]'
        - - expr: ([(-2), (-4), (15), (-20)], [(-2), (-4), (15)])
          - Right:
              expr: '[(-2, -2), (-4, -4), (15, 15)]'
        - - expr: ([(-2), (-4), (15), (-20)], [(-2)])
          - Right:
              expr: '[(-2, -2)]'
        - - expr: ([(-2), (-4), (15), (-20)], [(-2), (-4)])
          - Right:
              expr: '[(-2, -2), (-4, -4)]'
        - - expr: ([(-2), (-4), (15), (-20)], [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[(-2, -2), (-4, -4), (15, 15), (-20, -20)]'
    - - - type: ([HashMap Char Bool], [HashMap Char Bool])
        - type: '[(HashMap Char Bool, HashMap Char Bool)]'
      - - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)],
                  fromList [('3', True), ('5', False)]),
                 (fromList [('3', True)], fromList [('3', True)])]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)],
                  fromList [('3', True), ('5', False)])]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)],
                  fromList [('3', True), ('5', False)])]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)],
                  fromList [('3', True), ('5', False)])]
    - - - type: ([[] Bool], [Int])
        - type: '[([] Bool, Int)]'
      - - - expr: ([[True, False], [True]], [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[([True, False], -2), ([True], -4)]'
        - - expr: ([[True, False], [True]], [(-2), (-4), (15)])
          - Right:
              expr: '[([True, False], -2), ([True], -4)]'
        - - expr: ([[True, False], [True]], [(-2)])
          - Right:
              expr: '[([True, False], -2)]'
        - - expr: ([[True, False], [True]], [(-2), (-4)])
          - Right:
              expr: '[([True, False], -2), ([True], -4)]'
        - - expr: ([[True, False], [True]], [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[([True, False], -2), ([True], -4)]'
        - - expr: ([[True, False]], [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[([True, False], -2)]'
        - - expr: ([[True, False]], [(-2), (-4), (15)])
          - Right:
              expr: '[([True, False], -2)]'
        - - expr: ([[True, False]], [(-2)])
          - Right:
              expr: '[([True, False], -2)]'
        - - expr: ([[True, False]], [(-2), (-4)])
          - Right:
              expr: '[([True, False], -2)]'
        - - expr: ([[True, False]], [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[([True, False], -2)]'
    - - - type: ([HashMap Char Bool], [[] Char])
        - type: '[(HashMap Char Bool, [] Char)]'
      - - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)], "3570"),
                 (fromList [('3', True)], "357")]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)], "3570"),
                 (fromList [('3', True)], "357")]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [['3', '5', '7', '0']])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], "3570")]'
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: |-
                [(fromList [('3', True), ('5', False)], "3570"),
                 (fromList [('3', True)], "357")]
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], "3570")]'
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], "3570")]'
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [['3', '5', '7', '0']])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], "3570")]'
        - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)]],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[(fromList [(''3'', True), (''5'', False)], "3570")]'
    - - - type: ([[] Char], [[] Char])
        - type: '[([] Char, [] Char)]'
      - - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[("3570", "3570"), ("357", "357"), ("3", "3"), ("35", "35")]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[("3570", "3570"), ("357", "357"), ("3", "3")]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [['3', '5', '7', '0']])
          - Right:
              expr: '[("3570", "3570")]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[("3570", "3570"), ("357", "357")]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[("3570", "3570"), ("357", "357"), ("3", "3")]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[("3570", "3570"), ("357", "357"), ("3", "3")]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [['3', '5', '7', '0']])
          - Right:
              expr: '[("3570", "3570")]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[("3570", "3570"), ("357", "357")]'
        - - expr: |-
              ([['3', '5', '7', '0']],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[("3570", "3570")]'
        - - expr: |-
              ([['3', '5', '7', '0']],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[("3570", "3570")]'
        - - expr: ([['3', '5', '7', '0']], [['3', '5', '7', '0']])
          - Right:
              expr: '[("3570", "3570")]'
        - - expr: ([['3', '5', '7', '0']], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[("3570", "3570")]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7']],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[("3570", "3570"), ("357", "357")]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7']],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[("3570", "3570"), ("357", "357")]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7']], [['3', '5', '7', '0']])
          - Right:
              expr: '[("3570", "3570")]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7']],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[("3570", "3570"), ("357", "357")]'
    - - - type: ([[] Char], [HashMap Char Bool])
        - type: '[([] Char, HashMap Char Bool)]'
      - - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [("3570", fromList [('3', True), ('5', False)]),
                 ("357", fromList [('3', True)])]
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[("3570", fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [("3570", fromList [('3', True), ('5', False)]),
                 ("357", fromList [('3', True)])]
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[("3570", fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([['3', '5', '7', '0']],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: '[("3570", fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([['3', '5', '7', '0']],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[("3570", fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7']],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [("3570", fromList [('3', True), ('5', False)]),
                 ("357", fromList [('3', True)])]
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7']],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[("3570", fromList [(''3'', True), (''5'', False)])]'
    - - - type: ([Int], [[] Char])
        - type: '[(Int, [] Char)]'
      - - - expr: |-
              ([(-2), (-4), (15), (-20), (-9)],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[(-2, "3570"), (-4, "357"), (15, "3"), (-20, "35")]'
        - - expr: |-
              ([(-2), (-4), (15), (-20), (-9)],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[(-2, "3570"), (-4, "357"), (15, "3")]'
        - - expr: ([(-2), (-4), (15), (-20), (-9)], [['3', '5', '7', '0']])
          - Right:
              expr: '[(-2, "3570")]'
        - - expr: |-
              ([(-2), (-4), (15), (-20), (-9)],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[(-2, "3570"), (-4, "357")]'
        - - expr: |-
              ([(-2), (-4), (15)],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[(-2, "3570"), (-4, "357"), (15, "3")]'
        - - expr: |-
              ([(-2), (-4), (15)],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[(-2, "3570"), (-4, "357"), (15, "3")]'
        - - expr: ([(-2), (-4), (15)], [['3', '5', '7', '0']])
          - Right:
              expr: '[(-2, "3570")]'
        - - expr: ([(-2), (-4), (15)], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[(-2, "3570"), (-4, "357")]'
        - - expr: |-
              ([(-2)],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[(-2, "3570")]'
        - - expr: ([(-2)], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[(-2, "3570")]'
        - - expr: ([(-2)], [['3', '5', '7', '0']])
          - Right:
              expr: '[(-2, "3570")]'
        - - expr: ([(-2)], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[(-2, "3570")]'
        - - expr: |-
              ([(-2), (-4)],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[(-2, "3570"), (-4, "357")]'
        - - expr: ([(-2), (-4)], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[(-2, "3570"), (-4, "357")]'
        - - expr: ([(-2), (-4)], [['3', '5', '7', '0']])
          - Right:
              expr: '[(-2, "3570")]'
        - - expr: ([(-2), (-4)], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[(-2, "3570"), (-4, "357")]'
        - - expr: |-
              ([(-2), (-4), (15), (-20)],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[(-2, "3570"), (-4, "357"), (15, "3"), (-20, "35")]'
        - - expr: |-
              ([(-2), (-4), (15), (-20)],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[(-2, "3570"), (-4, "357"), (15, "3")]'
        - - expr: ([(-2), (-4), (15), (-20)], [['3', '5', '7', '0']])
          - Right:
              expr: '[(-2, "3570")]'
        - - expr: |-
              ([(-2), (-4), (15), (-20)],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[(-2, "3570"), (-4, "357")]'
    - - - type: ([[] Char], [Int])
        - type: '[([] Char, Int)]'
      - - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[("3570", -2), ("357", -4), ("3", 15), ("35", -20)]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [(-2), (-4), (15)])
          - Right:
              expr: '[("3570", -2), ("357", -4), ("3", 15)]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [(-2)])
          - Right:
              expr: '[("3570", -2)]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [(-2), (-4)])
          - Right:
              expr: '[("3570", -2), ("357", -4)]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[("3570", -2), ("357", -4), ("3", 15), ("35", -20)]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[("3570", -2), ("357", -4), ("3", 15)]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [(-2), (-4), (15)])
          - Right:
              expr: '[("3570", -2), ("357", -4), ("3", 15)]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']], [(-2)])
          - Right:
              expr: '[("3570", -2)]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']], [(-2), (-4)])
          - Right:
              expr: '[("3570", -2), ("357", -4)]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[("3570", -2), ("357", -4), ("3", 15)]'
        - - expr: ([['3', '5', '7', '0']], [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[("3570", -2)]'
        - - expr: ([['3', '5', '7', '0']], [(-2), (-4), (15)])
          - Right:
              expr: '[("3570", -2)]'
        - - expr: ([['3', '5', '7', '0']], [(-2)])
          - Right:
              expr: '[("3570", -2)]'
        - - expr: ([['3', '5', '7', '0']], [(-2), (-4)])
          - Right:
              expr: '[("3570", -2)]'
        - - expr: ([['3', '5', '7', '0']], [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[("3570", -2)]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7']],
               [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[("3570", -2), ("357", -4)]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7']], [(-2), (-4), (15)])
          - Right:
              expr: '[("3570", -2), ("357", -4)]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7']], [(-2)])
          - Right:
              expr: '[("3570", -2)]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7']], [(-2), (-4)])
          - Right:
              expr: '[("3570", -2), ("357", -4)]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7']],
               [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[("3570", -2), ("357", -4)]'
    - - - type: ([[] Bool], [[] Char])
        - type: '[([] Bool, [] Char)]'
      - - - expr: |-
              ([[True, False], [True]],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[([True, False], "3570"), ([True], "357")]'
        - - expr: |-
              ([[True, False], [True]],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[([True, False], "3570"), ([True], "357")]'
        - - expr: ([[True, False], [True]], [['3', '5', '7', '0']])
          - Right:
              expr: '[([True, False], "3570")]'
        - - expr: ([[True, False], [True]], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[([True, False], "3570"), ([True], "357")]'
        - - expr: |-
              ([[True, False]],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[([True, False], "3570")]'
        - - expr: ([[True, False]], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[([True, False], "3570")]'
        - - expr: ([[True, False]], [['3', '5', '7', '0']])
          - Right:
              expr: '[([True, False], "3570")]'
        - - expr: ([[True, False]], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[([True, False], "3570")]'
    - - - type: ([[] Bool], [(,) Int Int])
        - type: '[([] Bool, (,) Int Int)]'
      - - - expr: |-
              ([[True, False], [True]],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[([True, False], (-2, -2)), ([True], (-4, -4))]'
        - - expr: |-
              ([[True, False], [True]],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[([True, False], (-2, -2)), ([True], (-4, -4))]'
        - - expr: ([[True, False], [True]], [((-2), (-2))])
          - Right:
              expr: '[([True, False], (-2, -2))]'
        - - expr: ([[True, False], [True]], [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[([True, False], (-2, -2)), ([True], (-4, -4))]'
        - - expr: |-
              ([[True, False], [True]],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[([True, False], (-2, -2)), ([True], (-4, -4))]'
        - - expr: |-
              ([[True, False]],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[([True, False], (-2, -2))]'
        - - expr: ([[True, False]], [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[([True, False], (-2, -2))]'
        - - expr: ([[True, False]], [((-2), (-2))])
          - Right:
              expr: '[([True, False], (-2, -2))]'
        - - expr: ([[True, False]], [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[([True, False], (-2, -2))]'
        - - expr: |-
              ([[True, False]],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[([True, False], (-2, -2))]'
    - - - type: ([(,) Int Int], [HashMap Char Bool])
        - type: '[((,) Int Int, HashMap Char Bool)]'
      - - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [((-2, -2), fromList [('3', True), ('5', False)]),
                 ((-4, -4), fromList [('3', True)])]
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[((-2, -2), fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [((-2, -2), fromList [('3', True), ('5', False)]),
                 ((-4, -4), fromList [('3', True)])]
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[((-2, -2), fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([((-2), (-2))],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: '[((-2, -2), fromList [(''3'', True), (''5'', False)])]'
        - - expr: ([((-2), (-2))], [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[((-2, -2), fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4))],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [((-2, -2), fromList [('3', True), ('5', False)]),
                 ((-4, -4), fromList [('3', True)])]
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4))],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[((-2, -2), fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [((-2, -2), fromList [('3', True), ('5', False)]),
                 ((-4, -4), fromList [('3', True)])]
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[((-2, -2), fromList [(''3'', True), (''5'', False)])]'
    - - - type: ([(,) Int Int], [(,) Int Int])
        - type: '[((,) Int Int, (,) Int Int)]'
      - - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: |-
                [((-2, -2), (-2, -2)), ((-4, -4), (-4, -4)), ((15, 15), (15, 15)),
                 ((-20, -20), (-20, -20)), ((-9, -9), (-9, -9))]
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[((-2, -2), (-2, -2)), ((-4, -4), (-4, -4)), ((15, 15), (15,
                15))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [((-2), (-2))])
          - Right:
              expr: '[((-2, -2), (-2, -2))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[((-2, -2), (-2, -2)), ((-4, -4), (-4, -4))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: |-
                [((-2, -2), (-2, -2)), ((-4, -4), (-4, -4)), ((15, 15), (15, 15)),
                 ((-20, -20), (-20, -20))]
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[((-2, -2), (-2, -2)), ((-4, -4), (-4, -4)), ((15, 15), (15,
                15))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[((-2, -2), (-2, -2)), ((-4, -4), (-4, -4)), ((15, 15), (15,
                15))]'
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15))], [((-2), (-2))])
          - Right:
              expr: '[((-2, -2), (-2, -2))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[((-2, -2), (-2, -2)), ((-4, -4), (-4, -4))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[((-2, -2), (-2, -2)), ((-4, -4), (-4, -4)), ((15, 15), (15,
                15))]'
        - - expr: |-
              ([((-2), (-2))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[((-2, -2), (-2, -2))]'
        - - expr: ([((-2), (-2))], [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[((-2, -2), (-2, -2))]'
        - - expr: ([((-2), (-2))], [((-2), (-2))])
          - Right:
              expr: '[((-2, -2), (-2, -2))]'
        - - expr: ([((-2), (-2))], [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[((-2, -2), (-2, -2))]'
        - - expr: |-
              ([((-2), (-2))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[((-2, -2), (-2, -2))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[((-2, -2), (-2, -2)), ((-4, -4), (-4, -4))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[((-2, -2), (-2, -2)), ((-4, -4), (-4, -4))]'
        - - expr: ([((-2), (-2)), ((-4), (-4))], [((-2), (-2))])
          - Right:
              expr: '[((-2, -2), (-2, -2))]'
        - - expr: ([((-2), (-2)), ((-4), (-4))], [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[((-2, -2), (-2, -2)), ((-4, -4), (-4, -4))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[((-2, -2), (-2, -2)), ((-4, -4), (-4, -4))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: |-
                [((-2, -2), (-2, -2)), ((-4, -4), (-4, -4)), ((15, 15), (15, 15)),
                 ((-20, -20), (-20, -20))]
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[((-2, -2), (-2, -2)), ((-4, -4), (-4, -4)), ((15, 15), (15,
                15))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [((-2), (-2))])
          - Right:
              expr: '[((-2, -2), (-2, -2))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[((-2, -2), (-2, -2)), ((-4, -4), (-4, -4))]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: |-
                [((-2, -2), (-2, -2)), ((-4, -4), (-4, -4)), ((15, 15), (15, 15)),
                 ((-20, -20), (-20, -20))]
    - - - type: ([[] Char], [(,) Int Int])
        - type: '[([] Char, (,) Int Int)]'
      - - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: |-
                [("3570", (-2, -2)), ("357", (-4, -4)), ("3", (15, 15)),
                 ("35", (-20, -20))]
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[("3570", (-2, -2)), ("357", (-4, -4)), ("3", (15, 15))]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [((-2), (-2))])
          - Right:
              expr: '[("3570", (-2, -2))]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[("3570", (-2, -2)), ("357", (-4, -4))]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: |-
                [("3570", (-2, -2)), ("357", (-4, -4)), ("3", (15, 15)),
                 ("35", (-20, -20))]
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[("3570", (-2, -2)), ("357", (-4, -4)), ("3", (15, 15))]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[("3570", (-2, -2)), ("357", (-4, -4)), ("3", (15, 15))]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']], [((-2), (-2))])
          - Right:
              expr: '[("3570", (-2, -2))]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[("3570", (-2, -2)), ("357", (-4, -4))]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[("3570", (-2, -2)), ("357", (-4, -4)), ("3", (15, 15))]'
        - - expr: |-
              ([['3', '5', '7', '0']],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[("3570", (-2, -2))]'
        - - expr: |-
              ([['3', '5', '7', '0']],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[("3570", (-2, -2))]'
        - - expr: ([['3', '5', '7', '0']], [((-2), (-2))])
          - Right:
              expr: '[("3570", (-2, -2))]'
        - - expr: ([['3', '5', '7', '0']], [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[("3570", (-2, -2))]'
        - - expr: |-
              ([['3', '5', '7', '0']],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[("3570", (-2, -2))]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7']],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[("3570", (-2, -2)), ("357", (-4, -4))]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7']],
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[("3570", (-2, -2)), ("357", (-4, -4))]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7']], [((-2), (-2))])
          - Right:
              expr: '[("3570", (-2, -2))]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7']],
               [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[("3570", (-2, -2)), ("357", (-4, -4))]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7']],
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[("3570", (-2, -2)), ("357", (-4, -4))]'
    - - - type: ([Int], [[] Bool])
        - type: '[(Int, [] Bool)]'
      - - - expr: ([(-2), (-4), (15), (-20), (-9)], [[True, False], [True]])
          - Right:
              expr: '[(-2, [True, False]), (-4, [True])]'
        - - expr: ([(-2), (-4), (15), (-20), (-9)], [[True, False]])
          - Right:
              expr: '[(-2, [True, False])]'
        - - expr: ([(-2), (-4), (15)], [[True, False], [True]])
          - Right:
              expr: '[(-2, [True, False]), (-4, [True])]'
        - - expr: ([(-2), (-4), (15)], [[True, False]])
          - Right:
              expr: '[(-2, [True, False])]'
        - - expr: ([(-2)], [[True, False], [True]])
          - Right:
              expr: '[(-2, [True, False])]'
        - - expr: ([(-2)], [[True, False]])
          - Right:
              expr: '[(-2, [True, False])]'
        - - expr: ([(-2), (-4)], [[True, False], [True]])
          - Right:
              expr: '[(-2, [True, False]), (-4, [True])]'
        - - expr: ([(-2), (-4)], [[True, False]])
          - Right:
              expr: '[(-2, [True, False])]'
        - - expr: ([(-2), (-4), (15), (-20)], [[True, False], [True]])
          - Right:
              expr: '[(-2, [True, False]), (-4, [True])]'
        - - expr: ([(-2), (-4), (15), (-20)], [[True, False]])
          - Right:
              expr: '[(-2, [True, False])]'
    - - - type: ([[] Bool], [HashMap Char Bool])
        - type: '[([] Bool, HashMap Char Bool)]'
      - - - expr: |-
              ([[True, False], [True]],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [([True, False], fromList [('3', True), ('5', False)]),
                 ([True], fromList [('3', True)])]
        - - expr: |-
              ([[True, False], [True]],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[([True, False], fromList [(''3'', True), (''5'', False)])]'
        - - expr: |-
              ([[True, False]],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: '[([True, False], fromList [(''3'', True), (''5'', False)])]'
        - - expr: ([[True, False]], [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[([True, False], fromList [(''3'', True), (''5'', False)])]'
    - - - type: ([(,) Int Int], [[] Char])
        - type: '[((,) Int Int, [] Char)]'
      - - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: |-
                [((-2, -2), "3570"), ((-4, -4), "357"), ((15, 15), "3"),
                 ((-20, -20), "35")]
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[((-2, -2), "3570"), ((-4, -4), "357"), ((15, 15), "3")]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [['3', '5', '7', '0']])
          - Right:
              expr: '[((-2, -2), "3570")]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[((-2, -2), "3570"), ((-4, -4), "357")]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[((-2, -2), "3570"), ((-4, -4), "357"), ((15, 15), "3")]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[((-2, -2), "3570"), ((-4, -4), "357"), ((15, 15), "3")]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [['3', '5', '7', '0']])
          - Right:
              expr: '[((-2, -2), "3570")]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15))],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[((-2, -2), "3570"), ((-4, -4), "357")]'
        - - expr: |-
              ([((-2), (-2))],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[((-2, -2), "3570")]'
        - - expr: ([((-2), (-2))], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[((-2, -2), "3570")]'
        - - expr: ([((-2), (-2))], [['3', '5', '7', '0']])
          - Right:
              expr: '[((-2, -2), "3570")]'
        - - expr: ([((-2), (-2))], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[((-2, -2), "3570")]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4))],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[((-2, -2), "3570"), ((-4, -4), "357")]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4))],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[((-2, -2), "3570"), ((-4, -4), "357")]'
        - - expr: ([((-2), (-2)), ((-4), (-4))], [['3', '5', '7', '0']])
          - Right:
              expr: '[((-2, -2), "3570")]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4))],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[((-2, -2), "3570"), ((-4, -4), "357")]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: |-
                [((-2, -2), "3570"), ((-4, -4), "357"), ((15, 15), "3"),
                 ((-20, -20), "35")]
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[((-2, -2), "3570"), ((-4, -4), "357"), ((15, 15), "3")]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [['3', '5', '7', '0']])
          - Right:
              expr: '[((-2, -2), "3570")]'
        - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[((-2, -2), "3570"), ((-4, -4), "357")]'
    - - - type: ([[] Char], [[] Bool])
        - type: '[([] Char, [] Bool)]'
      - - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [[True, False], [True]])
          - Right:
              expr: '[("3570", [True, False]), ("357", [True])]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']],
               [[True, False]])
          - Right:
              expr: '[("3570", [True, False])]'
        - - expr: |-
              ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']],
               [[True, False], [True]])
          - Right:
              expr: '[("3570", [True, False]), ("357", [True])]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']], [[True, False]])
          - Right:
              expr: '[("3570", [True, False])]'
        - - expr: ([['3', '5', '7', '0']], [[True, False], [True]])
          - Right:
              expr: '[("3570", [True, False])]'
        - - expr: ([['3', '5', '7', '0']], [[True, False]])
          - Right:
              expr: '[("3570", [True, False])]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7']], [[True, False], [True]])
          - Right:
              expr: '[("3570", [True, False]), ("357", [True])]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7']], [[True, False]])
          - Right:
              expr: '[("3570", [True, False])]'
- - expr: unzip
  - - - - type: '[([] Char, [] Char)]'
        - type: ([[] Char], [[] Char])
      - - - expr: |-
              ([(['3', '5', '7', '0'], ['3', '5', '7', '0']),
                (['3', '5', '7'], ['3', '5', '7']), (['3'], ['3']),
                (['3', '5'], ['3', '5'])])
          - Right:
              expr: (["3570", "357", "3", "35"], ["3570", "357", "3", "35"])
        - - expr: |-
              ([(['3', '5', '7', '0'], ['3', '5', '7', '0']),
                (['3', '5', '7'], ['3', '5', '7']), (['3'], ['3'])])
          - Right:
              expr: (["3570", "357", "3"], ["3570", "357", "3"])
        - - expr: ([(['3', '5', '7', '0'], ['3', '5', '7', '0'])])
          - Right:
              expr: (["3570"], ["3570"])
        - - expr: |-
              ([(['3', '5', '7', '0'], ['3', '5', '7', '0']),
                (['3', '5', '7'], ['3', '5', '7'])])
          - Right:
              expr: (["3570", "357"], ["3570", "357"])
    - - - type: '[([] Bool, (,) Int Int)]'
        - type: ([[] Bool], [(,) Int Int])
      - - - expr: ([([True, False], ((-2), (-2))), ([True], ((-4), (-4)))])
          - Right:
              expr: ([[True, False], [True]], [(-2, -2), (-4, -4)])
        - - expr: ([([True, False], ((-2), (-2)))])
          - Right:
              expr: ([[True, False]], [(-2, -2)])
    - - - type: '[([] Bool, HashMap Char Bool)]'
        - type: ([[] Bool], [HashMap Char Bool])
      - - - expr: |-
              ([([True, False], HashMap.fromList [('3', True), ('5', False)]),
                ([True], HashMap.fromList [('3', True)])])
          - Right:
              expr: |-
                ([[True, False], [True]],
                 [fromList [('3', True), ('5', False)], fromList [('3', True)]])
        - - expr: ([([True, False], HashMap.fromList [('3', True), ('5', False)])])
          - Right:
              expr: ([[True, False]], [fromList [('3', True), ('5', False)]])
    - - - type: '[(HashMap Char Bool, HashMap Char Bool)]'
        - type: ([HashMap Char Bool], [HashMap Char Bool])
      - - - expr: |-
              ([(HashMap.fromList [('3', True), ('5', False)],
                 HashMap.fromList [('3', True), ('5', False)]),
                (HashMap.fromList [('3', True)], HashMap.fromList [('3', True)])])
          - Right:
              expr: |-
                ([fromList [('3', True), ('5', False)], fromList [('3', True)]],
                 [fromList [('3', True), ('5', False)], fromList [('3', True)]])
        - - expr: |-
              ([(HashMap.fromList [('3', True), ('5', False)],
                 HashMap.fromList [('3', True), ('5', False)])])
          - Right:
              expr: |-
                ([fromList [('3', True), ('5', False)]],
                 [fromList [('3', True), ('5', False)]])
    - - - type: '[((,) Int Int, [] Bool)]'
        - type: ([(,) Int Int], [[] Bool])
      - - - expr: ([(((-2), (-2)), [True, False]), (((-4), (-4)), [True])])
          - Right:
              expr: ([(-2, -2), (-4, -4)], [[True, False], [True]])
        - - expr: ([(((-2), (-2)), [True, False])])
          - Right:
              expr: ([(-2, -2)], [[True, False]])
    - - - type: '[([] Char, HashMap Char Bool)]'
        - type: ([[] Char], [HashMap Char Bool])
      - - - expr: |-
              ([(['3', '5', '7', '0'],
                 HashMap.fromList [('3', True), ('5', False)]),
                (['3', '5', '7'], HashMap.fromList [('3', True)])])
          - Right:
              expr: |-
                (["3570", "357"],
                 [fromList [('3', True), ('5', False)], fromList [('3', True)]])
        - - expr: |-
              ([(['3', '5', '7', '0'],
                 HashMap.fromList [('3', True), ('5', False)])])
          - Right:
              expr: (["3570"], [fromList [('3', True), ('5', False)]])
    - - - type: '[([] Bool, [] Bool)]'
        - type: ([[] Bool], [[] Bool])
      - - - expr: ([([True, False], [True, False]), ([True], [True])])
          - Right:
              expr: ([[True, False], [True]], [[True, False], [True]])
        - - expr: ([([True, False], [True, False])])
          - Right:
              expr: ([[True, False]], [[True, False]])
    - - - type: '[(HashMap Char Bool, [] Bool)]'
        - type: ([HashMap Char Bool], [[] Bool])
      - - - expr: |-
              ([(HashMap.fromList [('3', True), ('5', False)], [True, False]),
                (HashMap.fromList [('3', True)], [True])])
          - Right:
              expr: |-
                ([fromList [('3', True), ('5', False)], fromList [('3', True)]],
                 [[True, False], [True]])
        - - expr: ([(HashMap.fromList [('3', True), ('5', False)], [True, False])])
          - Right:
              expr: ([fromList [('3', True), ('5', False)]], [[True, False]])
    - - - type: '[(HashMap Char Bool, Int)]'
        - type: ([HashMap Char Bool], [Int])
      - - - expr: |-
              ([(HashMap.fromList [('3', True), ('5', False)], (-2)),
                (HashMap.fromList [('3', True)], (-4))])
          - Right:
              expr: |-
                ([fromList [('3', True), ('5', False)], fromList [('3', True)]],
                 [-2, -4])
        - - expr: ([(HashMap.fromList [('3', True), ('5', False)], (-2))])
          - Right:
              expr: ([fromList [('3', True), ('5', False)]], [-2])
    - - - type: '[(Int, [] Char)]'
        - type: ([Int], [[] Char])
      - - - expr: |-
              ([((-2), ['3', '5', '7', '0']), ((-4), ['3', '5', '7']),
                ((15), ['3']), ((-20), ['3', '5'])])
          - Right:
              expr: ([-2, -4, 15, -20], ["3570", "357", "3", "35"])
        - - expr: |-
              ([((-2), ['3', '5', '7', '0']), ((-4), ['3', '5', '7']),
                ((15), ['3'])])
          - Right:
              expr: ([-2, -4, 15], ["3570", "357", "3"])
        - - expr: ([((-2), ['3', '5', '7', '0'])])
          - Right:
              expr: ([-2], ["3570"])
        - - expr: ([((-2), ['3', '5', '7', '0']), ((-4), ['3', '5', '7'])])
          - Right:
              expr: ([-2, -4], ["3570", "357"])
    - - - type: '[(Int, Int)]'
        - type: ([Int], [Int])
      - - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: ([-2, -4, 15, -20, -9], [-2, -4, 15, -20, -9])
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: ([-2, -4, 15], [-2, -4, 15])
        - - expr: ([((-2), (-2))])
          - Right:
              expr: ([-2], [-2])
        - - expr: ([((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: ([-2, -4], [-2, -4])
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: ([-2, -4, 15, -20], [-2, -4, 15, -20])
    - - - type: '[(HashMap Char Bool, (,) Int Int)]'
        - type: ([HashMap Char Bool], [(,) Int Int])
      - - - expr: |-
              ([(HashMap.fromList [('3', True), ('5', False)], ((-2), (-2))),
                (HashMap.fromList [('3', True)], ((-4), (-4)))])
          - Right:
              expr: |-
                ([fromList [('3', True), ('5', False)], fromList [('3', True)]],
                 [(-2, -2), (-4, -4)])
        - - expr: ([(HashMap.fromList [('3', True), ('5', False)], ((-2), (-2)))])
          - Right:
              expr: ([fromList [('3', True), ('5', False)]], [(-2, -2)])
    - - - type: '[([] Char, (,) Int Int)]'
        - type: ([[] Char], [(,) Int Int])
      - - - expr: |-
              ([(['3', '5', '7', '0'], ((-2), (-2))),
                (['3', '5', '7'], ((-4), (-4))), (['3'], ((15), (15))),
                (['3', '5'], ((-20), (-20)))])
          - Right:
              expr: |-
                (["3570", "357", "3", "35"],
                 [(-2, -2), (-4, -4), (15, 15), (-20, -20)])
        - - expr: |-
              ([(['3', '5', '7', '0'], ((-2), (-2))),
                (['3', '5', '7'], ((-4), (-4))), (['3'], ((15), (15)))])
          - Right:
              expr: (["3570", "357", "3"], [(-2, -2), (-4, -4), (15, 15)])
        - - expr: ([(['3', '5', '7', '0'], ((-2), (-2)))])
          - Right:
              expr: (["3570"], [(-2, -2)])
        - - expr: |-
              ([(['3', '5', '7', '0'], ((-2), (-2))),
                (['3', '5', '7'], ((-4), (-4)))])
          - Right:
              expr: (["3570", "357"], [(-2, -2), (-4, -4)])
    - - - type: '[(Int, [] Bool)]'
        - type: ([Int], [[] Bool])
      - - - expr: ([((-2), [True, False]), ((-4), [True])])
          - Right:
              expr: ([-2, -4], [[True, False], [True]])
        - - expr: ([((-2), [True, False])])
          - Right:
              expr: ([-2], [[True, False]])
    - - - type: '[((,) Int Int, Int)]'
        - type: ([(,) Int Int], [Int])
      - - - expr: |-
              ([(((-2), (-2)), (-2)), (((-4), (-4)), (-4)), (((15), (15)), (15)),
                (((-20), (-20)), (-20)), (((-9), (-9)), (-9))])
          - Right:
              expr: |-
                ([(-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)],
                 [-2, -4, 15, -20, -9])
        - - expr: |-
              ([(((-2), (-2)), (-2)), (((-4), (-4)), (-4)),
                (((15), (15)), (15))])
          - Right:
              expr: ([(-2, -2), (-4, -4), (15, 15)], [-2, -4, 15])
        - - expr: ([(((-2), (-2)), (-2))])
          - Right:
              expr: ([(-2, -2)], [-2])
        - - expr: ([(((-2), (-2)), (-2)), (((-4), (-4)), (-4))])
          - Right:
              expr: ([(-2, -2), (-4, -4)], [-2, -4])
        - - expr: |-
              ([(((-2), (-2)), (-2)), (((-4), (-4)), (-4)), (((15), (15)), (15)),
                (((-20), (-20)), (-20))])
          - Right:
              expr: ([(-2, -2), (-4, -4), (15, 15), (-20, -20)], [-2, -4, 15, -20])
    - - - type: '[([] Char, [] Bool)]'
        - type: ([[] Char], [[] Bool])
      - - - expr: |-
              ([(['3', '5', '7', '0'], [True, False]),
                (['3', '5', '7'], [True])])
          - Right:
              expr: (["3570", "357"], [[True, False], [True]])
        - - expr: ([(['3', '5', '7', '0'], [True, False])])
          - Right:
              expr: (["3570"], [[True, False]])
    - - - type: '[(Int, HashMap Char Bool)]'
        - type: ([Int], [HashMap Char Bool])
      - - - expr: |-
              ([((-2), HashMap.fromList [('3', True), ('5', False)]),
                ((-4), HashMap.fromList [('3', True)])])
          - Right:
              expr: |-
                ([-2, -4],
                 [fromList [('3', True), ('5', False)], fromList [('3', True)]])
        - - expr: ([((-2), HashMap.fromList [('3', True), ('5', False)])])
          - Right:
              expr: ([-2], [fromList [('3', True), ('5', False)]])
    - - - type: '[(HashMap Char Bool, [] Char)]'
        - type: ([HashMap Char Bool], [[] Char])
      - - - expr: |-
              ([(HashMap.fromList [('3', True), ('5', False)],
                 ['3', '5', '7', '0']),
                (HashMap.fromList [('3', True)], ['3', '5', '7'])])
          - Right:
              expr: |-
                ([fromList [('3', True), ('5', False)], fromList [('3', True)]],
                 ["3570", "357"])
        - - expr: |-
              ([(HashMap.fromList [('3', True), ('5', False)],
                 ['3', '5', '7', '0'])])
          - Right:
              expr: ([fromList [('3', True), ('5', False)]], ["3570"])
    - - - type: '[(Int, (,) Int Int)]'
        - type: ([Int], [(,) Int Int])
      - - - expr: |-
              ([((-2), ((-2), (-2))), ((-4), ((-4), (-4))), ((15), ((15), (15))),
                ((-20), ((-20), (-20))), ((-9), ((-9), (-9)))])
          - Right:
              expr: |-
                ([-2, -4, 15, -20, -9],
                 [(-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)])
        - - expr: |-
              ([((-2), ((-2), (-2))), ((-4), ((-4), (-4))),
                ((15), ((15), (15)))])
          - Right:
              expr: ([-2, -4, 15], [(-2, -2), (-4, -4), (15, 15)])
        - - expr: ([((-2), ((-2), (-2)))])
          - Right:
              expr: ([-2], [(-2, -2)])
        - - expr: ([((-2), ((-2), (-2))), ((-4), ((-4), (-4)))])
          - Right:
              expr: ([-2, -4], [(-2, -2), (-4, -4)])
        - - expr: |-
              ([((-2), ((-2), (-2))), ((-4), ((-4), (-4))), ((15), ((15), (15))),
                ((-20), ((-20), (-20)))])
          - Right:
              expr: ([-2, -4, 15, -20], [(-2, -2), (-4, -4), (15, 15), (-20, -20)])
    - - - type: '[([] Bool, Int)]'
        - type: ([[] Bool], [Int])
      - - - expr: ([([True, False], (-2)), ([True], (-4))])
          - Right:
              expr: ([[True, False], [True]], [-2, -4])
        - - expr: ([([True, False], (-2))])
          - Right:
              expr: ([[True, False]], [-2])
    - - - type: '[((,) Int Int, (,) Int Int)]'
        - type: ([(,) Int Int], [(,) Int Int])
      - - - expr: |-
              ([(((-2), (-2)), ((-2), (-2))), (((-4), (-4)), ((-4), (-4))),
                (((15), (15)), ((15), (15))), (((-20), (-20)), ((-20), (-20))),
                (((-9), (-9)), ((-9), (-9)))])
          - Right:
              expr: |-
                ([(-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)],
                 [(-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)])
        - - expr: |-
              ([(((-2), (-2)), ((-2), (-2))), (((-4), (-4)), ((-4), (-4))),
                (((15), (15)), ((15), (15)))])
          - Right:
              expr: ([(-2, -2), (-4, -4), (15, 15)], [(-2, -2), (-4, -4), (15, 15)])
        - - expr: ([(((-2), (-2)), ((-2), (-2)))])
          - Right:
              expr: ([(-2, -2)], [(-2, -2)])
        - - expr: ([(((-2), (-2)), ((-2), (-2))), (((-4), (-4)), ((-4), (-4)))])
          - Right:
              expr: ([(-2, -2), (-4, -4)], [(-2, -2), (-4, -4)])
        - - expr: |-
              ([(((-2), (-2)), ((-2), (-2))), (((-4), (-4)), ((-4), (-4))),
                (((15), (15)), ((15), (15))), (((-20), (-20)), ((-20), (-20)))])
          - Right:
              expr: |-
                ([(-2, -2), (-4, -4), (15, 15), (-20, -20)],
                 [(-2, -2), (-4, -4), (15, 15), (-20, -20)])
    - - - type: '[((,) Int Int, HashMap Char Bool)]'
        - type: ([(,) Int Int], [HashMap Char Bool])
      - - - expr: |-
              ([(((-2), (-2)), HashMap.fromList [('3', True), ('5', False)]),
                (((-4), (-4)), HashMap.fromList [('3', True)])])
          - Right:
              expr: |-
                ([(-2, -2), (-4, -4)],
                 [fromList [('3', True), ('5', False)], fromList [('3', True)]])
        - - expr: ([(((-2), (-2)), HashMap.fromList [('3', True), ('5', False)])])
          - Right:
              expr: ([(-2, -2)], [fromList [('3', True), ('5', False)]])
    - - - type: '[((,) Int Int, [] Char)]'
        - type: ([(,) Int Int], [[] Char])
      - - - expr: |-
              ([(((-2), (-2)), ['3', '5', '7', '0']),
                (((-4), (-4)), ['3', '5', '7']), (((15), (15)), ['3']),
                (((-20), (-20)), ['3', '5'])])
          - Right:
              expr: |-
                ([(-2, -2), (-4, -4), (15, 15), (-20, -20)],
                 ["3570", "357", "3", "35"])
        - - expr: |-
              ([(((-2), (-2)), ['3', '5', '7', '0']),
                (((-4), (-4)), ['3', '5', '7']), (((15), (15)), ['3'])])
          - Right:
              expr: ([(-2, -2), (-4, -4), (15, 15)], ["3570", "357", "3"])
        - - expr: ([(((-2), (-2)), ['3', '5', '7', '0'])])
          - Right:
              expr: ([(-2, -2)], ["3570"])
        - - expr: |-
              ([(((-2), (-2)), ['3', '5', '7', '0']),
                (((-4), (-4)), ['3', '5', '7'])])
          - Right:
              expr: ([(-2, -2), (-4, -4)], ["3570", "357"])
    - - - type: '[([] Char, Int)]'
        - type: ([[] Char], [Int])
      - - - expr: |-
              ([(['3', '5', '7', '0'], (-2)), (['3', '5', '7'], (-4)),
                (['3'], (15)), (['3', '5'], (-20))])
          - Right:
              expr: (["3570", "357", "3", "35"], [-2, -4, 15, -20])
        - - expr: |-
              ([(['3', '5', '7', '0'], (-2)), (['3', '5', '7'], (-4)),
                (['3'], (15))])
          - Right:
              expr: (["3570", "357", "3"], [-2, -4, 15])
        - - expr: ([(['3', '5', '7', '0'], (-2))])
          - Right:
              expr: (["3570"], [-2])
        - - expr: ([(['3', '5', '7', '0'], (-2)), (['3', '5', '7'], (-4))])
          - Right:
              expr: (["3570", "357"], [-2, -4])
    - - - type: '[([] Bool, [] Char)]'
        - type: ([[] Bool], [[] Char])
      - - - expr: |-
              ([([True, False], ['3', '5', '7', '0']),
                ([True], ['3', '5', '7'])])
          - Right:
              expr: ([[True, False], [True]], ["3570", "357"])
        - - expr: ([([True, False], ['3', '5', '7', '0'])])
          - Right:
              expr: ([[True, False]], ["3570"])
- - expr: succ
  - - - - type: Int
        - type: Int
      - - - expr: ((-2))
          - Right:
              expr: (-1)
        - - expr: ((-4))
          - Right:
              expr: (-3)
        - - expr: ((15))
          - Right:
              expr: '16'
        - - expr: ((-20))
          - Right:
              expr: (-19)
        - - expr: ((-9))
          - Right:
              expr: (-8)
        - - expr: ((-5))
          - Right:
              expr: (-4)
        - - expr: ((-11))
          - Right:
              expr: (-10)
        - - expr: ((11))
          - Right:
              expr: '12'
        - - expr: ((-7))
          - Right:
              expr: (-6)
- - expr: let conc = (<>) in conc
  - - - - type: (HashMap Char Bool, HashMap Char Bool)
        - type: HashMap Char Bool
      - - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               HashMap.fromList [('3', True)])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (HashMap.fromList [('3', True)],
               HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True)], HashMap.fromList [('3', True)])
          - Right:
              expr: (fromList [('3', True)])
    - - - type: ([] Bool, [] Bool)
        - type: '[] Bool'
      - - - expr: ([True, False], [True, False])
          - Right:
              expr: '[True, False, True, False]'
        - - expr: ([True, False], [True])
          - Right:
              expr: '[True, False, True]'
        - - expr: ([True], [True, False])
          - Right:
              expr: '[True, True, False]'
        - - expr: ([True], [True])
          - Right:
              expr: '[True, True]'
    - - - type: ([] Char, [] Char)
        - type: '[] Char'
      - - - expr: (['3', '5', '7', '0'], ['3', '5', '7', '0'])
          - Right:
              expr: '"35703570"'
        - - expr: (['3', '5', '7', '0'], ['3', '5', '7'])
          - Right:
              expr: '"3570357"'
        - - expr: (['3', '5', '7', '0'], ['3'])
          - Right:
              expr: '"35703"'
        - - expr: (['3', '5', '7', '0'], ['3', '5'])
          - Right:
              expr: '"357035"'
        - - expr: (['3', '5', '7'], ['3', '5', '7', '0'])
          - Right:
              expr: '"3573570"'
        - - expr: (['3', '5', '7'], ['3', '5', '7'])
          - Right:
              expr: '"357357"'
        - - expr: (['3', '5', '7'], ['3'])
          - Right:
              expr: '"3573"'
        - - expr: (['3', '5', '7'], ['3', '5'])
          - Right:
              expr: '"35735"'
        - - expr: (['3'], ['3', '5', '7', '0'])
          - Right:
              expr: '"33570"'
        - - expr: (['3'], ['3', '5', '7'])
          - Right:
              expr: '"3357"'
        - - expr: (['3'], ['3'])
          - Right:
              expr: '"33"'
        - - expr: (['3'], ['3', '5'])
          - Right:
              expr: '"335"'
        - - expr: (['3', '5'], ['3', '5', '7', '0'])
          - Right:
              expr: '"353570"'
        - - expr: (['3', '5'], ['3', '5', '7'])
          - Right:
              expr: '"35357"'
        - - expr: (['3', '5'], ['3'])
          - Right:
              expr: '"353"'
        - - expr: (['3', '5'], ['3', '5'])
          - Right:
              expr: '"3535"'
- - expr: 'null'
  - - - - type: '[] ([] Bool)'
        - type: Bool
      - - - expr: ([[True, False], [True]])
          - Right:
              expr: 'False'
        - - expr: ([[True, False]])
          - Right:
              expr: 'False'
    - - - type: Maybe ([] Bool)
        - type: Bool
      - - - expr: (Just [True, False])
          - Right:
              expr: 'False'
        - - expr: (Just [True])
          - Right:
              expr: 'False'
    - - - type: Maybe Int
        - type: Bool
      - - - expr: (Just (-2))
          - Right:
              expr: 'False'
        - - expr: (Just (-4))
          - Right:
              expr: 'False'
        - - expr: (Just (15))
          - Right:
              expr: 'False'
        - - expr: (Nothing)
          - Right:
              expr: 'True'
        - - expr: (Just (11))
          - Right:
              expr: 'False'
    - - - type: '[] Int'
        - type: Bool
      - - - expr: ([(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: 'False'
        - - expr: ([(-2), (-4), (15)])
          - Right:
              expr: 'False'
        - - expr: ([(-2)])
          - Right:
              expr: 'False'
        - - expr: ([(-2), (-4)])
          - Right:
              expr: 'False'
        - - expr: ([(-2), (-4), (15), (-20)])
          - Right:
              expr: 'False'
    - - - type: '[] ([] Char)'
        - type: Bool
      - - - expr: ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: 'False'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: 'False'
        - - expr: ([['3', '5', '7', '0']])
          - Right:
              expr: 'False'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: 'False'
    - - - type: Maybe ([] Char)
        - type: Bool
      - - - expr: (Just ['3', '5', '7', '0'])
          - Right:
              expr: 'False'
        - - expr: (Just ['3', '5', '7'])
          - Right:
              expr: 'False'
        - - expr: (Just ['3'])
          - Right:
              expr: 'False'
        - - expr: (Nothing)
          - Right:
              expr: 'True'
    - - - type: '[] ((,) Int Int)'
        - type: Bool
      - - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: 'False'
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: 'False'
        - - expr: ([((-2), (-2))])
          - Right:
              expr: 'False'
        - - expr: ([((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: 'False'
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: 'False'
    - - - type: Maybe ((,) Int Int)
        - type: Bool
      - - - expr: (Just ((-2), (-2)))
          - Right:
              expr: 'False'
        - - expr: (Just ((-4), (-4)))
          - Right:
              expr: 'False'
        - - expr: (Just ((15), (15)))
          - Right:
              expr: 'False'
        - - expr: (Nothing)
          - Right:
              expr: 'True'
        - - expr: (Just ((11), (11)))
          - Right:
              expr: 'False'
    - - - type: '[] (HashMap Char Bool)'
        - type: Bool
      - - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: 'False'
        - - expr: ([HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: 'False'
    - - - type: Maybe (HashMap Char Bool)
        - type: Bool
      - - - expr: (Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: 'False'
        - - expr: (Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: 'False'
- - expr: let bind = (>>=) in bind
  - - - - type: ([] (HashMap Char Bool), (HashMap Char Bool -> [] ((,) Int Int)))
        - type: '[] ((,) Int Int)'
      - []
    - - - type: ([] ([] Char), ([] Char -> [] ((,) Int Int)))
        - type: '[] ((,) Int Int)'
      - []
    - - - type: (Maybe ((,) Int Int), ((,) Int Int -> Maybe ([] Char)))
        - type: Maybe ([] Char)
      - []
    - - - type: |-
            (Maybe (HashMap Char Bool),
             (HashMap Char Bool -> Maybe ((,) Int Int)))
        - type: Maybe ((,) Int Int)
      - []
    - - - type: (Maybe ((,) Int Int), ((,) Int Int -> Maybe (HashMap Char Bool)))
        - type: Maybe (HashMap Char Bool)
      - []
    - - - type: ([] ([] Bool), ([] Bool -> [] ((,) Int Int)))
        - type: '[] ((,) Int Int)'
      - []
    - - - type: ([] Int, (Int -> [] ([] Char)))
        - type: '[] ([] Char)'
      - []
    - - - type: ([] Int, (Int -> [] ([] Bool)))
        - type: '[] ([] Bool)'
      - []
    - - - type: ([] ((,) Int Int), ((,) Int Int -> [] (HashMap Char Bool)))
        - type: '[] (HashMap Char Bool)'
      - []
    - - - type: |-
            (Maybe (HashMap Char Bool),
             (HashMap Char Bool -> Maybe (HashMap Char Bool)))
        - type: Maybe (HashMap Char Bool)
      - - - expr: |-
              (Just (HashMap.fromList [('3', True), ('5', False)]),
               let just = Just in just)
          - Right:
              expr: (Just (fromList [('3', True), ('5', False)]))
        - - expr: (Just (HashMap.fromList [('3', True), ('5', False)]), pure)
          - Right:
              expr: (Just (fromList [('3', True), ('5', False)]))
        - - expr: (Just (HashMap.fromList [('3', True)]), let just = Just in just)
          - Right:
              expr: (Just (fromList [('3', True)]))
        - - expr: (Just (HashMap.fromList [('3', True)]), pure)
          - Right:
              expr: (Just (fromList [('3', True)]))
    - - - type: ([] ((,) Int Int), ((,) Int Int -> [] ([] Bool)))
        - type: '[] ([] Bool)'
      - []
    - - - type: (Maybe Int, (Int -> Maybe ([] Bool)))
        - type: Maybe ([] Bool)
      - []
    - - - type: (Maybe Int, (Int -> Maybe Int))
        - type: Maybe Int
      - - - expr: (Just (-2), let just = Just in just)
          - Right:
              expr: (Just (-2))
        - - expr: (Just (-2), pure)
          - Right:
              expr: (Just (-2))
        - - expr: (Just (-4), let just = Just in just)
          - Right:
              expr: (Just (-4))
        - - expr: (Just (-4), pure)
          - Right:
              expr: (Just (-4))
        - - expr: (Just (15), let just = Just in just)
          - Right:
              expr: (Just 15)
        - - expr: (Just (15), pure)
          - Right:
              expr: (Just 15)
        - - expr: (Nothing, let just = Just in just)
          - Right:
              expr: Nothing
        - - expr: (Nothing, pure)
          - Right:
              expr: Nothing
        - - expr: (Just (11), let just = Just in just)
          - Right:
              expr: (Just 11)
        - - expr: (Just (11), pure)
          - Right:
              expr: (Just 11)
    - - - type: ([] ([] Char), ([] Char -> [] (HashMap Char Bool)))
        - type: '[] (HashMap Char Bool)'
      - []
    - - - type: ([] ([] Bool), ([] Bool -> [] (HashMap Char Bool)))
        - type: '[] (HashMap Char Bool)'
      - []
    - - - type: ([] (HashMap Char Bool), (HashMap Char Bool -> [] ([] Bool)))
        - type: '[] ([] Bool)'
      - []
    - - - type: (Maybe ((,) Int Int), ((,) Int Int -> Maybe ([] Bool)))
        - type: Maybe ([] Bool)
      - []
    - - - type: ([] ([] Bool), ([] Bool -> [] ([] Bool)))
        - type: '[] ([] Bool)'
      - - - expr: ([[True, False], [True]], pure)
          - Right:
              expr: '[[True, False], [True]]'
        - - expr: ([[True, False]], pure)
          - Right:
              expr: '[[True, False]]'
    - - - type: ([] ([] Char), ([] Char -> [] ([] Bool)))
        - type: '[] ([] Bool)'
      - []
    - - - type: ([] Int, (Int -> [] Int))
        - type: '[] Int'
      - - - expr: ([(-2), (-4), (15), (-20), (-9)], pure)
          - Right:
              expr: '[-2, -4, 15, -20, -9]'
        - - expr: ([(-2), (-4), (15)], pure)
          - Right:
              expr: '[-2, -4, 15]'
        - - expr: ([(-2)], pure)
          - Right:
              expr: '[-2]'
        - - expr: ([(-2), (-4)], pure)
          - Right:
              expr: '[-2, -4]'
        - - expr: ([(-2), (-4), (15), (-20)], pure)
          - Right:
              expr: '[-2, -4, 15, -20]'
    - - - type: (Maybe ([] Bool), ([] Bool -> Maybe ([] Bool)))
        - type: Maybe ([] Bool)
      - - - expr: (Just [True, False], let just = Just in just)
          - Right:
              expr: (Just [True, False])
        - - expr: (Just [True, False], pure)
          - Right:
              expr: (Just [True, False])
        - - expr: (Just [True], let just = Just in just)
          - Right:
              expr: (Just [True])
        - - expr: (Just [True], pure)
          - Right:
              expr: (Just [True])
    - - - type: (Maybe (HashMap Char Bool), (HashMap Char Bool -> Maybe ([] Bool)))
        - type: Maybe ([] Bool)
      - []
    - - - type: ([] ((,) Int Int), ((,) Int Int -> [] Int))
        - type: '[] Int'
      - []
    - - - type: (Maybe ([] Char), ([] Char -> Maybe ([] Bool)))
        - type: Maybe ([] Bool)
      - []
    - - - type: (Maybe Int, (Int -> Maybe (HashMap Char Bool)))
        - type: Maybe (HashMap Char Bool)
      - []
    - - - type: ([] ([] Char), ([] Char -> [] Int))
        - type: '[] Int'
      - []
    - - - type: ([] ([] Bool), ([] Bool -> [] Int))
        - type: '[] Int'
      - []
    - - - type: ([] (HashMap Char Bool), (HashMap Char Bool -> [] Int))
        - type: '[] Int'
      - []
    - - - type: (Maybe ([] Bool), ([] Bool -> Maybe ((,) Int Int)))
        - type: Maybe ((,) Int Int)
      - []
    - - - type: (Maybe ((,) Int Int), ((,) Int Int -> Maybe Int))
        - type: Maybe Int
      - []
    - - - type: (Maybe ([] Char), ([] Char -> Maybe ((,) Int Int)))
        - type: Maybe ((,) Int Int)
      - []
    - - - type: (Maybe Int, (Int -> Maybe ((,) Int Int)))
        - type: Maybe ((,) Int Int)
      - []
    - - - type: ([] Int, (Int -> [] (HashMap Char Bool)))
        - type: '[] (HashMap Char Bool)'
      - []
    - - - type: (Maybe ([] Bool), ([] Bool -> Maybe (HashMap Char Bool)))
        - type: Maybe (HashMap Char Bool)
      - []
    - - - type: (Maybe ([] Bool), ([] Bool -> Maybe Int))
        - type: Maybe Int
      - []
    - - - type: (Maybe (HashMap Char Bool), (HashMap Char Bool -> Maybe Int))
        - type: Maybe Int
      - []
    - - - type: (Maybe (HashMap Char Bool), (HashMap Char Bool -> Maybe ([] Char)))
        - type: Maybe ([] Char)
      - []
    - - - type: (Maybe ([] Char), ([] Char -> Maybe ([] Char)))
        - type: Maybe ([] Char)
      - - - expr: (Just ['3', '5', '7', '0'], let just = Just in just)
          - Right:
              expr: (Just "3570")
        - - expr: (Just ['3', '5', '7', '0'], pure)
          - Right:
              expr: (Just "3570")
        - - expr: (Just ['3', '5', '7'], let just = Just in just)
          - Right:
              expr: (Just "357")
        - - expr: (Just ['3', '5', '7'], pure)
          - Right:
              expr: (Just "357")
        - - expr: (Just ['3'], let just = Just in just)
          - Right:
              expr: (Just "3")
        - - expr: (Just ['3'], pure)
          - Right:
              expr: (Just "3")
        - - expr: (Nothing, let just = Just in just)
          - Right:
              expr: Nothing
        - - expr: (Nothing, pure)
          - Right:
              expr: Nothing
    - - - type: (Maybe ([] Bool), ([] Bool -> Maybe ([] Char)))
        - type: Maybe ([] Char)
      - []
    - - - type: (Maybe ([] Char), ([] Char -> Maybe (HashMap Char Bool)))
        - type: Maybe (HashMap Char Bool)
      - []
    - - - type: ([] ((,) Int Int), ((,) Int Int -> [] ([] Char)))
        - type: '[] ([] Char)'
      - []
    - - - type: (Maybe ([] Char), ([] Char -> Maybe Int))
        - type: Maybe Int
      - []
    - - - type: (Maybe Int, (Int -> Maybe ([] Char)))
        - type: Maybe ([] Char)
      - []
    - - - type: |-
            ([] (HashMap Char Bool),
             (HashMap Char Bool -> [] (HashMap Char Bool)))
        - type: '[] (HashMap Char Bool)'
      - - - expr: |-
              ([HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]],
               pure)
          - Right:
              expr: '[fromList [(''3'', True), (''5'', False)], fromList [(''3'',
                True)]]'
        - - expr: ([HashMap.fromList [('3', True), ('5', False)]], pure)
          - Right:
              expr: '[fromList [(''3'', True), (''5'', False)]]'
    - - - type: ([] ([] Bool), ([] Bool -> [] ([] Char)))
        - type: '[] ([] Char)'
      - []
    - - - type: ([] (HashMap Char Bool), (HashMap Char Bool -> [] ([] Char)))
        - type: '[] ([] Char)'
      - []
    - - - type: ([] ([] Char), ([] Char -> [] ([] Char)))
        - type: '[] ([] Char)'
      - - - expr: ([['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']], pure)
          - Right:
              expr: '["3570", "357", "3", "35"]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7'], ['3']], pure)
          - Right:
              expr: '["3570", "357", "3"]'
        - - expr: ([['3', '5', '7', '0']], pure)
          - Right:
              expr: '["3570"]'
        - - expr: ([['3', '5', '7', '0'], ['3', '5', '7']], pure)
          - Right:
              expr: '["3570", "357"]'
    - - - type: ([] Int, (Int -> [] ((,) Int Int)))
        - type: '[] ((,) Int Int)'
      - []
    - - - type: ([] ((,) Int Int), ((,) Int Int -> [] ((,) Int Int)))
        - type: '[] ((,) Int Int)'
      - - - expr: |-
              ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))],
               pure)
          - Right:
              expr: '[(-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)]'
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15))], pure)
          - Right:
              expr: '[(-2, -2), (-4, -4), (15, 15)]'
        - - expr: ([((-2), (-2))], pure)
          - Right:
              expr: '[(-2, -2)]'
        - - expr: ([((-2), (-2)), ((-4), (-4))], pure)
          - Right:
              expr: '[(-2, -2), (-4, -4)]'
        - - expr: ([((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))], pure)
          - Right:
              expr: '[(-2, -2), (-4, -4), (15, 15), (-20, -20)]'
    - - - type: (Maybe ((,) Int Int), ((,) Int Int -> Maybe ((,) Int Int)))
        - type: Maybe ((,) Int Int)
      - - - expr: (Just ((-2), (-2)), let just = Just in just)
          - Right:
              expr: (Just (-2, -2))
        - - expr: (Just ((-2), (-2)), pure)
          - Right:
              expr: (Just (-2, -2))
        - - expr: (Just ((-4), (-4)), let just = Just in just)
          - Right:
              expr: (Just (-4, -4))
        - - expr: (Just ((-4), (-4)), pure)
          - Right:
              expr: (Just (-4, -4))
        - - expr: (Just ((15), (15)), let just = Just in just)
          - Right:
              expr: (Just (15, 15))
        - - expr: (Just ((15), (15)), pure)
          - Right:
              expr: (Just (15, 15))
        - - expr: (Nothing, let just = Just in just)
          - Right:
              expr: Nothing
        - - expr: (Nothing, pure)
          - Right:
              expr: Nothing
        - - expr: (Just ((11), (11)), let just = Just in just)
          - Right:
              expr: (Just (11, 11))
        - - expr: (Just ((11), (11)), pure)
          - Right:
              expr: (Just (11, 11))
- - expr: const
  - - - - type: ([] Char, (,) Int Int)
        - type: '[] Char'
      - - - expr: (['3', '5', '7', '0'], ((-2), (-2)))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], ((-4), (-4)))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], ((15), (15)))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], ((-20), (-20)))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], ((-9), (-9)))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], ((-5), (-5)))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], ((-11), (-11)))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], ((11), (11)))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], ((-7), (-7)))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7'], ((-2), (-2)))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], ((-4), (-4)))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], ((15), (15)))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], ((-20), (-20)))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], ((-9), (-9)))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], ((-5), (-5)))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], ((-11), (-11)))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], ((11), (11)))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], ((-7), (-7)))
          - Right:
              expr: '"357"'
        - - expr: (['3'], ((-2), (-2)))
          - Right:
              expr: '"3"'
        - - expr: (['3'], ((-4), (-4)))
          - Right:
              expr: '"3"'
        - - expr: (['3'], ((15), (15)))
          - Right:
              expr: '"3"'
        - - expr: (['3'], ((-20), (-20)))
          - Right:
              expr: '"3"'
        - - expr: (['3'], ((-9), (-9)))
          - Right:
              expr: '"3"'
        - - expr: (['3'], ((-5), (-5)))
          - Right:
              expr: '"3"'
        - - expr: (['3'], ((-11), (-11)))
          - Right:
              expr: '"3"'
        - - expr: (['3'], ((11), (11)))
          - Right:
              expr: '"3"'
        - - expr: (['3'], ((-7), (-7)))
          - Right:
              expr: '"3"'
        - - expr: (['3', '5'], ((-2), (-2)))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], ((-4), (-4)))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], ((15), (15)))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], ((-20), (-20)))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], ((-9), (-9)))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], ((-5), (-5)))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], ((-11), (-11)))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], ((11), (11)))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], ((-7), (-7)))
          - Right:
              expr: '"35"'
    - - - type: ([] Bool, [] Char)
        - type: '[] Bool'
      - - - expr: ([True, False], ['3', '5', '7', '0'])
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], ['3', '5', '7'])
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], ['3'])
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], ['3', '5'])
          - Right:
              expr: '[True, False]'
        - - expr: ([True], ['3', '5', '7', '0'])
          - Right:
              expr: '[True]'
        - - expr: ([True], ['3', '5', '7'])
          - Right:
              expr: '[True]'
        - - expr: ([True], ['3'])
          - Right:
              expr: '[True]'
        - - expr: ([True], ['3', '5'])
          - Right:
              expr: '[True]'
    - - - type: ((,) Int Int, (,) Int Int)
        - type: (,) Int Int
      - - - expr: (((-2), (-2)), ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), ((-4), (-4)))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), ((15), (15)))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), ((-20), (-20)))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), ((-9), (-9)))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), ((-5), (-5)))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), ((-11), (-11)))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), ((11), (11)))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), ((-7), (-7)))
          - Right:
              expr: (-2, -2)
        - - expr: (((-4), (-4)), ((-2), (-2)))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), ((15), (15)))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), ((-20), (-20)))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), ((-9), (-9)))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), ((-5), (-5)))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), ((-11), (-11)))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), ((11), (11)))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), ((-7), (-7)))
          - Right:
              expr: (-4, -4)
        - - expr: (((15), (15)), ((-2), (-2)))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), ((-4), (-4)))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), ((-20), (-20)))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), ((-9), (-9)))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), ((-5), (-5)))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), ((-11), (-11)))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), ((11), (11)))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), ((-7), (-7)))
          - Right:
              expr: (15, 15)
        - - expr: (((-20), (-20)), ((-2), (-2)))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), ((-4), (-4)))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), ((15), (15)))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), ((-20), (-20)))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), ((-9), (-9)))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), ((-5), (-5)))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), ((-11), (-11)))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), ((11), (11)))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), ((-7), (-7)))
          - Right:
              expr: (-20, -20)
        - - expr: (((-9), (-9)), ((-2), (-2)))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), ((-4), (-4)))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), ((15), (15)))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), ((-20), (-20)))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), ((-9), (-9)))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), ((-5), (-5)))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), ((-11), (-11)))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), ((11), (11)))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), ((-7), (-7)))
          - Right:
              expr: (-9, -9)
        - - expr: (((-5), (-5)), ((-2), (-2)))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), ((-4), (-4)))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), ((15), (15)))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), ((-20), (-20)))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), ((-9), (-9)))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), ((-5), (-5)))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), ((-11), (-11)))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), ((11), (11)))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), ((-7), (-7)))
          - Right:
              expr: (-5, -5)
        - - expr: (((-11), (-11)), ((-2), (-2)))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), ((-4), (-4)))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), ((15), (15)))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), ((-20), (-20)))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), ((-9), (-9)))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), ((-5), (-5)))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), ((-11), (-11)))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), ((11), (11)))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), ((-7), (-7)))
          - Right:
              expr: (-11, -11)
        - - expr: (((11), (11)), ((-2), (-2)))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), ((-4), (-4)))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), ((15), (15)))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), ((-20), (-20)))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), ((-9), (-9)))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), ((-5), (-5)))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), ((-11), (-11)))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), ((-7), (-7)))
          - Right:
              expr: (11, 11)
        - - expr: (((-7), (-7)), ((-2), (-2)))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), ((-4), (-4)))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), ((15), (15)))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), ((-20), (-20)))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), ((-9), (-9)))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), ((-5), (-5)))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), ((-11), (-11)))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), ((11), (11)))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), ((-7), (-7)))
          - Right:
              expr: (-7, -7)
    - - - type: (HashMap Char Bool, Int)
        - type: HashMap Char Bool
      - - - expr: (HashMap.fromList [('3', True), ('5', False)], (-2))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (-4))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (15))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (-20))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (-9))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (-5))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (-11))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (11))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (-7))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True)], (-2))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], (-4))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], (15))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], (-20))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], (-9))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], (-5))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], (-11))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], (11))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], (-7))
          - Right:
              expr: (fromList [('3', True)])
    - - - type: ((,) Int Int, [] Bool)
        - type: (,) Int Int
      - - - expr: (((-2), (-2)), [True, False])
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), [True])
          - Right:
              expr: (-2, -2)
        - - expr: (((-4), (-4)), [True, False])
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), [True])
          - Right:
              expr: (-4, -4)
        - - expr: (((15), (15)), [True, False])
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), [True])
          - Right:
              expr: (15, 15)
        - - expr: (((-20), (-20)), [True, False])
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), [True])
          - Right:
              expr: (-20, -20)
        - - expr: (((-9), (-9)), [True, False])
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), [True])
          - Right:
              expr: (-9, -9)
        - - expr: (((-5), (-5)), [True, False])
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), [True])
          - Right:
              expr: (-5, -5)
        - - expr: (((-11), (-11)), [True, False])
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), [True])
          - Right:
              expr: (-11, -11)
        - - expr: (((11), (11)), [True, False])
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), [True])
          - Right:
              expr: (11, 11)
        - - expr: (((-7), (-7)), [True, False])
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), [True])
          - Right:
              expr: (-7, -7)
    - - - type: (HashMap Char Bool, HashMap Char Bool)
        - type: HashMap Char Bool
      - - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               HashMap.fromList [('3', True)])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (HashMap.fromList [('3', True)],
               HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], HashMap.fromList [('3', True)])
          - Right:
              expr: (fromList [('3', True)])
    - - - type: (Int, [] Char)
        - type: Int
      - - - expr: ((-2), ['3', '5', '7', '0'])
          - Right:
              expr: (-2)
        - - expr: ((-2), ['3', '5', '7'])
          - Right:
              expr: (-2)
        - - expr: ((-2), ['3'])
          - Right:
              expr: (-2)
        - - expr: ((-2), ['3', '5'])
          - Right:
              expr: (-2)
        - - expr: ((-4), ['3', '5', '7', '0'])
          - Right:
              expr: (-4)
        - - expr: ((-4), ['3', '5', '7'])
          - Right:
              expr: (-4)
        - - expr: ((-4), ['3'])
          - Right:
              expr: (-4)
        - - expr: ((-4), ['3', '5'])
          - Right:
              expr: (-4)
        - - expr: ((15), ['3', '5', '7', '0'])
          - Right:
              expr: '15'
        - - expr: ((15), ['3', '5', '7'])
          - Right:
              expr: '15'
        - - expr: ((15), ['3'])
          - Right:
              expr: '15'
        - - expr: ((15), ['3', '5'])
          - Right:
              expr: '15'
        - - expr: ((-20), ['3', '5', '7', '0'])
          - Right:
              expr: (-20)
        - - expr: ((-20), ['3', '5', '7'])
          - Right:
              expr: (-20)
        - - expr: ((-20), ['3'])
          - Right:
              expr: (-20)
        - - expr: ((-20), ['3', '5'])
          - Right:
              expr: (-20)
        - - expr: ((-9), ['3', '5', '7', '0'])
          - Right:
              expr: (-9)
        - - expr: ((-9), ['3', '5', '7'])
          - Right:
              expr: (-9)
        - - expr: ((-9), ['3'])
          - Right:
              expr: (-9)
        - - expr: ((-9), ['3', '5'])
          - Right:
              expr: (-9)
        - - expr: ((-5), ['3', '5', '7', '0'])
          - Right:
              expr: (-5)
        - - expr: ((-5), ['3', '5', '7'])
          - Right:
              expr: (-5)
        - - expr: ((-5), ['3'])
          - Right:
              expr: (-5)
        - - expr: ((-5), ['3', '5'])
          - Right:
              expr: (-5)
        - - expr: ((-11), ['3', '5', '7', '0'])
          - Right:
              expr: (-11)
        - - expr: ((-11), ['3', '5', '7'])
          - Right:
              expr: (-11)
        - - expr: ((-11), ['3'])
          - Right:
              expr: (-11)
        - - expr: ((-11), ['3', '5'])
          - Right:
              expr: (-11)
        - - expr: ((11), ['3', '5', '7', '0'])
          - Right:
              expr: '11'
        - - expr: ((11), ['3', '5', '7'])
          - Right:
              expr: '11'
        - - expr: ((11), ['3'])
          - Right:
              expr: '11'
        - - expr: ((11), ['3', '5'])
          - Right:
              expr: '11'
        - - expr: ((-7), ['3', '5', '7', '0'])
          - Right:
              expr: (-7)
        - - expr: ((-7), ['3', '5', '7'])
          - Right:
              expr: (-7)
        - - expr: ((-7), ['3'])
          - Right:
              expr: (-7)
        - - expr: ((-7), ['3', '5'])
          - Right:
              expr: (-7)
    - - - type: ((,) Int Int, [] Char)
        - type: (,) Int Int
      - - - expr: (((-2), (-2)), ['3', '5', '7', '0'])
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), ['3', '5', '7'])
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), ['3'])
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), ['3', '5'])
          - Right:
              expr: (-2, -2)
        - - expr: (((-4), (-4)), ['3', '5', '7', '0'])
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), ['3', '5', '7'])
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), ['3'])
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), ['3', '5'])
          - Right:
              expr: (-4, -4)
        - - expr: (((15), (15)), ['3', '5', '7', '0'])
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), ['3', '5', '7'])
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), ['3'])
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), ['3', '5'])
          - Right:
              expr: (15, 15)
        - - expr: (((-20), (-20)), ['3', '5', '7', '0'])
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), ['3', '5', '7'])
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), ['3'])
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), ['3', '5'])
          - Right:
              expr: (-20, -20)
        - - expr: (((-9), (-9)), ['3', '5', '7', '0'])
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), ['3', '5', '7'])
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), ['3'])
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), ['3', '5'])
          - Right:
              expr: (-9, -9)
        - - expr: (((-5), (-5)), ['3', '5', '7', '0'])
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), ['3', '5', '7'])
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), ['3'])
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), ['3', '5'])
          - Right:
              expr: (-5, -5)
        - - expr: (((-11), (-11)), ['3', '5', '7', '0'])
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), ['3', '5', '7'])
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), ['3'])
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), ['3', '5'])
          - Right:
              expr: (-11, -11)
        - - expr: (((11), (11)), ['3', '5', '7', '0'])
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), ['3', '5', '7'])
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), ['3'])
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), ['3', '5'])
          - Right:
              expr: (11, 11)
        - - expr: (((-7), (-7)), ['3', '5', '7', '0'])
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), ['3', '5', '7'])
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), ['3'])
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), ['3', '5'])
          - Right:
              expr: (-7, -7)
    - - - type: ([] Char, HashMap Char Bool)
        - type: '[] Char'
      - - - expr: |-
              (['3', '5', '7', '0'],
               HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], HashMap.fromList [('3', True)])
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7'], HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], HashMap.fromList [('3', True)])
          - Right:
              expr: '"357"'
        - - expr: (['3'], HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '"3"'
        - - expr: (['3'], HashMap.fromList [('3', True)])
          - Right:
              expr: '"3"'
        - - expr: (['3', '5'], HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], HashMap.fromList [('3', True)])
          - Right:
              expr: '"35"'
    - - - type: ((,) Int Int, Int)
        - type: (,) Int Int
      - - - expr: (((-2), (-2)), (-2))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), (-4))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), (15))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), (-20))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), (-9))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), (-5))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), (-11))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), (11))
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), (-7))
          - Right:
              expr: (-2, -2)
        - - expr: (((-4), (-4)), (-2))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), (-4))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), (15))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), (-20))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), (-9))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), (-5))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), (-11))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), (11))
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), (-7))
          - Right:
              expr: (-4, -4)
        - - expr: (((15), (15)), (-2))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), (-4))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), (15))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), (-20))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), (-9))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), (-5))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), (-11))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), (11))
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), (-7))
          - Right:
              expr: (15, 15)
        - - expr: (((-20), (-20)), (-2))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), (-4))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), (15))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), (-20))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), (-9))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), (-5))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), (-11))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), (11))
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), (-7))
          - Right:
              expr: (-20, -20)
        - - expr: (((-9), (-9)), (-2))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), (-4))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), (15))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), (-20))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), (-9))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), (-5))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), (-11))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), (11))
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), (-7))
          - Right:
              expr: (-9, -9)
        - - expr: (((-5), (-5)), (-2))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), (-4))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), (15))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), (-20))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), (-9))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), (-5))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), (-11))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), (11))
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), (-7))
          - Right:
              expr: (-5, -5)
        - - expr: (((-11), (-11)), (-2))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), (-4))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), (15))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), (-20))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), (-9))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), (-5))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), (-11))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), (11))
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), (-7))
          - Right:
              expr: (-11, -11)
        - - expr: (((11), (11)), (-2))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), (-4))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), (15))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), (-20))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), (-9))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), (-5))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), (-11))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), (11))
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), (-7))
          - Right:
              expr: (11, 11)
        - - expr: (((-7), (-7)), (-2))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), (-4))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), (15))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), (-20))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), (-9))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), (-5))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), (-11))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), (11))
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), (-7))
          - Right:
              expr: (-7, -7)
    - - - type: (Int, Int)
        - type: Int
      - - - expr: ((-2), (-2))
          - Right:
              expr: (-2)
        - - expr: ((-2), (-4))
          - Right:
              expr: (-2)
        - - expr: ((-2), (15))
          - Right:
              expr: (-2)
        - - expr: ((-2), (-20))
          - Right:
              expr: (-2)
        - - expr: ((-2), (-9))
          - Right:
              expr: (-2)
        - - expr: ((-2), (-5))
          - Right:
              expr: (-2)
        - - expr: ((-2), (-11))
          - Right:
              expr: (-2)
        - - expr: ((-2), (11))
          - Right:
              expr: (-2)
        - - expr: ((-2), (-7))
          - Right:
              expr: (-2)
        - - expr: ((-4), (-2))
          - Right:
              expr: (-4)
        - - expr: ((-4), (-4))
          - Right:
              expr: (-4)
        - - expr: ((-4), (15))
          - Right:
              expr: (-4)
        - - expr: ((-4), (-20))
          - Right:
              expr: (-4)
        - - expr: ((-4), (-9))
          - Right:
              expr: (-4)
        - - expr: ((-4), (-5))
          - Right:
              expr: (-4)
        - - expr: ((-4), (-11))
          - Right:
              expr: (-4)
        - - expr: ((-4), (11))
          - Right:
              expr: (-4)
        - - expr: ((-4), (-7))
          - Right:
              expr: (-4)
        - - expr: ((15), (-2))
          - Right:
              expr: '15'
        - - expr: ((15), (-4))
          - Right:
              expr: '15'
        - - expr: ((15), (15))
          - Right:
              expr: '15'
        - - expr: ((15), (-20))
          - Right:
              expr: '15'
        - - expr: ((15), (-9))
          - Right:
              expr: '15'
        - - expr: ((15), (-5))
          - Right:
              expr: '15'
        - - expr: ((15), (-11))
          - Right:
              expr: '15'
        - - expr: ((15), (11))
          - Right:
              expr: '15'
        - - expr: ((15), (-7))
          - Right:
              expr: '15'
        - - expr: ((-20), (-2))
          - Right:
              expr: (-20)
        - - expr: ((-20), (-4))
          - Right:
              expr: (-20)
        - - expr: ((-20), (15))
          - Right:
              expr: (-20)
        - - expr: ((-20), (-20))
          - Right:
              expr: (-20)
        - - expr: ((-20), (-9))
          - Right:
              expr: (-20)
        - - expr: ((-20), (-5))
          - Right:
              expr: (-20)
        - - expr: ((-20), (-11))
          - Right:
              expr: (-20)
        - - expr: ((-20), (11))
          - Right:
              expr: (-20)
        - - expr: ((-20), (-7))
          - Right:
              expr: (-20)
        - - expr: ((-9), (-2))
          - Right:
              expr: (-9)
        - - expr: ((-9), (-4))
          - Right:
              expr: (-9)
        - - expr: ((-9), (15))
          - Right:
              expr: (-9)
        - - expr: ((-9), (-20))
          - Right:
              expr: (-9)
        - - expr: ((-9), (-9))
          - Right:
              expr: (-9)
        - - expr: ((-9), (-5))
          - Right:
              expr: (-9)
        - - expr: ((-9), (-11))
          - Right:
              expr: (-9)
        - - expr: ((-9), (11))
          - Right:
              expr: (-9)
        - - expr: ((-9), (-7))
          - Right:
              expr: (-9)
        - - expr: ((-5), (-2))
          - Right:
              expr: (-5)
        - - expr: ((-5), (-4))
          - Right:
              expr: (-5)
        - - expr: ((-5), (15))
          - Right:
              expr: (-5)
        - - expr: ((-5), (-20))
          - Right:
              expr: (-5)
        - - expr: ((-5), (-9))
          - Right:
              expr: (-5)
        - - expr: ((-5), (-5))
          - Right:
              expr: (-5)
        - - expr: ((-5), (-11))
          - Right:
              expr: (-5)
        - - expr: ((-5), (11))
          - Right:
              expr: (-5)
        - - expr: ((-5), (-7))
          - Right:
              expr: (-5)
        - - expr: ((-11), (-2))
          - Right:
              expr: (-11)
        - - expr: ((-11), (-4))
          - Right:
              expr: (-11)
        - - expr: ((-11), (15))
          - Right:
              expr: (-11)
        - - expr: ((-11), (-20))
          - Right:
              expr: (-11)
        - - expr: ((-11), (-9))
          - Right:
              expr: (-11)
        - - expr: ((-11), (-5))
          - Right:
              expr: (-11)
        - - expr: ((-11), (-11))
          - Right:
              expr: (-11)
        - - expr: ((-11), (11))
          - Right:
              expr: (-11)
        - - expr: ((-11), (-7))
          - Right:
              expr: (-11)
        - - expr: ((11), (-2))
          - Right:
              expr: '11'
        - - expr: ((11), (-4))
          - Right:
              expr: '11'
        - - expr: ((11), (15))
          - Right:
              expr: '11'
        - - expr: ((11), (-20))
          - Right:
              expr: '11'
        - - expr: ((11), (-9))
          - Right:
              expr: '11'
        - - expr: ((11), (-5))
          - Right:
              expr: '11'
        - - expr: ((11), (-11))
          - Right:
              expr: '11'
        - - expr: ((11), (11))
          - Right:
              expr: '11'
        - - expr: ((11), (-7))
          - Right:
              expr: '11'
        - - expr: ((-7), (-2))
          - Right:
              expr: (-7)
        - - expr: ((-7), (-4))
          - Right:
              expr: (-7)
        - - expr: ((-7), (15))
          - Right:
              expr: (-7)
        - - expr: ((-7), (-20))
          - Right:
              expr: (-7)
        - - expr: ((-7), (-9))
          - Right:
              expr: (-7)
        - - expr: ((-7), (-5))
          - Right:
              expr: (-7)
        - - expr: ((-7), (-11))
          - Right:
              expr: (-7)
        - - expr: ((-7), (11))
          - Right:
              expr: (-7)
        - - expr: ((-7), (-7))
          - Right:
              expr: (-7)
    - - - type: (HashMap Char Bool, [] Bool)
        - type: HashMap Char Bool
      - - - expr: (HashMap.fromList [('3', True), ('5', False)], [True, False])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], [True])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True)], [True, False])
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], [True])
          - Right:
              expr: (fromList [('3', True)])
    - - - type: ([] Char, Int)
        - type: '[] Char'
      - - - expr: (['3', '5', '7', '0'], (-2))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], (-4))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], (15))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], (-20))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], (-9))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], (-5))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], (-11))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], (11))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], (-7))
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7'], (-2))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], (-4))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], (15))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], (-20))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], (-9))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], (-5))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], (-11))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], (11))
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], (-7))
          - Right:
              expr: '"357"'
        - - expr: (['3'], (-2))
          - Right:
              expr: '"3"'
        - - expr: (['3'], (-4))
          - Right:
              expr: '"3"'
        - - expr: (['3'], (15))
          - Right:
              expr: '"3"'
        - - expr: (['3'], (-20))
          - Right:
              expr: '"3"'
        - - expr: (['3'], (-9))
          - Right:
              expr: '"3"'
        - - expr: (['3'], (-5))
          - Right:
              expr: '"3"'
        - - expr: (['3'], (-11))
          - Right:
              expr: '"3"'
        - - expr: (['3'], (11))
          - Right:
              expr: '"3"'
        - - expr: (['3'], (-7))
          - Right:
              expr: '"3"'
        - - expr: (['3', '5'], (-2))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], (-4))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], (15))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], (-20))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], (-9))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], (-5))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], (-11))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], (11))
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], (-7))
          - Right:
              expr: '"35"'
    - - - type: ([] Bool, Int)
        - type: '[] Bool'
      - - - expr: ([True, False], (-2))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], (-4))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], (15))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], (-20))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], (-9))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], (-5))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], (-11))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], (11))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], (-7))
          - Right:
              expr: '[True, False]'
        - - expr: ([True], (-2))
          - Right:
              expr: '[True]'
        - - expr: ([True], (-4))
          - Right:
              expr: '[True]'
        - - expr: ([True], (15))
          - Right:
              expr: '[True]'
        - - expr: ([True], (-20))
          - Right:
              expr: '[True]'
        - - expr: ([True], (-9))
          - Right:
              expr: '[True]'
        - - expr: ([True], (-5))
          - Right:
              expr: '[True]'
        - - expr: ([True], (-11))
          - Right:
              expr: '[True]'
        - - expr: ([True], (11))
          - Right:
              expr: '[True]'
        - - expr: ([True], (-7))
          - Right:
              expr: '[True]'
    - - - type: (Int, [] Bool)
        - type: Int
      - - - expr: ((-2), [True, False])
          - Right:
              expr: (-2)
        - - expr: ((-2), [True])
          - Right:
              expr: (-2)
        - - expr: ((-4), [True, False])
          - Right:
              expr: (-4)
        - - expr: ((-4), [True])
          - Right:
              expr: (-4)
        - - expr: ((15), [True, False])
          - Right:
              expr: '15'
        - - expr: ((15), [True])
          - Right:
              expr: '15'
        - - expr: ((-20), [True, False])
          - Right:
              expr: (-20)
        - - expr: ((-20), [True])
          - Right:
              expr: (-20)
        - - expr: ((-9), [True, False])
          - Right:
              expr: (-9)
        - - expr: ((-9), [True])
          - Right:
              expr: (-9)
        - - expr: ((-5), [True, False])
          - Right:
              expr: (-5)
        - - expr: ((-5), [True])
          - Right:
              expr: (-5)
        - - expr: ((-11), [True, False])
          - Right:
              expr: (-11)
        - - expr: ((-11), [True])
          - Right:
              expr: (-11)
        - - expr: ((11), [True, False])
          - Right:
              expr: '11'
        - - expr: ((11), [True])
          - Right:
              expr: '11'
        - - expr: ((-7), [True, False])
          - Right:
              expr: (-7)
        - - expr: ((-7), [True])
          - Right:
              expr: (-7)
    - - - type: ([] Char, [] Bool)
        - type: '[] Char'
      - - - expr: (['3', '5', '7', '0'], [True, False])
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], [True])
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7'], [True, False])
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], [True])
          - Right:
              expr: '"357"'
        - - expr: (['3'], [True, False])
          - Right:
              expr: '"3"'
        - - expr: (['3'], [True])
          - Right:
              expr: '"3"'
        - - expr: (['3', '5'], [True, False])
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], [True])
          - Right:
              expr: '"35"'
    - - - type: (Int, HashMap Char Bool)
        - type: Int
      - - - expr: ((-2), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-2)
        - - expr: ((-2), HashMap.fromList [('3', True)])
          - Right:
              expr: (-2)
        - - expr: ((-4), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-4)
        - - expr: ((-4), HashMap.fromList [('3', True)])
          - Right:
              expr: (-4)
        - - expr: ((15), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '15'
        - - expr: ((15), HashMap.fromList [('3', True)])
          - Right:
              expr: '15'
        - - expr: ((-20), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-20)
        - - expr: ((-20), HashMap.fromList [('3', True)])
          - Right:
              expr: (-20)
        - - expr: ((-9), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-9)
        - - expr: ((-9), HashMap.fromList [('3', True)])
          - Right:
              expr: (-9)
        - - expr: ((-5), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-5)
        - - expr: ((-5), HashMap.fromList [('3', True)])
          - Right:
              expr: (-5)
        - - expr: ((-11), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-11)
        - - expr: ((-11), HashMap.fromList [('3', True)])
          - Right:
              expr: (-11)
        - - expr: ((11), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '11'
        - - expr: ((11), HashMap.fromList [('3', True)])
          - Right:
              expr: '11'
        - - expr: ((-7), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-7)
        - - expr: ((-7), HashMap.fromList [('3', True)])
          - Right:
              expr: (-7)
    - - - type: ((,) Int Int, HashMap Char Bool)
        - type: (,) Int Int
      - - - expr: (((-2), (-2)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-2, -2)
        - - expr: (((-2), (-2)), HashMap.fromList [('3', True)])
          - Right:
              expr: (-2, -2)
        - - expr: (((-4), (-4)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-4, -4)
        - - expr: (((-4), (-4)), HashMap.fromList [('3', True)])
          - Right:
              expr: (-4, -4)
        - - expr: (((15), (15)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (15, 15)
        - - expr: (((15), (15)), HashMap.fromList [('3', True)])
          - Right:
              expr: (15, 15)
        - - expr: (((-20), (-20)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-20, -20)
        - - expr: (((-20), (-20)), HashMap.fromList [('3', True)])
          - Right:
              expr: (-20, -20)
        - - expr: (((-9), (-9)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-9, -9)
        - - expr: (((-9), (-9)), HashMap.fromList [('3', True)])
          - Right:
              expr: (-9, -9)
        - - expr: (((-5), (-5)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-5, -5)
        - - expr: (((-5), (-5)), HashMap.fromList [('3', True)])
          - Right:
              expr: (-5, -5)
        - - expr: (((-11), (-11)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-11, -11)
        - - expr: (((-11), (-11)), HashMap.fromList [('3', True)])
          - Right:
              expr: (-11, -11)
        - - expr: (((11), (11)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (11, 11)
        - - expr: (((11), (11)), HashMap.fromList [('3', True)])
          - Right:
              expr: (11, 11)
        - - expr: (((-7), (-7)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-7, -7)
        - - expr: (((-7), (-7)), HashMap.fromList [('3', True)])
          - Right:
              expr: (-7, -7)
    - - - type: (Int, (,) Int Int)
        - type: Int
      - - - expr: ((-2), ((-2), (-2)))
          - Right:
              expr: (-2)
        - - expr: ((-2), ((-4), (-4)))
          - Right:
              expr: (-2)
        - - expr: ((-2), ((15), (15)))
          - Right:
              expr: (-2)
        - - expr: ((-2), ((-20), (-20)))
          - Right:
              expr: (-2)
        - - expr: ((-2), ((-9), (-9)))
          - Right:
              expr: (-2)
        - - expr: ((-2), ((-5), (-5)))
          - Right:
              expr: (-2)
        - - expr: ((-2), ((-11), (-11)))
          - Right:
              expr: (-2)
        - - expr: ((-2), ((11), (11)))
          - Right:
              expr: (-2)
        - - expr: ((-2), ((-7), (-7)))
          - Right:
              expr: (-2)
        - - expr: ((-4), ((-2), (-2)))
          - Right:
              expr: (-4)
        - - expr: ((-4), ((-4), (-4)))
          - Right:
              expr: (-4)
        - - expr: ((-4), ((15), (15)))
          - Right:
              expr: (-4)
        - - expr: ((-4), ((-20), (-20)))
          - Right:
              expr: (-4)
        - - expr: ((-4), ((-9), (-9)))
          - Right:
              expr: (-4)
        - - expr: ((-4), ((-5), (-5)))
          - Right:
              expr: (-4)
        - - expr: ((-4), ((-11), (-11)))
          - Right:
              expr: (-4)
        - - expr: ((-4), ((11), (11)))
          - Right:
              expr: (-4)
        - - expr: ((-4), ((-7), (-7)))
          - Right:
              expr: (-4)
        - - expr: ((15), ((-2), (-2)))
          - Right:
              expr: '15'
        - - expr: ((15), ((-4), (-4)))
          - Right:
              expr: '15'
        - - expr: ((15), ((15), (15)))
          - Right:
              expr: '15'
        - - expr: ((15), ((-20), (-20)))
          - Right:
              expr: '15'
        - - expr: ((15), ((-9), (-9)))
          - Right:
              expr: '15'
        - - expr: ((15), ((-5), (-5)))
          - Right:
              expr: '15'
        - - expr: ((15), ((-11), (-11)))
          - Right:
              expr: '15'
        - - expr: ((15), ((11), (11)))
          - Right:
              expr: '15'
        - - expr: ((15), ((-7), (-7)))
          - Right:
              expr: '15'
        - - expr: ((-20), ((-2), (-2)))
          - Right:
              expr: (-20)
        - - expr: ((-20), ((-4), (-4)))
          - Right:
              expr: (-20)
        - - expr: ((-20), ((15), (15)))
          - Right:
              expr: (-20)
        - - expr: ((-20), ((-20), (-20)))
          - Right:
              expr: (-20)
        - - expr: ((-20), ((-9), (-9)))
          - Right:
              expr: (-20)
        - - expr: ((-20), ((-5), (-5)))
          - Right:
              expr: (-20)
        - - expr: ((-20), ((-11), (-11)))
          - Right:
              expr: (-20)
        - - expr: ((-20), ((11), (11)))
          - Right:
              expr: (-20)
        - - expr: ((-20), ((-7), (-7)))
          - Right:
              expr: (-20)
        - - expr: ((-9), ((-2), (-2)))
          - Right:
              expr: (-9)
        - - expr: ((-9), ((-4), (-4)))
          - Right:
              expr: (-9)
        - - expr: ((-9), ((15), (15)))
          - Right:
              expr: (-9)
        - - expr: ((-9), ((-20), (-20)))
          - Right:
              expr: (-9)
        - - expr: ((-9), ((-9), (-9)))
          - Right:
              expr: (-9)
        - - expr: ((-9), ((-5), (-5)))
          - Right:
              expr: (-9)
        - - expr: ((-9), ((-11), (-11)))
          - Right:
              expr: (-9)
        - - expr: ((-9), ((11), (11)))
          - Right:
              expr: (-9)
        - - expr: ((-9), ((-7), (-7)))
          - Right:
              expr: (-9)
        - - expr: ((-5), ((-2), (-2)))
          - Right:
              expr: (-5)
        - - expr: ((-5), ((-4), (-4)))
          - Right:
              expr: (-5)
        - - expr: ((-5), ((15), (15)))
          - Right:
              expr: (-5)
        - - expr: ((-5), ((-20), (-20)))
          - Right:
              expr: (-5)
        - - expr: ((-5), ((-9), (-9)))
          - Right:
              expr: (-5)
        - - expr: ((-5), ((-5), (-5)))
          - Right:
              expr: (-5)
        - - expr: ((-5), ((-11), (-11)))
          - Right:
              expr: (-5)
        - - expr: ((-5), ((11), (11)))
          - Right:
              expr: (-5)
        - - expr: ((-5), ((-7), (-7)))
          - Right:
              expr: (-5)
        - - expr: ((-11), ((-2), (-2)))
          - Right:
              expr: (-11)
        - - expr: ((-11), ((-4), (-4)))
          - Right:
              expr: (-11)
        - - expr: ((-11), ((15), (15)))
          - Right:
              expr: (-11)
        - - expr: ((-11), ((-20), (-20)))
          - Right:
              expr: (-11)
        - - expr: ((-11), ((-9), (-9)))
          - Right:
              expr: (-11)
        - - expr: ((-11), ((-5), (-5)))
          - Right:
              expr: (-11)
        - - expr: ((-11), ((-11), (-11)))
          - Right:
              expr: (-11)
        - - expr: ((-11), ((11), (11)))
          - Right:
              expr: (-11)
        - - expr: ((-11), ((-7), (-7)))
          - Right:
              expr: (-11)
        - - expr: ((11), ((-2), (-2)))
          - Right:
              expr: '11'
        - - expr: ((11), ((-4), (-4)))
          - Right:
              expr: '11'
        - - expr: ((11), ((15), (15)))
          - Right:
              expr: '11'
        - - expr: ((11), ((-20), (-20)))
          - Right:
              expr: '11'
        - - expr: ((11), ((-9), (-9)))
          - Right:
              expr: '11'
        - - expr: ((11), ((-5), (-5)))
          - Right:
              expr: '11'
        - - expr: ((11), ((-11), (-11)))
          - Right:
              expr: '11'
        - - expr: ((11), ((11), (11)))
          - Right:
              expr: '11'
        - - expr: ((11), ((-7), (-7)))
          - Right:
              expr: '11'
        - - expr: ((-7), ((-2), (-2)))
          - Right:
              expr: (-7)
        - - expr: ((-7), ((-4), (-4)))
          - Right:
              expr: (-7)
        - - expr: ((-7), ((15), (15)))
          - Right:
              expr: (-7)
        - - expr: ((-7), ((-20), (-20)))
          - Right:
              expr: (-7)
        - - expr: ((-7), ((-9), (-9)))
          - Right:
              expr: (-7)
        - - expr: ((-7), ((-5), (-5)))
          - Right:
              expr: (-7)
        - - expr: ((-7), ((-11), (-11)))
          - Right:
              expr: (-7)
        - - expr: ((-7), ((11), (11)))
          - Right:
              expr: (-7)
        - - expr: ((-7), ((-7), (-7)))
          - Right:
              expr: (-7)
    - - - type: ([] Bool, HashMap Char Bool)
        - type: '[] Bool'
      - - - expr: ([True, False], HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], HashMap.fromList [('3', True)])
          - Right:
              expr: '[True, False]'
        - - expr: ([True], HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '[True]'
        - - expr: ([True], HashMap.fromList [('3', True)])
          - Right:
              expr: '[True]'
    - - - type: ([] Bool, (,) Int Int)
        - type: '[] Bool'
      - - - expr: ([True, False], ((-2), (-2)))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], ((-4), (-4)))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], ((15), (15)))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], ((-20), (-20)))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], ((-9), (-9)))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], ((-5), (-5)))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], ((-11), (-11)))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], ((11), (11)))
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], ((-7), (-7)))
          - Right:
              expr: '[True, False]'
        - - expr: ([True], ((-2), (-2)))
          - Right:
              expr: '[True]'
        - - expr: ([True], ((-4), (-4)))
          - Right:
              expr: '[True]'
        - - expr: ([True], ((15), (15)))
          - Right:
              expr: '[True]'
        - - expr: ([True], ((-20), (-20)))
          - Right:
              expr: '[True]'
        - - expr: ([True], ((-9), (-9)))
          - Right:
              expr: '[True]'
        - - expr: ([True], ((-5), (-5)))
          - Right:
              expr: '[True]'
        - - expr: ([True], ((-11), (-11)))
          - Right:
              expr: '[True]'
        - - expr: ([True], ((11), (11)))
          - Right:
              expr: '[True]'
        - - expr: ([True], ((-7), (-7)))
          - Right:
              expr: '[True]'
    - - - type: (HashMap Char Bool, (,) Int Int)
        - type: HashMap Char Bool
      - - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-2), (-2)))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-4), (-4)))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((15), (15)))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-20), (-20)))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-9), (-9)))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-5), (-5)))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-11), (-11)))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((11), (11)))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-7), (-7)))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True)], ((-2), (-2)))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], ((-4), (-4)))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], ((15), (15)))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], ((-20), (-20)))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], ((-9), (-9)))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], ((-5), (-5)))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], ((-11), (-11)))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], ((11), (11)))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], ((-7), (-7)))
          - Right:
              expr: (fromList [('3', True)])
    - - - type: (HashMap Char Bool, [] Char)
        - type: HashMap Char Bool
      - - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               ['3', '5', '7', '0'])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ['3', '5', '7'])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ['3'])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ['3', '5'])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True)], ['3', '5', '7', '0'])
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], ['3', '5', '7'])
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], ['3'])
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (HashMap.fromList [('3', True)], ['3', '5'])
          - Right:
              expr: (fromList [('3', True)])
    - - - type: ([] Bool, [] Bool)
        - type: '[] Bool'
      - - - expr: ([True, False], [True, False])
          - Right:
              expr: '[True, False]'
        - - expr: ([True, False], [True])
          - Right:
              expr: '[True, False]'
        - - expr: ([True], [True, False])
          - Right:
              expr: '[True]'
        - - expr: ([True], [True])
          - Right:
              expr: '[True]'
    - - - type: ([] Char, [] Char)
        - type: '[] Char'
      - - - expr: (['3', '5', '7', '0'], ['3', '5', '7', '0'])
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], ['3', '5', '7'])
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], ['3'])
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], ['3', '5'])
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7'], ['3', '5', '7', '0'])
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], ['3', '5', '7'])
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], ['3'])
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], ['3', '5'])
          - Right:
              expr: '"357"'
        - - expr: (['3'], ['3', '5', '7', '0'])
          - Right:
              expr: '"3"'
        - - expr: (['3'], ['3', '5', '7'])
          - Right:
              expr: '"3"'
        - - expr: (['3'], ['3'])
          - Right:
              expr: '"3"'
        - - expr: (['3'], ['3', '5'])
          - Right:
              expr: '"3"'
        - - expr: (['3', '5'], ['3', '5', '7', '0'])
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], ['3', '5', '7'])
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], ['3'])
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], ['3', '5'])
          - Right:
              expr: '"35"'
- - expr: let prepend = (:) in prepend
  - - - - type: ((,) Int Int, [(,) Int Int])
        - type: '[(,) Int Int]'
      - - - expr: |-
              (((-2), (-2)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(-2, -2), (-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)]'
        - - expr: (((-2), (-2)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(-2, -2), (-2, -2), (-4, -4), (15, 15)]'
        - - expr: (((-2), (-2)), [((-2), (-2))])
          - Right:
              expr: '[(-2, -2), (-2, -2)]'
        - - expr: (((-2), (-2)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(-2, -2), (-2, -2), (-4, -4)]'
        - - expr: |-
              (((-2), (-2)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(-2, -2), (-2, -2), (-4, -4), (15, 15), (-20, -20)]'
        - - expr: |-
              (((-4), (-4)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(-4, -4), (-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)]'
        - - expr: (((-4), (-4)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(-4, -4), (-2, -2), (-4, -4), (15, 15)]'
        - - expr: (((-4), (-4)), [((-2), (-2))])
          - Right:
              expr: '[(-4, -4), (-2, -2)]'
        - - expr: (((-4), (-4)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(-4, -4), (-2, -2), (-4, -4)]'
        - - expr: |-
              (((-4), (-4)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(-4, -4), (-2, -2), (-4, -4), (15, 15), (-20, -20)]'
        - - expr: |-
              (((15), (15)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(15, 15), (-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)]'
        - - expr: (((15), (15)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(15, 15), (-2, -2), (-4, -4), (15, 15)]'
        - - expr: (((15), (15)), [((-2), (-2))])
          - Right:
              expr: '[(15, 15), (-2, -2)]'
        - - expr: (((15), (15)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(15, 15), (-2, -2), (-4, -4)]'
        - - expr: |-
              (((15), (15)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(15, 15), (-2, -2), (-4, -4), (15, 15), (-20, -20)]'
        - - expr: |-
              (((-20), (-20)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(-20, -20), (-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)]'
        - - expr: (((-20), (-20)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(-20, -20), (-2, -2), (-4, -4), (15, 15)]'
        - - expr: (((-20), (-20)), [((-2), (-2))])
          - Right:
              expr: '[(-20, -20), (-2, -2)]'
        - - expr: (((-20), (-20)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(-20, -20), (-2, -2), (-4, -4)]'
        - - expr: |-
              (((-20), (-20)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(-20, -20), (-2, -2), (-4, -4), (15, 15), (-20, -20)]'
        - - expr: |-
              (((-9), (-9)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(-9, -9), (-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)]'
        - - expr: (((-9), (-9)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(-9, -9), (-2, -2), (-4, -4), (15, 15)]'
        - - expr: (((-9), (-9)), [((-2), (-2))])
          - Right:
              expr: '[(-9, -9), (-2, -2)]'
        - - expr: (((-9), (-9)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(-9, -9), (-2, -2), (-4, -4)]'
        - - expr: |-
              (((-9), (-9)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(-9, -9), (-2, -2), (-4, -4), (15, 15), (-20, -20)]'
        - - expr: |-
              (((-5), (-5)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(-5, -5), (-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)]'
        - - expr: (((-5), (-5)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(-5, -5), (-2, -2), (-4, -4), (15, 15)]'
        - - expr: (((-5), (-5)), [((-2), (-2))])
          - Right:
              expr: '[(-5, -5), (-2, -2)]'
        - - expr: (((-5), (-5)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(-5, -5), (-2, -2), (-4, -4)]'
        - - expr: |-
              (((-5), (-5)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(-5, -5), (-2, -2), (-4, -4), (15, 15), (-20, -20)]'
        - - expr: |-
              (((-11), (-11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(-11, -11), (-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)]'
        - - expr: (((-11), (-11)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(-11, -11), (-2, -2), (-4, -4), (15, 15)]'
        - - expr: (((-11), (-11)), [((-2), (-2))])
          - Right:
              expr: '[(-11, -11), (-2, -2)]'
        - - expr: (((-11), (-11)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(-11, -11), (-2, -2), (-4, -4)]'
        - - expr: |-
              (((-11), (-11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(-11, -11), (-2, -2), (-4, -4), (15, 15), (-20, -20)]'
        - - expr: |-
              (((11), (11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(11, 11), (-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)]'
        - - expr: (((11), (11)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(11, 11), (-2, -2), (-4, -4), (15, 15)]'
        - - expr: (((11), (11)), [((-2), (-2))])
          - Right:
              expr: '[(11, 11), (-2, -2)]'
        - - expr: (((11), (11)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(11, 11), (-2, -2), (-4, -4)]'
        - - expr: |-
              (((11), (11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(11, 11), (-2, -2), (-4, -4), (15, 15), (-20, -20)]'
        - - expr: |-
              (((-7), (-7)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[(-7, -7), (-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)]'
        - - expr: (((-7), (-7)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[(-7, -7), (-2, -2), (-4, -4), (15, 15)]'
        - - expr: (((-7), (-7)), [((-2), (-2))])
          - Right:
              expr: '[(-7, -7), (-2, -2)]'
        - - expr: (((-7), (-7)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[(-7, -7), (-2, -2), (-4, -4)]'
        - - expr: |-
              (((-7), (-7)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[(-7, -7), (-2, -2), (-4, -4), (15, 15), (-20, -20)]'
    - - - type: (Int, [Int])
        - type: '[Int]'
      - - - expr: ((-2), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[-2, -2, -4, 15, -20, -9]'
        - - expr: ((-2), [(-2), (-4), (15)])
          - Right:
              expr: '[-2, -2, -4, 15]'
        - - expr: ((-2), [(-2)])
          - Right:
              expr: '[-2, -2]'
        - - expr: ((-2), [(-2), (-4)])
          - Right:
              expr: '[-2, -2, -4]'
        - - expr: ((-2), [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[-2, -2, -4, 15, -20]'
        - - expr: ((-4), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[-4, -2, -4, 15, -20, -9]'
        - - expr: ((-4), [(-2), (-4), (15)])
          - Right:
              expr: '[-4, -2, -4, 15]'
        - - expr: ((-4), [(-2)])
          - Right:
              expr: '[-4, -2]'
        - - expr: ((-4), [(-2), (-4)])
          - Right:
              expr: '[-4, -2, -4]'
        - - expr: ((-4), [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[-4, -2, -4, 15, -20]'
        - - expr: ((15), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[15, -2, -4, 15, -20, -9]'
        - - expr: ((15), [(-2), (-4), (15)])
          - Right:
              expr: '[15, -2, -4, 15]'
        - - expr: ((15), [(-2)])
          - Right:
              expr: '[15, -2]'
        - - expr: ((15), [(-2), (-4)])
          - Right:
              expr: '[15, -2, -4]'
        - - expr: ((15), [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[15, -2, -4, 15, -20]'
        - - expr: ((-20), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[-20, -2, -4, 15, -20, -9]'
        - - expr: ((-20), [(-2), (-4), (15)])
          - Right:
              expr: '[-20, -2, -4, 15]'
        - - expr: ((-20), [(-2)])
          - Right:
              expr: '[-20, -2]'
        - - expr: ((-20), [(-2), (-4)])
          - Right:
              expr: '[-20, -2, -4]'
        - - expr: ((-20), [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[-20, -2, -4, 15, -20]'
        - - expr: ((-9), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[-9, -2, -4, 15, -20, -9]'
        - - expr: ((-9), [(-2), (-4), (15)])
          - Right:
              expr: '[-9, -2, -4, 15]'
        - - expr: ((-9), [(-2)])
          - Right:
              expr: '[-9, -2]'
        - - expr: ((-9), [(-2), (-4)])
          - Right:
              expr: '[-9, -2, -4]'
        - - expr: ((-9), [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[-9, -2, -4, 15, -20]'
        - - expr: ((-5), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[-5, -2, -4, 15, -20, -9]'
        - - expr: ((-5), [(-2), (-4), (15)])
          - Right:
              expr: '[-5, -2, -4, 15]'
        - - expr: ((-5), [(-2)])
          - Right:
              expr: '[-5, -2]'
        - - expr: ((-5), [(-2), (-4)])
          - Right:
              expr: '[-5, -2, -4]'
        - - expr: ((-5), [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[-5, -2, -4, 15, -20]'
        - - expr: ((-11), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[-11, -2, -4, 15, -20, -9]'
        - - expr: ((-11), [(-2), (-4), (15)])
          - Right:
              expr: '[-11, -2, -4, 15]'
        - - expr: ((-11), [(-2)])
          - Right:
              expr: '[-11, -2]'
        - - expr: ((-11), [(-2), (-4)])
          - Right:
              expr: '[-11, -2, -4]'
        - - expr: ((-11), [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[-11, -2, -4, 15, -20]'
        - - expr: ((11), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[11, -2, -4, 15, -20, -9]'
        - - expr: ((11), [(-2), (-4), (15)])
          - Right:
              expr: '[11, -2, -4, 15]'
        - - expr: ((11), [(-2)])
          - Right:
              expr: '[11, -2]'
        - - expr: ((11), [(-2), (-4)])
          - Right:
              expr: '[11, -2, -4]'
        - - expr: ((11), [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[11, -2, -4, 15, -20]'
        - - expr: ((-7), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[-7, -2, -4, 15, -20, -9]'
        - - expr: ((-7), [(-2), (-4), (15)])
          - Right:
              expr: '[-7, -2, -4, 15]'
        - - expr: ((-7), [(-2)])
          - Right:
              expr: '[-7, -2]'
        - - expr: ((-7), [(-2), (-4)])
          - Right:
              expr: '[-7, -2, -4]'
        - - expr: ((-7), [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[-7, -2, -4, 15, -20]'
    - - - type: ([] Bool, [[] Bool])
        - type: '[[] Bool]'
      - - - expr: ([True, False], [[True, False], [True]])
          - Right:
              expr: '[[True, False], [True, False], [True]]'
        - - expr: ([True, False], [[True, False]])
          - Right:
              expr: '[[True, False], [True, False]]'
        - - expr: ([True], [[True, False], [True]])
          - Right:
              expr: '[[True], [True, False], [True]]'
        - - expr: ([True], [[True, False]])
          - Right:
              expr: '[[True], [True, False]]'
    - - - type: ([] Char, [[] Char])
        - type: '[[] Char]'
      - - - expr: |-
              (['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '["3570", "3570", "357", "3", "35"]'
        - - expr: |-
              (['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '["3570", "3570", "357", "3"]'
        - - expr: (['3', '5', '7', '0'], [['3', '5', '7', '0']])
          - Right:
              expr: '["3570", "3570"]'
        - - expr: (['3', '5', '7', '0'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '["3570", "3570", "357"]'
        - - expr: |-
              (['3', '5', '7'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '["357", "3570", "357", "3", "35"]'
        - - expr: (['3', '5', '7'], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '["357", "3570", "357", "3"]'
        - - expr: (['3', '5', '7'], [['3', '5', '7', '0']])
          - Right:
              expr: '["357", "3570"]'
        - - expr: (['3', '5', '7'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '["357", "3570", "357"]'
        - - expr: (['3'], [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '["3", "3570", "357", "3", "35"]'
        - - expr: (['3'], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '["3", "3570", "357", "3"]'
        - - expr: (['3'], [['3', '5', '7', '0']])
          - Right:
              expr: '["3", "3570"]'
        - - expr: (['3'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '["3", "3570", "357"]'
        - - expr: |-
              (['3', '5'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '["35", "3570", "357", "3", "35"]'
        - - expr: (['3', '5'], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '["35", "3570", "357", "3"]'
        - - expr: (['3', '5'], [['3', '5', '7', '0']])
          - Right:
              expr: '["35", "3570"]'
        - - expr: (['3', '5'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '["35", "3570", "357"]'
    - - - type: (HashMap Char Bool, [HashMap Char Bool])
        - type: '[HashMap Char Bool]'
      - - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [fromList [('3', True), ('5', False)],
                 fromList [('3', True), ('5', False)], fromList [('3', True)]]
        - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: |-
                [fromList [('3', True), ('5', False)],
                 fromList [('3', True), ('5', False)]]
        - - expr: |-
              (HashMap.fromList [('3', True)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                [fromList [('3', True)], fromList [('3', True), ('5', False)],
                 fromList [('3', True)]]
        - - expr: |-
              (HashMap.fromList [('3', True)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[fromList [(''3'', True)], fromList [(''3'', True), (''5'', False)]]'
- - expr: pure
  - - - - type: Int
        - type: '[] Int'
      - - - expr: ((-2))
          - Right:
              expr: '[-2]'
        - - expr: ((-4))
          - Right:
              expr: '[-4]'
        - - expr: ((15))
          - Right:
              expr: '[15]'
        - - expr: ((-20))
          - Right:
              expr: '[-20]'
        - - expr: ((-9))
          - Right:
              expr: '[-9]'
        - - expr: ((-5))
          - Right:
              expr: '[-5]'
        - - expr: ((-11))
          - Right:
              expr: '[-11]'
        - - expr: ((11))
          - Right:
              expr: '[11]'
        - - expr: ((-7))
          - Right:
              expr: '[-7]'
    - - - type: HashMap Char Bool
        - type: Maybe (HashMap Char Bool)
      - - - expr: (HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (Just (fromList [('3', True), ('5', False)]))
        - - expr: (HashMap.fromList [('3', True)])
          - Right:
              expr: (Just (fromList [('3', True)]))
    - - - type: (,) Int Int
        - type: Maybe ((,) Int Int)
      - - - expr: (((-2), (-2)))
          - Right:
              expr: (Just (-2, -2))
        - - expr: (((-4), (-4)))
          - Right:
              expr: (Just (-4, -4))
        - - expr: (((15), (15)))
          - Right:
              expr: (Just (15, 15))
        - - expr: (((-20), (-20)))
          - Right:
              expr: (Just (-20, -20))
        - - expr: (((-9), (-9)))
          - Right:
              expr: (Just (-9, -9))
        - - expr: (((-5), (-5)))
          - Right:
              expr: (Just (-5, -5))
        - - expr: (((-11), (-11)))
          - Right:
              expr: (Just (-11, -11))
        - - expr: (((11), (11)))
          - Right:
              expr: (Just (11, 11))
        - - expr: (((-7), (-7)))
          - Right:
              expr: (Just (-7, -7))
    - - - type: Int
        - type: Maybe Int
      - - - expr: ((-2))
          - Right:
              expr: (Just (-2))
        - - expr: ((-4))
          - Right:
              expr: (Just (-4))
        - - expr: ((15))
          - Right:
              expr: (Just 15)
        - - expr: ((-20))
          - Right:
              expr: (Just (-20))
        - - expr: ((-9))
          - Right:
              expr: (Just (-9))
        - - expr: ((-5))
          - Right:
              expr: (Just (-5))
        - - expr: ((-11))
          - Right:
              expr: (Just (-11))
        - - expr: ((11))
          - Right:
              expr: (Just 11)
        - - expr: ((-7))
          - Right:
              expr: (Just (-7))
    - - - type: (,) Int Int
        - type: '[] ((,) Int Int)'
      - - - expr: (((-2), (-2)))
          - Right:
              expr: '[(-2, -2)]'
        - - expr: (((-4), (-4)))
          - Right:
              expr: '[(-4, -4)]'
        - - expr: (((15), (15)))
          - Right:
              expr: '[(15, 15)]'
        - - expr: (((-20), (-20)))
          - Right:
              expr: '[(-20, -20)]'
        - - expr: (((-9), (-9)))
          - Right:
              expr: '[(-9, -9)]'
        - - expr: (((-5), (-5)))
          - Right:
              expr: '[(-5, -5)]'
        - - expr: (((-11), (-11)))
          - Right:
              expr: '[(-11, -11)]'
        - - expr: (((11), (11)))
          - Right:
              expr: '[(11, 11)]'
        - - expr: (((-7), (-7)))
          - Right:
              expr: '[(-7, -7)]'
    - - - type: '[] Char'
        - type: Maybe ([] Char)
      - - - expr: (['3', '5', '7', '0'])
          - Right:
              expr: (Just "3570")
        - - expr: (['3', '5', '7'])
          - Right:
              expr: (Just "357")
        - - expr: (['3'])
          - Right:
              expr: (Just "3")
        - - expr: (['3', '5'])
          - Right:
              expr: (Just "35")
    - - - type: '[] Bool'
        - type: '[] ([] Bool)'
      - - - expr: ([True, False])
          - Right:
              expr: '[[True, False]]'
        - - expr: ([True])
          - Right:
              expr: '[[True]]'
    - - - type: '[] Bool'
        - type: Maybe ([] Bool)
      - - - expr: ([True, False])
          - Right:
              expr: (Just [True, False])
        - - expr: ([True])
          - Right:
              expr: (Just [True])
    - - - type: '[] Char'
        - type: '[] ([] Char)'
      - - - expr: (['3', '5', '7', '0'])
          - Right:
              expr: '["3570"]'
        - - expr: (['3', '5', '7'])
          - Right:
              expr: '["357"]'
        - - expr: (['3'])
          - Right:
              expr: '["3"]'
        - - expr: (['3', '5'])
          - Right:
              expr: '["35"]'
    - - - type: HashMap Char Bool
        - type: '[] (HashMap Char Bool)'
      - - - expr: (HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '[fromList [(''3'', True), (''5'', False)]]'
        - - expr: (HashMap.fromList [('3', True)])
          - Right:
              expr: '[fromList [(''3'', True)]]'
- - expr: show
  - - - - type: (,) Int Int
        - type: String
      - - - expr: (((-2), (-2)))
          - Right:
              expr: '"(-2,-2)"'
        - - expr: (((-4), (-4)))
          - Right:
              expr: '"(-4,-4)"'
        - - expr: (((15), (15)))
          - Right:
              expr: '"(15,15)"'
        - - expr: (((-20), (-20)))
          - Right:
              expr: '"(-20,-20)"'
        - - expr: (((-9), (-9)))
          - Right:
              expr: '"(-9,-9)"'
        - - expr: (((-5), (-5)))
          - Right:
              expr: '"(-5,-5)"'
        - - expr: (((-11), (-11)))
          - Right:
              expr: '"(-11,-11)"'
        - - expr: (((11), (11)))
          - Right:
              expr: '"(11,11)"'
        - - expr: (((-7), (-7)))
          - Right:
              expr: '"(-7,-7)"'
    - - - type: '[] Char'
        - type: String
      - - - expr: (['3', '5', '7', '0'])
          - Right:
              expr: '"\"3570\""'
        - - expr: (['3', '5', '7'])
          - Right:
              expr: '"\"357\""'
        - - expr: (['3'])
          - Right:
              expr: '"\"3\""'
        - - expr: (['3', '5'])
          - Right:
              expr: '"\"35\""'
    - - - type: Int
        - type: String
      - - - expr: ((-2))
          - Right:
              expr: '"-2"'
        - - expr: ((-4))
          - Right:
              expr: '"-4"'
        - - expr: ((15))
          - Right:
              expr: '"15"'
        - - expr: ((-20))
          - Right:
              expr: '"-20"'
        - - expr: ((-9))
          - Right:
              expr: '"-9"'
        - - expr: ((-5))
          - Right:
              expr: '"-5"'
        - - expr: ((-11))
          - Right:
              expr: '"-11"'
        - - expr: ((11))
          - Right:
              expr: '"11"'
        - - expr: ((-7))
          - Right:
              expr: '"-7"'
    - - - type: HashMap Char Bool
        - type: String
      - - - expr: (HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '"fromList [(''3'',True),(''5'',False)]"'
        - - expr: (HashMap.fromList [('3', True)])
          - Right:
              expr: '"fromList [(''3'',True)]"'
    - - - type: '[] Bool'
        - type: String
      - - - expr: ([True, False])
          - Right:
              expr: '"[True,False]"'
        - - expr: ([True])
          - Right:
              expr: '"[True]"'
- - expr: let tpl = (,) in tpl
  - - - - type: ([] Bool, (,) Int Int)
        - type: ([] Bool, (,) Int Int)
      - - - expr: ([True, False], ((-2), (-2)))
          - Right:
              expr: ([True, False], (-2, -2))
        - - expr: ([True, False], ((-4), (-4)))
          - Right:
              expr: ([True, False], (-4, -4))
        - - expr: ([True, False], ((15), (15)))
          - Right:
              expr: ([True, False], (15, 15))
        - - expr: ([True, False], ((-20), (-20)))
          - Right:
              expr: ([True, False], (-20, -20))
        - - expr: ([True, False], ((-9), (-9)))
          - Right:
              expr: ([True, False], (-9, -9))
        - - expr: ([True, False], ((-5), (-5)))
          - Right:
              expr: ([True, False], (-5, -5))
        - - expr: ([True, False], ((-11), (-11)))
          - Right:
              expr: ([True, False], (-11, -11))
        - - expr: ([True, False], ((11), (11)))
          - Right:
              expr: ([True, False], (11, 11))
        - - expr: ([True, False], ((-7), (-7)))
          - Right:
              expr: ([True, False], (-7, -7))
        - - expr: ([True], ((-2), (-2)))
          - Right:
              expr: ([True], (-2, -2))
        - - expr: ([True], ((-4), (-4)))
          - Right:
              expr: ([True], (-4, -4))
        - - expr: ([True], ((15), (15)))
          - Right:
              expr: ([True], (15, 15))
        - - expr: ([True], ((-20), (-20)))
          - Right:
              expr: ([True], (-20, -20))
        - - expr: ([True], ((-9), (-9)))
          - Right:
              expr: ([True], (-9, -9))
        - - expr: ([True], ((-5), (-5)))
          - Right:
              expr: ([True], (-5, -5))
        - - expr: ([True], ((-11), (-11)))
          - Right:
              expr: ([True], (-11, -11))
        - - expr: ([True], ((11), (11)))
          - Right:
              expr: ([True], (11, 11))
        - - expr: ([True], ((-7), (-7)))
          - Right:
              expr: ([True], (-7, -7))
    - - - type: ([] Bool, HashMap Char Bool)
        - type: ([] Bool, HashMap Char Bool)
      - - - expr: ([True, False], HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ([True, False], fromList [('3', True), ('5', False)])
        - - expr: ([True, False], HashMap.fromList [('3', True)])
          - Right:
              expr: ([True, False], fromList [('3', True)])
        - - expr: ([True], HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ([True], fromList [('3', True), ('5', False)])
        - - expr: ([True], HashMap.fromList [('3', True)])
          - Right:
              expr: ([True], fromList [('3', True)])
    - - - type: ((,) Int Int, Int)
        - type: ((,) Int Int, Int)
      - - - expr: (((-2), (-2)), (-2))
          - Right:
              expr: ((-2, -2), -2)
        - - expr: (((-2), (-2)), (-4))
          - Right:
              expr: ((-2, -2), -4)
        - - expr: (((-2), (-2)), (15))
          - Right:
              expr: ((-2, -2), 15)
        - - expr: (((-2), (-2)), (-20))
          - Right:
              expr: ((-2, -2), -20)
        - - expr: (((-2), (-2)), (-9))
          - Right:
              expr: ((-2, -2), -9)
        - - expr: (((-2), (-2)), (-5))
          - Right:
              expr: ((-2, -2), -5)
        - - expr: (((-2), (-2)), (-11))
          - Right:
              expr: ((-2, -2), -11)
        - - expr: (((-2), (-2)), (11))
          - Right:
              expr: ((-2, -2), 11)
        - - expr: (((-2), (-2)), (-7))
          - Right:
              expr: ((-2, -2), -7)
        - - expr: (((-4), (-4)), (-2))
          - Right:
              expr: ((-4, -4), -2)
        - - expr: (((-4), (-4)), (-4))
          - Right:
              expr: ((-4, -4), -4)
        - - expr: (((-4), (-4)), (15))
          - Right:
              expr: ((-4, -4), 15)
        - - expr: (((-4), (-4)), (-20))
          - Right:
              expr: ((-4, -4), -20)
        - - expr: (((-4), (-4)), (-9))
          - Right:
              expr: ((-4, -4), -9)
        - - expr: (((-4), (-4)), (-5))
          - Right:
              expr: ((-4, -4), -5)
        - - expr: (((-4), (-4)), (-11))
          - Right:
              expr: ((-4, -4), -11)
        - - expr: (((-4), (-4)), (11))
          - Right:
              expr: ((-4, -4), 11)
        - - expr: (((-4), (-4)), (-7))
          - Right:
              expr: ((-4, -4), -7)
        - - expr: (((15), (15)), (-2))
          - Right:
              expr: ((15, 15), -2)
        - - expr: (((15), (15)), (-4))
          - Right:
              expr: ((15, 15), -4)
        - - expr: (((15), (15)), (15))
          - Right:
              expr: ((15, 15), 15)
        - - expr: (((15), (15)), (-20))
          - Right:
              expr: ((15, 15), -20)
        - - expr: (((15), (15)), (-9))
          - Right:
              expr: ((15, 15), -9)
        - - expr: (((15), (15)), (-5))
          - Right:
              expr: ((15, 15), -5)
        - - expr: (((15), (15)), (-11))
          - Right:
              expr: ((15, 15), -11)
        - - expr: (((15), (15)), (11))
          - Right:
              expr: ((15, 15), 11)
        - - expr: (((15), (15)), (-7))
          - Right:
              expr: ((15, 15), -7)
        - - expr: (((-20), (-20)), (-2))
          - Right:
              expr: ((-20, -20), -2)
        - - expr: (((-20), (-20)), (-4))
          - Right:
              expr: ((-20, -20), -4)
        - - expr: (((-20), (-20)), (15))
          - Right:
              expr: ((-20, -20), 15)
        - - expr: (((-20), (-20)), (-20))
          - Right:
              expr: ((-20, -20), -20)
        - - expr: (((-20), (-20)), (-9))
          - Right:
              expr: ((-20, -20), -9)
        - - expr: (((-20), (-20)), (-5))
          - Right:
              expr: ((-20, -20), -5)
        - - expr: (((-20), (-20)), (-11))
          - Right:
              expr: ((-20, -20), -11)
        - - expr: (((-20), (-20)), (11))
          - Right:
              expr: ((-20, -20), 11)
        - - expr: (((-20), (-20)), (-7))
          - Right:
              expr: ((-20, -20), -7)
        - - expr: (((-9), (-9)), (-2))
          - Right:
              expr: ((-9, -9), -2)
        - - expr: (((-9), (-9)), (-4))
          - Right:
              expr: ((-9, -9), -4)
        - - expr: (((-9), (-9)), (15))
          - Right:
              expr: ((-9, -9), 15)
        - - expr: (((-9), (-9)), (-20))
          - Right:
              expr: ((-9, -9), -20)
        - - expr: (((-9), (-9)), (-9))
          - Right:
              expr: ((-9, -9), -9)
        - - expr: (((-9), (-9)), (-5))
          - Right:
              expr: ((-9, -9), -5)
        - - expr: (((-9), (-9)), (-11))
          - Right:
              expr: ((-9, -9), -11)
        - - expr: (((-9), (-9)), (11))
          - Right:
              expr: ((-9, -9), 11)
        - - expr: (((-9), (-9)), (-7))
          - Right:
              expr: ((-9, -9), -7)
        - - expr: (((-5), (-5)), (-2))
          - Right:
              expr: ((-5, -5), -2)
        - - expr: (((-5), (-5)), (-4))
          - Right:
              expr: ((-5, -5), -4)
        - - expr: (((-5), (-5)), (15))
          - Right:
              expr: ((-5, -5), 15)
        - - expr: (((-5), (-5)), (-20))
          - Right:
              expr: ((-5, -5), -20)
        - - expr: (((-5), (-5)), (-9))
          - Right:
              expr: ((-5, -5), -9)
        - - expr: (((-5), (-5)), (-5))
          - Right:
              expr: ((-5, -5), -5)
        - - expr: (((-5), (-5)), (-11))
          - Right:
              expr: ((-5, -5), -11)
        - - expr: (((-5), (-5)), (11))
          - Right:
              expr: ((-5, -5), 11)
        - - expr: (((-5), (-5)), (-7))
          - Right:
              expr: ((-5, -5), -7)
        - - expr: (((-11), (-11)), (-2))
          - Right:
              expr: ((-11, -11), -2)
        - - expr: (((-11), (-11)), (-4))
          - Right:
              expr: ((-11, -11), -4)
        - - expr: (((-11), (-11)), (15))
          - Right:
              expr: ((-11, -11), 15)
        - - expr: (((-11), (-11)), (-20))
          - Right:
              expr: ((-11, -11), -20)
        - - expr: (((-11), (-11)), (-9))
          - Right:
              expr: ((-11, -11), -9)
        - - expr: (((-11), (-11)), (-5))
          - Right:
              expr: ((-11, -11), -5)
        - - expr: (((-11), (-11)), (-11))
          - Right:
              expr: ((-11, -11), -11)
        - - expr: (((-11), (-11)), (11))
          - Right:
              expr: ((-11, -11), 11)
        - - expr: (((-11), (-11)), (-7))
          - Right:
              expr: ((-11, -11), -7)
        - - expr: (((11), (11)), (-2))
          - Right:
              expr: ((11, 11), -2)
        - - expr: (((11), (11)), (-4))
          - Right:
              expr: ((11, 11), -4)
        - - expr: (((11), (11)), (15))
          - Right:
              expr: ((11, 11), 15)
        - - expr: (((11), (11)), (-20))
          - Right:
              expr: ((11, 11), -20)
        - - expr: (((11), (11)), (-9))
          - Right:
              expr: ((11, 11), -9)
        - - expr: (((11), (11)), (-5))
          - Right:
              expr: ((11, 11), -5)
        - - expr: (((11), (11)), (-11))
          - Right:
              expr: ((11, 11), -11)
        - - expr: (((11), (11)), (11))
          - Right:
              expr: ((11, 11), 11)
        - - expr: (((11), (11)), (-7))
          - Right:
              expr: ((11, 11), -7)
        - - expr: (((-7), (-7)), (-2))
          - Right:
              expr: ((-7, -7), -2)
        - - expr: (((-7), (-7)), (-4))
          - Right:
              expr: ((-7, -7), -4)
        - - expr: (((-7), (-7)), (15))
          - Right:
              expr: ((-7, -7), 15)
        - - expr: (((-7), (-7)), (-20))
          - Right:
              expr: ((-7, -7), -20)
        - - expr: (((-7), (-7)), (-9))
          - Right:
              expr: ((-7, -7), -9)
        - - expr: (((-7), (-7)), (-5))
          - Right:
              expr: ((-7, -7), -5)
        - - expr: (((-7), (-7)), (-11))
          - Right:
              expr: ((-7, -7), -11)
        - - expr: (((-7), (-7)), (11))
          - Right:
              expr: ((-7, -7), 11)
        - - expr: (((-7), (-7)), (-7))
          - Right:
              expr: ((-7, -7), -7)
    - - - type: (Int, Int)
        - type: (Int, Int)
      - - - expr: ((-2), (-2))
          - Right:
              expr: (-2, -2)
        - - expr: ((-2), (-4))
          - Right:
              expr: (-2, -4)
        - - expr: ((-2), (15))
          - Right:
              expr: (-2, 15)
        - - expr: ((-2), (-20))
          - Right:
              expr: (-2, -20)
        - - expr: ((-2), (-9))
          - Right:
              expr: (-2, -9)
        - - expr: ((-2), (-5))
          - Right:
              expr: (-2, -5)
        - - expr: ((-2), (-11))
          - Right:
              expr: (-2, -11)
        - - expr: ((-2), (11))
          - Right:
              expr: (-2, 11)
        - - expr: ((-2), (-7))
          - Right:
              expr: (-2, -7)
        - - expr: ((-4), (-2))
          - Right:
              expr: (-4, -2)
        - - expr: ((-4), (-4))
          - Right:
              expr: (-4, -4)
        - - expr: ((-4), (15))
          - Right:
              expr: (-4, 15)
        - - expr: ((-4), (-20))
          - Right:
              expr: (-4, -20)
        - - expr: ((-4), (-9))
          - Right:
              expr: (-4, -9)
        - - expr: ((-4), (-5))
          - Right:
              expr: (-4, -5)
        - - expr: ((-4), (-11))
          - Right:
              expr: (-4, -11)
        - - expr: ((-4), (11))
          - Right:
              expr: (-4, 11)
        - - expr: ((-4), (-7))
          - Right:
              expr: (-4, -7)
        - - expr: ((15), (-2))
          - Right:
              expr: (15, -2)
        - - expr: ((15), (-4))
          - Right:
              expr: (15, -4)
        - - expr: ((15), (15))
          - Right:
              expr: (15, 15)
        - - expr: ((15), (-20))
          - Right:
              expr: (15, -20)
        - - expr: ((15), (-9))
          - Right:
              expr: (15, -9)
        - - expr: ((15), (-5))
          - Right:
              expr: (15, -5)
        - - expr: ((15), (-11))
          - Right:
              expr: (15, -11)
        - - expr: ((15), (11))
          - Right:
              expr: (15, 11)
        - - expr: ((15), (-7))
          - Right:
              expr: (15, -7)
        - - expr: ((-20), (-2))
          - Right:
              expr: (-20, -2)
        - - expr: ((-20), (-4))
          - Right:
              expr: (-20, -4)
        - - expr: ((-20), (15))
          - Right:
              expr: (-20, 15)
        - - expr: ((-20), (-20))
          - Right:
              expr: (-20, -20)
        - - expr: ((-20), (-9))
          - Right:
              expr: (-20, -9)
        - - expr: ((-20), (-5))
          - Right:
              expr: (-20, -5)
        - - expr: ((-20), (-11))
          - Right:
              expr: (-20, -11)
        - - expr: ((-20), (11))
          - Right:
              expr: (-20, 11)
        - - expr: ((-20), (-7))
          - Right:
              expr: (-20, -7)
        - - expr: ((-9), (-2))
          - Right:
              expr: (-9, -2)
        - - expr: ((-9), (-4))
          - Right:
              expr: (-9, -4)
        - - expr: ((-9), (15))
          - Right:
              expr: (-9, 15)
        - - expr: ((-9), (-20))
          - Right:
              expr: (-9, -20)
        - - expr: ((-9), (-9))
          - Right:
              expr: (-9, -9)
        - - expr: ((-9), (-5))
          - Right:
              expr: (-9, -5)
        - - expr: ((-9), (-11))
          - Right:
              expr: (-9, -11)
        - - expr: ((-9), (11))
          - Right:
              expr: (-9, 11)
        - - expr: ((-9), (-7))
          - Right:
              expr: (-9, -7)
        - - expr: ((-5), (-2))
          - Right:
              expr: (-5, -2)
        - - expr: ((-5), (-4))
          - Right:
              expr: (-5, -4)
        - - expr: ((-5), (15))
          - Right:
              expr: (-5, 15)
        - - expr: ((-5), (-20))
          - Right:
              expr: (-5, -20)
        - - expr: ((-5), (-9))
          - Right:
              expr: (-5, -9)
        - - expr: ((-5), (-5))
          - Right:
              expr: (-5, -5)
        - - expr: ((-5), (-11))
          - Right:
              expr: (-5, -11)
        - - expr: ((-5), (11))
          - Right:
              expr: (-5, 11)
        - - expr: ((-5), (-7))
          - Right:
              expr: (-5, -7)
        - - expr: ((-11), (-2))
          - Right:
              expr: (-11, -2)
        - - expr: ((-11), (-4))
          - Right:
              expr: (-11, -4)
        - - expr: ((-11), (15))
          - Right:
              expr: (-11, 15)
        - - expr: ((-11), (-20))
          - Right:
              expr: (-11, -20)
        - - expr: ((-11), (-9))
          - Right:
              expr: (-11, -9)
        - - expr: ((-11), (-5))
          - Right:
              expr: (-11, -5)
        - - expr: ((-11), (-11))
          - Right:
              expr: (-11, -11)
        - - expr: ((-11), (11))
          - Right:
              expr: (-11, 11)
        - - expr: ((-11), (-7))
          - Right:
              expr: (-11, -7)
        - - expr: ((11), (-2))
          - Right:
              expr: (11, -2)
        - - expr: ((11), (-4))
          - Right:
              expr: (11, -4)
        - - expr: ((11), (15))
          - Right:
              expr: (11, 15)
        - - expr: ((11), (-20))
          - Right:
              expr: (11, -20)
        - - expr: ((11), (-9))
          - Right:
              expr: (11, -9)
        - - expr: ((11), (-5))
          - Right:
              expr: (11, -5)
        - - expr: ((11), (-11))
          - Right:
              expr: (11, -11)
        - - expr: ((11), (11))
          - Right:
              expr: (11, 11)
        - - expr: ((11), (-7))
          - Right:
              expr: (11, -7)
        - - expr: ((-7), (-2))
          - Right:
              expr: (-7, -2)
        - - expr: ((-7), (-4))
          - Right:
              expr: (-7, -4)
        - - expr: ((-7), (15))
          - Right:
              expr: (-7, 15)
        - - expr: ((-7), (-20))
          - Right:
              expr: (-7, -20)
        - - expr: ((-7), (-9))
          - Right:
              expr: (-7, -9)
        - - expr: ((-7), (-5))
          - Right:
              expr: (-7, -5)
        - - expr: ((-7), (-11))
          - Right:
              expr: (-7, -11)
        - - expr: ((-7), (11))
          - Right:
              expr: (-7, 11)
        - - expr: ((-7), (-7))
          - Right:
              expr: (-7, -7)
    - - - type: (Int, HashMap Char Bool)
        - type: (Int, HashMap Char Bool)
      - - - expr: ((-2), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-2, fromList [('3', True), ('5', False)])
        - - expr: ((-2), HashMap.fromList [('3', True)])
          - Right:
              expr: (-2, fromList [('3', True)])
        - - expr: ((-4), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-4, fromList [('3', True), ('5', False)])
        - - expr: ((-4), HashMap.fromList [('3', True)])
          - Right:
              expr: (-4, fromList [('3', True)])
        - - expr: ((15), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (15, fromList [('3', True), ('5', False)])
        - - expr: ((15), HashMap.fromList [('3', True)])
          - Right:
              expr: (15, fromList [('3', True)])
        - - expr: ((-20), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-20, fromList [('3', True), ('5', False)])
        - - expr: ((-20), HashMap.fromList [('3', True)])
          - Right:
              expr: (-20, fromList [('3', True)])
        - - expr: ((-9), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-9, fromList [('3', True), ('5', False)])
        - - expr: ((-9), HashMap.fromList [('3', True)])
          - Right:
              expr: (-9, fromList [('3', True)])
        - - expr: ((-5), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-5, fromList [('3', True), ('5', False)])
        - - expr: ((-5), HashMap.fromList [('3', True)])
          - Right:
              expr: (-5, fromList [('3', True)])
        - - expr: ((-11), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-11, fromList [('3', True), ('5', False)])
        - - expr: ((-11), HashMap.fromList [('3', True)])
          - Right:
              expr: (-11, fromList [('3', True)])
        - - expr: ((11), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (11, fromList [('3', True), ('5', False)])
        - - expr: ((11), HashMap.fromList [('3', True)])
          - Right:
              expr: (11, fromList [('3', True)])
        - - expr: ((-7), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (-7, fromList [('3', True), ('5', False)])
        - - expr: ((-7), HashMap.fromList [('3', True)])
          - Right:
              expr: (-7, fromList [('3', True)])
    - - - type: (Int, [] Bool)
        - type: (Int, [] Bool)
      - - - expr: ((-2), [True, False])
          - Right:
              expr: (-2, [True, False])
        - - expr: ((-2), [True])
          - Right:
              expr: (-2, [True])
        - - expr: ((-4), [True, False])
          - Right:
              expr: (-4, [True, False])
        - - expr: ((-4), [True])
          - Right:
              expr: (-4, [True])
        - - expr: ((15), [True, False])
          - Right:
              expr: (15, [True, False])
        - - expr: ((15), [True])
          - Right:
              expr: (15, [True])
        - - expr: ((-20), [True, False])
          - Right:
              expr: (-20, [True, False])
        - - expr: ((-20), [True])
          - Right:
              expr: (-20, [True])
        - - expr: ((-9), [True, False])
          - Right:
              expr: (-9, [True, False])
        - - expr: ((-9), [True])
          - Right:
              expr: (-9, [True])
        - - expr: ((-5), [True, False])
          - Right:
              expr: (-5, [True, False])
        - - expr: ((-5), [True])
          - Right:
              expr: (-5, [True])
        - - expr: ((-11), [True, False])
          - Right:
              expr: (-11, [True, False])
        - - expr: ((-11), [True])
          - Right:
              expr: (-11, [True])
        - - expr: ((11), [True, False])
          - Right:
              expr: (11, [True, False])
        - - expr: ((11), [True])
          - Right:
              expr: (11, [True])
        - - expr: ((-7), [True, False])
          - Right:
              expr: (-7, [True, False])
        - - expr: ((-7), [True])
          - Right:
              expr: (-7, [True])
    - - - type: ((,) Int Int, [] Char)
        - type: ((,) Int Int, [] Char)
      - - - expr: (((-2), (-2)), ['3', '5', '7', '0'])
          - Right:
              expr: ((-2, -2), "3570")
        - - expr: (((-2), (-2)), ['3', '5', '7'])
          - Right:
              expr: ((-2, -2), "357")
        - - expr: (((-2), (-2)), ['3'])
          - Right:
              expr: ((-2, -2), "3")
        - - expr: (((-2), (-2)), ['3', '5'])
          - Right:
              expr: ((-2, -2), "35")
        - - expr: (((-4), (-4)), ['3', '5', '7', '0'])
          - Right:
              expr: ((-4, -4), "3570")
        - - expr: (((-4), (-4)), ['3', '5', '7'])
          - Right:
              expr: ((-4, -4), "357")
        - - expr: (((-4), (-4)), ['3'])
          - Right:
              expr: ((-4, -4), "3")
        - - expr: (((-4), (-4)), ['3', '5'])
          - Right:
              expr: ((-4, -4), "35")
        - - expr: (((15), (15)), ['3', '5', '7', '0'])
          - Right:
              expr: ((15, 15), "3570")
        - - expr: (((15), (15)), ['3', '5', '7'])
          - Right:
              expr: ((15, 15), "357")
        - - expr: (((15), (15)), ['3'])
          - Right:
              expr: ((15, 15), "3")
        - - expr: (((15), (15)), ['3', '5'])
          - Right:
              expr: ((15, 15), "35")
        - - expr: (((-20), (-20)), ['3', '5', '7', '0'])
          - Right:
              expr: ((-20, -20), "3570")
        - - expr: (((-20), (-20)), ['3', '5', '7'])
          - Right:
              expr: ((-20, -20), "357")
        - - expr: (((-20), (-20)), ['3'])
          - Right:
              expr: ((-20, -20), "3")
        - - expr: (((-20), (-20)), ['3', '5'])
          - Right:
              expr: ((-20, -20), "35")
        - - expr: (((-9), (-9)), ['3', '5', '7', '0'])
          - Right:
              expr: ((-9, -9), "3570")
        - - expr: (((-9), (-9)), ['3', '5', '7'])
          - Right:
              expr: ((-9, -9), "357")
        - - expr: (((-9), (-9)), ['3'])
          - Right:
              expr: ((-9, -9), "3")
        - - expr: (((-9), (-9)), ['3', '5'])
          - Right:
              expr: ((-9, -9), "35")
        - - expr: (((-5), (-5)), ['3', '5', '7', '0'])
          - Right:
              expr: ((-5, -5), "3570")
        - - expr: (((-5), (-5)), ['3', '5', '7'])
          - Right:
              expr: ((-5, -5), "357")
        - - expr: (((-5), (-5)), ['3'])
          - Right:
              expr: ((-5, -5), "3")
        - - expr: (((-5), (-5)), ['3', '5'])
          - Right:
              expr: ((-5, -5), "35")
        - - expr: (((-11), (-11)), ['3', '5', '7', '0'])
          - Right:
              expr: ((-11, -11), "3570")
        - - expr: (((-11), (-11)), ['3', '5', '7'])
          - Right:
              expr: ((-11, -11), "357")
        - - expr: (((-11), (-11)), ['3'])
          - Right:
              expr: ((-11, -11), "3")
        - - expr: (((-11), (-11)), ['3', '5'])
          - Right:
              expr: ((-11, -11), "35")
        - - expr: (((11), (11)), ['3', '5', '7', '0'])
          - Right:
              expr: ((11, 11), "3570")
        - - expr: (((11), (11)), ['3', '5', '7'])
          - Right:
              expr: ((11, 11), "357")
        - - expr: (((11), (11)), ['3'])
          - Right:
              expr: ((11, 11), "3")
        - - expr: (((11), (11)), ['3', '5'])
          - Right:
              expr: ((11, 11), "35")
        - - expr: (((-7), (-7)), ['3', '5', '7', '0'])
          - Right:
              expr: ((-7, -7), "3570")
        - - expr: (((-7), (-7)), ['3', '5', '7'])
          - Right:
              expr: ((-7, -7), "357")
        - - expr: (((-7), (-7)), ['3'])
          - Right:
              expr: ((-7, -7), "3")
        - - expr: (((-7), (-7)), ['3', '5'])
          - Right:
              expr: ((-7, -7), "35")
    - - - type: ((,) Int Int, [] Bool)
        - type: ((,) Int Int, [] Bool)
      - - - expr: (((-2), (-2)), [True, False])
          - Right:
              expr: ((-2, -2), [True, False])
        - - expr: (((-2), (-2)), [True])
          - Right:
              expr: ((-2, -2), [True])
        - - expr: (((-4), (-4)), [True, False])
          - Right:
              expr: ((-4, -4), [True, False])
        - - expr: (((-4), (-4)), [True])
          - Right:
              expr: ((-4, -4), [True])
        - - expr: (((15), (15)), [True, False])
          - Right:
              expr: ((15, 15), [True, False])
        - - expr: (((15), (15)), [True])
          - Right:
              expr: ((15, 15), [True])
        - - expr: (((-20), (-20)), [True, False])
          - Right:
              expr: ((-20, -20), [True, False])
        - - expr: (((-20), (-20)), [True])
          - Right:
              expr: ((-20, -20), [True])
        - - expr: (((-9), (-9)), [True, False])
          - Right:
              expr: ((-9, -9), [True, False])
        - - expr: (((-9), (-9)), [True])
          - Right:
              expr: ((-9, -9), [True])
        - - expr: (((-5), (-5)), [True, False])
          - Right:
              expr: ((-5, -5), [True, False])
        - - expr: (((-5), (-5)), [True])
          - Right:
              expr: ((-5, -5), [True])
        - - expr: (((-11), (-11)), [True, False])
          - Right:
              expr: ((-11, -11), [True, False])
        - - expr: (((-11), (-11)), [True])
          - Right:
              expr: ((-11, -11), [True])
        - - expr: (((11), (11)), [True, False])
          - Right:
              expr: ((11, 11), [True, False])
        - - expr: (((11), (11)), [True])
          - Right:
              expr: ((11, 11), [True])
        - - expr: (((-7), (-7)), [True, False])
          - Right:
              expr: ((-7, -7), [True, False])
        - - expr: (((-7), (-7)), [True])
          - Right:
              expr: ((-7, -7), [True])
    - - - type: ([] Char, (,) Int Int)
        - type: ([] Char, (,) Int Int)
      - - - expr: (['3', '5', '7', '0'], ((-2), (-2)))
          - Right:
              expr: ("3570", (-2, -2))
        - - expr: (['3', '5', '7', '0'], ((-4), (-4)))
          - Right:
              expr: ("3570", (-4, -4))
        - - expr: (['3', '5', '7', '0'], ((15), (15)))
          - Right:
              expr: ("3570", (15, 15))
        - - expr: (['3', '5', '7', '0'], ((-20), (-20)))
          - Right:
              expr: ("3570", (-20, -20))
        - - expr: (['3', '5', '7', '0'], ((-9), (-9)))
          - Right:
              expr: ("3570", (-9, -9))
        - - expr: (['3', '5', '7', '0'], ((-5), (-5)))
          - Right:
              expr: ("3570", (-5, -5))
        - - expr: (['3', '5', '7', '0'], ((-11), (-11)))
          - Right:
              expr: ("3570", (-11, -11))
        - - expr: (['3', '5', '7', '0'], ((11), (11)))
          - Right:
              expr: ("3570", (11, 11))
        - - expr: (['3', '5', '7', '0'], ((-7), (-7)))
          - Right:
              expr: ("3570", (-7, -7))
        - - expr: (['3', '5', '7'], ((-2), (-2)))
          - Right:
              expr: ("357", (-2, -2))
        - - expr: (['3', '5', '7'], ((-4), (-4)))
          - Right:
              expr: ("357", (-4, -4))
        - - expr: (['3', '5', '7'], ((15), (15)))
          - Right:
              expr: ("357", (15, 15))
        - - expr: (['3', '5', '7'], ((-20), (-20)))
          - Right:
              expr: ("357", (-20, -20))
        - - expr: (['3', '5', '7'], ((-9), (-9)))
          - Right:
              expr: ("357", (-9, -9))
        - - expr: (['3', '5', '7'], ((-5), (-5)))
          - Right:
              expr: ("357", (-5, -5))
        - - expr: (['3', '5', '7'], ((-11), (-11)))
          - Right:
              expr: ("357", (-11, -11))
        - - expr: (['3', '5', '7'], ((11), (11)))
          - Right:
              expr: ("357", (11, 11))
        - - expr: (['3', '5', '7'], ((-7), (-7)))
          - Right:
              expr: ("357", (-7, -7))
        - - expr: (['3'], ((-2), (-2)))
          - Right:
              expr: ("3", (-2, -2))
        - - expr: (['3'], ((-4), (-4)))
          - Right:
              expr: ("3", (-4, -4))
        - - expr: (['3'], ((15), (15)))
          - Right:
              expr: ("3", (15, 15))
        - - expr: (['3'], ((-20), (-20)))
          - Right:
              expr: ("3", (-20, -20))
        - - expr: (['3'], ((-9), (-9)))
          - Right:
              expr: ("3", (-9, -9))
        - - expr: (['3'], ((-5), (-5)))
          - Right:
              expr: ("3", (-5, -5))
        - - expr: (['3'], ((-11), (-11)))
          - Right:
              expr: ("3", (-11, -11))
        - - expr: (['3'], ((11), (11)))
          - Right:
              expr: ("3", (11, 11))
        - - expr: (['3'], ((-7), (-7)))
          - Right:
              expr: ("3", (-7, -7))
        - - expr: (['3', '5'], ((-2), (-2)))
          - Right:
              expr: ("35", (-2, -2))
        - - expr: (['3', '5'], ((-4), (-4)))
          - Right:
              expr: ("35", (-4, -4))
        - - expr: (['3', '5'], ((15), (15)))
          - Right:
              expr: ("35", (15, 15))
        - - expr: (['3', '5'], ((-20), (-20)))
          - Right:
              expr: ("35", (-20, -20))
        - - expr: (['3', '5'], ((-9), (-9)))
          - Right:
              expr: ("35", (-9, -9))
        - - expr: (['3', '5'], ((-5), (-5)))
          - Right:
              expr: ("35", (-5, -5))
        - - expr: (['3', '5'], ((-11), (-11)))
          - Right:
              expr: ("35", (-11, -11))
        - - expr: (['3', '5'], ((11), (11)))
          - Right:
              expr: ("35", (11, 11))
        - - expr: (['3', '5'], ((-7), (-7)))
          - Right:
              expr: ("35", (-7, -7))
    - - - type: ([] Bool, Int)
        - type: ([] Bool, Int)
      - - - expr: ([True, False], (-2))
          - Right:
              expr: ([True, False], -2)
        - - expr: ([True, False], (-4))
          - Right:
              expr: ([True, False], -4)
        - - expr: ([True, False], (15))
          - Right:
              expr: ([True, False], 15)
        - - expr: ([True, False], (-20))
          - Right:
              expr: ([True, False], -20)
        - - expr: ([True, False], (-9))
          - Right:
              expr: ([True, False], -9)
        - - expr: ([True, False], (-5))
          - Right:
              expr: ([True, False], -5)
        - - expr: ([True, False], (-11))
          - Right:
              expr: ([True, False], -11)
        - - expr: ([True, False], (11))
          - Right:
              expr: ([True, False], 11)
        - - expr: ([True, False], (-7))
          - Right:
              expr: ([True, False], -7)
        - - expr: ([True], (-2))
          - Right:
              expr: ([True], -2)
        - - expr: ([True], (-4))
          - Right:
              expr: ([True], -4)
        - - expr: ([True], (15))
          - Right:
              expr: ([True], 15)
        - - expr: ([True], (-20))
          - Right:
              expr: ([True], -20)
        - - expr: ([True], (-9))
          - Right:
              expr: ([True], -9)
        - - expr: ([True], (-5))
          - Right:
              expr: ([True], -5)
        - - expr: ([True], (-11))
          - Right:
              expr: ([True], -11)
        - - expr: ([True], (11))
          - Right:
              expr: ([True], 11)
        - - expr: ([True], (-7))
          - Right:
              expr: ([True], -7)
    - - - type: (HashMap Char Bool, (,) Int Int)
        - type: (HashMap Char Bool, (,) Int Int)
      - - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-2), (-2)))
          - Right:
              expr: (fromList [('3', True), ('5', False)], (-2, -2))
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-4), (-4)))
          - Right:
              expr: (fromList [('3', True), ('5', False)], (-4, -4))
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((15), (15)))
          - Right:
              expr: (fromList [('3', True), ('5', False)], (15, 15))
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-20), (-20)))
          - Right:
              expr: (fromList [('3', True), ('5', False)], (-20, -20))
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-9), (-9)))
          - Right:
              expr: (fromList [('3', True), ('5', False)], (-9, -9))
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-5), (-5)))
          - Right:
              expr: (fromList [('3', True), ('5', False)], (-5, -5))
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-11), (-11)))
          - Right:
              expr: (fromList [('3', True), ('5', False)], (-11, -11))
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((11), (11)))
          - Right:
              expr: (fromList [('3', True), ('5', False)], (11, 11))
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ((-7), (-7)))
          - Right:
              expr: (fromList [('3', True), ('5', False)], (-7, -7))
        - - expr: (HashMap.fromList [('3', True)], ((-2), (-2)))
          - Right:
              expr: (fromList [('3', True)], (-2, -2))
        - - expr: (HashMap.fromList [('3', True)], ((-4), (-4)))
          - Right:
              expr: (fromList [('3', True)], (-4, -4))
        - - expr: (HashMap.fromList [('3', True)], ((15), (15)))
          - Right:
              expr: (fromList [('3', True)], (15, 15))
        - - expr: (HashMap.fromList [('3', True)], ((-20), (-20)))
          - Right:
              expr: (fromList [('3', True)], (-20, -20))
        - - expr: (HashMap.fromList [('3', True)], ((-9), (-9)))
          - Right:
              expr: (fromList [('3', True)], (-9, -9))
        - - expr: (HashMap.fromList [('3', True)], ((-5), (-5)))
          - Right:
              expr: (fromList [('3', True)], (-5, -5))
        - - expr: (HashMap.fromList [('3', True)], ((-11), (-11)))
          - Right:
              expr: (fromList [('3', True)], (-11, -11))
        - - expr: (HashMap.fromList [('3', True)], ((11), (11)))
          - Right:
              expr: (fromList [('3', True)], (11, 11))
        - - expr: (HashMap.fromList [('3', True)], ((-7), (-7)))
          - Right:
              expr: (fromList [('3', True)], (-7, -7))
    - - - type: (Int, (,) Int Int)
        - type: (Int, (,) Int Int)
      - - - expr: ((-2), ((-2), (-2)))
          - Right:
              expr: (-2, (-2, -2))
        - - expr: ((-2), ((-4), (-4)))
          - Right:
              expr: (-2, (-4, -4))
        - - expr: ((-2), ((15), (15)))
          - Right:
              expr: (-2, (15, 15))
        - - expr: ((-2), ((-20), (-20)))
          - Right:
              expr: (-2, (-20, -20))
        - - expr: ((-2), ((-9), (-9)))
          - Right:
              expr: (-2, (-9, -9))
        - - expr: ((-2), ((-5), (-5)))
          - Right:
              expr: (-2, (-5, -5))
        - - expr: ((-2), ((-11), (-11)))
          - Right:
              expr: (-2, (-11, -11))
        - - expr: ((-2), ((11), (11)))
          - Right:
              expr: (-2, (11, 11))
        - - expr: ((-2), ((-7), (-7)))
          - Right:
              expr: (-2, (-7, -7))
        - - expr: ((-4), ((-2), (-2)))
          - Right:
              expr: (-4, (-2, -2))
        - - expr: ((-4), ((-4), (-4)))
          - Right:
              expr: (-4, (-4, -4))
        - - expr: ((-4), ((15), (15)))
          - Right:
              expr: (-4, (15, 15))
        - - expr: ((-4), ((-20), (-20)))
          - Right:
              expr: (-4, (-20, -20))
        - - expr: ((-4), ((-9), (-9)))
          - Right:
              expr: (-4, (-9, -9))
        - - expr: ((-4), ((-5), (-5)))
          - Right:
              expr: (-4, (-5, -5))
        - - expr: ((-4), ((-11), (-11)))
          - Right:
              expr: (-4, (-11, -11))
        - - expr: ((-4), ((11), (11)))
          - Right:
              expr: (-4, (11, 11))
        - - expr: ((-4), ((-7), (-7)))
          - Right:
              expr: (-4, (-7, -7))
        - - expr: ((15), ((-2), (-2)))
          - Right:
              expr: (15, (-2, -2))
        - - expr: ((15), ((-4), (-4)))
          - Right:
              expr: (15, (-4, -4))
        - - expr: ((15), ((15), (15)))
          - Right:
              expr: (15, (15, 15))
        - - expr: ((15), ((-20), (-20)))
          - Right:
              expr: (15, (-20, -20))
        - - expr: ((15), ((-9), (-9)))
          - Right:
              expr: (15, (-9, -9))
        - - expr: ((15), ((-5), (-5)))
          - Right:
              expr: (15, (-5, -5))
        - - expr: ((15), ((-11), (-11)))
          - Right:
              expr: (15, (-11, -11))
        - - expr: ((15), ((11), (11)))
          - Right:
              expr: (15, (11, 11))
        - - expr: ((15), ((-7), (-7)))
          - Right:
              expr: (15, (-7, -7))
        - - expr: ((-20), ((-2), (-2)))
          - Right:
              expr: (-20, (-2, -2))
        - - expr: ((-20), ((-4), (-4)))
          - Right:
              expr: (-20, (-4, -4))
        - - expr: ((-20), ((15), (15)))
          - Right:
              expr: (-20, (15, 15))
        - - expr: ((-20), ((-20), (-20)))
          - Right:
              expr: (-20, (-20, -20))
        - - expr: ((-20), ((-9), (-9)))
          - Right:
              expr: (-20, (-9, -9))
        - - expr: ((-20), ((-5), (-5)))
          - Right:
              expr: (-20, (-5, -5))
        - - expr: ((-20), ((-11), (-11)))
          - Right:
              expr: (-20, (-11, -11))
        - - expr: ((-20), ((11), (11)))
          - Right:
              expr: (-20, (11, 11))
        - - expr: ((-20), ((-7), (-7)))
          - Right:
              expr: (-20, (-7, -7))
        - - expr: ((-9), ((-2), (-2)))
          - Right:
              expr: (-9, (-2, -2))
        - - expr: ((-9), ((-4), (-4)))
          - Right:
              expr: (-9, (-4, -4))
        - - expr: ((-9), ((15), (15)))
          - Right:
              expr: (-9, (15, 15))
        - - expr: ((-9), ((-20), (-20)))
          - Right:
              expr: (-9, (-20, -20))
        - - expr: ((-9), ((-9), (-9)))
          - Right:
              expr: (-9, (-9, -9))
        - - expr: ((-9), ((-5), (-5)))
          - Right:
              expr: (-9, (-5, -5))
        - - expr: ((-9), ((-11), (-11)))
          - Right:
              expr: (-9, (-11, -11))
        - - expr: ((-9), ((11), (11)))
          - Right:
              expr: (-9, (11, 11))
        - - expr: ((-9), ((-7), (-7)))
          - Right:
              expr: (-9, (-7, -7))
        - - expr: ((-5), ((-2), (-2)))
          - Right:
              expr: (-5, (-2, -2))
        - - expr: ((-5), ((-4), (-4)))
          - Right:
              expr: (-5, (-4, -4))
        - - expr: ((-5), ((15), (15)))
          - Right:
              expr: (-5, (15, 15))
        - - expr: ((-5), ((-20), (-20)))
          - Right:
              expr: (-5, (-20, -20))
        - - expr: ((-5), ((-9), (-9)))
          - Right:
              expr: (-5, (-9, -9))
        - - expr: ((-5), ((-5), (-5)))
          - Right:
              expr: (-5, (-5, -5))
        - - expr: ((-5), ((-11), (-11)))
          - Right:
              expr: (-5, (-11, -11))
        - - expr: ((-5), ((11), (11)))
          - Right:
              expr: (-5, (11, 11))
        - - expr: ((-5), ((-7), (-7)))
          - Right:
              expr: (-5, (-7, -7))
        - - expr: ((-11), ((-2), (-2)))
          - Right:
              expr: (-11, (-2, -2))
        - - expr: ((-11), ((-4), (-4)))
          - Right:
              expr: (-11, (-4, -4))
        - - expr: ((-11), ((15), (15)))
          - Right:
              expr: (-11, (15, 15))
        - - expr: ((-11), ((-20), (-20)))
          - Right:
              expr: (-11, (-20, -20))
        - - expr: ((-11), ((-9), (-9)))
          - Right:
              expr: (-11, (-9, -9))
        - - expr: ((-11), ((-5), (-5)))
          - Right:
              expr: (-11, (-5, -5))
        - - expr: ((-11), ((-11), (-11)))
          - Right:
              expr: (-11, (-11, -11))
        - - expr: ((-11), ((11), (11)))
          - Right:
              expr: (-11, (11, 11))
        - - expr: ((-11), ((-7), (-7)))
          - Right:
              expr: (-11, (-7, -7))
        - - expr: ((11), ((-2), (-2)))
          - Right:
              expr: (11, (-2, -2))
        - - expr: ((11), ((-4), (-4)))
          - Right:
              expr: (11, (-4, -4))
        - - expr: ((11), ((15), (15)))
          - Right:
              expr: (11, (15, 15))
        - - expr: ((11), ((-20), (-20)))
          - Right:
              expr: (11, (-20, -20))
        - - expr: ((11), ((-9), (-9)))
          - Right:
              expr: (11, (-9, -9))
        - - expr: ((11), ((-5), (-5)))
          - Right:
              expr: (11, (-5, -5))
        - - expr: ((11), ((-11), (-11)))
          - Right:
              expr: (11, (-11, -11))
        - - expr: ((11), ((11), (11)))
          - Right:
              expr: (11, (11, 11))
        - - expr: ((11), ((-7), (-7)))
          - Right:
              expr: (11, (-7, -7))
        - - expr: ((-7), ((-2), (-2)))
          - Right:
              expr: (-7, (-2, -2))
        - - expr: ((-7), ((-4), (-4)))
          - Right:
              expr: (-7, (-4, -4))
        - - expr: ((-7), ((15), (15)))
          - Right:
              expr: (-7, (15, 15))
        - - expr: ((-7), ((-20), (-20)))
          - Right:
              expr: (-7, (-20, -20))
        - - expr: ((-7), ((-9), (-9)))
          - Right:
              expr: (-7, (-9, -9))
        - - expr: ((-7), ((-5), (-5)))
          - Right:
              expr: (-7, (-5, -5))
        - - expr: ((-7), ((-11), (-11)))
          - Right:
              expr: (-7, (-11, -11))
        - - expr: ((-7), ((11), (11)))
          - Right:
              expr: (-7, (11, 11))
        - - expr: ((-7), ((-7), (-7)))
          - Right:
              expr: (-7, (-7, -7))
    - - - type: (HashMap Char Bool, [] Char)
        - type: (HashMap Char Bool, [] Char)
      - - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               ['3', '5', '7', '0'])
          - Right:
              expr: (fromList [('3', True), ('5', False)], "3570")
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ['3', '5', '7'])
          - Right:
              expr: (fromList [('3', True), ('5', False)], "357")
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ['3'])
          - Right:
              expr: (fromList [('3', True), ('5', False)], "3")
        - - expr: (HashMap.fromList [('3', True), ('5', False)], ['3', '5'])
          - Right:
              expr: (fromList [('3', True), ('5', False)], "35")
        - - expr: (HashMap.fromList [('3', True)], ['3', '5', '7', '0'])
          - Right:
              expr: (fromList [('3', True)], "3570")
        - - expr: (HashMap.fromList [('3', True)], ['3', '5', '7'])
          - Right:
              expr: (fromList [('3', True)], "357")
        - - expr: (HashMap.fromList [('3', True)], ['3'])
          - Right:
              expr: (fromList [('3', True)], "3")
        - - expr: (HashMap.fromList [('3', True)], ['3', '5'])
          - Right:
              expr: (fromList [('3', True)], "35")
    - - - type: ([] Bool, [] Char)
        - type: ([] Bool, [] Char)
      - - - expr: ([True, False], ['3', '5', '7', '0'])
          - Right:
              expr: ([True, False], "3570")
        - - expr: ([True, False], ['3', '5', '7'])
          - Right:
              expr: ([True, False], "357")
        - - expr: ([True, False], ['3'])
          - Right:
              expr: ([True, False], "3")
        - - expr: ([True, False], ['3', '5'])
          - Right:
              expr: ([True, False], "35")
        - - expr: ([True], ['3', '5', '7', '0'])
          - Right:
              expr: ([True], "3570")
        - - expr: ([True], ['3', '5', '7'])
          - Right:
              expr: ([True], "357")
        - - expr: ([True], ['3'])
          - Right:
              expr: ([True], "3")
        - - expr: ([True], ['3', '5'])
          - Right:
              expr: ([True], "35")
    - - - type: ((,) Int Int, HashMap Char Bool)
        - type: ((,) Int Int, HashMap Char Bool)
      - - - expr: (((-2), (-2)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ((-2, -2), fromList [('3', True), ('5', False)])
        - - expr: (((-2), (-2)), HashMap.fromList [('3', True)])
          - Right:
              expr: ((-2, -2), fromList [('3', True)])
        - - expr: (((-4), (-4)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ((-4, -4), fromList [('3', True), ('5', False)])
        - - expr: (((-4), (-4)), HashMap.fromList [('3', True)])
          - Right:
              expr: ((-4, -4), fromList [('3', True)])
        - - expr: (((15), (15)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ((15, 15), fromList [('3', True), ('5', False)])
        - - expr: (((15), (15)), HashMap.fromList [('3', True)])
          - Right:
              expr: ((15, 15), fromList [('3', True)])
        - - expr: (((-20), (-20)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ((-20, -20), fromList [('3', True), ('5', False)])
        - - expr: (((-20), (-20)), HashMap.fromList [('3', True)])
          - Right:
              expr: ((-20, -20), fromList [('3', True)])
        - - expr: (((-9), (-9)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ((-9, -9), fromList [('3', True), ('5', False)])
        - - expr: (((-9), (-9)), HashMap.fromList [('3', True)])
          - Right:
              expr: ((-9, -9), fromList [('3', True)])
        - - expr: (((-5), (-5)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ((-5, -5), fromList [('3', True), ('5', False)])
        - - expr: (((-5), (-5)), HashMap.fromList [('3', True)])
          - Right:
              expr: ((-5, -5), fromList [('3', True)])
        - - expr: (((-11), (-11)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ((-11, -11), fromList [('3', True), ('5', False)])
        - - expr: (((-11), (-11)), HashMap.fromList [('3', True)])
          - Right:
              expr: ((-11, -11), fromList [('3', True)])
        - - expr: (((11), (11)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ((11, 11), fromList [('3', True), ('5', False)])
        - - expr: (((11), (11)), HashMap.fromList [('3', True)])
          - Right:
              expr: ((11, 11), fromList [('3', True)])
        - - expr: (((-7), (-7)), HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ((-7, -7), fromList [('3', True), ('5', False)])
        - - expr: (((-7), (-7)), HashMap.fromList [('3', True)])
          - Right:
              expr: ((-7, -7), fromList [('3', True)])
    - - - type: ([] Char, [] Char)
        - type: ([] Char, [] Char)
      - - - expr: (['3', '5', '7', '0'], ['3', '5', '7', '0'])
          - Right:
              expr: ("3570", "3570")
        - - expr: (['3', '5', '7', '0'], ['3', '5', '7'])
          - Right:
              expr: ("3570", "357")
        - - expr: (['3', '5', '7', '0'], ['3'])
          - Right:
              expr: ("3570", "3")
        - - expr: (['3', '5', '7', '0'], ['3', '5'])
          - Right:
              expr: ("3570", "35")
        - - expr: (['3', '5', '7'], ['3', '5', '7', '0'])
          - Right:
              expr: ("357", "3570")
        - - expr: (['3', '5', '7'], ['3', '5', '7'])
          - Right:
              expr: ("357", "357")
        - - expr: (['3', '5', '7'], ['3'])
          - Right:
              expr: ("357", "3")
        - - expr: (['3', '5', '7'], ['3', '5'])
          - Right:
              expr: ("357", "35")
        - - expr: (['3'], ['3', '5', '7', '0'])
          - Right:
              expr: ("3", "3570")
        - - expr: (['3'], ['3', '5', '7'])
          - Right:
              expr: ("3", "357")
        - - expr: (['3'], ['3'])
          - Right:
              expr: ("3", "3")
        - - expr: (['3'], ['3', '5'])
          - Right:
              expr: ("3", "35")
        - - expr: (['3', '5'], ['3', '5', '7', '0'])
          - Right:
              expr: ("35", "3570")
        - - expr: (['3', '5'], ['3', '5', '7'])
          - Right:
              expr: ("35", "357")
        - - expr: (['3', '5'], ['3'])
          - Right:
              expr: ("35", "3")
        - - expr: (['3', '5'], ['3', '5'])
          - Right:
              expr: ("35", "35")
    - - - type: (HashMap Char Bool, [] Bool)
        - type: (HashMap Char Bool, [] Bool)
      - - - expr: (HashMap.fromList [('3', True), ('5', False)], [True, False])
          - Right:
              expr: (fromList [('3', True), ('5', False)], [True, False])
        - - expr: (HashMap.fromList [('3', True), ('5', False)], [True])
          - Right:
              expr: (fromList [('3', True), ('5', False)], [True])
        - - expr: (HashMap.fromList [('3', True)], [True, False])
          - Right:
              expr: (fromList [('3', True)], [True, False])
        - - expr: (HashMap.fromList [('3', True)], [True])
          - Right:
              expr: (fromList [('3', True)], [True])
    - - - type: (Int, [] Char)
        - type: (Int, [] Char)
      - - - expr: ((-2), ['3', '5', '7', '0'])
          - Right:
              expr: (-2, "3570")
        - - expr: ((-2), ['3', '5', '7'])
          - Right:
              expr: (-2, "357")
        - - expr: ((-2), ['3'])
          - Right:
              expr: (-2, "3")
        - - expr: ((-2), ['3', '5'])
          - Right:
              expr: (-2, "35")
        - - expr: ((-4), ['3', '5', '7', '0'])
          - Right:
              expr: (-4, "3570")
        - - expr: ((-4), ['3', '5', '7'])
          - Right:
              expr: (-4, "357")
        - - expr: ((-4), ['3'])
          - Right:
              expr: (-4, "3")
        - - expr: ((-4), ['3', '5'])
          - Right:
              expr: (-4, "35")
        - - expr: ((15), ['3', '5', '7', '0'])
          - Right:
              expr: (15, "3570")
        - - expr: ((15), ['3', '5', '7'])
          - Right:
              expr: (15, "357")
        - - expr: ((15), ['3'])
          - Right:
              expr: (15, "3")
        - - expr: ((15), ['3', '5'])
          - Right:
              expr: (15, "35")
        - - expr: ((-20), ['3', '5', '7', '0'])
          - Right:
              expr: (-20, "3570")
        - - expr: ((-20), ['3', '5', '7'])
          - Right:
              expr: (-20, "357")
        - - expr: ((-20), ['3'])
          - Right:
              expr: (-20, "3")
        - - expr: ((-20), ['3', '5'])
          - Right:
              expr: (-20, "35")
        - - expr: ((-9), ['3', '5', '7', '0'])
          - Right:
              expr: (-9, "3570")
        - - expr: ((-9), ['3', '5', '7'])
          - Right:
              expr: (-9, "357")
        - - expr: ((-9), ['3'])
          - Right:
              expr: (-9, "3")
        - - expr: ((-9), ['3', '5'])
          - Right:
              expr: (-9, "35")
        - - expr: ((-5), ['3', '5', '7', '0'])
          - Right:
              expr: (-5, "3570")
        - - expr: ((-5), ['3', '5', '7'])
          - Right:
              expr: (-5, "357")
        - - expr: ((-5), ['3'])
          - Right:
              expr: (-5, "3")
        - - expr: ((-5), ['3', '5'])
          - Right:
              expr: (-5, "35")
        - - expr: ((-11), ['3', '5', '7', '0'])
          - Right:
              expr: (-11, "3570")
        - - expr: ((-11), ['3', '5', '7'])
          - Right:
              expr: (-11, "357")
        - - expr: ((-11), ['3'])
          - Right:
              expr: (-11, "3")
        - - expr: ((-11), ['3', '5'])
          - Right:
              expr: (-11, "35")
        - - expr: ((11), ['3', '5', '7', '0'])
          - Right:
              expr: (11, "3570")
        - - expr: ((11), ['3', '5', '7'])
          - Right:
              expr: (11, "357")
        - - expr: ((11), ['3'])
          - Right:
              expr: (11, "3")
        - - expr: ((11), ['3', '5'])
          - Right:
              expr: (11, "35")
        - - expr: ((-7), ['3', '5', '7', '0'])
          - Right:
              expr: (-7, "3570")
        - - expr: ((-7), ['3', '5', '7'])
          - Right:
              expr: (-7, "357")
        - - expr: ((-7), ['3'])
          - Right:
              expr: (-7, "3")
        - - expr: ((-7), ['3', '5'])
          - Right:
              expr: (-7, "35")
    - - - type: ([] Char, [] Bool)
        - type: ([] Char, [] Bool)
      - - - expr: (['3', '5', '7', '0'], [True, False])
          - Right:
              expr: ("3570", [True, False])
        - - expr: (['3', '5', '7', '0'], [True])
          - Right:
              expr: ("3570", [True])
        - - expr: (['3', '5', '7'], [True, False])
          - Right:
              expr: ("357", [True, False])
        - - expr: (['3', '5', '7'], [True])
          - Right:
              expr: ("357", [True])
        - - expr: (['3'], [True, False])
          - Right:
              expr: ("3", [True, False])
        - - expr: (['3'], [True])
          - Right:
              expr: ("3", [True])
        - - expr: (['3', '5'], [True, False])
          - Right:
              expr: ("35", [True, False])
        - - expr: (['3', '5'], [True])
          - Right:
              expr: ("35", [True])
    - - - type: ([] Char, Int)
        - type: ([] Char, Int)
      - - - expr: (['3', '5', '7', '0'], (-2))
          - Right:
              expr: ("3570", -2)
        - - expr: (['3', '5', '7', '0'], (-4))
          - Right:
              expr: ("3570", -4)
        - - expr: (['3', '5', '7', '0'], (15))
          - Right:
              expr: ("3570", 15)
        - - expr: (['3', '5', '7', '0'], (-20))
          - Right:
              expr: ("3570", -20)
        - - expr: (['3', '5', '7', '0'], (-9))
          - Right:
              expr: ("3570", -9)
        - - expr: (['3', '5', '7', '0'], (-5))
          - Right:
              expr: ("3570", -5)
        - - expr: (['3', '5', '7', '0'], (-11))
          - Right:
              expr: ("3570", -11)
        - - expr: (['3', '5', '7', '0'], (11))
          - Right:
              expr: ("3570", 11)
        - - expr: (['3', '5', '7', '0'], (-7))
          - Right:
              expr: ("3570", -7)
        - - expr: (['3', '5', '7'], (-2))
          - Right:
              expr: ("357", -2)
        - - expr: (['3', '5', '7'], (-4))
          - Right:
              expr: ("357", -4)
        - - expr: (['3', '5', '7'], (15))
          - Right:
              expr: ("357", 15)
        - - expr: (['3', '5', '7'], (-20))
          - Right:
              expr: ("357", -20)
        - - expr: (['3', '5', '7'], (-9))
          - Right:
              expr: ("357", -9)
        - - expr: (['3', '5', '7'], (-5))
          - Right:
              expr: ("357", -5)
        - - expr: (['3', '5', '7'], (-11))
          - Right:
              expr: ("357", -11)
        - - expr: (['3', '5', '7'], (11))
          - Right:
              expr: ("357", 11)
        - - expr: (['3', '5', '7'], (-7))
          - Right:
              expr: ("357", -7)
        - - expr: (['3'], (-2))
          - Right:
              expr: ("3", -2)
        - - expr: (['3'], (-4))
          - Right:
              expr: ("3", -4)
        - - expr: (['3'], (15))
          - Right:
              expr: ("3", 15)
        - - expr: (['3'], (-20))
          - Right:
              expr: ("3", -20)
        - - expr: (['3'], (-9))
          - Right:
              expr: ("3", -9)
        - - expr: (['3'], (-5))
          - Right:
              expr: ("3", -5)
        - - expr: (['3'], (-11))
          - Right:
              expr: ("3", -11)
        - - expr: (['3'], (11))
          - Right:
              expr: ("3", 11)
        - - expr: (['3'], (-7))
          - Right:
              expr: ("3", -7)
        - - expr: (['3', '5'], (-2))
          - Right:
              expr: ("35", -2)
        - - expr: (['3', '5'], (-4))
          - Right:
              expr: ("35", -4)
        - - expr: (['3', '5'], (15))
          - Right:
              expr: ("35", 15)
        - - expr: (['3', '5'], (-20))
          - Right:
              expr: ("35", -20)
        - - expr: (['3', '5'], (-9))
          - Right:
              expr: ("35", -9)
        - - expr: (['3', '5'], (-5))
          - Right:
              expr: ("35", -5)
        - - expr: (['3', '5'], (-11))
          - Right:
              expr: ("35", -11)
        - - expr: (['3', '5'], (11))
          - Right:
              expr: ("35", 11)
        - - expr: (['3', '5'], (-7))
          - Right:
              expr: ("35", -7)
    - - - type: (HashMap Char Bool, Int)
        - type: (HashMap Char Bool, Int)
      - - - expr: (HashMap.fromList [('3', True), ('5', False)], (-2))
          - Right:
              expr: (fromList [('3', True), ('5', False)], -2)
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (-4))
          - Right:
              expr: (fromList [('3', True), ('5', False)], -4)
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (15))
          - Right:
              expr: (fromList [('3', True), ('5', False)], 15)
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (-20))
          - Right:
              expr: (fromList [('3', True), ('5', False)], -20)
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (-9))
          - Right:
              expr: (fromList [('3', True), ('5', False)], -9)
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (-5))
          - Right:
              expr: (fromList [('3', True), ('5', False)], -5)
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (-11))
          - Right:
              expr: (fromList [('3', True), ('5', False)], -11)
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (11))
          - Right:
              expr: (fromList [('3', True), ('5', False)], 11)
        - - expr: (HashMap.fromList [('3', True), ('5', False)], (-7))
          - Right:
              expr: (fromList [('3', True), ('5', False)], -7)
        - - expr: (HashMap.fromList [('3', True)], (-2))
          - Right:
              expr: (fromList [('3', True)], -2)
        - - expr: (HashMap.fromList [('3', True)], (-4))
          - Right:
              expr: (fromList [('3', True)], -4)
        - - expr: (HashMap.fromList [('3', True)], (15))
          - Right:
              expr: (fromList [('3', True)], 15)
        - - expr: (HashMap.fromList [('3', True)], (-20))
          - Right:
              expr: (fromList [('3', True)], -20)
        - - expr: (HashMap.fromList [('3', True)], (-9))
          - Right:
              expr: (fromList [('3', True)], -9)
        - - expr: (HashMap.fromList [('3', True)], (-5))
          - Right:
              expr: (fromList [('3', True)], -5)
        - - expr: (HashMap.fromList [('3', True)], (-11))
          - Right:
              expr: (fromList [('3', True)], -11)
        - - expr: (HashMap.fromList [('3', True)], (11))
          - Right:
              expr: (fromList [('3', True)], 11)
        - - expr: (HashMap.fromList [('3', True)], (-7))
          - Right:
              expr: (fromList [('3', True)], -7)
    - - - type: (HashMap Char Bool, HashMap Char Bool)
        - type: (HashMap Char Bool, HashMap Char Bool)
      - - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: |-
                (fromList [('3', True), ('5', False)],
                 fromList [('3', True), ('5', False)])
        - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               HashMap.fromList [('3', True)])
          - Right:
              expr: (fromList [('3', True), ('5', False)], fromList [('3', True)])
        - - expr: |-
              (HashMap.fromList [('3', True)],
               HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (fromList [('3', True)], fromList [('3', True), ('5', False)])
        - - expr: (HashMap.fromList [('3', True)], HashMap.fromList [('3', True)])
          - Right:
              expr: (fromList [('3', True)], fromList [('3', True)])
    - - - type: ([] Bool, [] Bool)
        - type: ([] Bool, [] Bool)
      - - - expr: ([True, False], [True, False])
          - Right:
              expr: ([True, False], [True, False])
        - - expr: ([True, False], [True])
          - Right:
              expr: ([True, False], [True])
        - - expr: ([True], [True, False])
          - Right:
              expr: ([True], [True, False])
        - - expr: ([True], [True])
          - Right:
              expr: ([True], [True])
    - - - type: ((,) Int Int, (,) Int Int)
        - type: ((,) Int Int, (,) Int Int)
      - - - expr: (((-2), (-2)), ((-2), (-2)))
          - Right:
              expr: ((-2, -2), (-2, -2))
        - - expr: (((-2), (-2)), ((-4), (-4)))
          - Right:
              expr: ((-2, -2), (-4, -4))
        - - expr: (((-2), (-2)), ((15), (15)))
          - Right:
              expr: ((-2, -2), (15, 15))
        - - expr: (((-2), (-2)), ((-20), (-20)))
          - Right:
              expr: ((-2, -2), (-20, -20))
        - - expr: (((-2), (-2)), ((-9), (-9)))
          - Right:
              expr: ((-2, -2), (-9, -9))
        - - expr: (((-2), (-2)), ((-5), (-5)))
          - Right:
              expr: ((-2, -2), (-5, -5))
        - - expr: (((-2), (-2)), ((-11), (-11)))
          - Right:
              expr: ((-2, -2), (-11, -11))
        - - expr: (((-2), (-2)), ((11), (11)))
          - Right:
              expr: ((-2, -2), (11, 11))
        - - expr: (((-2), (-2)), ((-7), (-7)))
          - Right:
              expr: ((-2, -2), (-7, -7))
        - - expr: (((-4), (-4)), ((-2), (-2)))
          - Right:
              expr: ((-4, -4), (-2, -2))
        - - expr: (((-4), (-4)), ((-4), (-4)))
          - Right:
              expr: ((-4, -4), (-4, -4))
        - - expr: (((-4), (-4)), ((15), (15)))
          - Right:
              expr: ((-4, -4), (15, 15))
        - - expr: (((-4), (-4)), ((-20), (-20)))
          - Right:
              expr: ((-4, -4), (-20, -20))
        - - expr: (((-4), (-4)), ((-9), (-9)))
          - Right:
              expr: ((-4, -4), (-9, -9))
        - - expr: (((-4), (-4)), ((-5), (-5)))
          - Right:
              expr: ((-4, -4), (-5, -5))
        - - expr: (((-4), (-4)), ((-11), (-11)))
          - Right:
              expr: ((-4, -4), (-11, -11))
        - - expr: (((-4), (-4)), ((11), (11)))
          - Right:
              expr: ((-4, -4), (11, 11))
        - - expr: (((-4), (-4)), ((-7), (-7)))
          - Right:
              expr: ((-4, -4), (-7, -7))
        - - expr: (((15), (15)), ((-2), (-2)))
          - Right:
              expr: ((15, 15), (-2, -2))
        - - expr: (((15), (15)), ((-4), (-4)))
          - Right:
              expr: ((15, 15), (-4, -4))
        - - expr: (((15), (15)), ((15), (15)))
          - Right:
              expr: ((15, 15), (15, 15))
        - - expr: (((15), (15)), ((-20), (-20)))
          - Right:
              expr: ((15, 15), (-20, -20))
        - - expr: (((15), (15)), ((-9), (-9)))
          - Right:
              expr: ((15, 15), (-9, -9))
        - - expr: (((15), (15)), ((-5), (-5)))
          - Right:
              expr: ((15, 15), (-5, -5))
        - - expr: (((15), (15)), ((-11), (-11)))
          - Right:
              expr: ((15, 15), (-11, -11))
        - - expr: (((15), (15)), ((11), (11)))
          - Right:
              expr: ((15, 15), (11, 11))
        - - expr: (((15), (15)), ((-7), (-7)))
          - Right:
              expr: ((15, 15), (-7, -7))
        - - expr: (((-20), (-20)), ((-2), (-2)))
          - Right:
              expr: ((-20, -20), (-2, -2))
        - - expr: (((-20), (-20)), ((-4), (-4)))
          - Right:
              expr: ((-20, -20), (-4, -4))
        - - expr: (((-20), (-20)), ((15), (15)))
          - Right:
              expr: ((-20, -20), (15, 15))
        - - expr: (((-20), (-20)), ((-20), (-20)))
          - Right:
              expr: ((-20, -20), (-20, -20))
        - - expr: (((-20), (-20)), ((-9), (-9)))
          - Right:
              expr: ((-20, -20), (-9, -9))
        - - expr: (((-20), (-20)), ((-5), (-5)))
          - Right:
              expr: ((-20, -20), (-5, -5))
        - - expr: (((-20), (-20)), ((-11), (-11)))
          - Right:
              expr: ((-20, -20), (-11, -11))
        - - expr: (((-20), (-20)), ((11), (11)))
          - Right:
              expr: ((-20, -20), (11, 11))
        - - expr: (((-20), (-20)), ((-7), (-7)))
          - Right:
              expr: ((-20, -20), (-7, -7))
        - - expr: (((-9), (-9)), ((-2), (-2)))
          - Right:
              expr: ((-9, -9), (-2, -2))
        - - expr: (((-9), (-9)), ((-4), (-4)))
          - Right:
              expr: ((-9, -9), (-4, -4))
        - - expr: (((-9), (-9)), ((15), (15)))
          - Right:
              expr: ((-9, -9), (15, 15))
        - - expr: (((-9), (-9)), ((-20), (-20)))
          - Right:
              expr: ((-9, -9), (-20, -20))
        - - expr: (((-9), (-9)), ((-9), (-9)))
          - Right:
              expr: ((-9, -9), (-9, -9))
        - - expr: (((-9), (-9)), ((-5), (-5)))
          - Right:
              expr: ((-9, -9), (-5, -5))
        - - expr: (((-9), (-9)), ((-11), (-11)))
          - Right:
              expr: ((-9, -9), (-11, -11))
        - - expr: (((-9), (-9)), ((11), (11)))
          - Right:
              expr: ((-9, -9), (11, 11))
        - - expr: (((-9), (-9)), ((-7), (-7)))
          - Right:
              expr: ((-9, -9), (-7, -7))
        - - expr: (((-5), (-5)), ((-2), (-2)))
          - Right:
              expr: ((-5, -5), (-2, -2))
        - - expr: (((-5), (-5)), ((-4), (-4)))
          - Right:
              expr: ((-5, -5), (-4, -4))
        - - expr: (((-5), (-5)), ((15), (15)))
          - Right:
              expr: ((-5, -5), (15, 15))
        - - expr: (((-5), (-5)), ((-20), (-20)))
          - Right:
              expr: ((-5, -5), (-20, -20))
        - - expr: (((-5), (-5)), ((-9), (-9)))
          - Right:
              expr: ((-5, -5), (-9, -9))
        - - expr: (((-5), (-5)), ((-5), (-5)))
          - Right:
              expr: ((-5, -5), (-5, -5))
        - - expr: (((-5), (-5)), ((-11), (-11)))
          - Right:
              expr: ((-5, -5), (-11, -11))
        - - expr: (((-5), (-5)), ((11), (11)))
          - Right:
              expr: ((-5, -5), (11, 11))
        - - expr: (((-5), (-5)), ((-7), (-7)))
          - Right:
              expr: ((-5, -5), (-7, -7))
        - - expr: (((-11), (-11)), ((-2), (-2)))
          - Right:
              expr: ((-11, -11), (-2, -2))
        - - expr: (((-11), (-11)), ((-4), (-4)))
          - Right:
              expr: ((-11, -11), (-4, -4))
        - - expr: (((-11), (-11)), ((15), (15)))
          - Right:
              expr: ((-11, -11), (15, 15))
        - - expr: (((-11), (-11)), ((-20), (-20)))
          - Right:
              expr: ((-11, -11), (-20, -20))
        - - expr: (((-11), (-11)), ((-9), (-9)))
          - Right:
              expr: ((-11, -11), (-9, -9))
        - - expr: (((-11), (-11)), ((-5), (-5)))
          - Right:
              expr: ((-11, -11), (-5, -5))
        - - expr: (((-11), (-11)), ((-11), (-11)))
          - Right:
              expr: ((-11, -11), (-11, -11))
        - - expr: (((-11), (-11)), ((11), (11)))
          - Right:
              expr: ((-11, -11), (11, 11))
        - - expr: (((-11), (-11)), ((-7), (-7)))
          - Right:
              expr: ((-11, -11), (-7, -7))
        - - expr: (((11), (11)), ((-2), (-2)))
          - Right:
              expr: ((11, 11), (-2, -2))
        - - expr: (((11), (11)), ((-4), (-4)))
          - Right:
              expr: ((11, 11), (-4, -4))
        - - expr: (((11), (11)), ((15), (15)))
          - Right:
              expr: ((11, 11), (15, 15))
        - - expr: (((11), (11)), ((-20), (-20)))
          - Right:
              expr: ((11, 11), (-20, -20))
        - - expr: (((11), (11)), ((-9), (-9)))
          - Right:
              expr: ((11, 11), (-9, -9))
        - - expr: (((11), (11)), ((-5), (-5)))
          - Right:
              expr: ((11, 11), (-5, -5))
        - - expr: (((11), (11)), ((-11), (-11)))
          - Right:
              expr: ((11, 11), (-11, -11))
        - - expr: (((11), (11)), ((11), (11)))
          - Right:
              expr: ((11, 11), (11, 11))
        - - expr: (((11), (11)), ((-7), (-7)))
          - Right:
              expr: ((11, 11), (-7, -7))
        - - expr: (((-7), (-7)), ((-2), (-2)))
          - Right:
              expr: ((-7, -7), (-2, -2))
        - - expr: (((-7), (-7)), ((-4), (-4)))
          - Right:
              expr: ((-7, -7), (-4, -4))
        - - expr: (((-7), (-7)), ((15), (15)))
          - Right:
              expr: ((-7, -7), (15, 15))
        - - expr: (((-7), (-7)), ((-20), (-20)))
          - Right:
              expr: ((-7, -7), (-20, -20))
        - - expr: (((-7), (-7)), ((-9), (-9)))
          - Right:
              expr: ((-7, -7), (-9, -9))
        - - expr: (((-7), (-7)), ((-5), (-5)))
          - Right:
              expr: ((-7, -7), (-5, -5))
        - - expr: (((-7), (-7)), ((-11), (-11)))
          - Right:
              expr: ((-7, -7), (-11, -11))
        - - expr: (((-7), (-7)), ((11), (11)))
          - Right:
              expr: ((-7, -7), (11, 11))
        - - expr: (((-7), (-7)), ((-7), (-7)))
          - Right:
              expr: ((-7, -7), (-7, -7))
    - - - type: ([] Char, HashMap Char Bool)
        - type: ([] Char, HashMap Char Bool)
      - - - expr: |-
              (['3', '5', '7', '0'],
               HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ("3570", fromList [('3', True), ('5', False)])
        - - expr: (['3', '5', '7', '0'], HashMap.fromList [('3', True)])
          - Right:
              expr: ("3570", fromList [('3', True)])
        - - expr: (['3', '5', '7'], HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ("357", fromList [('3', True), ('5', False)])
        - - expr: (['3', '5', '7'], HashMap.fromList [('3', True)])
          - Right:
              expr: ("357", fromList [('3', True)])
        - - expr: (['3'], HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ("3", fromList [('3', True), ('5', False)])
        - - expr: (['3'], HashMap.fromList [('3', True)])
          - Right:
              expr: ("3", fromList [('3', True)])
        - - expr: (['3', '5'], HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: ("35", fromList [('3', True), ('5', False)])
        - - expr: (['3', '5'], HashMap.fromList [('3', True)])
          - Right:
              expr: ("35", fromList [('3', True)])
- - expr: fmap
  - - - - type: ((HashMap Char Bool -> Int), Maybe (HashMap Char Bool))
        - type: Maybe Int
      - - - expr: (length, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (Just 2)
        - - expr: (length, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (Just 1)
    - - - type: ((Int -> (,) Int Int), [] Int)
        - type: '[] ((,) Int Int)'
      - []
    - - - type: (([] Bool -> Int), [] ([] Bool))
        - type: '[] Int'
      - - - expr: (length, [[True, False], [True]])
          - Right:
              expr: '[2, 1]'
        - - expr: (length, [[True, False]])
          - Right:
              expr: '[2]'
    - - - type: (([] Bool -> HashMap Char Bool), Maybe ([] Bool))
        - type: Maybe (HashMap Char Bool)
      - []
    - - - type: (((,) Int Int -> HashMap Char Bool), Maybe ((,) Int Int))
        - type: Maybe (HashMap Char Bool)
      - []
    - - - type: (([] Bool -> [] Bool), Maybe ([] Bool))
        - type: Maybe ([] Bool)
      - []
    - - - type: (((,) Int Int -> [] Bool), Maybe ((,) Int Int))
        - type: Maybe ([] Bool)
      - []
    - - - type: (([] Char -> [] Bool), [] ([] Char))
        - type: '[] ([] Bool)'
      - []
    - - - type: (([] Char -> HashMap Char Bool), Maybe ([] Char))
        - type: Maybe (HashMap Char Bool)
      - []
    - - - type: ((Int -> [] Bool), [] Int)
        - type: '[] ([] Bool)'
      - []
    - - - type: ((Int -> [] Char), Maybe Int)
        - type: Maybe ([] Char)
      - - - expr: (show, Just (-2))
          - Right:
              expr: (Just "-2")
        - - expr: (show, Just (-4))
          - Right:
              expr: (Just "-4")
        - - expr: (show, Just (15))
          - Right:
              expr: (Just "15")
        - - expr: (show, Nothing)
          - Right:
              expr: Nothing
        - - expr: (show, Just (11))
          - Right:
              expr: (Just "11")
    - - - type: ((HashMap Char Bool -> (,) Int Int), Maybe (HashMap Char Bool))
        - type: Maybe ((,) Int Int)
      - []
    - - - type: (((,) Int Int -> (,) Int Int), Maybe ((,) Int Int))
        - type: Maybe ((,) Int Int)
      - []
    - - - type: (([] Char -> Int), Maybe ([] Char))
        - type: Maybe Int
      - - - expr: (length, Just ['3', '5', '7', '0'])
          - Right:
              expr: (Just 4)
        - - expr: (length, Just ['3', '5', '7'])
          - Right:
              expr: (Just 3)
        - - expr: (length, Just ['3'])
          - Right:
              expr: (Just 1)
        - - expr: (length, Nothing)
          - Right:
              expr: Nothing
    - - - type: ((HashMap Char Bool -> HashMap Char Bool), [] (HashMap Char Bool))
        - type: '[] (HashMap Char Bool)'
      - []
    - - - type: (((,) Int Int -> [] Char), Maybe ((,) Int Int))
        - type: Maybe ([] Char)
      - - - expr: (show, Just ((-2), (-2)))
          - Right:
              expr: (Just "(-2,-2)")
        - - expr: (show, Just ((-4), (-4)))
          - Right:
              expr: (Just "(-4,-4)")
        - - expr: (show, Just ((15), (15)))
          - Right:
              expr: (Just "(15,15)")
        - - expr: (show, Nothing)
          - Right:
              expr: Nothing
        - - expr: (show, Just ((11), (11)))
          - Right:
              expr: (Just "(11,11)")
    - - - type: ((Int -> HashMap Char Bool), Maybe Int)
        - type: Maybe (HashMap Char Bool)
      - []
    - - - type: (([] Bool -> (,) Int Int), Maybe ([] Bool))
        - type: Maybe ((,) Int Int)
      - []
    - - - type: ((Int -> Int), [] Int)
        - type: '[] Int'
      - - - expr: (succ, [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[-1, -3, 16, -19, -8]'
        - - expr: (succ, [(-2), (-4), (15)])
          - Right:
              expr: '[-1, -3, 16]'
        - - expr: (succ, [(-2)])
          - Right:
              expr: '[-1]'
        - - expr: (succ, [(-2), (-4)])
          - Right:
              expr: '[-1, -3]'
        - - expr: (succ, [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[-1, -3, 16, -19]'
        - - expr: (toEnum, [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[-2, -4, 15, -20, -9]'
        - - expr: (toEnum, [(-2), (-4), (15)])
          - Right:
              expr: '[-2, -4, 15]'
        - - expr: (toEnum, [(-2)])
          - Right:
              expr: '[-2]'
        - - expr: (toEnum, [(-2), (-4)])
          - Right:
              expr: '[-2, -4]'
        - - expr: (toEnum, [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[-2, -4, 15, -20]'
        - - expr: (fromEnum, [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[-2, -4, 15, -20, -9]'
        - - expr: (fromEnum, [(-2), (-4), (15)])
          - Right:
              expr: '[-2, -4, 15]'
        - - expr: (fromEnum, [(-2)])
          - Right:
              expr: '[-2]'
        - - expr: (fromEnum, [(-2), (-4)])
          - Right:
              expr: '[-2, -4]'
        - - expr: (fromEnum, [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[-2, -4, 15, -20]'
    - - - type: (([] Char -> (,) Int Int), Maybe ([] Char))
        - type: Maybe ((,) Int Int)
      - []
    - - - type: ((Int -> Int), Maybe Int)
        - type: Maybe Int
      - - - expr: (succ, Just (-2))
          - Right:
              expr: (Just (-1))
        - - expr: (succ, Just (-4))
          - Right:
              expr: (Just (-3))
        - - expr: (succ, Just (15))
          - Right:
              expr: (Just 16)
        - - expr: (succ, Nothing)
          - Right:
              expr: Nothing
        - - expr: (succ, Just (11))
          - Right:
              expr: (Just 12)
        - - expr: (toEnum, Just (-2))
          - Right:
              expr: (Just (-2))
        - - expr: (toEnum, Just (-4))
          - Right:
              expr: (Just (-4))
        - - expr: (toEnum, Just (15))
          - Right:
              expr: (Just 15)
        - - expr: (toEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (toEnum, Just (11))
          - Right:
              expr: (Just 11)
        - - expr: (fromEnum, Just (-2))
          - Right:
              expr: (Just (-2))
        - - expr: (fromEnum, Just (-4))
          - Right:
              expr: (Just (-4))
        - - expr: (fromEnum, Just (15))
          - Right:
              expr: (Just 15)
        - - expr: (fromEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (fromEnum, Just (11))
          - Right:
              expr: (Just 11)
    - - - type: (([] Char -> Int), [] ([] Char))
        - type: '[] Int'
      - - - expr: |-
              (length,
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[4, 3, 1, 2]'
        - - expr: (length, [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[4, 3, 1]'
        - - expr: (length, [['3', '5', '7', '0']])
          - Right:
              expr: '[4]'
        - - expr: (length, [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[4, 3]'
    - - - type: ((Int -> (,) Int Int), Maybe Int)
        - type: Maybe ((,) Int Int)
      - []
    - - - type: (([] Bool -> Int), Maybe ([] Bool))
        - type: Maybe Int
      - - - expr: (length, Just [True, False])
          - Right:
              expr: (Just 2)
        - - expr: (length, Just [True])
          - Right:
              expr: (Just 1)
    - - - type: ((HashMap Char Bool -> [] Char), [] (HashMap Char Bool))
        - type: '[] ([] Char)'
      - - - expr: |-
              (show,
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: '["fromList [(''3'',True),(''5'',False)]", "fromList [(''3'',True)]"]'
        - - expr: (show, [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '["fromList [(''3'',True),(''5'',False)]"]'
    - - - type: (((,) Int Int -> (,) Int Int), [] ((,) Int Int))
        - type: '[] ((,) Int Int)'
      - []
    - - - type: ((HashMap Char Bool -> [] Char), Maybe (HashMap Char Bool))
        - type: Maybe ([] Char)
      - - - expr: (show, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (Just "fromList [('3',True),('5',False)]")
        - - expr: (show, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (Just "fromList [('3',True)]")
    - - - type: (([] Char -> [] Char), [] ([] Char))
        - type: '[] ([] Char)'
      - - - expr: (show, [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '["\"3570\"", "\"357\"", "\"3\"", "\"35\""]'
        - - expr: (show, [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '["\"3570\"", "\"357\"", "\"3\""]'
        - - expr: (show, [['3', '5', '7', '0']])
          - Right:
              expr: '["\"3570\""]'
        - - expr: (show, [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '["\"3570\"", "\"357\""]'
    - - - type: (([] Bool -> [] Char), Maybe ([] Bool))
        - type: Maybe ([] Char)
      - - - expr: (show, Just [True, False])
          - Right:
              expr: (Just "[True,False]")
        - - expr: (show, Just [True])
          - Right:
              expr: (Just "[True]")
    - - - type: ((Int -> [] Char), [] Int)
        - type: '[] ([] Char)'
      - - - expr: (show, [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '["-2", "-4", "15", "-20", "-9"]'
        - - expr: (show, [(-2), (-4), (15)])
          - Right:
              expr: '["-2", "-4", "15"]'
        - - expr: (show, [(-2)])
          - Right:
              expr: '["-2"]'
        - - expr: (show, [(-2), (-4)])
          - Right:
              expr: '["-2", "-4"]'
        - - expr: (show, [(-2), (-4), (15), (-20)])
          - Right:
              expr: '["-2", "-4", "15", "-20"]'
    - - - type: ((Int -> [] Bool), Maybe Int)
        - type: Maybe ([] Bool)
      - []
    - - - type: (([] Char -> (,) Int Int), [] ([] Char))
        - type: '[] ((,) Int Int)'
      - []
    - - - type: ((HashMap Char Bool -> Int), [] (HashMap Char Bool))
        - type: '[] Int'
      - - - expr: |-
              (length,
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: '[2, 1]'
        - - expr: (length, [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[2]'
    - - - type: (((,) Int Int -> Int), Maybe ((,) Int Int))
        - type: Maybe Int
      - - - expr: (length, Just ((-2), (-2)))
          - Right:
              expr: (Just 1)
        - - expr: (length, Just ((-4), (-4)))
          - Right:
              expr: (Just 1)
        - - expr: (length, Just ((15), (15)))
          - Right:
              expr: (Just 1)
        - - expr: (length, Nothing)
          - Right:
              expr: Nothing
        - - expr: (length, Just ((11), (11)))
          - Right:
              expr: (Just 1)
    - - - type: ((HashMap Char Bool -> [] Bool), [] (HashMap Char Bool))
        - type: '[] ([] Bool)'
      - []
    - - - type: (([] Bool -> [] Bool), [] ([] Bool))
        - type: '[] ([] Bool)'
      - []
    - - - type: (([] Bool -> HashMap Char Bool), [] ([] Bool))
        - type: '[] (HashMap Char Bool)'
      - []
    - - - type: (([] Bool -> [] Char), [] ([] Bool))
        - type: '[] ([] Char)'
      - - - expr: (show, [[True, False], [True]])
          - Right:
              expr: '["[True,False]", "[True]"]'
        - - expr: (show, [[True, False]])
          - Right:
              expr: '["[True,False]"]'
    - - - type: ((HashMap Char Bool -> [] Bool), Maybe (HashMap Char Bool))
        - type: Maybe ([] Bool)
      - []
    - - - type: (([] Char -> [] Char), Maybe ([] Char))
        - type: Maybe ([] Char)
      - - - expr: (show, Just ['3', '5', '7', '0'])
          - Right:
              expr: (Just "\"3570\"")
        - - expr: (show, Just ['3', '5', '7'])
          - Right:
              expr: (Just "\"357\"")
        - - expr: (show, Just ['3'])
          - Right:
              expr: (Just "\"3\"")
        - - expr: (show, Nothing)
          - Right:
              expr: Nothing
    - - - type: (([] Char -> HashMap Char Bool), [] ([] Char))
        - type: '[] (HashMap Char Bool)'
      - []
    - - - type: (([] Char -> [] Bool), Maybe ([] Char))
        - type: Maybe ([] Bool)
      - []
    - - - type: ((Int -> HashMap Char Bool), [] Int)
        - type: '[] (HashMap Char Bool)'
      - []
    - - - type: (((,) Int Int -> Int), [] ((,) Int Int))
        - type: '[] Int'
      - - - expr: |-
              (length,
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[1, 1, 1, 1, 1]'
        - - expr: (length, [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[1, 1, 1]'
        - - expr: (length, [((-2), (-2))])
          - Right:
              expr: '[1]'
        - - expr: (length, [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[1, 1]'
        - - expr: |-
              (length,
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[1, 1, 1, 1]'
    - - - type: (([] Bool -> (,) Int Int), [] ([] Bool))
        - type: '[] ((,) Int Int)'
      - []
    - - - type: (((,) Int Int -> [] Char), [] ((,) Int Int))
        - type: '[] ([] Char)'
      - - - expr: |-
              (show,
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '["(-2,-2)", "(-4,-4)", "(15,15)", "(-20,-20)", "(-9,-9)"]'
        - - expr: (show, [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '["(-2,-2)", "(-4,-4)", "(15,15)"]'
        - - expr: (show, [((-2), (-2))])
          - Right:
              expr: '["(-2,-2)"]'
        - - expr: (show, [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '["(-2,-2)", "(-4,-4)"]'
        - - expr: (show, [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '["(-2,-2)", "(-4,-4)", "(15,15)", "(-20,-20)"]'
    - - - type: ((HashMap Char Bool -> (,) Int Int), [] (HashMap Char Bool))
        - type: '[] ((,) Int Int)'
      - []
    - - - type: (((,) Int Int -> HashMap Char Bool), [] ((,) Int Int))
        - type: '[] (HashMap Char Bool)'
      - []
    - - - type: (((,) Int Int -> [] Bool), [] ((,) Int Int))
        - type: '[] ([] Bool)'
      - []
    - - - type: |-
            ((HashMap Char Bool -> HashMap Char Bool),
             Maybe (HashMap Char Bool))
        - type: Maybe (HashMap Char Bool)
      - []
- - expr: maybe
  - - - - type: ([] Bool, ([] Char -> [] Bool), Maybe ([] Char))
        - type: '[] Bool'
      - []
    - - - type: (Int, (HashMap Char Bool -> Int), Maybe (HashMap Char Bool))
        - type: Int
      - - - expr: ((-2), length, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '2'
        - - expr: ((-2), length, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '1'
        - - expr: ((-4), length, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '2'
        - - expr: ((-4), length, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '1'
        - - expr: ((15), length, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '2'
        - - expr: ((15), length, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '1'
        - - expr: |-
              ((-20), length,
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '2'
        - - expr: ((-20), length, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '1'
        - - expr: ((-9), length, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '2'
        - - expr: ((-9), length, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '1'
        - - expr: ((-5), length, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '2'
        - - expr: ((-5), length, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '1'
        - - expr: |-
              ((-11), length,
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '2'
        - - expr: ((-11), length, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '1'
        - - expr: ((11), length, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '2'
        - - expr: ((11), length, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '1'
        - - expr: ((-7), length, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '2'
        - - expr: ((-7), length, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '1'
    - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: ((-2), succ, Just (-2))
          - Right:
              expr: (-1)
        - - expr: ((-2), succ, Just (-4))
          - Right:
              expr: (-3)
        - - expr: ((-2), succ, Just (15))
          - Right:
              expr: '16'
        - - expr: ((-2), succ, Nothing)
          - Right:
              expr: (-2)
        - - expr: ((-2), succ, Just (11))
          - Right:
              expr: '12'
        - - expr: ((-2), toEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-2), toEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-2), toEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-2), toEnum, Nothing)
          - Right:
              expr: (-2)
        - - expr: ((-2), toEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-2), fromEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-2), fromEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-2), fromEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-2), fromEnum, Nothing)
          - Right:
              expr: (-2)
        - - expr: ((-2), fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-4), succ, Just (-2))
          - Right:
              expr: (-1)
        - - expr: ((-4), succ, Just (-4))
          - Right:
              expr: (-3)
        - - expr: ((-4), succ, Just (15))
          - Right:
              expr: '16'
        - - expr: ((-4), succ, Nothing)
          - Right:
              expr: (-4)
        - - expr: ((-4), succ, Just (11))
          - Right:
              expr: '12'
        - - expr: ((-4), toEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-4), toEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-4), toEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-4), toEnum, Nothing)
          - Right:
              expr: (-4)
        - - expr: ((-4), toEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-4), fromEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-4), fromEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-4), fromEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-4), fromEnum, Nothing)
          - Right:
              expr: (-4)
        - - expr: ((-4), fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((15), succ, Just (-2))
          - Right:
              expr: (-1)
        - - expr: ((15), succ, Just (-4))
          - Right:
              expr: (-3)
        - - expr: ((15), succ, Just (15))
          - Right:
              expr: '16'
        - - expr: ((15), succ, Nothing)
          - Right:
              expr: '15'
        - - expr: ((15), succ, Just (11))
          - Right:
              expr: '12'
        - - expr: ((15), toEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((15), toEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((15), toEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((15), toEnum, Nothing)
          - Right:
              expr: '15'
        - - expr: ((15), toEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((15), fromEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((15), fromEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((15), fromEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((15), fromEnum, Nothing)
          - Right:
              expr: '15'
        - - expr: ((15), fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-20), succ, Just (-2))
          - Right:
              expr: (-1)
        - - expr: ((-20), succ, Just (-4))
          - Right:
              expr: (-3)
        - - expr: ((-20), succ, Just (15))
          - Right:
              expr: '16'
        - - expr: ((-20), succ, Nothing)
          - Right:
              expr: (-20)
        - - expr: ((-20), succ, Just (11))
          - Right:
              expr: '12'
        - - expr: ((-20), toEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-20), toEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-20), toEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-20), toEnum, Nothing)
          - Right:
              expr: (-20)
        - - expr: ((-20), toEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-20), fromEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-20), fromEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-20), fromEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-20), fromEnum, Nothing)
          - Right:
              expr: (-20)
        - - expr: ((-20), fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-9), succ, Just (-2))
          - Right:
              expr: (-1)
        - - expr: ((-9), succ, Just (-4))
          - Right:
              expr: (-3)
        - - expr: ((-9), succ, Just (15))
          - Right:
              expr: '16'
        - - expr: ((-9), succ, Nothing)
          - Right:
              expr: (-9)
        - - expr: ((-9), succ, Just (11))
          - Right:
              expr: '12'
        - - expr: ((-9), toEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-9), toEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-9), toEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-9), toEnum, Nothing)
          - Right:
              expr: (-9)
        - - expr: ((-9), toEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-9), fromEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-9), fromEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-9), fromEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-9), fromEnum, Nothing)
          - Right:
              expr: (-9)
        - - expr: ((-9), fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-5), succ, Just (-2))
          - Right:
              expr: (-1)
        - - expr: ((-5), succ, Just (-4))
          - Right:
              expr: (-3)
        - - expr: ((-5), succ, Just (15))
          - Right:
              expr: '16'
        - - expr: ((-5), succ, Nothing)
          - Right:
              expr: (-5)
        - - expr: ((-5), succ, Just (11))
          - Right:
              expr: '12'
        - - expr: ((-5), toEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-5), toEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-5), toEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-5), toEnum, Nothing)
          - Right:
              expr: (-5)
        - - expr: ((-5), toEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-5), fromEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-5), fromEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-5), fromEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-5), fromEnum, Nothing)
          - Right:
              expr: (-5)
        - - expr: ((-5), fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-11), succ, Just (-2))
          - Right:
              expr: (-1)
        - - expr: ((-11), succ, Just (-4))
          - Right:
              expr: (-3)
        - - expr: ((-11), succ, Just (15))
          - Right:
              expr: '16'
        - - expr: ((-11), succ, Nothing)
          - Right:
              expr: (-11)
        - - expr: ((-11), succ, Just (11))
          - Right:
              expr: '12'
        - - expr: ((-11), toEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-11), toEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-11), toEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-11), toEnum, Nothing)
          - Right:
              expr: (-11)
        - - expr: ((-11), toEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-11), fromEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-11), fromEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-11), fromEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-11), fromEnum, Nothing)
          - Right:
              expr: (-11)
        - - expr: ((-11), fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((11), succ, Just (-2))
          - Right:
              expr: (-1)
        - - expr: ((11), succ, Just (-4))
          - Right:
              expr: (-3)
        - - expr: ((11), succ, Just (15))
          - Right:
              expr: '16'
        - - expr: ((11), succ, Nothing)
          - Right:
              expr: '11'
        - - expr: ((11), succ, Just (11))
          - Right:
              expr: '12'
        - - expr: ((11), toEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((11), toEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((11), toEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((11), toEnum, Nothing)
          - Right:
              expr: '11'
        - - expr: ((11), toEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((11), fromEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((11), fromEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((11), fromEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((11), fromEnum, Nothing)
          - Right:
              expr: '11'
        - - expr: ((11), fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-7), succ, Just (-2))
          - Right:
              expr: (-1)
        - - expr: ((-7), succ, Just (-4))
          - Right:
              expr: (-3)
        - - expr: ((-7), succ, Just (15))
          - Right:
              expr: '16'
        - - expr: ((-7), succ, Nothing)
          - Right:
              expr: (-7)
        - - expr: ((-7), succ, Just (11))
          - Right:
              expr: '12'
        - - expr: ((-7), toEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-7), toEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-7), toEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-7), toEnum, Nothing)
          - Right:
              expr: (-7)
        - - expr: ((-7), toEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-7), fromEnum, Just (-2))
          - Right:
              expr: (-2)
        - - expr: ((-7), fromEnum, Just (-4))
          - Right:
              expr: (-4)
        - - expr: ((-7), fromEnum, Just (15))
          - Right:
              expr: '15'
        - - expr: ((-7), fromEnum, Nothing)
          - Right:
              expr: (-7)
        - - expr: ((-7), fromEnum, Just (11))
          - Right:
              expr: '11'
    - - - type: |-
            ([] Char, (HashMap Char Bool -> [] Char),
             Maybe (HashMap Char Bool))
        - type: '[] Char'
      - - - expr: |-
              (['3', '5', '7', '0'], show,
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '"fromList [(''3'',True),(''5'',False)]"'
        - - expr: (['3', '5', '7', '0'], show, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '"fromList [(''3'',True)]"'
        - - expr: |-
              (['3', '5', '7'], show,
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '"fromList [(''3'',True),(''5'',False)]"'
        - - expr: (['3', '5', '7'], show, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '"fromList [(''3'',True)]"'
        - - expr: (['3'], show, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '"fromList [(''3'',True),(''5'',False)]"'
        - - expr: (['3'], show, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '"fromList [(''3'',True)]"'
        - - expr: |-
              (['3', '5'], show,
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '"fromList [(''3'',True),(''5'',False)]"'
        - - expr: (['3', '5'], show, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '"fromList [(''3'',True)]"'
    - - - type: ([] Bool, (Int -> [] Bool), Maybe Int)
        - type: '[] Bool'
      - []
    - - - type: ([] Char, (Int -> [] Char), Maybe Int)
        - type: '[] Char'
      - - - expr: (['3', '5', '7', '0'], show, Just (-2))
          - Right:
              expr: '"-2"'
        - - expr: (['3', '5', '7', '0'], show, Just (-4))
          - Right:
              expr: '"-4"'
        - - expr: (['3', '5', '7', '0'], show, Just (15))
          - Right:
              expr: '"15"'
        - - expr: (['3', '5', '7', '0'], show, Nothing)
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], show, Just (11))
          - Right:
              expr: '"11"'
        - - expr: (['3', '5', '7'], show, Just (-2))
          - Right:
              expr: '"-2"'
        - - expr: (['3', '5', '7'], show, Just (-4))
          - Right:
              expr: '"-4"'
        - - expr: (['3', '5', '7'], show, Just (15))
          - Right:
              expr: '"15"'
        - - expr: (['3', '5', '7'], show, Nothing)
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], show, Just (11))
          - Right:
              expr: '"11"'
        - - expr: (['3'], show, Just (-2))
          - Right:
              expr: '"-2"'
        - - expr: (['3'], show, Just (-4))
          - Right:
              expr: '"-4"'
        - - expr: (['3'], show, Just (15))
          - Right:
              expr: '"15"'
        - - expr: (['3'], show, Nothing)
          - Right:
              expr: '"3"'
        - - expr: (['3'], show, Just (11))
          - Right:
              expr: '"11"'
        - - expr: (['3', '5'], show, Just (-2))
          - Right:
              expr: '"-2"'
        - - expr: (['3', '5'], show, Just (-4))
          - Right:
              expr: '"-4"'
        - - expr: (['3', '5'], show, Just (15))
          - Right:
              expr: '"15"'
        - - expr: (['3', '5'], show, Nothing)
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], show, Just (11))
          - Right:
              expr: '"11"'
    - - - type: ([] Char, ((,) Int Int -> [] Char), Maybe ((,) Int Int))
        - type: '[] Char'
      - - - expr: (['3', '5', '7', '0'], show, Just ((-2), (-2)))
          - Right:
              expr: '"(-2,-2)"'
        - - expr: (['3', '5', '7', '0'], show, Just ((-4), (-4)))
          - Right:
              expr: '"(-4,-4)"'
        - - expr: (['3', '5', '7', '0'], show, Just ((15), (15)))
          - Right:
              expr: '"(15,15)"'
        - - expr: (['3', '5', '7', '0'], show, Nothing)
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7', '0'], show, Just ((11), (11)))
          - Right:
              expr: '"(11,11)"'
        - - expr: (['3', '5', '7'], show, Just ((-2), (-2)))
          - Right:
              expr: '"(-2,-2)"'
        - - expr: (['3', '5', '7'], show, Just ((-4), (-4)))
          - Right:
              expr: '"(-4,-4)"'
        - - expr: (['3', '5', '7'], show, Just ((15), (15)))
          - Right:
              expr: '"(15,15)"'
        - - expr: (['3', '5', '7'], show, Nothing)
          - Right:
              expr: '"357"'
        - - expr: (['3', '5', '7'], show, Just ((11), (11)))
          - Right:
              expr: '"(11,11)"'
        - - expr: (['3'], show, Just ((-2), (-2)))
          - Right:
              expr: '"(-2,-2)"'
        - - expr: (['3'], show, Just ((-4), (-4)))
          - Right:
              expr: '"(-4,-4)"'
        - - expr: (['3'], show, Just ((15), (15)))
          - Right:
              expr: '"(15,15)"'
        - - expr: (['3'], show, Nothing)
          - Right:
              expr: '"3"'
        - - expr: (['3'], show, Just ((11), (11)))
          - Right:
              expr: '"(11,11)"'
        - - expr: (['3', '5'], show, Just ((-2), (-2)))
          - Right:
              expr: '"(-2,-2)"'
        - - expr: (['3', '5'], show, Just ((-4), (-4)))
          - Right:
              expr: '"(-4,-4)"'
        - - expr: (['3', '5'], show, Just ((15), (15)))
          - Right:
              expr: '"(15,15)"'
        - - expr: (['3', '5'], show, Nothing)
          - Right:
              expr: '"35"'
        - - expr: (['3', '5'], show, Just ((11), (11)))
          - Right:
              expr: '"(11,11)"'
    - - - type: ([] Bool, ([] Bool -> [] Bool), Maybe ([] Bool))
        - type: '[] Bool'
      - []
    - - - type: |-
            (HashMap Char Bool, ([] Bool -> HashMap Char Bool),
             Maybe ([] Bool))
        - type: HashMap Char Bool
      - []
    - - - type: ([] Bool, ((,) Int Int -> [] Bool), Maybe ((,) Int Int))
        - type: '[] Bool'
      - []
    - - - type: (Int, ((,) Int Int -> Int), Maybe ((,) Int Int))
        - type: Int
      - - - expr: ((-2), length, Just ((-2), (-2)))
          - Right:
              expr: '1'
        - - expr: ((-2), length, Just ((-4), (-4)))
          - Right:
              expr: '1'
        - - expr: ((-2), length, Just ((15), (15)))
          - Right:
              expr: '1'
        - - expr: ((-2), length, Nothing)
          - Right:
              expr: (-2)
        - - expr: ((-2), length, Just ((11), (11)))
          - Right:
              expr: '1'
        - - expr: ((-4), length, Just ((-2), (-2)))
          - Right:
              expr: '1'
        - - expr: ((-4), length, Just ((-4), (-4)))
          - Right:
              expr: '1'
        - - expr: ((-4), length, Just ((15), (15)))
          - Right:
              expr: '1'
        - - expr: ((-4), length, Nothing)
          - Right:
              expr: (-4)
        - - expr: ((-4), length, Just ((11), (11)))
          - Right:
              expr: '1'
        - - expr: ((15), length, Just ((-2), (-2)))
          - Right:
              expr: '1'
        - - expr: ((15), length, Just ((-4), (-4)))
          - Right:
              expr: '1'
        - - expr: ((15), length, Just ((15), (15)))
          - Right:
              expr: '1'
        - - expr: ((15), length, Nothing)
          - Right:
              expr: '15'
        - - expr: ((15), length, Just ((11), (11)))
          - Right:
              expr: '1'
        - - expr: ((-20), length, Just ((-2), (-2)))
          - Right:
              expr: '1'
        - - expr: ((-20), length, Just ((-4), (-4)))
          - Right:
              expr: '1'
        - - expr: ((-20), length, Just ((15), (15)))
          - Right:
              expr: '1'
        - - expr: ((-20), length, Nothing)
          - Right:
              expr: (-20)
        - - expr: ((-20), length, Just ((11), (11)))
          - Right:
              expr: '1'
        - - expr: ((-9), length, Just ((-2), (-2)))
          - Right:
              expr: '1'
        - - expr: ((-9), length, Just ((-4), (-4)))
          - Right:
              expr: '1'
        - - expr: ((-9), length, Just ((15), (15)))
          - Right:
              expr: '1'
        - - expr: ((-9), length, Nothing)
          - Right:
              expr: (-9)
        - - expr: ((-9), length, Just ((11), (11)))
          - Right:
              expr: '1'
        - - expr: ((-5), length, Just ((-2), (-2)))
          - Right:
              expr: '1'
        - - expr: ((-5), length, Just ((-4), (-4)))
          - Right:
              expr: '1'
        - - expr: ((-5), length, Just ((15), (15)))
          - Right:
              expr: '1'
        - - expr: ((-5), length, Nothing)
          - Right:
              expr: (-5)
        - - expr: ((-5), length, Just ((11), (11)))
          - Right:
              expr: '1'
        - - expr: ((-11), length, Just ((-2), (-2)))
          - Right:
              expr: '1'
        - - expr: ((-11), length, Just ((-4), (-4)))
          - Right:
              expr: '1'
        - - expr: ((-11), length, Just ((15), (15)))
          - Right:
              expr: '1'
        - - expr: ((-11), length, Nothing)
          - Right:
              expr: (-11)
        - - expr: ((-11), length, Just ((11), (11)))
          - Right:
              expr: '1'
        - - expr: ((11), length, Just ((-2), (-2)))
          - Right:
              expr: '1'
        - - expr: ((11), length, Just ((-4), (-4)))
          - Right:
              expr: '1'
        - - expr: ((11), length, Just ((15), (15)))
          - Right:
              expr: '1'
        - - expr: ((11), length, Nothing)
          - Right:
              expr: '11'
        - - expr: ((11), length, Just ((11), (11)))
          - Right:
              expr: '1'
        - - expr: ((-7), length, Just ((-2), (-2)))
          - Right:
              expr: '1'
        - - expr: ((-7), length, Just ((-4), (-4)))
          - Right:
              expr: '1'
        - - expr: ((-7), length, Just ((15), (15)))
          - Right:
              expr: '1'
        - - expr: ((-7), length, Nothing)
          - Right:
              expr: (-7)
        - - expr: ((-7), length, Just ((11), (11)))
          - Right:
              expr: '1'
    - - - type: |-
            ([] Bool, (HashMap Char Bool -> [] Bool),
             Maybe (HashMap Char Bool))
        - type: '[] Bool'
      - []
    - - - type: ((,) Int Int, ([] Char -> (,) Int Int), Maybe ([] Char))
        - type: (,) Int Int
      - []
    - - - type: ([] Char, ([] Bool -> [] Char), Maybe ([] Bool))
        - type: '[] Char'
      - - - expr: (['3', '5', '7', '0'], show, Just [True, False])
          - Right:
              expr: '"[True,False]"'
        - - expr: (['3', '5', '7', '0'], show, Just [True])
          - Right:
              expr: '"[True]"'
        - - expr: (['3', '5', '7'], show, Just [True, False])
          - Right:
              expr: '"[True,False]"'
        - - expr: (['3', '5', '7'], show, Just [True])
          - Right:
              expr: '"[True]"'
        - - expr: (['3'], show, Just [True, False])
          - Right:
              expr: '"[True,False]"'
        - - expr: (['3'], show, Just [True])
          - Right:
              expr: '"[True]"'
        - - expr: (['3', '5'], show, Just [True, False])
          - Right:
              expr: '"[True,False]"'
        - - expr: (['3', '5'], show, Just [True])
          - Right:
              expr: '"[True]"'
    - - - type: ((,) Int Int, (Int -> (,) Int Int), Maybe Int)
        - type: (,) Int Int
      - []
    - - - type: |-
            (HashMap Char Bool, ([] Char -> HashMap Char Bool),
             Maybe ([] Char))
        - type: HashMap Char Bool
      - []
    - - - type: |-
            (HashMap Char Bool, (HashMap Char Bool -> HashMap Char Bool),
             Maybe (HashMap Char Bool))
        - type: HashMap Char Bool
      - []
    - - - type: (Int, ([] Bool -> Int), Maybe ([] Bool))
        - type: Int
      - - - expr: ((-2), length, Just [True, False])
          - Right:
              expr: '2'
        - - expr: ((-2), length, Just [True])
          - Right:
              expr: '1'
        - - expr: ((-4), length, Just [True, False])
          - Right:
              expr: '2'
        - - expr: ((-4), length, Just [True])
          - Right:
              expr: '1'
        - - expr: ((15), length, Just [True, False])
          - Right:
              expr: '2'
        - - expr: ((15), length, Just [True])
          - Right:
              expr: '1'
        - - expr: ((-20), length, Just [True, False])
          - Right:
              expr: '2'
        - - expr: ((-20), length, Just [True])
          - Right:
              expr: '1'
        - - expr: ((-9), length, Just [True, False])
          - Right:
              expr: '2'
        - - expr: ((-9), length, Just [True])
          - Right:
              expr: '1'
        - - expr: ((-5), length, Just [True, False])
          - Right:
              expr: '2'
        - - expr: ((-5), length, Just [True])
          - Right:
              expr: '1'
        - - expr: ((-11), length, Just [True, False])
          - Right:
              expr: '2'
        - - expr: ((-11), length, Just [True])
          - Right:
              expr: '1'
        - - expr: ((11), length, Just [True, False])
          - Right:
              expr: '2'
        - - expr: ((11), length, Just [True])
          - Right:
              expr: '1'
        - - expr: ((-7), length, Just [True, False])
          - Right:
              expr: '2'
        - - expr: ((-7), length, Just [True])
          - Right:
              expr: '1'
    - - - type: (HashMap Char Bool, (Int -> HashMap Char Bool), Maybe Int)
        - type: HashMap Char Bool
      - []
    - - - type: |-
            ((,) Int Int, (HashMap Char Bool -> (,) Int Int),
             Maybe (HashMap Char Bool))
        - type: (,) Int Int
      - []
    - - - type: ((,) Int Int, ((,) Int Int -> (,) Int Int), Maybe ((,) Int Int))
        - type: (,) Int Int
      - []
    - - - type: ([] Char, ([] Char -> [] Char), Maybe ([] Char))
        - type: '[] Char'
      - - - expr: (['3', '5', '7', '0'], show, Just ['3', '5', '7', '0'])
          - Right:
              expr: '"\"3570\""'
        - - expr: (['3', '5', '7', '0'], show, Just ['3', '5', '7'])
          - Right:
              expr: '"\"357\""'
        - - expr: (['3', '5', '7', '0'], show, Just ['3'])
          - Right:
              expr: '"\"3\""'
        - - expr: (['3', '5', '7', '0'], show, Nothing)
          - Right:
              expr: '"3570"'
        - - expr: (['3', '5', '7'], show, Just ['3', '5', '7', '0'])
          - Right:
              expr: '"\"3570\""'
        - - expr: (['3', '5', '7'], show, Just ['3', '5', '7'])
          - Right:
              expr: '"\"357\""'
        - - expr: (['3', '5', '7'], show, Just ['3'])
          - Right:
              expr: '"\"3\""'
        - - expr: (['3', '5', '7'], show, Nothing)
          - Right:
              expr: '"357"'
        - - expr: (['3'], show, Just ['3', '5', '7', '0'])
          - Right:
              expr: '"\"3570\""'
        - - expr: (['3'], show, Just ['3', '5', '7'])
          - Right:
              expr: '"\"357\""'
        - - expr: (['3'], show, Just ['3'])
          - Right:
              expr: '"\"3\""'
        - - expr: (['3'], show, Nothing)
          - Right:
              expr: '"3"'
        - - expr: (['3', '5'], show, Just ['3', '5', '7', '0'])
          - Right:
              expr: '"\"3570\""'
        - - expr: (['3', '5'], show, Just ['3', '5', '7'])
          - Right:
              expr: '"\"357\""'
        - - expr: (['3', '5'], show, Just ['3'])
          - Right:
              expr: '"\"3\""'
        - - expr: (['3', '5'], show, Nothing)
          - Right:
              expr: '"35"'
    - - - type: (Int, ([] Char -> Int), Maybe ([] Char))
        - type: Int
      - - - expr: ((-2), length, Just ['3', '5', '7', '0'])
          - Right:
              expr: '4'
        - - expr: ((-2), length, Just ['3', '5', '7'])
          - Right:
              expr: '3'
        - - expr: ((-2), length, Just ['3'])
          - Right:
              expr: '1'
        - - expr: ((-2), length, Nothing)
          - Right:
              expr: (-2)
        - - expr: ((-4), length, Just ['3', '5', '7', '0'])
          - Right:
              expr: '4'
        - - expr: ((-4), length, Just ['3', '5', '7'])
          - Right:
              expr: '3'
        - - expr: ((-4), length, Just ['3'])
          - Right:
              expr: '1'
        - - expr: ((-4), length, Nothing)
          - Right:
              expr: (-4)
        - - expr: ((15), length, Just ['3', '5', '7', '0'])
          - Right:
              expr: '4'
        - - expr: ((15), length, Just ['3', '5', '7'])
          - Right:
              expr: '3'
        - - expr: ((15), length, Just ['3'])
          - Right:
              expr: '1'
        - - expr: ((15), length, Nothing)
          - Right:
              expr: '15'
        - - expr: ((-20), length, Just ['3', '5', '7', '0'])
          - Right:
              expr: '4'
        - - expr: ((-20), length, Just ['3', '5', '7'])
          - Right:
              expr: '3'
        - - expr: ((-20), length, Just ['3'])
          - Right:
              expr: '1'
        - - expr: ((-20), length, Nothing)
          - Right:
              expr: (-20)
        - - expr: ((-9), length, Just ['3', '5', '7', '0'])
          - Right:
              expr: '4'
        - - expr: ((-9), length, Just ['3', '5', '7'])
          - Right:
              expr: '3'
        - - expr: ((-9), length, Just ['3'])
          - Right:
              expr: '1'
        - - expr: ((-9), length, Nothing)
          - Right:
              expr: (-9)
        - - expr: ((-5), length, Just ['3', '5', '7', '0'])
          - Right:
              expr: '4'
        - - expr: ((-5), length, Just ['3', '5', '7'])
          - Right:
              expr: '3'
        - - expr: ((-5), length, Just ['3'])
          - Right:
              expr: '1'
        - - expr: ((-5), length, Nothing)
          - Right:
              expr: (-5)
        - - expr: ((-11), length, Just ['3', '5', '7', '0'])
          - Right:
              expr: '4'
        - - expr: ((-11), length, Just ['3', '5', '7'])
          - Right:
              expr: '3'
        - - expr: ((-11), length, Just ['3'])
          - Right:
              expr: '1'
        - - expr: ((-11), length, Nothing)
          - Right:
              expr: (-11)
        - - expr: ((11), length, Just ['3', '5', '7', '0'])
          - Right:
              expr: '4'
        - - expr: ((11), length, Just ['3', '5', '7'])
          - Right:
              expr: '3'
        - - expr: ((11), length, Just ['3'])
          - Right:
              expr: '1'
        - - expr: ((11), length, Nothing)
          - Right:
              expr: '11'
        - - expr: ((-7), length, Just ['3', '5', '7', '0'])
          - Right:
              expr: '4'
        - - expr: ((-7), length, Just ['3', '5', '7'])
          - Right:
              expr: '3'
        - - expr: ((-7), length, Just ['3'])
          - Right:
              expr: '1'
        - - expr: ((-7), length, Nothing)
          - Right:
              expr: (-7)
    - - - type: |-
            (HashMap Char Bool, ((,) Int Int -> HashMap Char Bool),
             Maybe ((,) Int Int))
        - type: HashMap Char Bool
      - []
    - - - type: ((,) Int Int, ([] Bool -> (,) Int Int), Maybe ([] Bool))
        - type: (,) Int Int
      - []
- - expr: foldr
  - - - - type: |-
            ((Int -> HashMap Char Bool -> HashMap Char Bool),
             HashMap Char Bool, Maybe Int)
        - type: HashMap Char Bool
      - []
    - - - type: |-
            (([] Char -> HashMap Char Bool -> HashMap Char Bool),
             HashMap Char Bool, Maybe ([] Char))
        - type: HashMap Char Bool
      - []
    - - - type: (([] Char -> [] Char -> [] Char), [] Char, Maybe ([] Char))
        - type: '[] Char'
      - - - expr: |-
              (let conc = (<>) in conc, ['3', '5', '7', '0'],
               Just ['3', '5', '7', '0'])
          - Right:
              expr: '"35703570"'
        - - expr: |-
              (let conc = (<>) in conc, ['3', '5', '7', '0'],
               Just ['3', '5', '7'])
          - Right:
              expr: '"3573570"'
        - - expr: (let conc = (<>) in conc, ['3', '5', '7', '0'], Just ['3'])
          - Right:
              expr: '"33570"'
        - - expr: (let conc = (<>) in conc, ['3', '5', '7', '0'], Nothing)
          - Right:
              expr: '"3570"'
        - - expr: |-
              (let conc = (<>) in conc, ['3', '5', '7'],
               Just ['3', '5', '7', '0'])
          - Right:
              expr: '"3570357"'
        - - expr: (let conc = (<>) in conc, ['3', '5', '7'], Just ['3', '5', '7'])
          - Right:
              expr: '"357357"'
        - - expr: (let conc = (<>) in conc, ['3', '5', '7'], Just ['3'])
          - Right:
              expr: '"3357"'
        - - expr: (let conc = (<>) in conc, ['3', '5', '7'], Nothing)
          - Right:
              expr: '"357"'
        - - expr: (let conc = (<>) in conc, ['3'], Just ['3', '5', '7', '0'])
          - Right:
              expr: '"35703"'
        - - expr: (let conc = (<>) in conc, ['3'], Just ['3', '5', '7'])
          - Right:
              expr: '"3573"'
        - - expr: (let conc = (<>) in conc, ['3'], Just ['3'])
          - Right:
              expr: '"33"'
        - - expr: (let conc = (<>) in conc, ['3'], Nothing)
          - Right:
              expr: '"3"'
        - - expr: (let conc = (<>) in conc, ['3', '5'], Just ['3', '5', '7', '0'])
          - Right:
              expr: '"357035"'
        - - expr: (let conc = (<>) in conc, ['3', '5'], Just ['3', '5', '7'])
          - Right:
              expr: '"35735"'
        - - expr: (let conc = (<>) in conc, ['3', '5'], Just ['3'])
          - Right:
              expr: '"335"'
        - - expr: (let conc = (<>) in conc, ['3', '5'], Nothing)
          - Right:
              expr: '"35"'
        - - expr: (pure, ['3', '5', '7', '0'], Just ['3', '5', '7', '0'])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3', '5', '7', '0'], Just ['3', '5', '7'])
          - Right:
              expr: '"357"'
        - - expr: (pure, ['3', '5', '7', '0'], Just ['3'])
          - Right:
              expr: '"3"'
        - - expr: (pure, ['3', '5', '7', '0'], Nothing)
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3', '5', '7'], Just ['3', '5', '7', '0'])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3', '5', '7'], Just ['3', '5', '7'])
          - Right:
              expr: '"357"'
        - - expr: (pure, ['3', '5', '7'], Just ['3'])
          - Right:
              expr: '"3"'
        - - expr: (pure, ['3', '5', '7'], Nothing)
          - Right:
              expr: '"357"'
        - - expr: (pure, ['3'], Just ['3', '5', '7', '0'])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3'], Just ['3', '5', '7'])
          - Right:
              expr: '"357"'
        - - expr: (pure, ['3'], Just ['3'])
          - Right:
              expr: '"3"'
        - - expr: (pure, ['3'], Nothing)
          - Right:
              expr: '"3"'
        - - expr: (pure, ['3', '5'], Just ['3', '5', '7', '0'])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3', '5'], Just ['3', '5', '7'])
          - Right:
              expr: '"357"'
        - - expr: (pure, ['3', '5'], Just ['3'])
          - Right:
              expr: '"3"'
        - - expr: (pure, ['3', '5'], Nothing)
          - Right:
              expr: '"35"'
        - - expr: (const, ['3', '5', '7', '0'], Just ['3', '5', '7', '0'])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3', '5', '7', '0'], Just ['3', '5', '7'])
          - Right:
              expr: '"357"'
        - - expr: (const, ['3', '5', '7', '0'], Just ['3'])
          - Right:
              expr: '"3"'
        - - expr: (const, ['3', '5', '7', '0'], Nothing)
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3', '5', '7'], Just ['3', '5', '7', '0'])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3', '5', '7'], Just ['3', '5', '7'])
          - Right:
              expr: '"357"'
        - - expr: (const, ['3', '5', '7'], Just ['3'])
          - Right:
              expr: '"3"'
        - - expr: (const, ['3', '5', '7'], Nothing)
          - Right:
              expr: '"357"'
        - - expr: (const, ['3'], Just ['3', '5', '7', '0'])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3'], Just ['3', '5', '7'])
          - Right:
              expr: '"357"'
        - - expr: (const, ['3'], Just ['3'])
          - Right:
              expr: '"3"'
        - - expr: (const, ['3'], Nothing)
          - Right:
              expr: '"3"'
        - - expr: (const, ['3', '5'], Just ['3', '5', '7', '0'])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3', '5'], Just ['3', '5', '7'])
          - Right:
              expr: '"357"'
        - - expr: (const, ['3', '5'], Just ['3'])
          - Right:
              expr: '"3"'
        - - expr: (const, ['3', '5'], Nothing)
          - Right:
              expr: '"35"'
    - - - type: (([] Bool -> Int -> Int), Int, Maybe ([] Bool))
        - type: Int
      - []
    - - - type: (([] Bool -> Int -> Int), Int, [] ([] Bool))
        - type: Int
      - []
    - - - type: (([] Bool -> [] Char -> [] Char), [] Char, Maybe ([] Bool))
        - type: '[] Char'
      - []
    - - - type: ((Int -> [] Char -> [] Char), [] Char, [] Int)
        - type: '[] Char'
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] Bool -> [] Bool), [] Bool,
             [] (HashMap Char Bool))
        - type: '[] Bool'
      - []
    - - - type: |-
            (([] Char -> HashMap Char Bool -> HashMap Char Bool),
             HashMap Char Bool, [] ([] Char))
        - type: HashMap Char Bool
      - []
    - - - type: |-
            (([] Bool -> HashMap Char Bool -> HashMap Char Bool),
             HashMap Char Bool, [] ([] Bool))
        - type: HashMap Char Bool
      - []
    - - - type: (((,) Int Int -> Int -> Int), Int, [] ((,) Int Int))
        - type: Int
      - []
    - - - type: ((Int -> Int -> Int), Int, [] Int)
        - type: Int
      - - - expr: (pure, (-2), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-2), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-2), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-2), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-2), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-4), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-4), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-4), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-4), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-4), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (pure, (15), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (pure, (15), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (pure, (15), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (pure, (15), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (pure, (15), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-20), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-20), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-20), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-20), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-20), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-9), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-9), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-9), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-9), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-9), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-5), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-5), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-5), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-5), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-5), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-11), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-11), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-11), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-11), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-11), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (pure, (11), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (pure, (11), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (pure, (11), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (pure, (11), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (pure, (11), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-7), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-7), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-7), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-7), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (pure, (-7), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (const, (-2), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (const, (-2), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (const, (-2), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (const, (-2), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (const, (-2), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (const, (-4), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (const, (-4), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (const, (-4), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (const, (-4), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (const, (-4), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (const, (15), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (const, (15), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (const, (15), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (const, (15), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (const, (15), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (const, (-20), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (const, (-20), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (const, (-20), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (const, (-20), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (const, (-20), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (const, (-9), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (const, (-9), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (const, (-9), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (const, (-9), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (const, (-9), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (const, (-5), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (const, (-5), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (const, (-5), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (const, (-5), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (const, (-5), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (const, (-11), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (const, (-11), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (const, (-11), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (const, (-11), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (const, (-11), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (const, (11), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (const, (11), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (const, (11), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (const, (11), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (const, (11), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (const, (-7), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (const, (-7), [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (const, (-7), [(-2)])
          - Right:
              expr: (-2)
        - - expr: (const, (-7), [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (const, (-7), [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
    - - - type: ((Int -> (,) Int Int -> (,) Int Int), (,) Int Int, [] Int)
        - type: (,) Int Int
      - []
    - - - type: (((,) Int Int -> [] Char -> [] Char), [] Char, Maybe ((,) Int Int))
        - type: '[] Char'
      - []
    - - - type: (([] Bool -> [] Bool -> [] Bool), [] Bool, Maybe ([] Bool))
        - type: '[] Bool'
      - - - expr: (let conc = (<>) in conc, [True, False], Just [True, False])
          - Right:
              expr: '[True, False, True, False]'
        - - expr: (let conc = (<>) in conc, [True, False], Just [True])
          - Right:
              expr: '[True, True, False]'
        - - expr: (let conc = (<>) in conc, [True], Just [True, False])
          - Right:
              expr: '[True, False, True]'
        - - expr: (let conc = (<>) in conc, [True], Just [True])
          - Right:
              expr: '[True, True]'
        - - expr: (pure, [True, False], Just [True, False])
          - Right:
              expr: '[True, False]'
        - - expr: (pure, [True, False], Just [True])
          - Right:
              expr: '[True]'
        - - expr: (pure, [True], Just [True, False])
          - Right:
              expr: '[True, False]'
        - - expr: (pure, [True], Just [True])
          - Right:
              expr: '[True]'
        - - expr: (const, [True, False], Just [True, False])
          - Right:
              expr: '[True, False]'
        - - expr: (const, [True, False], Just [True])
          - Right:
              expr: '[True]'
        - - expr: (const, [True], Just [True, False])
          - Right:
              expr: '[True, False]'
        - - expr: (const, [True], Just [True])
          - Right:
              expr: '[True]'
    - - - type: (((,) Int Int -> [] Char -> [] Char), [] Char, [] ((,) Int Int))
        - type: '[] Char'
      - []
    - - - type: (((,) Int Int -> [] Bool -> [] Bool), [] Bool, [] ((,) Int Int))
        - type: '[] Bool'
      - []
    - - - type: (((,) Int Int -> [] Bool -> [] Bool), [] Bool, Maybe ((,) Int Int))
        - type: '[] Bool'
      - []
    - - - type: |-
            (((,) Int Int -> (,) Int Int -> (,) Int Int), (,) Int Int,
             Maybe ((,) Int Int))
        - type: (,) Int Int
      - - - expr: (pure, ((-2), (-2)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-2), (-2)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (pure, ((-2), (-2)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (pure, ((-2), (-2)), Nothing)
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-2), (-2)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (pure, ((-4), (-4)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-4), (-4)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (pure, ((-4), (-4)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (pure, ((-4), (-4)), Nothing)
          - Right:
              expr: (-4, -4)
        - - expr: (pure, ((-4), (-4)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (pure, ((15), (15)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((15), (15)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (pure, ((15), (15)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (pure, ((15), (15)), Nothing)
          - Right:
              expr: (15, 15)
        - - expr: (pure, ((15), (15)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (pure, ((-20), (-20)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-20), (-20)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (pure, ((-20), (-20)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (pure, ((-20), (-20)), Nothing)
          - Right:
              expr: (-20, -20)
        - - expr: (pure, ((-20), (-20)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (pure, ((-9), (-9)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-9), (-9)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (pure, ((-9), (-9)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (pure, ((-9), (-9)), Nothing)
          - Right:
              expr: (-9, -9)
        - - expr: (pure, ((-9), (-9)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (pure, ((-5), (-5)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-5), (-5)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (pure, ((-5), (-5)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (pure, ((-5), (-5)), Nothing)
          - Right:
              expr: (-5, -5)
        - - expr: (pure, ((-5), (-5)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (pure, ((-11), (-11)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-11), (-11)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (pure, ((-11), (-11)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (pure, ((-11), (-11)), Nothing)
          - Right:
              expr: (-11, -11)
        - - expr: (pure, ((-11), (-11)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (pure, ((11), (11)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((11), (11)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (pure, ((11), (11)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (pure, ((11), (11)), Nothing)
          - Right:
              expr: (11, 11)
        - - expr: (pure, ((11), (11)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (pure, ((-7), (-7)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-7), (-7)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (pure, ((-7), (-7)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (pure, ((-7), (-7)), Nothing)
          - Right:
              expr: (-7, -7)
        - - expr: (pure, ((-7), (-7)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (const, ((-2), (-2)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-2), (-2)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (const, ((-2), (-2)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (const, ((-2), (-2)), Nothing)
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-2), (-2)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (const, ((-4), (-4)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-4), (-4)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (const, ((-4), (-4)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (const, ((-4), (-4)), Nothing)
          - Right:
              expr: (-4, -4)
        - - expr: (const, ((-4), (-4)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (const, ((15), (15)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((15), (15)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (const, ((15), (15)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (const, ((15), (15)), Nothing)
          - Right:
              expr: (15, 15)
        - - expr: (const, ((15), (15)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (const, ((-20), (-20)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-20), (-20)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (const, ((-20), (-20)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (const, ((-20), (-20)), Nothing)
          - Right:
              expr: (-20, -20)
        - - expr: (const, ((-20), (-20)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (const, ((-9), (-9)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-9), (-9)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (const, ((-9), (-9)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (const, ((-9), (-9)), Nothing)
          - Right:
              expr: (-9, -9)
        - - expr: (const, ((-9), (-9)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (const, ((-5), (-5)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-5), (-5)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (const, ((-5), (-5)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (const, ((-5), (-5)), Nothing)
          - Right:
              expr: (-5, -5)
        - - expr: (const, ((-5), (-5)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (const, ((-11), (-11)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-11), (-11)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (const, ((-11), (-11)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (const, ((-11), (-11)), Nothing)
          - Right:
              expr: (-11, -11)
        - - expr: (const, ((-11), (-11)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (const, ((11), (11)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((11), (11)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (const, ((11), (11)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (const, ((11), (11)), Nothing)
          - Right:
              expr: (11, 11)
        - - expr: (const, ((11), (11)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (const, ((-7), (-7)), Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-7), (-7)), Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (const, ((-7), (-7)), Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (const, ((-7), (-7)), Nothing)
          - Right:
              expr: (-7, -7)
        - - expr: (const, ((-7), (-7)), Just ((11), (11)))
          - Right:
              expr: (11, 11)
    - - - type: ((Int -> (,) Int Int -> (,) Int Int), (,) Int Int, Maybe Int)
        - type: (,) Int Int
      - []
    - - - type: |-
            (((,) Int Int -> HashMap Char Bool -> HashMap Char Bool),
             HashMap Char Bool, Maybe ((,) Int Int))
        - type: HashMap Char Bool
      - []
    - - - type: |-
            ((HashMap Char Bool -> HashMap Char Bool -> HashMap Char Bool),
             HashMap Char Bool, [] (HashMap Char Bool))
        - type: HashMap Char Bool
      - - - expr: |-
              (let conc = (<>) in conc,
               HashMap.fromList [('3', True), ('5', False)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (let conc = (<>) in conc,
               HashMap.fromList [('3', True), ('5', False)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (let conc = (<>) in conc, HashMap.fromList [('3', True)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (let conc = (<>) in conc, HashMap.fromList [('3', True)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (pure, HashMap.fromList [('3', True), ('5', False)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (pure, HashMap.fromList [('3', True), ('5', False)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (pure, HashMap.fromList [('3', True)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (pure, HashMap.fromList [('3', True)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (const, HashMap.fromList [('3', True), ('5', False)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (const, HashMap.fromList [('3', True), ('5', False)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (const, HashMap.fromList [('3', True)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (const, HashMap.fromList [('3', True)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
    - - - type: |-
            ((HashMap Char Bool -> (,) Int Int -> (,) Int Int), (,) Int Int,
             Maybe (HashMap Char Bool))
        - type: (,) Int Int
      - []
    - - - type: |-
            (((,) Int Int -> HashMap Char Bool -> HashMap Char Bool),
             HashMap Char Bool, [] ((,) Int Int))
        - type: HashMap Char Bool
      - []
    - - - type: ((HashMap Char Bool -> Int -> Int), Int, [] (HashMap Char Bool))
        - type: Int
      - []
    - - - type: (([] Char -> Int -> Int), Int, [] ([] Char))
        - type: Int
      - []
    - - - type: (([] Char -> Int -> Int), Int, Maybe ([] Char))
        - type: Int
      - []
    - - - type: ((Int -> [] Bool -> [] Bool), [] Bool, [] Int)
        - type: '[] Bool'
      - []
    - - - type: |-
            (((,) Int Int -> (,) Int Int -> (,) Int Int), (,) Int Int,
             [] ((,) Int Int))
        - type: (,) Int Int
      - - - expr: |-
              (pure, ((-2), (-2)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-2), (-2)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-2), (-2)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-2), (-2)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-2), (-2)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-4), (-4)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-4), (-4)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-4), (-4)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-4), (-4)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-4), (-4)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((15), (15)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((15), (15)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((15), (15)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((15), (15)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((15), (15)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-20), (-20)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-20), (-20)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-20), (-20)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-20), (-20)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-20), (-20)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-9), (-9)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-9), (-9)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-9), (-9)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-9), (-9)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-9), (-9)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-5), (-5)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-5), (-5)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-5), (-5)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-5), (-5)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-5), (-5)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-11), (-11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-11), (-11)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-11), (-11)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-11), (-11)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-11), (-11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((11), (11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((11), (11)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((11), (11)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((11), (11)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((11), (11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-7), (-7)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-7), (-7)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-7), (-7)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, ((-7), (-7)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (pure, ((-7), (-7)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-2), (-2)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-2), (-2)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-2), (-2)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-2), (-2)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-2), (-2)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-4), (-4)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-4), (-4)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-4), (-4)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-4), (-4)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-4), (-4)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((15), (15)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((15), (15)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((15), (15)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((15), (15)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((15), (15)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-20), (-20)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-20), (-20)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-20), (-20)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-20), (-20)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-20), (-20)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-9), (-9)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-9), (-9)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-9), (-9)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-9), (-9)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-9), (-9)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-5), (-5)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-5), (-5)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-5), (-5)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-5), (-5)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-5), (-5)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-11), (-11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-11), (-11)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-11), (-11)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-11), (-11)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-11), (-11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((11), (11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((11), (11)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((11), (11)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((11), (11)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((11), (11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-7), (-7)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-7), (-7)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-7), (-7)), [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, ((-7), (-7)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const, ((-7), (-7)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
    - - - type: |-
            ((HashMap Char Bool -> (,) Int Int -> (,) Int Int), (,) Int Int,
             [] (HashMap Char Bool))
        - type: (,) Int Int
      - []
    - - - type: (([] Char -> [] Char -> [] Char), [] Char, [] ([] Char))
        - type: '[] Char'
      - - - expr: |-
              (let conc = (<>) in conc, ['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"35703573353570"'
        - - expr: |-
              (let conc = (<>) in conc, ['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"357035733570"'
        - - expr: |-
              (let conc = (<>) in conc, ['3', '5', '7', '0'],
               [['3', '5', '7', '0']])
          - Right:
              expr: '"35703570"'
        - - expr: |-
              (let conc = (<>) in conc, ['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"35703573570"'
        - - expr: |-
              (let conc = (<>) in conc, ['3', '5', '7'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"3570357335357"'
        - - expr: |-
              (let conc = (<>) in conc, ['3', '5', '7'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"35703573357"'
        - - expr: (let conc = (<>) in conc, ['3', '5', '7'], [['3', '5', '7', '0']])
          - Right:
              expr: '"3570357"'
        - - expr: |-
              (let conc = (<>) in conc, ['3', '5', '7'],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"3570357357"'
        - - expr: |-
              (let conc = (<>) in conc, ['3'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"35703573353"'
        - - expr: |-
              (let conc = (<>) in conc, ['3'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"357035733"'
        - - expr: (let conc = (<>) in conc, ['3'], [['3', '5', '7', '0']])
          - Right:
              expr: '"35703"'
        - - expr: |-
              (let conc = (<>) in conc, ['3'],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"35703573"'
        - - expr: |-
              (let conc = (<>) in conc, ['3', '5'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"357035733535"'
        - - expr: |-
              (let conc = (<>) in conc, ['3', '5'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"3570357335"'
        - - expr: (let conc = (<>) in conc, ['3', '5'], [['3', '5', '7', '0']])
          - Right:
              expr: '"357035"'
        - - expr: |-
              (let conc = (<>) in conc, ['3', '5'],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"357035735"'
        - - expr: |-
              (pure, ['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (pure, ['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3', '5', '7', '0'], [['3', '5', '7', '0']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (pure, ['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (pure, ['3', '5', '7'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (pure, ['3', '5', '7'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3', '5', '7'], [['3', '5', '7', '0']])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3', '5', '7'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (pure, ['3'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3'], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3'], [['3', '5', '7', '0']])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (pure, ['3', '5'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3', '5'], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3', '5'], [['3', '5', '7', '0']])
          - Right:
              expr: '"3570"'
        - - expr: (pure, ['3', '5'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (const, ['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (const, ['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3', '5', '7', '0'], [['3', '5', '7', '0']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (const, ['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (const, ['3', '5', '7'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (const, ['3', '5', '7'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3', '5', '7'], [['3', '5', '7', '0']])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3', '5', '7'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (const, ['3'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3'], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3'], [['3', '5', '7', '0']])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"3570"'
        - - expr: |-
              (const, ['3', '5'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3', '5'], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3', '5'], [['3', '5', '7', '0']])
          - Right:
              expr: '"3570"'
        - - expr: (const, ['3', '5'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"3570"'
    - - - type: (([] Char -> [] Bool -> [] Bool), [] Bool, [] ([] Char))
        - type: '[] Bool'
      - []
    - - - type: |-
            ((Int -> HashMap Char Bool -> HashMap Char Bool),
             HashMap Char Bool, [] Int)
        - type: HashMap Char Bool
      - []
    - - - type: (([] Char -> [] Bool -> [] Bool), [] Bool, Maybe ([] Char))
        - type: '[] Bool'
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] Bool -> [] Bool), [] Bool,
             Maybe (HashMap Char Bool))
        - type: '[] Bool'
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] Char -> [] Char), [] Char,
             Maybe (HashMap Char Bool))
        - type: '[] Char'
      - []
    - - - type: (((,) Int Int -> Int -> Int), Int, Maybe ((,) Int Int))
        - type: Int
      - []
    - - - type: ((HashMap Char Bool -> Int -> Int), Int, Maybe (HashMap Char Bool))
        - type: Int
      - []
    - - - type: |-
            ((HashMap Char Bool -> HashMap Char Bool -> HashMap Char Bool),
             HashMap Char Bool, Maybe (HashMap Char Bool))
        - type: HashMap Char Bool
      - - - expr: |-
              (let conc = (<>) in conc,
               HashMap.fromList [('3', True), ('5', False)],
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (let conc = (<>) in conc,
               HashMap.fromList [('3', True), ('5', False)],
               Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (let conc = (<>) in conc, HashMap.fromList [('3', True)],
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (let conc = (<>) in conc, HashMap.fromList [('3', True)],
               Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: |-
              (pure, HashMap.fromList [('3', True), ('5', False)],
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (pure, HashMap.fromList [('3', True), ('5', False)],
               Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: |-
              (pure, HashMap.fromList [('3', True)],
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (pure, HashMap.fromList [('3', True)],
               Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: |-
              (const, HashMap.fromList [('3', True), ('5', False)],
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (const, HashMap.fromList [('3', True), ('5', False)],
               Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: |-
              (const, HashMap.fromList [('3', True)],
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (const, HashMap.fromList [('3', True)],
               Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (fromList [('3', True)])
    - - - type: |-
            (([] Bool -> HashMap Char Bool -> HashMap Char Bool),
             HashMap Char Bool, Maybe ([] Bool))
        - type: HashMap Char Bool
      - []
    - - - type: ((Int -> [] Bool -> [] Bool), [] Bool, Maybe Int)
        - type: '[] Bool'
      - []
    - - - type: ((Int -> Int -> Int), Int, Maybe Int)
        - type: Int
      - - - expr: (pure, (-2), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (pure, (-2), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (pure, (-2), Just (15))
          - Right:
              expr: '15'
        - - expr: (pure, (-2), Nothing)
          - Right:
              expr: (-2)
        - - expr: (pure, (-2), Just (11))
          - Right:
              expr: '11'
        - - expr: (pure, (-4), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (pure, (-4), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (pure, (-4), Just (15))
          - Right:
              expr: '15'
        - - expr: (pure, (-4), Nothing)
          - Right:
              expr: (-4)
        - - expr: (pure, (-4), Just (11))
          - Right:
              expr: '11'
        - - expr: (pure, (15), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (pure, (15), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (pure, (15), Just (15))
          - Right:
              expr: '15'
        - - expr: (pure, (15), Nothing)
          - Right:
              expr: '15'
        - - expr: (pure, (15), Just (11))
          - Right:
              expr: '11'
        - - expr: (pure, (-20), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (pure, (-20), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (pure, (-20), Just (15))
          - Right:
              expr: '15'
        - - expr: (pure, (-20), Nothing)
          - Right:
              expr: (-20)
        - - expr: (pure, (-20), Just (11))
          - Right:
              expr: '11'
        - - expr: (pure, (-9), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (pure, (-9), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (pure, (-9), Just (15))
          - Right:
              expr: '15'
        - - expr: (pure, (-9), Nothing)
          - Right:
              expr: (-9)
        - - expr: (pure, (-9), Just (11))
          - Right:
              expr: '11'
        - - expr: (pure, (-5), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (pure, (-5), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (pure, (-5), Just (15))
          - Right:
              expr: '15'
        - - expr: (pure, (-5), Nothing)
          - Right:
              expr: (-5)
        - - expr: (pure, (-5), Just (11))
          - Right:
              expr: '11'
        - - expr: (pure, (-11), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (pure, (-11), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (pure, (-11), Just (15))
          - Right:
              expr: '15'
        - - expr: (pure, (-11), Nothing)
          - Right:
              expr: (-11)
        - - expr: (pure, (-11), Just (11))
          - Right:
              expr: '11'
        - - expr: (pure, (11), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (pure, (11), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (pure, (11), Just (15))
          - Right:
              expr: '15'
        - - expr: (pure, (11), Nothing)
          - Right:
              expr: '11'
        - - expr: (pure, (11), Just (11))
          - Right:
              expr: '11'
        - - expr: (pure, (-7), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (pure, (-7), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (pure, (-7), Just (15))
          - Right:
              expr: '15'
        - - expr: (pure, (-7), Nothing)
          - Right:
              expr: (-7)
        - - expr: (pure, (-7), Just (11))
          - Right:
              expr: '11'
        - - expr: (const, (-2), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (const, (-2), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (const, (-2), Just (15))
          - Right:
              expr: '15'
        - - expr: (const, (-2), Nothing)
          - Right:
              expr: (-2)
        - - expr: (const, (-2), Just (11))
          - Right:
              expr: '11'
        - - expr: (const, (-4), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (const, (-4), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (const, (-4), Just (15))
          - Right:
              expr: '15'
        - - expr: (const, (-4), Nothing)
          - Right:
              expr: (-4)
        - - expr: (const, (-4), Just (11))
          - Right:
              expr: '11'
        - - expr: (const, (15), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (const, (15), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (const, (15), Just (15))
          - Right:
              expr: '15'
        - - expr: (const, (15), Nothing)
          - Right:
              expr: '15'
        - - expr: (const, (15), Just (11))
          - Right:
              expr: '11'
        - - expr: (const, (-20), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (const, (-20), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (const, (-20), Just (15))
          - Right:
              expr: '15'
        - - expr: (const, (-20), Nothing)
          - Right:
              expr: (-20)
        - - expr: (const, (-20), Just (11))
          - Right:
              expr: '11'
        - - expr: (const, (-9), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (const, (-9), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (const, (-9), Just (15))
          - Right:
              expr: '15'
        - - expr: (const, (-9), Nothing)
          - Right:
              expr: (-9)
        - - expr: (const, (-9), Just (11))
          - Right:
              expr: '11'
        - - expr: (const, (-5), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (const, (-5), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (const, (-5), Just (15))
          - Right:
              expr: '15'
        - - expr: (const, (-5), Nothing)
          - Right:
              expr: (-5)
        - - expr: (const, (-5), Just (11))
          - Right:
              expr: '11'
        - - expr: (const, (-11), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (const, (-11), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (const, (-11), Just (15))
          - Right:
              expr: '15'
        - - expr: (const, (-11), Nothing)
          - Right:
              expr: (-11)
        - - expr: (const, (-11), Just (11))
          - Right:
              expr: '11'
        - - expr: (const, (11), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (const, (11), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (const, (11), Just (15))
          - Right:
              expr: '15'
        - - expr: (const, (11), Nothing)
          - Right:
              expr: '11'
        - - expr: (const, (11), Just (11))
          - Right:
              expr: '11'
        - - expr: (const, (-7), Just (-2))
          - Right:
              expr: (-2)
        - - expr: (const, (-7), Just (-4))
          - Right:
              expr: (-4)
        - - expr: (const, (-7), Just (15))
          - Right:
              expr: '15'
        - - expr: (const, (-7), Nothing)
          - Right:
              expr: (-7)
        - - expr: (const, (-7), Just (11))
          - Right:
              expr: '11'
    - - - type: ((Int -> [] Char -> [] Char), [] Char, Maybe Int)
        - type: '[] Char'
      - []
    - - - type: (([] Bool -> [] Bool -> [] Bool), [] Bool, [] ([] Bool))
        - type: '[] Bool'
      - - - expr: (let conc = (<>) in conc, [True, False], [[True, False], [True]])
          - Right:
              expr: '[True, False, True, True, False]'
        - - expr: (let conc = (<>) in conc, [True, False], [[True, False]])
          - Right:
              expr: '[True, False, True, False]'
        - - expr: (let conc = (<>) in conc, [True], [[True, False], [True]])
          - Right:
              expr: '[True, False, True, True]'
        - - expr: (let conc = (<>) in conc, [True], [[True, False]])
          - Right:
              expr: '[True, False, True]'
        - - expr: (pure, [True, False], [[True, False], [True]])
          - Right:
              expr: '[True, False]'
        - - expr: (pure, [True, False], [[True, False]])
          - Right:
              expr: '[True, False]'
        - - expr: (pure, [True], [[True, False], [True]])
          - Right:
              expr: '[True, False]'
        - - expr: (pure, [True], [[True, False]])
          - Right:
              expr: '[True, False]'
        - - expr: (const, [True, False], [[True, False], [True]])
          - Right:
              expr: '[True, False]'
        - - expr: (const, [True, False], [[True, False]])
          - Right:
              expr: '[True, False]'
        - - expr: (const, [True], [[True, False], [True]])
          - Right:
              expr: '[True, False]'
        - - expr: (const, [True], [[True, False]])
          - Right:
              expr: '[True, False]'
    - - - type: |-
            (([] Char -> (,) Int Int -> (,) Int Int), (,) Int Int,
             Maybe ([] Char))
        - type: (,) Int Int
      - []
    - - - type: |-
            (([] Bool -> (,) Int Int -> (,) Int Int), (,) Int Int,
             Maybe ([] Bool))
        - type: (,) Int Int
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] Char -> [] Char), [] Char,
             [] (HashMap Char Bool))
        - type: '[] Char'
      - []
    - - - type: |-
            (([] Char -> (,) Int Int -> (,) Int Int), (,) Int Int,
             [] ([] Char))
        - type: (,) Int Int
      - []
    - - - type: (([] Bool -> [] Char -> [] Char), [] Char, [] ([] Bool))
        - type: '[] Char'
      - []
    - - - type: |-
            (([] Bool -> (,) Int Int -> (,) Int Int), (,) Int Int,
             [] ([] Bool))
        - type: (,) Int Int
      - []
- - expr: foldMap
  - - - - type: (((,) Int Int -> [] Char), Maybe ((,) Int Int))
        - type: '[] Char'
      - - - expr: (show, Just ((-2), (-2)))
          - Right:
              expr: '"(-2,-2)"'
        - - expr: (show, Just ((-4), (-4)))
          - Right:
              expr: '"(-4,-4)"'
        - - expr: (show, Just ((15), (15)))
          - Right:
              expr: '"(15,15)"'
        - - expr: (show, Nothing)
          - Right:
              expr: '""'
        - - expr: (show, Just ((11), (11)))
          - Right:
              expr: '"(11,11)"'
    - - - type: (((,) Int Int -> [] Char), [] ((,) Int Int))
        - type: '[] Char'
      - - - expr: |-
              (show,
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '"(-2,-2)(-4,-4)(15,15)(-20,-20)(-9,-9)"'
        - - expr: (show, [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '"(-2,-2)(-4,-4)(15,15)"'
        - - expr: (show, [((-2), (-2))])
          - Right:
              expr: '"(-2,-2)"'
        - - expr: (show, [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '"(-2,-2)(-4,-4)"'
        - - expr: (show, [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '"(-2,-2)(-4,-4)(15,15)(-20,-20)"'
    - - - type: (((,) Int Int -> [] Bool), [] ((,) Int Int))
        - type: '[] Bool'
      - []
    - - - type: (([] Char -> HashMap Char Bool), [] ([] Char))
        - type: HashMap Char Bool
      - []
    - - - type: (([] Char -> [] Char), [] ([] Char))
        - type: '[] Char'
      - - - expr: (show, [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"\"3570\"\"357\"\"3\"\"35\""'
        - - expr: (show, [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"\"3570\"\"357\"\"3\""'
        - - expr: (show, [['3', '5', '7', '0']])
          - Right:
              expr: '"\"3570\""'
        - - expr: (show, [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"\"3570\"\"357\""'
    - - - type: (([] Char -> HashMap Char Bool), Maybe ([] Char))
        - type: HashMap Char Bool
      - []
    - - - type: (([] Bool -> [] Char), Maybe ([] Bool))
        - type: '[] Char'
      - - - expr: (show, Just [True, False])
          - Right:
              expr: '"[True,False]"'
        - - expr: (show, Just [True])
          - Right:
              expr: '"[True]"'
    - - - type: (([] Bool -> HashMap Char Bool), Maybe ([] Bool))
        - type: HashMap Char Bool
      - []
    - - - type: ((HashMap Char Bool -> [] Char), Maybe (HashMap Char Bool))
        - type: '[] Char'
      - - - expr: (show, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '"fromList [(''3'',True),(''5'',False)]"'
        - - expr: (show, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '"fromList [(''3'',True)]"'
    - - - type: (([] Bool -> HashMap Char Bool), [] ([] Bool))
        - type: HashMap Char Bool
      - []
    - - - type: ((HashMap Char Bool -> [] Char), [] (HashMap Char Bool))
        - type: '[] Char'
      - - - expr: |-
              (show,
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: '"fromList [(''3'',True),(''5'',False)]fromList [(''3'',True)]"'
        - - expr: (show, [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '"fromList [(''3'',True),(''5'',False)]"'
    - - - type: (((,) Int Int -> HashMap Char Bool), Maybe ((,) Int Int))
        - type: HashMap Char Bool
      - []
    - - - type: ((Int -> HashMap Char Bool), Maybe Int)
        - type: HashMap Char Bool
      - []
    - - - type: ((HashMap Char Bool -> [] Bool), [] (HashMap Char Bool))
        - type: '[] Bool'
      - []
    - - - type: (([] Char -> [] Char), Maybe ([] Char))
        - type: '[] Char'
      - - - expr: (show, Just ['3', '5', '7', '0'])
          - Right:
              expr: '"\"3570\""'
        - - expr: (show, Just ['3', '5', '7'])
          - Right:
              expr: '"\"357\""'
        - - expr: (show, Just ['3'])
          - Right:
              expr: '"\"3\""'
        - - expr: (show, Nothing)
          - Right:
              expr: '""'
    - - - type: (([] Char -> [] Bool), Maybe ([] Char))
        - type: '[] Bool'
      - []
    - - - type: (([] Bool -> [] Char), [] ([] Bool))
        - type: '[] Char'
      - - - expr: (show, [[True, False], [True]])
          - Right:
              expr: '"[True,False][True]"'
        - - expr: (show, [[True, False]])
          - Right:
              expr: '"[True,False]"'
    - - - type: ((HashMap Char Bool -> [] Bool), Maybe (HashMap Char Bool))
        - type: '[] Bool'
      - []
    - - - type: (([] Bool -> [] Bool), [] ([] Bool))
        - type: '[] Bool'
      - []
    - - - type: ((Int -> [] Char), [] Int)
        - type: '[] Char'
      - - - expr: (show, [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '"-2-415-20-9"'
        - - expr: (show, [(-2), (-4), (15)])
          - Right:
              expr: '"-2-415"'
        - - expr: (show, [(-2)])
          - Right:
              expr: '"-2"'
        - - expr: (show, [(-2), (-4)])
          - Right:
              expr: '"-2-4"'
        - - expr: (show, [(-2), (-4), (15), (-20)])
          - Right:
              expr: '"-2-415-20"'
    - - - type: ((Int -> [] Bool), [] Int)
        - type: '[] Bool'
      - []
    - - - type: ((Int -> HashMap Char Bool), [] Int)
        - type: HashMap Char Bool
      - []
    - - - type: ((Int -> [] Bool), Maybe Int)
        - type: '[] Bool'
      - []
    - - - type: ((HashMap Char Bool -> HashMap Char Bool), [] (HashMap Char Bool))
        - type: HashMap Char Bool
      - []
    - - - type: (((,) Int Int -> [] Bool), Maybe ((,) Int Int))
        - type: '[] Bool'
      - []
    - - - type: (([] Char -> [] Bool), [] ([] Char))
        - type: '[] Bool'
      - []
    - - - type: (([] Bool -> [] Bool), Maybe ([] Bool))
        - type: '[] Bool'
      - []
    - - - type: (((,) Int Int -> HashMap Char Bool), [] ((,) Int Int))
        - type: HashMap Char Bool
      - []
    - - - type: |-
            ((HashMap Char Bool -> HashMap Char Bool),
             Maybe (HashMap Char Bool))
        - type: HashMap Char Bool
      - []
    - - - type: ((Int -> [] Char), Maybe Int)
        - type: '[] Char'
      - - - expr: (show, Just (-2))
          - Right:
              expr: '"-2"'
        - - expr: (show, Just (-4))
          - Right:
              expr: '"-4"'
        - - expr: (show, Just (15))
          - Right:
              expr: '"15"'
        - - expr: (show, Nothing)
          - Right:
              expr: '""'
        - - expr: (show, Just (11))
          - Right:
              expr: '"11"'
- - expr: foldr1
  - - - - type: (([] Bool -> [] Bool -> [] Bool), [] ([] Bool))
        - type: '[] Bool'
      - - - expr: (let conc = (<>) in conc, [[True, False], [True]])
          - Right:
              expr: '[True, False, True]'
        - - expr: (let conc = (<>) in conc, [[True, False]])
          - Right:
              expr: '[True, False]'
        - - expr: (pure, [[True, False], [True]])
          - Right:
              expr: '[True, False]'
        - - expr: (pure, [[True, False]])
          - Right:
              expr: '[True, False]'
        - - expr: (const, [[True, False], [True]])
          - Right:
              expr: '[True, False]'
        - - expr: (const, [[True, False]])
          - Right:
              expr: '[True, False]'
    - - - type: (([] Char -> [] Char -> [] Char), [] ([] Char))
        - type: '[] Char'
      - - - expr: |-
              (let conc = (<>) in conc,
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"3570357335"'
        - - expr: |-
              (let conc = (<>) in conc,
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"35703573"'
        - - expr: (let conc = (<>) in conc, [['3', '5', '7', '0']])
          - Right:
              expr: '"3570"'
        - - expr: (let conc = (<>) in conc, [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"3570357"'
        - - expr: (pure, [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"3570"'
        - - expr: (pure, [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"3570"'
        - - expr: (pure, [['3', '5', '7', '0']])
          - Right:
              expr: '"3570"'
        - - expr: (pure, [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"3570"'
        - - expr: (const, [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '"3570"'
        - - expr: (const, [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '"3570"'
        - - expr: (const, [['3', '5', '7', '0']])
          - Right:
              expr: '"3570"'
        - - expr: (const, [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '"3570"'
    - - - type: ((Int -> Int -> Int), Maybe Int)
        - type: Int
      - - - expr: (pure, Just (-2))
          - Right:
              expr: (-2)
        - - expr: (pure, Just (-4))
          - Right:
              expr: (-4)
        - - expr: (pure, Just (15))
          - Right:
              expr: '15'
        - - expr: (pure, Nothing)
          - Left: '"foldr1: empty structure"'
        - - expr: (pure, Just (11))
          - Right:
              expr: '11'
        - - expr: (const, Just (-2))
          - Right:
              expr: (-2)
        - - expr: (const, Just (-4))
          - Right:
              expr: (-4)
        - - expr: (const, Just (15))
          - Right:
              expr: '15'
        - - expr: (const, Nothing)
          - Left: '"foldr1: empty structure"'
        - - expr: (const, Just (11))
          - Right:
              expr: '11'
    - - - type: (([] Bool -> [] Bool -> [] Bool), Maybe ([] Bool))
        - type: '[] Bool'
      - - - expr: (let conc = (<>) in conc, Just [True, False])
          - Right:
              expr: '[True, False]'
        - - expr: (let conc = (<>) in conc, Just [True])
          - Right:
              expr: '[True]'
        - - expr: (pure, Just [True, False])
          - Right:
              expr: '[True, False]'
        - - expr: (pure, Just [True])
          - Right:
              expr: '[True]'
        - - expr: (const, Just [True, False])
          - Right:
              expr: '[True, False]'
        - - expr: (const, Just [True])
          - Right:
              expr: '[True]'
    - - - type: ((Int -> Int -> Int), [] Int)
        - type: Int
      - - - expr: (pure, [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (pure, [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (pure, [(-2)])
          - Right:
              expr: (-2)
        - - expr: (pure, [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (pure, [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
        - - expr: (const, [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (-2)
        - - expr: (const, [(-2), (-4), (15)])
          - Right:
              expr: (-2)
        - - expr: (const, [(-2)])
          - Right:
              expr: (-2)
        - - expr: (const, [(-2), (-4)])
          - Right:
              expr: (-2)
        - - expr: (const, [(-2), (-4), (15), (-20)])
          - Right:
              expr: (-2)
    - - - type: (([] Char -> [] Char -> [] Char), Maybe ([] Char))
        - type: '[] Char'
      - - - expr: (let conc = (<>) in conc, Just ['3', '5', '7', '0'])
          - Right:
              expr: '"3570"'
        - - expr: (let conc = (<>) in conc, Just ['3', '5', '7'])
          - Right:
              expr: '"357"'
        - - expr: (let conc = (<>) in conc, Just ['3'])
          - Right:
              expr: '"3"'
        - - expr: (let conc = (<>) in conc, Nothing)
          - Left: '"foldr1: empty structure"'
        - - expr: (pure, Just ['3', '5', '7', '0'])
          - Right:
              expr: '"3570"'
        - - expr: (pure, Just ['3', '5', '7'])
          - Right:
              expr: '"357"'
        - - expr: (pure, Just ['3'])
          - Right:
              expr: '"3"'
        - - expr: (pure, Nothing)
          - Left: '"foldr1: empty structure"'
        - - expr: (const, Just ['3', '5', '7', '0'])
          - Right:
              expr: '"3570"'
        - - expr: (const, Just ['3', '5', '7'])
          - Right:
              expr: '"357"'
        - - expr: (const, Just ['3'])
          - Right:
              expr: '"3"'
        - - expr: (const, Nothing)
          - Left: '"foldr1: empty structure"'
    - - - type: |-
            ((HashMap Char Bool -> HashMap Char Bool -> HashMap Char Bool),
             [] (HashMap Char Bool))
        - type: HashMap Char Bool
      - - - expr: |-
              (let conc = (<>) in conc,
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (let conc = (<>) in conc,
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (pure,
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (pure, [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: |-
              (const,
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (const, [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: (fromList [('3', True), ('5', False)])
    - - - type: (((,) Int Int -> (,) Int Int -> (,) Int Int), [] ((,) Int Int))
        - type: (,) Int Int
      - - - expr: |-
              (pure,
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: (pure, [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
        - - expr: |-
              (const,
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, [((-2), (-2))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (-2, -2)
        - - expr: (const, [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (-2, -2)
    - - - type: |-
            ((HashMap Char Bool -> HashMap Char Bool -> HashMap Char Bool),
             Maybe (HashMap Char Bool))
        - type: HashMap Char Bool
      - - - expr: |-
              (let conc = (<>) in conc,
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (let conc = (<>) in conc, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (pure, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (pure, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (fromList [('3', True)])
        - - expr: (const, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (fromList [('3', True), ('5', False)])
        - - expr: (const, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (fromList [('3', True)])
    - - - type: (((,) Int Int -> (,) Int Int -> (,) Int Int), Maybe ((,) Int Int))
        - type: (,) Int Int
      - - - expr: (pure, Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (pure, Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (pure, Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (pure, Nothing)
          - Left: '"foldr1: empty structure"'
        - - expr: (pure, Just ((11), (11)))
          - Right:
              expr: (11, 11)
        - - expr: (const, Just ((-2), (-2)))
          - Right:
              expr: (-2, -2)
        - - expr: (const, Just ((-4), (-4)))
          - Right:
              expr: (-4, -4)
        - - expr: (const, Just ((15), (15)))
          - Right:
              expr: (15, 15)
        - - expr: (const, Nothing)
          - Left: '"foldr1: empty structure"'
        - - expr: (const, Just ((11), (11)))
          - Right:
              expr: (11, 11)
- - expr: let compose = (.) in compose
  - - - - type: |-
            (([] Char -> HashMap Char Bool), ((,) Int Int -> [] Char),
             (,) Int Int)
        - type: HashMap Char Bool
      - []
    - - - type: (([] Bool -> (,) Int Int), (Int -> [] Bool), Int)
        - type: (,) Int Int
      - []
    - - - type: (([] Char -> Int), (Int -> [] Char), Int)
        - type: Int
      - - - expr: (length, show, (-2))
          - Right:
              expr: '2'
        - - expr: (length, show, (-4))
          - Right:
              expr: '2'
        - - expr: (length, show, (15))
          - Right:
              expr: '2'
        - - expr: (length, show, (-20))
          - Right:
              expr: '3'
        - - expr: (length, show, (-9))
          - Right:
              expr: '2'
        - - expr: (length, show, (-5))
          - Right:
              expr: '2'
        - - expr: (length, show, (-11))
          - Right:
              expr: '3'
        - - expr: (length, show, (11))
          - Right:
              expr: '2'
        - - expr: (length, show, (-7))
          - Right:
              expr: '2'
    - - - type: ((Int -> HashMap Char Bool), ([] Char -> Int), [] Char)
        - type: HashMap Char Bool
      - []
    - - - type: (((,) Int Int -> [] Char), ([] Char -> (,) Int Int), [] Char)
        - type: '[] Char'
      - []
    - - - type: |-
            (((,) Int Int -> (,) Int Int), (HashMap Char Bool -> (,) Int Int),
             HashMap Char Bool)
        - type: (,) Int Int
      - []
    - - - type: (((,) Int Int -> [] Char), ([] Bool -> (,) Int Int), [] Bool)
        - type: '[] Char'
      - []
    - - - type: |-
            (((,) Int Int -> Int), (HashMap Char Bool -> (,) Int Int),
             HashMap Char Bool)
        - type: Int
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] Bool),
             (HashMap Char Bool -> HashMap Char Bool), HashMap Char Bool)
        - type: '[] Bool'
      - []
    - - - type: (((,) Int Int -> (,) Int Int), ([] Char -> (,) Int Int), [] Char)
        - type: (,) Int Int
      - []
    - - - type: (([] Char -> HashMap Char Bool), (Int -> [] Char), Int)
        - type: HashMap Char Bool
      - []
    - - - type: (([] Bool -> [] Bool), (Int -> [] Bool), Int)
        - type: '[] Bool'
      - []
    - - - type: ((Int -> [] Char), (HashMap Char Bool -> Int), HashMap Char Bool)
        - type: '[] Char'
      - - - expr: (show, length, HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '"2"'
        - - expr: (show, length, HashMap.fromList [('3', True)])
          - Right:
              expr: '"1"'
    - - - type: ((Int -> [] Bool), ([] Bool -> Int), [] Bool)
        - type: '[] Bool'
      - []
    - - - type: (([] Char -> [] Char), ([] Char -> [] Char), [] Char)
        - type: '[] Char'
      - - - expr: (show, show, ['3', '5', '7', '0'])
          - Right:
              expr: '"\"\\\"3570\\\"\""'
        - - expr: (show, show, ['3', '5', '7'])
          - Right:
              expr: '"\"\\\"357\\\"\""'
        - - expr: (show, show, ['3'])
          - Right:
              expr: '"\"\\\"3\\\"\""'
        - - expr: (show, show, ['3', '5'])
          - Right:
              expr: '"\"\\\"35\\\"\""'
    - - - type: (((,) Int Int -> HashMap Char Bool), (Int -> (,) Int Int), Int)
        - type: HashMap Char Bool
      - []
    - - - type: |-
            ((HashMap Char Bool -> (,) Int Int), (Int -> HashMap Char Bool),
             Int)
        - type: (,) Int Int
      - []
    - - - type: (([] Bool -> [] Char), ([] Bool -> [] Bool), [] Bool)
        - type: '[] Char'
      - []
    - - - type: (([] Bool -> Int), ([] Bool -> [] Bool), [] Bool)
        - type: Int
      - []
    - - - type: (([] Char -> (,) Int Int), ([] Char -> [] Char), [] Char)
        - type: (,) Int Int
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] Char),
             ((,) Int Int -> HashMap Char Bool), (,) Int Int)
        - type: '[] Char'
      - []
    - - - type: (([] Char -> Int), ([] Bool -> [] Char), [] Bool)
        - type: Int
      - - - expr: (length, show, [True, False])
          - Right:
              expr: '12'
        - - expr: (length, show, [True])
          - Right:
              expr: '6'
    - - - type: |-
            ((HashMap Char Bool -> Int), ((,) Int Int -> HashMap Char Bool),
             (,) Int Int)
        - type: Int
      - []
    - - - type: (([] Char -> HashMap Char Bool), ([] Char -> [] Char), [] Char)
        - type: HashMap Char Bool
      - []
    - - - type: |-
            ((HashMap Char Bool -> Int),
             (HashMap Char Bool -> HashMap Char Bool), HashMap Char Bool)
        - type: Int
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] Bool),
             ((,) Int Int -> HashMap Char Bool), (,) Int Int)
        - type: '[] Bool'
      - []
    - - - type: (([] Bool -> [] Bool), ([] Char -> [] Bool), [] Char)
        - type: '[] Bool'
      - []
    - - - type: |-
            ((HashMap Char Bool -> (,) Int Int),
             ([] Char -> HashMap Char Bool), [] Char)
        - type: (,) Int Int
      - []
    - - - type: ((Int -> (,) Int Int), (Int -> Int), Int)
        - type: (,) Int Int
      - []
    - - - type: (([] Bool -> Int), ([] Char -> [] Bool), [] Char)
        - type: Int
      - []
    - - - type: ((Int -> [] Bool), ((,) Int Int -> Int), (,) Int Int)
        - type: '[] Bool'
      - []
    - - - type: ((Int -> [] Char), (Int -> Int), Int)
        - type: '[] Char'
      - - - expr: (show, succ, (-2))
          - Right:
              expr: '"-1"'
        - - expr: (show, succ, (-4))
          - Right:
              expr: '"-3"'
        - - expr: (show, succ, (15))
          - Right:
              expr: '"16"'
        - - expr: (show, succ, (-20))
          - Right:
              expr: '"-19"'
        - - expr: (show, succ, (-9))
          - Right:
              expr: '"-8"'
        - - expr: (show, succ, (-5))
          - Right:
              expr: '"-4"'
        - - expr: (show, succ, (-11))
          - Right:
              expr: '"-10"'
        - - expr: (show, succ, (11))
          - Right:
              expr: '"12"'
        - - expr: (show, succ, (-7))
          - Right:
              expr: '"-6"'
        - - expr: (show, toEnum, (-2))
          - Right:
              expr: '"-2"'
        - - expr: (show, toEnum, (-4))
          - Right:
              expr: '"-4"'
        - - expr: (show, toEnum, (15))
          - Right:
              expr: '"15"'
        - - expr: (show, toEnum, (-20))
          - Right:
              expr: '"-20"'
        - - expr: (show, toEnum, (-9))
          - Right:
              expr: '"-9"'
        - - expr: (show, toEnum, (-5))
          - Right:
              expr: '"-5"'
        - - expr: (show, toEnum, (-11))
          - Right:
              expr: '"-11"'
        - - expr: (show, toEnum, (11))
          - Right:
              expr: '"11"'
        - - expr: (show, toEnum, (-7))
          - Right:
              expr: '"-7"'
        - - expr: (show, fromEnum, (-2))
          - Right:
              expr: '"-2"'
        - - expr: (show, fromEnum, (-4))
          - Right:
              expr: '"-4"'
        - - expr: (show, fromEnum, (15))
          - Right:
              expr: '"15"'
        - - expr: (show, fromEnum, (-20))
          - Right:
              expr: '"-20"'
        - - expr: (show, fromEnum, (-9))
          - Right:
              expr: '"-9"'
        - - expr: (show, fromEnum, (-5))
          - Right:
              expr: '"-5"'
        - - expr: (show, fromEnum, (-11))
          - Right:
              expr: '"-11"'
        - - expr: (show, fromEnum, (11))
          - Right:
              expr: '"11"'
        - - expr: (show, fromEnum, (-7))
          - Right:
              expr: '"-7"'
    - - - type: (([] Char -> (,) Int Int), (Int -> [] Char), Int)
        - type: (,) Int Int
      - []
    - - - type: |-
            ((Int -> (,) Int Int), (HashMap Char Bool -> Int),
             HashMap Char Bool)
        - type: (,) Int Int
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] Char), ([] Bool -> HashMap Char Bool),
             [] Bool)
        - type: '[] Char'
      - []
    - - - type: |-
            (([] Char -> [] Char), (HashMap Char Bool -> [] Char),
             HashMap Char Bool)
        - type: '[] Char'
      - - - expr: (show, show, HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '"\"fromList [(''3'',True),(''5'',False)]\""'
        - - expr: (show, show, HashMap.fromList [('3', True)])
          - Right:
              expr: '"\"fromList [(''3'',True)]\""'
    - - - type: |-
            (([] Bool -> [] Char), (HashMap Char Bool -> [] Bool),
             HashMap Char Bool)
        - type: '[] Char'
      - []
    - - - type: (([] Char -> [] Char), (Int -> [] Char), Int)
        - type: '[] Char'
      - - - expr: (show, show, (-2))
          - Right:
              expr: '"\"-2\""'
        - - expr: (show, show, (-4))
          - Right:
              expr: '"\"-4\""'
        - - expr: (show, show, (15))
          - Right:
              expr: '"\"15\""'
        - - expr: (show, show, (-20))
          - Right:
              expr: '"\"-20\""'
        - - expr: (show, show, (-9))
          - Right:
              expr: '"\"-9\""'
        - - expr: (show, show, (-5))
          - Right:
              expr: '"\"-5\""'
        - - expr: (show, show, (-11))
          - Right:
              expr: '"\"-11\""'
        - - expr: (show, show, (11))
          - Right:
              expr: '"\"11\""'
        - - expr: (show, show, (-7))
          - Right:
              expr: '"\"-7\""'
    - - - type: |-
            (((,) Int Int -> (,) Int Int), ((,) Int Int -> (,) Int Int),
             (,) Int Int)
        - type: (,) Int Int
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] Bool), ([] Char -> HashMap Char Bool),
             [] Char)
        - type: '[] Bool'
      - []
    - - - type: ((Int -> Int), ([] Bool -> Int), [] Bool)
        - type: Int
      - - - expr: (succ, length, [True, False])
          - Right:
              expr: '3'
        - - expr: (succ, length, [True])
          - Right:
              expr: '2'
        - - expr: (toEnum, length, [True, False])
          - Right:
              expr: '2'
        - - expr: (toEnum, length, [True])
          - Right:
              expr: '1'
        - - expr: (fromEnum, length, [True, False])
          - Right:
              expr: '2'
        - - expr: (fromEnum, length, [True])
          - Right:
              expr: '1'
    - - - type: ((HashMap Char Bool -> [] Bool), (Int -> HashMap Char Bool), Int)
        - type: '[] Bool'
      - []
    - - - type: |-
            ((HashMap Char Bool -> HashMap Char Bool),
             ([] Char -> HashMap Char Bool), [] Char)
        - type: HashMap Char Bool
      - []
    - - - type: |-
            (([] Bool -> HashMap Char Bool), (HashMap Char Bool -> [] Bool),
             HashMap Char Bool)
        - type: HashMap Char Bool
      - []
    - - - type: ((Int -> Int), ([] Char -> Int), [] Char)
        - type: Int
      - - - expr: (succ, length, ['3', '5', '7', '0'])
          - Right:
              expr: '5'
        - - expr: (succ, length, ['3', '5', '7'])
          - Right:
              expr: '4'
        - - expr: (succ, length, ['3'])
          - Right:
              expr: '2'
        - - expr: (succ, length, ['3', '5'])
          - Right:
              expr: '3'
        - - expr: (toEnum, length, ['3', '5', '7', '0'])
          - Right:
              expr: '4'
        - - expr: (toEnum, length, ['3', '5', '7'])
          - Right:
              expr: '3'
        - - expr: (toEnum, length, ['3'])
          - Right:
              expr: '1'
        - - expr: (toEnum, length, ['3', '5'])
          - Right:
              expr: '2'
        - - expr: (fromEnum, length, ['3', '5', '7', '0'])
          - Right:
              expr: '4'
        - - expr: (fromEnum, length, ['3', '5', '7'])
          - Right:
              expr: '3'
        - - expr: (fromEnum, length, ['3'])
          - Right:
              expr: '1'
        - - expr: (fromEnum, length, ['3', '5'])
          - Right:
              expr: '2'
    - - - type: (([] Char -> [] Bool), (Int -> [] Char), Int)
        - type: '[] Bool'
      - []
    - - - type: (([] Bool -> [] Bool), ((,) Int Int -> [] Bool), (,) Int Int)
        - type: '[] Bool'
      - []
    - - - type: (([] Char -> Int), ((,) Int Int -> [] Char), (,) Int Int)
        - type: Int
      - - - expr: (length, show, ((-2), (-2)))
          - Right:
              expr: '7'
        - - expr: (length, show, ((-4), (-4)))
          - Right:
              expr: '7'
        - - expr: (length, show, ((15), (15)))
          - Right:
              expr: '7'
        - - expr: (length, show, ((-20), (-20)))
          - Right:
              expr: '9'
        - - expr: (length, show, ((-9), (-9)))
          - Right:
              expr: '7'
        - - expr: (length, show, ((-5), (-5)))
          - Right:
              expr: '7'
        - - expr: (length, show, ((-11), (-11)))
          - Right:
              expr: '9'
        - - expr: (length, show, ((11), (11)))
          - Right:
              expr: '7'
        - - expr: (length, show, ((-7), (-7)))
          - Right:
              expr: '7'
    - - - type: ((Int -> (,) Int Int), ([] Char -> Int), [] Char)
        - type: (,) Int Int
      - []
    - - - type: (((,) Int Int -> Int), ([] Bool -> (,) Int Int), [] Bool)
        - type: Int
      - []
    - - - type: ((Int -> Int), (HashMap Char Bool -> Int), HashMap Char Bool)
        - type: Int
      - - - expr: (succ, length, HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '3'
        - - expr: (succ, length, HashMap.fromList [('3', True)])
          - Right:
              expr: '2'
        - - expr: (toEnum, length, HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '2'
        - - expr: (toEnum, length, HashMap.fromList [('3', True)])
          - Right:
              expr: '1'
        - - expr: (fromEnum, length, HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '2'
        - - expr: (fromEnum, length, HashMap.fromList [('3', True)])
          - Right:
              expr: '1'
    - - - type: (([] Bool -> [] Char), ((,) Int Int -> [] Bool), (,) Int Int)
        - type: '[] Char'
      - []
    - - - type: |-
            ((HashMap Char Bool -> HashMap Char Bool),
             ([] Bool -> HashMap Char Bool), [] Bool)
        - type: HashMap Char Bool
      - []
    - - - type: |-
            ((HashMap Char Bool -> Int), ([] Bool -> HashMap Char Bool),
             [] Bool)
        - type: Int
      - []
    - - - type: (([] Bool -> HashMap Char Bool), ([] Bool -> [] Bool), [] Bool)
        - type: HashMap Char Bool
      - []
    - - - type: |-
            (((,) Int Int -> [] Bool), ((,) Int Int -> (,) Int Int),
             (,) Int Int)
        - type: '[] Bool'
      - []
    - - - type: |-
            (((,) Int Int -> HashMap Char Bool), ([] Bool -> (,) Int Int),
             [] Bool)
        - type: HashMap Char Bool
      - []
    - - - type: (([] Char -> [] Char), ([] Bool -> [] Char), [] Bool)
        - type: '[] Char'
      - - - expr: (show, show, [True, False])
          - Right:
              expr: '"\"[True,False]\""'
        - - expr: (show, show, [True])
          - Right:
              expr: '"\"[True]\""'
    - - - type: |-
            (((,) Int Int -> HashMap Char Bool), ((,) Int Int -> (,) Int Int),
             (,) Int Int)
        - type: HashMap Char Bool
      - []
    - - - type: ((Int -> Int), ((,) Int Int -> Int), (,) Int Int)
        - type: Int
      - - - expr: (succ, length, ((-2), (-2)))
          - Right:
              expr: '2'
        - - expr: (succ, length, ((-4), (-4)))
          - Right:
              expr: '2'
        - - expr: (succ, length, ((15), (15)))
          - Right:
              expr: '2'
        - - expr: (succ, length, ((-20), (-20)))
          - Right:
              expr: '2'
        - - expr: (succ, length, ((-9), (-9)))
          - Right:
              expr: '2'
        - - expr: (succ, length, ((-5), (-5)))
          - Right:
              expr: '2'
        - - expr: (succ, length, ((-11), (-11)))
          - Right:
              expr: '2'
        - - expr: (succ, length, ((11), (11)))
          - Right:
              expr: '2'
        - - expr: (succ, length, ((-7), (-7)))
          - Right:
              expr: '2'
        - - expr: (toEnum, length, ((-2), (-2)))
          - Right:
              expr: '1'
        - - expr: (toEnum, length, ((-4), (-4)))
          - Right:
              expr: '1'
        - - expr: (toEnum, length, ((15), (15)))
          - Right:
              expr: '1'
        - - expr: (toEnum, length, ((-20), (-20)))
          - Right:
              expr: '1'
        - - expr: (toEnum, length, ((-9), (-9)))
          - Right:
              expr: '1'
        - - expr: (toEnum, length, ((-5), (-5)))
          - Right:
              expr: '1'
        - - expr: (toEnum, length, ((-11), (-11)))
          - Right:
              expr: '1'
        - - expr: (toEnum, length, ((11), (11)))
          - Right:
              expr: '1'
        - - expr: (toEnum, length, ((-7), (-7)))
          - Right:
              expr: '1'
        - - expr: (fromEnum, length, ((-2), (-2)))
          - Right:
              expr: '1'
        - - expr: (fromEnum, length, ((-4), (-4)))
          - Right:
              expr: '1'
        - - expr: (fromEnum, length, ((15), (15)))
          - Right:
              expr: '1'
        - - expr: (fromEnum, length, ((-20), (-20)))
          - Right:
              expr: '1'
        - - expr: (fromEnum, length, ((-9), (-9)))
          - Right:
              expr: '1'
        - - expr: (fromEnum, length, ((-5), (-5)))
          - Right:
              expr: '1'
        - - expr: (fromEnum, length, ((-11), (-11)))
          - Right:
              expr: '1'
        - - expr: (fromEnum, length, ((11), (11)))
          - Right:
              expr: '1'
        - - expr: (fromEnum, length, ((-7), (-7)))
          - Right:
              expr: '1'
    - - - type: (([] Bool -> (,) Int Int), ([] Bool -> [] Bool), [] Bool)
        - type: (,) Int Int
      - []
    - - - type: (([] Bool -> (,) Int Int), ([] Char -> [] Bool), [] Char)
        - type: (,) Int Int
      - []
    - - - type: |-
            ((HashMap Char Bool -> (,) Int Int),
             ((,) Int Int -> HashMap Char Bool), (,) Int Int)
        - type: (,) Int Int
      - []
    - - - type: (((,) Int Int -> Int), ([] Char -> (,) Int Int), [] Char)
        - type: Int
      - []
    - - - type: (([] Bool -> Int), (Int -> [] Bool), Int)
        - type: Int
      - []
    - - - type: (([] Char -> (,) Int Int), ((,) Int Int -> [] Char), (,) Int Int)
        - type: (,) Int Int
      - []
    - - - type: (([] Bool -> HashMap Char Bool), (Int -> [] Bool), Int)
        - type: HashMap Char Bool
      - []
    - - - type: ((HashMap Char Bool -> [] Char), (Int -> HashMap Char Bool), Int)
        - type: '[] Char'
      - []
    - - - type: ((Int -> [] Char), ([] Bool -> Int), [] Bool)
        - type: '[] Char'
      - - - expr: (show, length, [True, False])
          - Right:
              expr: '"2"'
        - - expr: (show, length, [True])
          - Right:
              expr: '"1"'
    - - - type: ((Int -> [] Bool), (HashMap Char Bool -> Int), HashMap Char Bool)
        - type: '[] Bool'
      - []
    - - - type: (([] Bool -> (,) Int Int), ((,) Int Int -> [] Bool), (,) Int Int)
        - type: (,) Int Int
      - []
    - - - type: (([] Bool -> [] Char), (Int -> [] Bool), Int)
        - type: '[] Char'
      - []
    - - - type: |-
            (((,) Int Int -> HashMap Char Bool),
             (HashMap Char Bool -> (,) Int Int), HashMap Char Bool)
        - type: HashMap Char Bool
      - []
    - - - type: (([] Bool -> Int), ((,) Int Int -> [] Bool), (,) Int Int)
        - type: Int
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] Char), ([] Char -> HashMap Char Bool),
             [] Char)
        - type: '[] Char'
      - []
    - - - type: |-
            (([] Char -> HashMap Char Bool), (HashMap Char Bool -> [] Char),
             HashMap Char Bool)
        - type: HashMap Char Bool
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] Bool), ([] Bool -> HashMap Char Bool),
             [] Bool)
        - type: '[] Bool'
      - []
    - - - type: |-
            ((HashMap Char Bool -> HashMap Char Bool),
             (HashMap Char Bool -> HashMap Char Bool), HashMap Char Bool)
        - type: HashMap Char Bool
      - []
    - - - type: ((HashMap Char Bool -> Int), (Int -> HashMap Char Bool), Int)
        - type: Int
      - []
    - - - type: (([] Char -> (,) Int Int), ([] Bool -> [] Char), [] Bool)
        - type: (,) Int Int
      - []
    - - - type: |-
            ((HashMap Char Bool -> (,) Int Int),
             (HashMap Char Bool -> HashMap Char Bool), HashMap Char Bool)
        - type: (,) Int Int
      - []
    - - - type: ((Int -> (,) Int Int), ((,) Int Int -> Int), (,) Int Int)
        - type: (,) Int Int
      - []
    - - - type: |-
            (([] Bool -> (,) Int Int), (HashMap Char Bool -> [] Bool),
             HashMap Char Bool)
        - type: (,) Int Int
      - []
    - - - type: ((Int -> HashMap Char Bool), (Int -> Int), Int)
        - type: HashMap Char Bool
      - []
    - - - type: |-
            (((,) Int Int -> [] Char), (HashMap Char Bool -> (,) Int Int),
             HashMap Char Bool)
        - type: '[] Char'
      - []
    - - - type: |-
            ((HashMap Char Bool -> HashMap Char Bool),
             ((,) Int Int -> HashMap Char Bool), (,) Int Int)
        - type: HashMap Char Bool
      - []
    - - - type: (([] Bool -> HashMap Char Bool), ([] Char -> [] Bool), [] Char)
        - type: HashMap Char Bool
      - []
    - - - type: |-
            (((,) Int Int -> [] Bool), (HashMap Char Bool -> (,) Int Int),
             HashMap Char Bool)
        - type: '[] Bool'
      - []
    - - - type: (([] Char -> Int), ([] Char -> [] Char), [] Char)
        - type: Int
      - - - expr: (length, show, ['3', '5', '7', '0'])
          - Right:
              expr: '6'
        - - expr: (length, show, ['3', '5', '7'])
          - Right:
              expr: '5'
        - - expr: (length, show, ['3'])
          - Right:
              expr: '3'
        - - expr: (length, show, ['3', '5'])
          - Right:
              expr: '4'
    - - - type: |-
            ((HashMap Char Bool -> Int), ([] Char -> HashMap Char Bool),
             [] Char)
        - type: Int
      - []
    - - - type: |-
            (((,) Int Int -> HashMap Char Bool), ([] Char -> (,) Int Int),
             [] Char)
        - type: HashMap Char Bool
      - []
    - - - type: (((,) Int Int -> [] Bool), (Int -> (,) Int Int), Int)
        - type: '[] Bool'
      - []
    - - - type: |-
            ((HashMap Char Bool -> HashMap Char Bool),
             (Int -> HashMap Char Bool), Int)
        - type: HashMap Char Bool
      - []
    - - - type: |-
            (([] Char -> (,) Int Int), (HashMap Char Bool -> [] Char),
             HashMap Char Bool)
        - type: (,) Int Int
      - []
    - - - type: (((,) Int Int -> (,) Int Int), (Int -> (,) Int Int), Int)
        - type: (,) Int Int
      - []
    - - - type: (((,) Int Int -> [] Char), (Int -> (,) Int Int), Int)
        - type: '[] Char'
      - []
    - - - type: |-
            (([] Char -> Int), (HashMap Char Bool -> [] Char),
             HashMap Char Bool)
        - type: Int
      - - - expr: (length, show, HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: '33'
        - - expr: (length, show, HashMap.fromList [('3', True)])
          - Right:
              expr: '21'
    - - - type: (([] Char -> [] Bool), ([] Bool -> [] Char), [] Bool)
        - type: '[] Bool'
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] Char),
             (HashMap Char Bool -> HashMap Char Bool), HashMap Char Bool)
        - type: '[] Char'
      - []
    - - - type: ((Int -> [] Char), ([] Char -> Int), [] Char)
        - type: '[] Char'
      - - - expr: (show, length, ['3', '5', '7', '0'])
          - Right:
              expr: '"4"'
        - - expr: (show, length, ['3', '5', '7'])
          - Right:
              expr: '"3"'
        - - expr: (show, length, ['3'])
          - Right:
              expr: '"1"'
        - - expr: (show, length, ['3', '5'])
          - Right:
              expr: '"2"'
    - - - type: |-
            (([] Char -> [] Bool), (HashMap Char Bool -> [] Char),
             HashMap Char Bool)
        - type: '[] Bool'
      - []
    - - - type: |-
            (([] Bool -> HashMap Char Bool), ((,) Int Int -> [] Bool),
             (,) Int Int)
        - type: HashMap Char Bool
      - []
    - - - type: (([] Char -> [] Bool), ((,) Int Int -> [] Char), (,) Int Int)
        - type: '[] Bool'
      - []
    - - - type: ((Int -> HashMap Char Bool), ([] Bool -> Int), [] Bool)
        - type: HashMap Char Bool
      - []
    - - - type: (((,) Int Int -> [] Bool), ([] Bool -> (,) Int Int), [] Bool)
        - type: '[] Bool'
      - []
    - - - type: (([] Char -> [] Char), ((,) Int Int -> [] Char), (,) Int Int)
        - type: '[] Char'
      - - - expr: (show, show, ((-2), (-2)))
          - Right:
              expr: '"\"(-2,-2)\""'
        - - expr: (show, show, ((-4), (-4)))
          - Right:
              expr: '"\"(-4,-4)\""'
        - - expr: (show, show, ((15), (15)))
          - Right:
              expr: '"\"(15,15)\""'
        - - expr: (show, show, ((-20), (-20)))
          - Right:
              expr: '"\"(-20,-20)\""'
        - - expr: (show, show, ((-9), (-9)))
          - Right:
              expr: '"\"(-9,-9)\""'
        - - expr: (show, show, ((-5), (-5)))
          - Right:
              expr: '"\"(-5,-5)\""'
        - - expr: (show, show, ((-11), (-11)))
          - Right:
              expr: '"\"(-11,-11)\""'
        - - expr: (show, show, ((11), (11)))
          - Right:
              expr: '"\"(11,11)\""'
        - - expr: (show, show, ((-7), (-7)))
          - Right:
              expr: '"\"(-7,-7)\""'
    - - - type: (((,) Int Int -> (,) Int Int), ([] Bool -> (,) Int Int), [] Bool)
        - type: (,) Int Int
      - []
    - - - type: ((Int -> [] Bool), ([] Char -> Int), [] Char)
        - type: '[] Bool'
      - []
    - - - type: ((Int -> (,) Int Int), ([] Bool -> Int), [] Bool)
        - type: (,) Int Int
      - []
    - - - type: |-
            (([] Bool -> [] Bool), (HashMap Char Bool -> [] Bool),
             HashMap Char Bool)
        - type: '[] Bool'
      - []
    - - - type: (((,) Int Int -> [] Bool), ([] Char -> (,) Int Int), [] Char)
        - type: '[] Bool'
      - []
    - - - type: ((Int -> [] Bool), (Int -> Int), Int)
        - type: '[] Bool'
      - []
    - - - type: |-
            ((Int -> HashMap Char Bool), (HashMap Char Bool -> Int),
             HashMap Char Bool)
        - type: HashMap Char Bool
      - []
    - - - type: ((Int -> [] Char), ((,) Int Int -> Int), (,) Int Int)
        - type: '[] Char'
      - - - expr: (show, length, ((-2), (-2)))
          - Right:
              expr: '"1"'
        - - expr: (show, length, ((-4), (-4)))
          - Right:
              expr: '"1"'
        - - expr: (show, length, ((15), (15)))
          - Right:
              expr: '"1"'
        - - expr: (show, length, ((-20), (-20)))
          - Right:
              expr: '"1"'
        - - expr: (show, length, ((-9), (-9)))
          - Right:
              expr: '"1"'
        - - expr: (show, length, ((-5), (-5)))
          - Right:
              expr: '"1"'
        - - expr: (show, length, ((-11), (-11)))
          - Right:
              expr: '"1"'
        - - expr: (show, length, ((11), (11)))
          - Right:
              expr: '"1"'
        - - expr: (show, length, ((-7), (-7)))
          - Right:
              expr: '"1"'
    - - - type: ((Int -> Int), (Int -> Int), Int)
        - type: Int
      - - - expr: (succ, succ, (-2))
          - Right:
              expr: '0'
        - - expr: (succ, succ, (-4))
          - Right:
              expr: (-2)
        - - expr: (succ, succ, (15))
          - Right:
              expr: '17'
        - - expr: (succ, succ, (-20))
          - Right:
              expr: (-18)
        - - expr: (succ, succ, (-9))
          - Right:
              expr: (-7)
        - - expr: (succ, succ, (-5))
          - Right:
              expr: (-3)
        - - expr: (succ, succ, (-11))
          - Right:
              expr: (-9)
        - - expr: (succ, succ, (11))
          - Right:
              expr: '13'
        - - expr: (succ, succ, (-7))
          - Right:
              expr: (-5)
        - - expr: (succ, toEnum, (-2))
          - Right:
              expr: (-1)
        - - expr: (succ, toEnum, (-4))
          - Right:
              expr: (-3)
        - - expr: (succ, toEnum, (15))
          - Right:
              expr: '16'
        - - expr: (succ, toEnum, (-20))
          - Right:
              expr: (-19)
        - - expr: (succ, toEnum, (-9))
          - Right:
              expr: (-8)
        - - expr: (succ, toEnum, (-5))
          - Right:
              expr: (-4)
        - - expr: (succ, toEnum, (-11))
          - Right:
              expr: (-10)
        - - expr: (succ, toEnum, (11))
          - Right:
              expr: '12'
        - - expr: (succ, toEnum, (-7))
          - Right:
              expr: (-6)
        - - expr: (succ, fromEnum, (-2))
          - Right:
              expr: (-1)
        - - expr: (succ, fromEnum, (-4))
          - Right:
              expr: (-3)
        - - expr: (succ, fromEnum, (15))
          - Right:
              expr: '16'
        - - expr: (succ, fromEnum, (-20))
          - Right:
              expr: (-19)
        - - expr: (succ, fromEnum, (-9))
          - Right:
              expr: (-8)
        - - expr: (succ, fromEnum, (-5))
          - Right:
              expr: (-4)
        - - expr: (succ, fromEnum, (-11))
          - Right:
              expr: (-10)
        - - expr: (succ, fromEnum, (11))
          - Right:
              expr: '12'
        - - expr: (succ, fromEnum, (-7))
          - Right:
              expr: (-6)
        - - expr: (toEnum, succ, (-2))
          - Right:
              expr: (-1)
        - - expr: (toEnum, succ, (-4))
          - Right:
              expr: (-3)
        - - expr: (toEnum, succ, (15))
          - Right:
              expr: '16'
        - - expr: (toEnum, succ, (-20))
          - Right:
              expr: (-19)
        - - expr: (toEnum, succ, (-9))
          - Right:
              expr: (-8)
        - - expr: (toEnum, succ, (-5))
          - Right:
              expr: (-4)
        - - expr: (toEnum, succ, (-11))
          - Right:
              expr: (-10)
        - - expr: (toEnum, succ, (11))
          - Right:
              expr: '12'
        - - expr: (toEnum, succ, (-7))
          - Right:
              expr: (-6)
        - - expr: (toEnum, toEnum, (-2))
          - Right:
              expr: (-2)
        - - expr: (toEnum, toEnum, (-4))
          - Right:
              expr: (-4)
        - - expr: (toEnum, toEnum, (15))
          - Right:
              expr: '15'
        - - expr: (toEnum, toEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: (toEnum, toEnum, (-9))
          - Right:
              expr: (-9)
        - - expr: (toEnum, toEnum, (-5))
          - Right:
              expr: (-5)
        - - expr: (toEnum, toEnum, (-11))
          - Right:
              expr: (-11)
        - - expr: (toEnum, toEnum, (11))
          - Right:
              expr: '11'
        - - expr: (toEnum, toEnum, (-7))
          - Right:
              expr: (-7)
        - - expr: (toEnum, fromEnum, (-2))
          - Right:
              expr: (-2)
        - - expr: (toEnum, fromEnum, (-4))
          - Right:
              expr: (-4)
        - - expr: (toEnum, fromEnum, (15))
          - Right:
              expr: '15'
        - - expr: (toEnum, fromEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: (toEnum, fromEnum, (-9))
          - Right:
              expr: (-9)
        - - expr: (toEnum, fromEnum, (-5))
          - Right:
              expr: (-5)
        - - expr: (toEnum, fromEnum, (-11))
          - Right:
              expr: (-11)
        - - expr: (toEnum, fromEnum, (11))
          - Right:
              expr: '11'
        - - expr: (toEnum, fromEnum, (-7))
          - Right:
              expr: (-7)
        - - expr: (fromEnum, succ, (-2))
          - Right:
              expr: (-1)
        - - expr: (fromEnum, succ, (-4))
          - Right:
              expr: (-3)
        - - expr: (fromEnum, succ, (15))
          - Right:
              expr: '16'
        - - expr: (fromEnum, succ, (-20))
          - Right:
              expr: (-19)
        - - expr: (fromEnum, succ, (-9))
          - Right:
              expr: (-8)
        - - expr: (fromEnum, succ, (-5))
          - Right:
              expr: (-4)
        - - expr: (fromEnum, succ, (-11))
          - Right:
              expr: (-10)
        - - expr: (fromEnum, succ, (11))
          - Right:
              expr: '12'
        - - expr: (fromEnum, succ, (-7))
          - Right:
              expr: (-6)
        - - expr: (fromEnum, toEnum, (-2))
          - Right:
              expr: (-2)
        - - expr: (fromEnum, toEnum, (-4))
          - Right:
              expr: (-4)
        - - expr: (fromEnum, toEnum, (15))
          - Right:
              expr: '15'
        - - expr: (fromEnum, toEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: (fromEnum, toEnum, (-9))
          - Right:
              expr: (-9)
        - - expr: (fromEnum, toEnum, (-5))
          - Right:
              expr: (-5)
        - - expr: (fromEnum, toEnum, (-11))
          - Right:
              expr: (-11)
        - - expr: (fromEnum, toEnum, (11))
          - Right:
              expr: '11'
        - - expr: (fromEnum, toEnum, (-7))
          - Right:
              expr: (-7)
        - - expr: (fromEnum, fromEnum, (-2))
          - Right:
              expr: (-2)
        - - expr: (fromEnum, fromEnum, (-4))
          - Right:
              expr: (-4)
        - - expr: (fromEnum, fromEnum, (15))
          - Right:
              expr: '15'
        - - expr: (fromEnum, fromEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: (fromEnum, fromEnum, (-9))
          - Right:
              expr: (-9)
        - - expr: (fromEnum, fromEnum, (-5))
          - Right:
              expr: (-5)
        - - expr: (fromEnum, fromEnum, (-11))
          - Right:
              expr: (-11)
        - - expr: (fromEnum, fromEnum, (11))
          - Right:
              expr: '11'
        - - expr: (fromEnum, fromEnum, (-7))
          - Right:
              expr: (-7)
    - - - type: (((,) Int Int -> Int), (Int -> (,) Int Int), Int)
        - type: Int
      - []
    - - - type: |-
            ((HashMap Char Bool -> (,) Int Int),
             ([] Bool -> HashMap Char Bool), [] Bool)
        - type: (,) Int Int
      - []
    - - - type: (([] Bool -> [] Bool), ([] Bool -> [] Bool), [] Bool)
        - type: '[] Bool'
      - []
    - - - type: ((Int -> HashMap Char Bool), ((,) Int Int -> Int), (,) Int Int)
        - type: HashMap Char Bool
      - []
    - - - type: (([] Char -> [] Bool), ([] Char -> [] Char), [] Char)
        - type: '[] Bool'
      - []
    - - - type: (((,) Int Int -> Int), ((,) Int Int -> (,) Int Int), (,) Int Int)
        - type: Int
      - []
    - - - type: (([] Bool -> [] Char), ([] Char -> [] Bool), [] Char)
        - type: '[] Char'
      - []
    - - - type: (([] Char -> HashMap Char Bool), ([] Bool -> [] Char), [] Bool)
        - type: HashMap Char Bool
      - []
    - - - type: |-
            (([] Bool -> Int), (HashMap Char Bool -> [] Bool),
             HashMap Char Bool)
        - type: Int
      - []
    - - - type: |-
            (((,) Int Int -> [] Char), ((,) Int Int -> (,) Int Int),
             (,) Int Int)
        - type: '[] Char'
      - []
- - expr: let just = Just in just
  - - - - type: HashMap Char Bool
        - type: Maybe (HashMap Char Bool)
      - - - expr: (HashMap.fromList [('3', True), ('5', False)])
          - Right:
              expr: (Just (fromList [('3', True), ('5', False)]))
        - - expr: (HashMap.fromList [('3', True)])
          - Right:
              expr: (Just (fromList [('3', True)]))
    - - - type: (,) Int Int
        - type: Maybe ((,) Int Int)
      - - - expr: (((-2), (-2)))
          - Right:
              expr: (Just (-2, -2))
        - - expr: (((-4), (-4)))
          - Right:
              expr: (Just (-4, -4))
        - - expr: (((15), (15)))
          - Right:
              expr: (Just (15, 15))
        - - expr: (((-20), (-20)))
          - Right:
              expr: (Just (-20, -20))
        - - expr: (((-9), (-9)))
          - Right:
              expr: (Just (-9, -9))
        - - expr: (((-5), (-5)))
          - Right:
              expr: (Just (-5, -5))
        - - expr: (((-11), (-11)))
          - Right:
              expr: (Just (-11, -11))
        - - expr: (((11), (11)))
          - Right:
              expr: (Just (11, 11))
        - - expr: (((-7), (-7)))
          - Right:
              expr: (Just (-7, -7))
    - - - type: Int
        - type: Maybe Int
      - - - expr: ((-2))
          - Right:
              expr: (Just (-2))
        - - expr: ((-4))
          - Right:
              expr: (Just (-4))
        - - expr: ((15))
          - Right:
              expr: (Just 15)
        - - expr: ((-20))
          - Right:
              expr: (Just (-20))
        - - expr: ((-9))
          - Right:
              expr: (Just (-9))
        - - expr: ((-5))
          - Right:
              expr: (Just (-5))
        - - expr: ((-11))
          - Right:
              expr: (Just (-11))
        - - expr: ((11))
          - Right:
              expr: (Just 11)
        - - expr: ((-7))
          - Right:
              expr: (Just (-7))
    - - - type: '[] Char'
        - type: Maybe ([] Char)
      - - - expr: (['3', '5', '7', '0'])
          - Right:
              expr: (Just "3570")
        - - expr: (['3', '5', '7'])
          - Right:
              expr: (Just "357")
        - - expr: (['3'])
          - Right:
              expr: (Just "3")
        - - expr: (['3', '5'])
          - Right:
              expr: (Just "35")
    - - - type: '[] Bool'
        - type: Maybe ([] Bool)
      - - - expr: ([True, False])
          - Right:
              expr: (Just [True, False])
        - - expr: ([True])
          - Right:
              expr: (Just [True])
- - expr: elem
  - - - - type: (Int, [] Int)
        - type: Bool
      - - - expr: ((-2), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: 'True'
        - - expr: ((-2), [(-2), (-4), (15)])
          - Right:
              expr: 'True'
        - - expr: ((-2), [(-2)])
          - Right:
              expr: 'True'
        - - expr: ((-2), [(-2), (-4)])
          - Right:
              expr: 'True'
        - - expr: ((-2), [(-2), (-4), (15), (-20)])
          - Right:
              expr: 'True'
        - - expr: ((-4), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: 'True'
        - - expr: ((-4), [(-2), (-4), (15)])
          - Right:
              expr: 'True'
        - - expr: ((-4), [(-2)])
          - Right:
              expr: 'False'
        - - expr: ((-4), [(-2), (-4)])
          - Right:
              expr: 'True'
        - - expr: ((-4), [(-2), (-4), (15), (-20)])
          - Right:
              expr: 'True'
        - - expr: ((15), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: 'True'
        - - expr: ((15), [(-2), (-4), (15)])
          - Right:
              expr: 'True'
        - - expr: ((15), [(-2)])
          - Right:
              expr: 'False'
        - - expr: ((15), [(-2), (-4)])
          - Right:
              expr: 'False'
        - - expr: ((15), [(-2), (-4), (15), (-20)])
          - Right:
              expr: 'True'
        - - expr: ((-20), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: 'True'
        - - expr: ((-20), [(-2), (-4), (15)])
          - Right:
              expr: 'False'
        - - expr: ((-20), [(-2)])
          - Right:
              expr: 'False'
        - - expr: ((-20), [(-2), (-4)])
          - Right:
              expr: 'False'
        - - expr: ((-20), [(-2), (-4), (15), (-20)])
          - Right:
              expr: 'True'
        - - expr: ((-9), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: 'True'
        - - expr: ((-9), [(-2), (-4), (15)])
          - Right:
              expr: 'False'
        - - expr: ((-9), [(-2)])
          - Right:
              expr: 'False'
        - - expr: ((-9), [(-2), (-4)])
          - Right:
              expr: 'False'
        - - expr: ((-9), [(-2), (-4), (15), (-20)])
          - Right:
              expr: 'False'
        - - expr: ((-5), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: 'False'
        - - expr: ((-5), [(-2), (-4), (15)])
          - Right:
              expr: 'False'
        - - expr: ((-5), [(-2)])
          - Right:
              expr: 'False'
        - - expr: ((-5), [(-2), (-4)])
          - Right:
              expr: 'False'
        - - expr: ((-5), [(-2), (-4), (15), (-20)])
          - Right:
              expr: 'False'
        - - expr: ((-11), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: 'False'
        - - expr: ((-11), [(-2), (-4), (15)])
          - Right:
              expr: 'False'
        - - expr: ((-11), [(-2)])
          - Right:
              expr: 'False'
        - - expr: ((-11), [(-2), (-4)])
          - Right:
              expr: 'False'
        - - expr: ((-11), [(-2), (-4), (15), (-20)])
          - Right:
              expr: 'False'
        - - expr: ((11), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: 'False'
        - - expr: ((11), [(-2), (-4), (15)])
          - Right:
              expr: 'False'
        - - expr: ((11), [(-2)])
          - Right:
              expr: 'False'
        - - expr: ((11), [(-2), (-4)])
          - Right:
              expr: 'False'
        - - expr: ((11), [(-2), (-4), (15), (-20)])
          - Right:
              expr: 'False'
        - - expr: ((-7), [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: 'False'
        - - expr: ((-7), [(-2), (-4), (15)])
          - Right:
              expr: 'False'
        - - expr: ((-7), [(-2)])
          - Right:
              expr: 'False'
        - - expr: ((-7), [(-2), (-4)])
          - Right:
              expr: 'False'
        - - expr: ((-7), [(-2), (-4), (15), (-20)])
          - Right:
              expr: 'False'
    - - - type: (HashMap Char Bool, Maybe (HashMap Char Bool))
        - type: Bool
      - - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: 'True'
        - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: 'False'
        - - expr: |-
              (HashMap.fromList [('3', True)],
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: 'False'
        - - expr: |-
              (HashMap.fromList [('3', True)],
               Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: 'True'
    - - - type: (Int, Maybe Int)
        - type: Bool
      - - - expr: ((-2), Just (-2))
          - Right:
              expr: 'True'
        - - expr: ((-2), Just (-4))
          - Right:
              expr: 'False'
        - - expr: ((-2), Just (15))
          - Right:
              expr: 'False'
        - - expr: ((-2), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((-2), Just (11))
          - Right:
              expr: 'False'
        - - expr: ((-4), Just (-2))
          - Right:
              expr: 'False'
        - - expr: ((-4), Just (-4))
          - Right:
              expr: 'True'
        - - expr: ((-4), Just (15))
          - Right:
              expr: 'False'
        - - expr: ((-4), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((-4), Just (11))
          - Right:
              expr: 'False'
        - - expr: ((15), Just (-2))
          - Right:
              expr: 'False'
        - - expr: ((15), Just (-4))
          - Right:
              expr: 'False'
        - - expr: ((15), Just (15))
          - Right:
              expr: 'True'
        - - expr: ((15), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((15), Just (11))
          - Right:
              expr: 'False'
        - - expr: ((-20), Just (-2))
          - Right:
              expr: 'False'
        - - expr: ((-20), Just (-4))
          - Right:
              expr: 'False'
        - - expr: ((-20), Just (15))
          - Right:
              expr: 'False'
        - - expr: ((-20), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((-20), Just (11))
          - Right:
              expr: 'False'
        - - expr: ((-9), Just (-2))
          - Right:
              expr: 'False'
        - - expr: ((-9), Just (-4))
          - Right:
              expr: 'False'
        - - expr: ((-9), Just (15))
          - Right:
              expr: 'False'
        - - expr: ((-9), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((-9), Just (11))
          - Right:
              expr: 'False'
        - - expr: ((-5), Just (-2))
          - Right:
              expr: 'False'
        - - expr: ((-5), Just (-4))
          - Right:
              expr: 'False'
        - - expr: ((-5), Just (15))
          - Right:
              expr: 'False'
        - - expr: ((-5), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((-5), Just (11))
          - Right:
              expr: 'False'
        - - expr: ((-11), Just (-2))
          - Right:
              expr: 'False'
        - - expr: ((-11), Just (-4))
          - Right:
              expr: 'False'
        - - expr: ((-11), Just (15))
          - Right:
              expr: 'False'
        - - expr: ((-11), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((-11), Just (11))
          - Right:
              expr: 'False'
        - - expr: ((11), Just (-2))
          - Right:
              expr: 'False'
        - - expr: ((11), Just (-4))
          - Right:
              expr: 'False'
        - - expr: ((11), Just (15))
          - Right:
              expr: 'False'
        - - expr: ((11), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((11), Just (11))
          - Right:
              expr: 'True'
        - - expr: ((-7), Just (-2))
          - Right:
              expr: 'False'
        - - expr: ((-7), Just (-4))
          - Right:
              expr: 'False'
        - - expr: ((-7), Just (15))
          - Right:
              expr: 'False'
        - - expr: ((-7), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((-7), Just (11))
          - Right:
              expr: 'False'
    - - - type: ((,) Int Int, [] ((,) Int Int))
        - type: Bool
      - - - expr: |-
              (((-2), (-2)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: 'True'
        - - expr: (((-2), (-2)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: 'True'
        - - expr: (((-2), (-2)), [((-2), (-2))])
          - Right:
              expr: 'True'
        - - expr: (((-2), (-2)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: 'True'
        - - expr: |-
              (((-2), (-2)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: 'True'
        - - expr: |-
              (((-4), (-4)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: 'True'
        - - expr: (((-4), (-4)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: 'True'
        - - expr: (((-4), (-4)), [((-2), (-2))])
          - Right:
              expr: 'False'
        - - expr: (((-4), (-4)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: 'True'
        - - expr: |-
              (((-4), (-4)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: 'True'
        - - expr: |-
              (((15), (15)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: 'True'
        - - expr: (((15), (15)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: 'True'
        - - expr: (((15), (15)), [((-2), (-2))])
          - Right:
              expr: 'False'
        - - expr: (((15), (15)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: 'False'
        - - expr: |-
              (((15), (15)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: 'True'
        - - expr: |-
              (((-20), (-20)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: 'True'
        - - expr: (((-20), (-20)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: 'False'
        - - expr: (((-20), (-20)), [((-2), (-2))])
          - Right:
              expr: 'False'
        - - expr: (((-20), (-20)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: 'False'
        - - expr: |-
              (((-20), (-20)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: 'True'
        - - expr: |-
              (((-9), (-9)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: 'True'
        - - expr: (((-9), (-9)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: 'False'
        - - expr: (((-9), (-9)), [((-2), (-2))])
          - Right:
              expr: 'False'
        - - expr: (((-9), (-9)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: 'False'
        - - expr: |-
              (((-9), (-9)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: 'False'
        - - expr: |-
              (((-5), (-5)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: 'False'
        - - expr: (((-5), (-5)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: 'False'
        - - expr: (((-5), (-5)), [((-2), (-2))])
          - Right:
              expr: 'False'
        - - expr: (((-5), (-5)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: 'False'
        - - expr: |-
              (((-5), (-5)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: 'False'
        - - expr: |-
              (((-11), (-11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: 'False'
        - - expr: (((-11), (-11)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: 'False'
        - - expr: (((-11), (-11)), [((-2), (-2))])
          - Right:
              expr: 'False'
        - - expr: (((-11), (-11)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: 'False'
        - - expr: |-
              (((-11), (-11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: 'False'
        - - expr: |-
              (((11), (11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: 'False'
        - - expr: (((11), (11)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: 'False'
        - - expr: (((11), (11)), [((-2), (-2))])
          - Right:
              expr: 'False'
        - - expr: (((11), (11)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: 'False'
        - - expr: |-
              (((11), (11)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: 'False'
        - - expr: |-
              (((-7), (-7)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: 'False'
        - - expr: (((-7), (-7)), [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: 'False'
        - - expr: (((-7), (-7)), [((-2), (-2))])
          - Right:
              expr: 'False'
        - - expr: (((-7), (-7)), [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: 'False'
        - - expr: |-
              (((-7), (-7)),
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: 'False'
    - - - type: ([] Char, Maybe ([] Char))
        - type: Bool
      - - - expr: (['3', '5', '7', '0'], Just ['3', '5', '7', '0'])
          - Right:
              expr: 'True'
        - - expr: (['3', '5', '7', '0'], Just ['3', '5', '7'])
          - Right:
              expr: 'False'
        - - expr: (['3', '5', '7', '0'], Just ['3'])
          - Right:
              expr: 'False'
        - - expr: (['3', '5', '7', '0'], Nothing)
          - Right:
              expr: 'False'
        - - expr: (['3', '5', '7'], Just ['3', '5', '7', '0'])
          - Right:
              expr: 'False'
        - - expr: (['3', '5', '7'], Just ['3', '5', '7'])
          - Right:
              expr: 'True'
        - - expr: (['3', '5', '7'], Just ['3'])
          - Right:
              expr: 'False'
        - - expr: (['3', '5', '7'], Nothing)
          - Right:
              expr: 'False'
        - - expr: (['3'], Just ['3', '5', '7', '0'])
          - Right:
              expr: 'False'
        - - expr: (['3'], Just ['3', '5', '7'])
          - Right:
              expr: 'False'
        - - expr: (['3'], Just ['3'])
          - Right:
              expr: 'True'
        - - expr: (['3'], Nothing)
          - Right:
              expr: 'False'
        - - expr: (['3', '5'], Just ['3', '5', '7', '0'])
          - Right:
              expr: 'False'
        - - expr: (['3', '5'], Just ['3', '5', '7'])
          - Right:
              expr: 'False'
        - - expr: (['3', '5'], Just ['3'])
          - Right:
              expr: 'False'
        - - expr: (['3', '5'], Nothing)
          - Right:
              expr: 'False'
    - - - type: ([] Bool, Maybe ([] Bool))
        - type: Bool
      - - - expr: ([True, False], Just [True, False])
          - Right:
              expr: 'True'
        - - expr: ([True, False], Just [True])
          - Right:
              expr: 'False'
        - - expr: ([True], Just [True, False])
          - Right:
              expr: 'False'
        - - expr: ([True], Just [True])
          - Right:
              expr: 'True'
    - - - type: ([] Char, [] ([] Char))
        - type: Bool
      - - - expr: |-
              (['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: 'True'
        - - expr: |-
              (['3', '5', '7', '0'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: 'True'
        - - expr: (['3', '5', '7', '0'], [['3', '5', '7', '0']])
          - Right:
              expr: 'True'
        - - expr: (['3', '5', '7', '0'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: 'True'
        - - expr: |-
              (['3', '5', '7'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: 'True'
        - - expr: (['3', '5', '7'], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: 'True'
        - - expr: (['3', '5', '7'], [['3', '5', '7', '0']])
          - Right:
              expr: 'False'
        - - expr: (['3', '5', '7'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: 'True'
        - - expr: (['3'], [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: 'True'
        - - expr: (['3'], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: 'True'
        - - expr: (['3'], [['3', '5', '7', '0']])
          - Right:
              expr: 'False'
        - - expr: (['3'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: 'False'
        - - expr: |-
              (['3', '5'],
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: 'True'
        - - expr: (['3', '5'], [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: 'False'
        - - expr: (['3', '5'], [['3', '5', '7', '0']])
          - Right:
              expr: 'False'
        - - expr: (['3', '5'], [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: 'False'
    - - - type: ([] Bool, [] ([] Bool))
        - type: Bool
      - - - expr: ([True, False], [[True, False], [True]])
          - Right:
              expr: 'True'
        - - expr: ([True, False], [[True, False]])
          - Right:
              expr: 'True'
        - - expr: ([True], [[True, False], [True]])
          - Right:
              expr: 'True'
        - - expr: ([True], [[True, False]])
          - Right:
              expr: 'False'
    - - - type: ((,) Int Int, Maybe ((,) Int Int))
        - type: Bool
      - - - expr: (((-2), (-2)), Just ((-2), (-2)))
          - Right:
              expr: 'True'
        - - expr: (((-2), (-2)), Just ((-4), (-4)))
          - Right:
              expr: 'False'
        - - expr: (((-2), (-2)), Just ((15), (15)))
          - Right:
              expr: 'False'
        - - expr: (((-2), (-2)), Nothing)
          - Right:
              expr: 'False'
        - - expr: (((-2), (-2)), Just ((11), (11)))
          - Right:
              expr: 'False'
        - - expr: (((-4), (-4)), Just ((-2), (-2)))
          - Right:
              expr: 'False'
        - - expr: (((-4), (-4)), Just ((-4), (-4)))
          - Right:
              expr: 'True'
        - - expr: (((-4), (-4)), Just ((15), (15)))
          - Right:
              expr: 'False'
        - - expr: (((-4), (-4)), Nothing)
          - Right:
              expr: 'False'
        - - expr: (((-4), (-4)), Just ((11), (11)))
          - Right:
              expr: 'False'
        - - expr: (((15), (15)), Just ((-2), (-2)))
          - Right:
              expr: 'False'
        - - expr: (((15), (15)), Just ((-4), (-4)))
          - Right:
              expr: 'False'
        - - expr: (((15), (15)), Just ((15), (15)))
          - Right:
              expr: 'True'
        - - expr: (((15), (15)), Nothing)
          - Right:
              expr: 'False'
        - - expr: (((15), (15)), Just ((11), (11)))
          - Right:
              expr: 'False'
        - - expr: (((-20), (-20)), Just ((-2), (-2)))
          - Right:
              expr: 'False'
        - - expr: (((-20), (-20)), Just ((-4), (-4)))
          - Right:
              expr: 'False'
        - - expr: (((-20), (-20)), Just ((15), (15)))
          - Right:
              expr: 'False'
        - - expr: (((-20), (-20)), Nothing)
          - Right:
              expr: 'False'
        - - expr: (((-20), (-20)), Just ((11), (11)))
          - Right:
              expr: 'False'
        - - expr: (((-9), (-9)), Just ((-2), (-2)))
          - Right:
              expr: 'False'
        - - expr: (((-9), (-9)), Just ((-4), (-4)))
          - Right:
              expr: 'False'
        - - expr: (((-9), (-9)), Just ((15), (15)))
          - Right:
              expr: 'False'
        - - expr: (((-9), (-9)), Nothing)
          - Right:
              expr: 'False'
        - - expr: (((-9), (-9)), Just ((11), (11)))
          - Right:
              expr: 'False'
        - - expr: (((-5), (-5)), Just ((-2), (-2)))
          - Right:
              expr: 'False'
        - - expr: (((-5), (-5)), Just ((-4), (-4)))
          - Right:
              expr: 'False'
        - - expr: (((-5), (-5)), Just ((15), (15)))
          - Right:
              expr: 'False'
        - - expr: (((-5), (-5)), Nothing)
          - Right:
              expr: 'False'
        - - expr: (((-5), (-5)), Just ((11), (11)))
          - Right:
              expr: 'False'
        - - expr: (((-11), (-11)), Just ((-2), (-2)))
          - Right:
              expr: 'False'
        - - expr: (((-11), (-11)), Just ((-4), (-4)))
          - Right:
              expr: 'False'
        - - expr: (((-11), (-11)), Just ((15), (15)))
          - Right:
              expr: 'False'
        - - expr: (((-11), (-11)), Nothing)
          - Right:
              expr: 'False'
        - - expr: (((-11), (-11)), Just ((11), (11)))
          - Right:
              expr: 'False'
        - - expr: (((11), (11)), Just ((-2), (-2)))
          - Right:
              expr: 'False'
        - - expr: (((11), (11)), Just ((-4), (-4)))
          - Right:
              expr: 'False'
        - - expr: (((11), (11)), Just ((15), (15)))
          - Right:
              expr: 'False'
        - - expr: (((11), (11)), Nothing)
          - Right:
              expr: 'False'
        - - expr: (((11), (11)), Just ((11), (11)))
          - Right:
              expr: 'True'
        - - expr: (((-7), (-7)), Just ((-2), (-2)))
          - Right:
              expr: 'False'
        - - expr: (((-7), (-7)), Just ((-4), (-4)))
          - Right:
              expr: 'False'
        - - expr: (((-7), (-7)), Just ((15), (15)))
          - Right:
              expr: 'False'
        - - expr: (((-7), (-7)), Nothing)
          - Right:
              expr: 'False'
        - - expr: (((-7), (-7)), Just ((11), (11)))
          - Right:
              expr: 'False'
    - - - type: (HashMap Char Bool, [] (HashMap Char Bool))
        - type: Bool
      - - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: 'True'
        - - expr: |-
              (HashMap.fromList [('3', True), ('5', False)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: 'True'
        - - expr: |-
              (HashMap.fromList [('3', True)],
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: 'True'
        - - expr: |-
              (HashMap.fromList [('3', True)],
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: 'False'
- - expr: traverse
  - - - - type: ((Int -> [] ([] Bool)), [] Int)
        - type: '[] ([] ([] Bool))'
      - []
    - - - type: ((Int -> [] ((,) Int Int)), Maybe Int)
        - type: '[] (Maybe ((,) Int Int))'
      - []
    - - - type: ((Int -> [] ([] Bool)), Maybe Int)
        - type: '[] (Maybe ([] Bool))'
      - []
    - - - type: (((,) Int Int -> Maybe ([] Char)), [] ((,) Int Int))
        - type: Maybe ([] ([] Char))
      - []
    - - - type: (([] Bool -> Maybe ((,) Int Int)), Maybe ([] Bool))
        - type: Maybe (Maybe ((,) Int Int))
      - []
    - - - type: (((,) Int Int -> Maybe ((,) Int Int)), Maybe ((,) Int Int))
        - type: Maybe (Maybe ((,) Int Int))
      - - - expr: (let just = Just in just, Just ((-2), (-2)))
          - Right:
              expr: (Just (Just (-2, -2)))
        - - expr: (let just = Just in just, Just ((-4), (-4)))
          - Right:
              expr: (Just (Just (-4, -4)))
        - - expr: (let just = Just in just, Just ((15), (15)))
          - Right:
              expr: (Just (Just (15, 15)))
        - - expr: (let just = Just in just, Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (let just = Just in just, Just ((11), (11)))
          - Right:
              expr: (Just (Just (11, 11)))
        - - expr: (pure, Just ((-2), (-2)))
          - Right:
              expr: (Just (Just (-2, -2)))
        - - expr: (pure, Just ((-4), (-4)))
          - Right:
              expr: (Just (Just (-4, -4)))
        - - expr: (pure, Just ((15), (15)))
          - Right:
              expr: (Just (Just (15, 15)))
        - - expr: (pure, Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (pure, Just ((11), (11)))
          - Right:
              expr: (Just (Just (11, 11)))
    - - - type: (((,) Int Int -> [] ((,) Int Int)), Maybe ((,) Int Int))
        - type: '[] (Maybe ((,) Int Int))'
      - - - expr: (pure, Just ((-2), (-2)))
          - Right:
              expr: '[Just (-2, -2)]'
        - - expr: (pure, Just ((-4), (-4)))
          - Right:
              expr: '[Just (-4, -4)]'
        - - expr: (pure, Just ((15), (15)))
          - Right:
              expr: '[Just (15, 15)]'
        - - expr: (pure, Nothing)
          - Right:
              expr: '[Nothing]'
        - - expr: (pure, Just ((11), (11)))
          - Right:
              expr: '[Just (11, 11)]'
    - - - type: (((,) Int Int -> Maybe Int), [] ((,) Int Int))
        - type: Maybe ([] Int)
      - []
    - - - type: |-
            ((HashMap Char Bool -> [] ((,) Int Int)),
             Maybe (HashMap Char Bool))
        - type: '[] (Maybe ((,) Int Int))'
      - []
    - - - type: ((Int -> Maybe ((,) Int Int)), [] Int)
        - type: Maybe ([] ((,) Int Int))
      - []
    - - - type: ((HashMap Char Bool -> [] ([] Char)), [] (HashMap Char Bool))
        - type: '[] ([] ([] Char))'
      - []
    - - - type: (([] Bool -> Maybe ([] Bool)), Maybe ([] Bool))
        - type: Maybe (Maybe ([] Bool))
      - - - expr: (let just = Just in just, Just [True, False])
          - Right:
              expr: (Just (Just [True, False]))
        - - expr: (let just = Just in just, Just [True])
          - Right:
              expr: (Just (Just [True]))
        - - expr: (pure, Just [True, False])
          - Right:
              expr: (Just (Just [True, False]))
        - - expr: (pure, Just [True])
          - Right:
              expr: (Just (Just [True]))
    - - - type: (((,) Int Int -> [] ([] Bool)), [] ((,) Int Int))
        - type: '[] ([] ([] Bool))'
      - []
    - - - type: ((HashMap Char Bool -> Maybe ([] Bool)), [] (HashMap Char Bool))
        - type: Maybe ([] ([] Bool))
      - []
    - - - type: (((,) Int Int -> [] (HashMap Char Bool)), [] ((,) Int Int))
        - type: '[] ([] (HashMap Char Bool))'
      - []
    - - - type: ((HashMap Char Bool -> [] ([] Char)), Maybe (HashMap Char Bool))
        - type: '[] (Maybe ([] Char))'
      - []
    - - - type: (([] Char -> [] (HashMap Char Bool)), [] ([] Char))
        - type: '[] ([] (HashMap Char Bool))'
      - []
    - - - type: (((,) Int Int -> Maybe ((,) Int Int)), [] ((,) Int Int))
        - type: Maybe ([] ((,) Int Int))
      - - - expr: |-
              (let just = Just in just,
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (Just [(-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)])
        - - expr: |-
              (let just = Just in just,
               [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (Just [(-2, -2), (-4, -4), (15, 15)])
        - - expr: (let just = Just in just, [((-2), (-2))])
          - Right:
              expr: (Just [(-2, -2)])
        - - expr: (let just = Just in just, [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (Just [(-2, -2), (-4, -4)])
        - - expr: |-
              (let just = Just in just,
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (Just [(-2, -2), (-4, -4), (15, 15), (-20, -20)])
        - - expr: |-
              (pure,
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: (Just [(-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)])
        - - expr: (pure, [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: (Just [(-2, -2), (-4, -4), (15, 15)])
        - - expr: (pure, [((-2), (-2))])
          - Right:
              expr: (Just [(-2, -2)])
        - - expr: (pure, [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: (Just [(-2, -2), (-4, -4)])
        - - expr: (pure, [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: (Just [(-2, -2), (-4, -4), (15, 15), (-20, -20)])
    - - - type: (([] Bool -> [] (HashMap Char Bool)), Maybe ([] Bool))
        - type: '[] (Maybe (HashMap Char Bool))'
      - []
    - - - type: (([] Bool -> [] Int), [] ([] Bool))
        - type: '[] ([] Int)'
      - []
    - - - type: ((HashMap Char Bool -> Maybe Int), [] (HashMap Char Bool))
        - type: Maybe ([] Int)
      - []
    - - - type: ((HashMap Char Bool -> Maybe ([] Char)), Maybe (HashMap Char Bool))
        - type: Maybe (Maybe ([] Char))
      - []
    - - - type: (((,) Int Int -> [] Int), [] ((,) Int Int))
        - type: '[] ([] Int)'
      - []
    - - - type: ((Int -> Maybe ([] Bool)), Maybe Int)
        - type: Maybe (Maybe ([] Bool))
      - []
    - - - type: ((Int -> [] Int), Maybe Int)
        - type: '[] (Maybe Int)'
      - - - expr: (pure, Just (-2))
          - Right:
              expr: '[Just (-2)]'
        - - expr: (pure, Just (-4))
          - Right:
              expr: '[Just (-4)]'
        - - expr: (pure, Just (15))
          - Right:
              expr: '[Just 15]'
        - - expr: (pure, Nothing)
          - Right:
              expr: '[Nothing]'
        - - expr: (pure, Just (11))
          - Right:
              expr: '[Just 11]'
    - - - type: ((Int -> Maybe Int), [] Int)
        - type: Maybe ([] Int)
      - - - expr: (let just = Just in just, [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (Just [-2, -4, 15, -20, -9])
        - - expr: (let just = Just in just, [(-2), (-4), (15)])
          - Right:
              expr: (Just [-2, -4, 15])
        - - expr: (let just = Just in just, [(-2)])
          - Right:
              expr: (Just [-2])
        - - expr: (let just = Just in just, [(-2), (-4)])
          - Right:
              expr: (Just [-2, -4])
        - - expr: (let just = Just in just, [(-2), (-4), (15), (-20)])
          - Right:
              expr: (Just [-2, -4, 15, -20])
        - - expr: (pure, [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: (Just [-2, -4, 15, -20, -9])
        - - expr: (pure, [(-2), (-4), (15)])
          - Right:
              expr: (Just [-2, -4, 15])
        - - expr: (pure, [(-2)])
          - Right:
              expr: (Just [-2])
        - - expr: (pure, [(-2), (-4)])
          - Right:
              expr: (Just [-2, -4])
        - - expr: (pure, [(-2), (-4), (15), (-20)])
          - Right:
              expr: (Just [-2, -4, 15, -20])
    - - - type: ((Int -> Maybe ([] Bool)), [] Int)
        - type: Maybe ([] ([] Bool))
      - []
    - - - type: ((Int -> Maybe Int), Maybe Int)
        - type: Maybe (Maybe Int)
      - - - expr: (let just = Just in just, Just (-2))
          - Right:
              expr: (Just (Just (-2)))
        - - expr: (let just = Just in just, Just (-4))
          - Right:
              expr: (Just (Just (-4)))
        - - expr: (let just = Just in just, Just (15))
          - Right:
              expr: (Just (Just 15))
        - - expr: (let just = Just in just, Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (let just = Just in just, Just (11))
          - Right:
              expr: (Just (Just 11))
        - - expr: (pure, Just (-2))
          - Right:
              expr: (Just (Just (-2)))
        - - expr: (pure, Just (-4))
          - Right:
              expr: (Just (Just (-4)))
        - - expr: (pure, Just (15))
          - Right:
              expr: (Just (Just 15))
        - - expr: (pure, Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (pure, Just (11))
          - Right:
              expr: (Just (Just 11))
    - - - type: ((Int -> [] Int), [] Int)
        - type: '[] ([] Int)'
      - - - expr: (pure, [(-2), (-4), (15), (-20), (-9)])
          - Right:
              expr: '[[-2, -4, 15, -20, -9]]'
        - - expr: (pure, [(-2), (-4), (15)])
          - Right:
              expr: '[[-2, -4, 15]]'
        - - expr: (pure, [(-2)])
          - Right:
              expr: '[[-2]]'
        - - expr: (pure, [(-2), (-4)])
          - Right:
              expr: '[[-2, -4]]'
        - - expr: (pure, [(-2), (-4), (15), (-20)])
          - Right:
              expr: '[[-2, -4, 15, -20]]'
    - - - type: (([] Char -> Maybe ((,) Int Int)), [] ([] Char))
        - type: Maybe ([] ((,) Int Int))
      - []
    - - - type: (((,) Int Int -> [] Int), Maybe ((,) Int Int))
        - type: '[] (Maybe Int)'
      - []
    - - - type: (((,) Int Int -> Maybe (HashMap Char Bool)), [] ((,) Int Int))
        - type: Maybe ([] (HashMap Char Bool))
      - []
    - - - type: (((,) Int Int -> [] ([] Char)), [] ((,) Int Int))
        - type: '[] ([] ([] Char))'
      - []
    - - - type: |-
            ((HashMap Char Bool -> Maybe ((,) Int Int)),
             [] (HashMap Char Bool))
        - type: Maybe ([] ((,) Int Int))
      - []
    - - - type: ((HashMap Char Bool -> [] Int), [] (HashMap Char Bool))
        - type: '[] ([] Int)'
      - []
    - - - type: (([] Bool -> Maybe Int), Maybe ([] Bool))
        - type: Maybe (Maybe Int)
      - []
    - - - type: (([] Char -> [] ([] Bool)), Maybe ([] Char))
        - type: '[] (Maybe ([] Bool))'
      - []
    - - - type: (([] Char -> [] ([] Char)), [] ([] Char))
        - type: '[] ([] ([] Char))'
      - - - expr: (pure, [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: '[["3570", "357", "3", "35"]]'
        - - expr: (pure, [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: '[["3570", "357", "3"]]'
        - - expr: (pure, [['3', '5', '7', '0']])
          - Right:
              expr: '[["3570"]]'
        - - expr: (pure, [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: '[["3570", "357"]]'
    - - - type: |-
            ((HashMap Char Bool -> Maybe (HashMap Char Bool)),
             [] (HashMap Char Bool))
        - type: Maybe ([] (HashMap Char Bool))
      - - - expr: |-
              (let just = Just in just,
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                (Just
                   [fromList [('3', True), ('5', False)], fromList [('3', True)]])
        - - expr: |-
              (let just = Just in just,
               [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: (Just [fromList [('3', True), ('5', False)]])
        - - expr: |-
              (pure,
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: |-
                (Just
                   [fromList [('3', True), ('5', False)], fromList [('3', True)]])
        - - expr: (pure, [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: (Just [fromList [('3', True), ('5', False)]])
    - - - type: |-
            ((HashMap Char Bool -> [] (HashMap Char Bool)),
             [] (HashMap Char Bool))
        - type: '[] ([] (HashMap Char Bool))'
      - - - expr: |-
              (pure,
               [HashMap.fromList [('3', True), ('5', False)],
                HashMap.fromList [('3', True)]])
          - Right:
              expr: '[[fromList [(''3'', True), (''5'', False)], fromList [(''3'',
                True)]]]'
        - - expr: (pure, [HashMap.fromList [('3', True), ('5', False)]])
          - Right:
              expr: '[[fromList [(''3'', True), (''5'', False)]]]'
    - - - type: |-
            ((HashMap Char Bool -> [] (HashMap Char Bool)),
             Maybe (HashMap Char Bool))
        - type: '[] (Maybe (HashMap Char Bool))'
      - - - expr: (pure, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: '[Just (fromList [(''3'', True), (''5'', False)])]'
        - - expr: (pure, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: '[Just (fromList [(''3'', True)])]'
    - - - type: ((HashMap Char Bool -> [] Int), Maybe (HashMap Char Bool))
        - type: '[] (Maybe Int)'
      - []
    - - - type: (([] Char -> Maybe ([] Char)), [] ([] Char))
        - type: Maybe ([] ([] Char))
      - - - expr: |-
              (let just = Just in just,
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: (Just ["3570", "357", "3", "35"])
        - - expr: |-
              (let just = Just in just,
               [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: (Just ["3570", "357", "3"])
        - - expr: (let just = Just in just, [['3', '5', '7', '0']])
          - Right:
              expr: (Just ["3570"])
        - - expr: (let just = Just in just, [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: (Just ["3570", "357"])
        - - expr: (pure, [['3', '5', '7', '0'], ['3', '5', '7'], ['3'], ['3', '5']])
          - Right:
              expr: (Just ["3570", "357", "3", "35"])
        - - expr: (pure, [['3', '5', '7', '0'], ['3', '5', '7'], ['3']])
          - Right:
              expr: (Just ["3570", "357", "3"])
        - - expr: (pure, [['3', '5', '7', '0']])
          - Right:
              expr: (Just ["3570"])
        - - expr: (pure, [['3', '5', '7', '0'], ['3', '5', '7']])
          - Right:
              expr: (Just ["3570", "357"])
    - - - type: |-
            ((HashMap Char Bool -> Maybe ((,) Int Int)),
             Maybe (HashMap Char Bool))
        - type: Maybe (Maybe ((,) Int Int))
      - []
    - - - type: (([] Bool -> Maybe ([] Char)), Maybe ([] Bool))
        - type: Maybe (Maybe ([] Char))
      - []
    - - - type: (([] Bool -> [] (HashMap Char Bool)), [] ([] Bool))
        - type: '[] ([] (HashMap Char Bool))'
      - []
    - - - type: (([] Char -> Maybe ([] Char)), Maybe ([] Char))
        - type: Maybe (Maybe ([] Char))
      - - - expr: (let just = Just in just, Just ['3', '5', '7', '0'])
          - Right:
              expr: (Just (Just "3570"))
        - - expr: (let just = Just in just, Just ['3', '5', '7'])
          - Right:
              expr: (Just (Just "357"))
        - - expr: (let just = Just in just, Just ['3'])
          - Right:
              expr: (Just (Just "3"))
        - - expr: (let just = Just in just, Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (pure, Just ['3', '5', '7', '0'])
          - Right:
              expr: (Just (Just "3570"))
        - - expr: (pure, Just ['3', '5', '7'])
          - Right:
              expr: (Just (Just "357"))
        - - expr: (pure, Just ['3'])
          - Right:
              expr: (Just (Just "3"))
        - - expr: (pure, Nothing)
          - Right:
              expr: (Just Nothing)
    - - - type: (([] Char -> [] Int), [] ([] Char))
        - type: '[] ([] Int)'
      - []
    - - - type: (([] Bool -> [] ([] Bool)), [] ([] Bool))
        - type: '[] ([] ([] Bool))'
      - - - expr: (pure, [[True, False], [True]])
          - Right:
              expr: '[[[True, False], [True]]]'
        - - expr: (pure, [[True, False]])
          - Right:
              expr: '[[[True, False]]]'
    - - - type: (([] Bool -> Maybe (HashMap Char Bool)), Maybe ([] Bool))
        - type: Maybe (Maybe (HashMap Char Bool))
      - []
    - - - type: (((,) Int Int -> Maybe ([] Char)), Maybe ((,) Int Int))
        - type: Maybe (Maybe ([] Char))
      - []
    - - - type: ((Int -> Maybe ([] Char)), [] Int)
        - type: Maybe ([] ([] Char))
      - []
    - - - type: ((Int -> Maybe ([] Char)), Maybe Int)
        - type: Maybe (Maybe ([] Char))
      - []
    - - - type: (((,) Int Int -> [] ([] Char)), Maybe ((,) Int Int))
        - type: '[] (Maybe ([] Char))'
      - []
    - - - type: (((,) Int Int -> [] (HashMap Char Bool)), Maybe ((,) Int Int))
        - type: '[] (Maybe (HashMap Char Bool))'
      - []
    - - - type: (((,) Int Int -> Maybe ([] Bool)), [] ((,) Int Int))
        - type: Maybe ([] ([] Bool))
      - []
    - - - type: (([] Char -> Maybe ((,) Int Int)), Maybe ([] Char))
        - type: Maybe (Maybe ((,) Int Int))
      - []
    - - - type: (((,) Int Int -> [] ([] Bool)), Maybe ((,) Int Int))
        - type: '[] (Maybe ([] Bool))'
      - []
    - - - type: (([] Char -> Maybe (HashMap Char Bool)), [] ([] Char))
        - type: Maybe ([] (HashMap Char Bool))
      - []
    - - - type: (([] Bool -> Maybe ([] Char)), [] ([] Bool))
        - type: Maybe ([] ([] Char))
      - []
    - - - type: (([] Bool -> [] ([] Char)), Maybe ([] Bool))
        - type: '[] (Maybe ([] Char))'
      - []
    - - - type: (([] Char -> Maybe (HashMap Char Bool)), Maybe ([] Char))
        - type: Maybe (Maybe (HashMap Char Bool))
      - []
    - - - type: (([] Char -> [] (HashMap Char Bool)), Maybe ([] Char))
        - type: '[] (Maybe (HashMap Char Bool))'
      - []
    - - - type: (([] Bool -> [] ((,) Int Int)), Maybe ([] Bool))
        - type: '[] (Maybe ((,) Int Int))'
      - []
    - - - type: (([] Bool -> Maybe Int), [] ([] Bool))
        - type: Maybe ([] Int)
      - []
    - - - type: ((HashMap Char Bool -> Maybe ([] Char)), [] (HashMap Char Bool))
        - type: Maybe ([] ([] Char))
      - []
    - - - type: (([] Bool -> Maybe (HashMap Char Bool)), [] ([] Bool))
        - type: Maybe ([] (HashMap Char Bool))
      - []
    - - - type: (([] Char -> Maybe ([] Bool)), [] ([] Char))
        - type: Maybe ([] ([] Bool))
      - []
    - - - type: (((,) Int Int -> Maybe ([] Bool)), Maybe ((,) Int Int))
        - type: Maybe (Maybe ([] Bool))
      - []
    - - - type: ((HashMap Char Bool -> Maybe ([] Bool)), Maybe (HashMap Char Bool))
        - type: Maybe (Maybe ([] Bool))
      - []
    - - - type: (([] Bool -> [] ([] Bool)), Maybe ([] Bool))
        - type: '[] (Maybe ([] Bool))'
      - - - expr: (pure, Just [True, False])
          - Right:
              expr: '[Just [True, False]]'
        - - expr: (pure, Just [True])
          - Right:
              expr: '[Just [True]]'
    - - - type: (([] Char -> Maybe Int), [] ([] Char))
        - type: Maybe ([] Int)
      - []
    - - - type: ((HashMap Char Bool -> Maybe Int), Maybe (HashMap Char Bool))
        - type: Maybe (Maybe Int)
      - []
    - - - type: (([] Char -> [] ((,) Int Int)), [] ([] Char))
        - type: '[] ([] ((,) Int Int))'
      - []
    - - - type: (([] Char -> Maybe ([] Bool)), Maybe ([] Char))
        - type: Maybe (Maybe ([] Bool))
      - []
    - - - type: (([] Char -> Maybe Int), Maybe ([] Char))
        - type: Maybe (Maybe Int)
      - []
    - - - type: ((Int -> [] (HashMap Char Bool)), Maybe Int)
        - type: '[] (Maybe (HashMap Char Bool))'
      - []
    - - - type: ((Int -> [] ([] Char)), Maybe Int)
        - type: '[] (Maybe ([] Char))'
      - []
    - - - type: ((Int -> Maybe (HashMap Char Bool)), [] Int)
        - type: Maybe ([] (HashMap Char Bool))
      - []
    - - - type: ((Int -> [] ([] Char)), [] Int)
        - type: '[] ([] ([] Char))'
      - []
    - - - type: ((Int -> Maybe (HashMap Char Bool)), Maybe Int)
        - type: Maybe (Maybe (HashMap Char Bool))
      - []
    - - - type: ((Int -> [] (HashMap Char Bool)), [] Int)
        - type: '[] ([] (HashMap Char Bool))'
      - []
    - - - type: ((Int -> [] ((,) Int Int)), [] Int)
        - type: '[] ([] ((,) Int Int))'
      - []
    - - - type: (([] Bool -> Maybe ((,) Int Int)), [] ([] Bool))
        - type: Maybe ([] ((,) Int Int))
      - []
    - - - type: ((Int -> Maybe ((,) Int Int)), Maybe Int)
        - type: Maybe (Maybe ((,) Int Int))
      - []
    - - - type: ((HashMap Char Bool -> [] ([] Bool)), Maybe (HashMap Char Bool))
        - type: '[] (Maybe ([] Bool))'
      - []
    - - - type: (([] Char -> [] ([] Char)), Maybe ([] Char))
        - type: '[] (Maybe ([] Char))'
      - - - expr: (pure, Just ['3', '5', '7', '0'])
          - Right:
              expr: '[Just "3570"]'
        - - expr: (pure, Just ['3', '5', '7'])
          - Right:
              expr: '[Just "357"]'
        - - expr: (pure, Just ['3'])
          - Right:
              expr: '[Just "3"]'
        - - expr: (pure, Nothing)
          - Right:
              expr: '[Nothing]'
    - - - type: (([] Char -> [] ((,) Int Int)), Maybe ([] Char))
        - type: '[] (Maybe ((,) Int Int))'
      - []
    - - - type: |-
            ((HashMap Char Bool -> Maybe (HashMap Char Bool)),
             Maybe (HashMap Char Bool))
        - type: Maybe (Maybe (HashMap Char Bool))
      - - - expr: |-
              (let just = Just in just,
               Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (Just (Just (fromList [('3', True), ('5', False)])))
        - - expr: (let just = Just in just, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (Just (Just (fromList [('3', True)])))
        - - expr: (pure, Just (HashMap.fromList [('3', True), ('5', False)]))
          - Right:
              expr: (Just (Just (fromList [('3', True), ('5', False)])))
        - - expr: (pure, Just (HashMap.fromList [('3', True)]))
          - Right:
              expr: (Just (Just (fromList [('3', True)])))
    - - - type: ((HashMap Char Bool -> [] ((,) Int Int)), [] (HashMap Char Bool))
        - type: '[] ([] ((,) Int Int))'
      - []
    - - - type: (([] Char -> [] ([] Bool)), [] ([] Char))
        - type: '[] ([] ([] Bool))'
      - []
    - - - type: (([] Bool -> [] ([] Char)), [] ([] Bool))
        - type: '[] ([] ([] Char))'
      - []
    - - - type: (((,) Int Int -> Maybe Int), Maybe ((,) Int Int))
        - type: Maybe (Maybe Int)
      - []
    - - - type: (([] Bool -> Maybe ([] Bool)), [] ([] Bool))
        - type: Maybe ([] ([] Bool))
      - - - expr: (let just = Just in just, [[True, False], [True]])
          - Right:
              expr: (Just [[True, False], [True]])
        - - expr: (let just = Just in just, [[True, False]])
          - Right:
              expr: (Just [[True, False]])
        - - expr: (pure, [[True, False], [True]])
          - Right:
              expr: (Just [[True, False], [True]])
        - - expr: (pure, [[True, False]])
          - Right:
              expr: (Just [[True, False]])
    - - - type: (([] Bool -> [] ((,) Int Int)), [] ([] Bool))
        - type: '[] ([] ((,) Int Int))'
      - []
    - - - type: (([] Bool -> [] Int), Maybe ([] Bool))
        - type: '[] (Maybe Int)'
      - []
    - - - type: (([] Char -> [] Int), Maybe ([] Char))
        - type: '[] (Maybe Int)'
      - []
    - - - type: ((HashMap Char Bool -> [] ([] Bool)), [] (HashMap Char Bool))
        - type: '[] ([] ([] Bool))'
      - []
    - - - type: (((,) Int Int -> [] ((,) Int Int)), [] ((,) Int Int))
        - type: '[] ([] ((,) Int Int))'
      - - - expr: |-
              (pure,
               [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20)),
                ((-9), (-9))])
          - Right:
              expr: '[[(-2, -2), (-4, -4), (15, 15), (-20, -20), (-9, -9)]]'
        - - expr: (pure, [((-2), (-2)), ((-4), (-4)), ((15), (15))])
          - Right:
              expr: '[[(-2, -2), (-4, -4), (15, 15)]]'
        - - expr: (pure, [((-2), (-2))])
          - Right:
              expr: '[[(-2, -2)]]'
        - - expr: (pure, [((-2), (-2)), ((-4), (-4))])
          - Right:
              expr: '[[(-2, -2), (-4, -4)]]'
        - - expr: (pure, [((-2), (-2)), ((-4), (-4)), ((15), (15)), ((-20), (-20))])
          - Right:
              expr: '[[(-2, -2), (-4, -4), (15, 15), (-20, -20)]]'
    - - - type: (((,) Int Int -> Maybe (HashMap Char Bool)), Maybe ((,) Int Int))
        - type: Maybe (Maybe (HashMap Char Bool))
      - []
generationCfg:
  numMin: -20
  seed: 123
  charMin: '0'
  crashOnError: true
  verbosity: warning
  test: 0.3
  maxInstances: 5
  maxHoles: 1
  nestLimit: 1
  charMax: '9'
  numMax: 20
  taskPath: ./results/datasets.yml
  training: 0.35
  listMin: 0
  numInputs: 10
  validation: 0.35
  listMax: 5
  maxDataset: 1000
variantTypes:
- type: '[a] -> [b] -> [(a, b)]'
- type: '[b] -> [(a, b)]'
- type: '[(a, b)]'
- type: '  Show a => a -> String'
- type: '*'
- type: '  Enum a => a -> a'
- type: '  Enum a => a'
- type: '  (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)'
- type: '*'
- type: '*'
- type: a -> [a] -> [a]
- type: '[a] -> [a]'
- type: '[a]'
- type: '[(a, b)] -> ([a], [b])'
- type: ([a], [b])
- type: '  (Foldable t, Eq a) => a -> t a -> Bool'
- type: '*'
- type: '*'
- type: '  Num p => p'
- type: a -> Maybe a
- type: Maybe a
- type: '  Applicative f => a -> f a'
- type: '*'
- type: '  Monoid a => a'
- type: '  Enum a => Int -> a'
- type: '*'
- type: '  Foldable t => t a -> Int'
- type: '*'
- type: '  Monad m => m a -> (a -> m b) -> m b'
- type: '  Monad m => (a -> m b) -> m b'
- type: '  Monad m => m b'
- type: a -> b -> (a, b)
- type: b -> (a, b)
- type: (a, b)
- type: '  GHC.Base.Alternative f => f a'
- type: '  Foldable t => (a -> a -> a) -> t a -> a'
- type: '*'
- type: '*'
- type: '  (Traversable t, Monad m) => t (m a) -> m (t a)'
- type: '  (Traversable t, Monad m) => m (t a)'
- type: '  (Traversable t, Applicative f) => t (f a) -> f (t a)'
- type: '  (Traversable t, Applicative f) => f (t a)'
- type: '  Enum a => a -> Int'
- type: '*'
- type: '  (Traversable t, Monad m) => (a -> m b) -> t a -> m (t b)'
- type: '*'
- type: '*'
- type: a -> b -> a
- type: b -> a
- type: a
- type: '  (Foldable t, Monoid m) => (a -> m) -> t a -> m'
- type: '*'
- type: '*'
- type: '  Functor f => (a -> b) -> f a -> f b'
- type: '*'
- type: '*'
- type: '  Semigroup a => a -> a -> a'
- type: '  Semigroup a => a -> a'
- type: '  Semigroup a => a'
- type: '  Foldable t => t a -> Bool'
- type: '*'
- type: b -> (a -> b) -> Maybe a -> b
- type: (a -> b) -> Maybe a -> b
- type: Maybe a -> b
- type: b
- type: '  Applicative f => f (a -> b) -> f a -> f b'
- type: '  Applicative f => f a -> f b'
- type: '  Applicative f => f b'
- type: '  Foldable t => (a -> b -> b) -> b -> t a -> b'
- type: '*'
- type: '*'
- type: '*'
- type: (b -> c) -> (a -> b) -> a -> c
- type: (a -> b) -> a -> c
- type: a -> c
- type: c
- type: '  (Eq k, Hashable k) => k -> v -> HashMap k v -> HashMap k v'
- type: '  (Eq k, Hashable k) => v -> HashMap k v -> HashMap k v'
- type: '*'
- type: '*'
ruleCharMap:
  ',': 5
  \: 23
  l: 35
  g: 31
  w: 46
  G: 15
  '*': 4
  m: 36
  '-': 6
  M: 18
  =: 8
  ']': 24
  p: 39
  ' ': 0
  '[': 22
  k: 34
  .: 7
  'N': 19
  '>': 9
  'n': 37
  a: 25
  q: 40
  A: 10
  d: 28
  t: 43
  T: 21
  o: 38
  '"': 1
  B: 11
  b: 26
  r: 41
  u: 44
  E: 13
  e: 29
  h: 32
  (: 2
  H: 16
  c: 27
  s: 42
  C: 12
  S: 20
  f: 30
  v: 45
  F: 14
  i: 33
  'y': 47
  ): 3
  I: 17
bothCharMap:
  ',': 6
  L: 30
  <: 20
  \: 37
  l: 49
  g: 45
  w: 58
  '''': 3
  '7': 16
  j: 48
  J: 29
  ':': 19
  ? |2+

  : 0
  m: 50
  '-': 7
  M: 31
  =: 21
  ']': 38
  '0': 9
  p: 53
  ' ': 1
  '[': 36
  .: 8
  'N': 32
  '>': 22
  'n': 51
  a: 39
  '1': 10
  d: 42
  t: 56
  '4': 13
  T: 35
  o: 52
  '"': 2
  B: 23
  '2': 11
  R: 33
  b: 40
  r: 54
  u: 57
  E: 25
  '5': 14
  e: 43
  h: 46
  (: 4
  H: 27
  '8': 17
  c: 41
  s: 55
  C: 24
  '3': 12
  S: 34
  f: 44
  F: 26
  '6': 15
  '9': 18
  i: 47
  'y': 59
  ): 5
  I: 28
dsl:
  length:
    expr: length
  insert:
    expr: insert
  maybe:
    expr: maybe
  foldMap:
    expr: foldMap
  empty:
    expr: empty
  fromEnum:
    expr: fromEnum
  unzip:
    expr: unzip
  just:
    expr: Just
  'null':
    expr: 'null'
  foldr:
    expr: foldr
  zip:
    expr: zip
  app:
    expr: (<*>)
  elem:
    expr: elem
  bind:
    expr: (>>=)
  sequence:
    expr: sequence
  zero:
    expr: '0'
  foldr1:
    expr: foldr1
  fmap:
    expr: fmap
  pure:
    expr: pure
  const:
    expr: const
  toEnum:
    expr: toEnum
  mempty:
    expr: mempty
  compose:
    expr: (.)
  tpl:
    expr: (,)
  prepend:
    expr: (:)
  traverse:
    expr: traverse
  show:
    expr: show
  succ:
    expr: succ
  sequenceA:
    expr: sequenceA
  mapM:
    expr: mapM
  conc:
    expr: (<>)
fnTypes:
- - expr: toEnum
  - type: '  Enum a => Int -> a'
- - expr: sequenceA
  - type: '  (Traversable t, Applicative f) => t (f a) -> f (t a)'
- - expr: length
  - type: '  Foldable t => t a -> Int'
- - expr: zip
  - type: '[a] -> [b] -> [(a, b)]'
- - expr: unzip
  - type: '[(a, b)] -> ([a], [b])'
- - expr: succ
  - type: '  Enum a => a -> a'
- - expr: let conc = (<>) in conc
  - type: '  Semigroup a => a -> a -> a'
- - expr: 'null'
  - type: '  Foldable t => t a -> Bool'
- - expr: let bind = (>>=) in bind
  - type: '  Monad m => m a -> (a -> m b) -> m b'
- - expr: const
  - type: a -> b -> a
- - expr: let prepend = (:) in prepend
  - type: a -> [a] -> [a]
- - expr: pure
  - type: '  Applicative f => a -> f a'
- - expr: show
  - type: '  Show a => a -> String'
- - expr: let tpl = (,) in tpl
  - type: a -> b -> (a, b)
- - expr: fmap
  - type: '  Functor f => (a -> b) -> f a -> f b'
- - expr: maybe
  - type: b -> (a -> b) -> Maybe a -> b
- - expr: foldr
  - type: '  Foldable t => (a -> b -> b) -> b -> t a -> b'
- - expr: foldMap
  - type: '  (Foldable t, Monoid m) => (a -> m) -> t a -> m'
- - expr: foldr1
  - type: '  Foldable t => (a -> a -> a) -> t a -> a'
- - expr: let compose = (.) in compose
  - type: (b -> c) -> (a -> b) -> a -> c
- - expr: let just = Just in just
  - type: a -> Maybe a
- - expr: elem
  - type: '  (Foldable t, Eq a) => a -> t a -> Bool'
- - expr: traverse
  - type: '  (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)'
exprCharMap:
  ',': 6
  L: 27
  <: 20
  \: 33
  l: 44
  g: 40
  w: 53
  '''': 3
  '7': 16
  j: 43
  J: 26
  ':': 19
  ? |2+

  : 0
  m: 45
  '-': 7
  M: 28
  =: 21
  ']': 34
  '0': 9
  p: 48
  ' ': 1
  '[': 32
  .: 8
  'N': 29
  '>': 22
  'n': 46
  a: 35
  '1': 10
  d: 37
  t: 51
  '4': 13
  T: 31
  o: 47
  '"': 2
  '2': 11
  R: 30
  r: 49
  u: 52
  E: 23
  '5': 14
  e: 38
  h: 41
  (: 4
  H: 25
  '8': 17
  c: 36
  s: 50
  '3': 12
  f: 39
  F: 24
  '6': 15
  '9': 18
  i: 42
  'y': 54
  ): 5
datasets:
- - expr: length
  - expr: elem
  - expr: show
  - expr: succ
  - expr: sequenceA
  - expr: fmap
  - expr: traverse
  - expr: unzip
- - expr: pure
  - expr: let prepend = (:) in prepend
  - expr: foldr1
  - expr: let tpl = (,) in tpl
  - expr: let conc = (<>) in conc
  - expr: maybe
  - expr: toEnum
  - expr: const
- - expr: zip
  - expr: let compose = (.) in compose
  - expr: let just = Just in just
  - expr: foldMap
  - expr: let bind = (>>=) in bind
  - expr: 'null'
  - expr: foldr
