generatedTypes:
  '0':
  - Int
  - Char
  '1':
  - '[]'
  - Maybe
  '2':
  - (,)
  - Either
longestExprString: 58
exprBlocks:
- - zip
  - expr: zip
- - zip
  - expr: 'zip (undefined :: [a])'
- - zip
  - expr: 'zip (undefined :: [a]) (undefined :: [b])'
- - unzip
  - expr: unzip
- - unzip
  - expr: 'unzip (undefined :: [(a, b)])'
- - elem
  - expr: elem
- - elem
  - expr: 'elem (undefined :: (Foldable t, Eq a) => a)'
- - elem
  - expr: |-
      elem (undefined :: (Foldable t, Eq a) => a)
        (undefined :: (Foldable t, Eq a) => t a)
- - conc
  - expr: conc
- - conc
  - expr: 'conc (undefined :: Semigroup a => a)'
- - conc
  - expr: |-
      conc (undefined :: Semigroup a => a)
        (undefined :: Semigroup a => a)
- - just
  - expr: just
- - just
  - expr: 'just (undefined :: a)'
- - mempty
  - expr: mempty
- - toEnum
  - expr: toEnum
- - toEnum
  - expr: 'toEnum (undefined :: Enum a => Int)'
- - length
  - expr: length
- - length
  - expr: 'length (undefined :: Foldable t => t a)'
- - compose
  - expr: compose
- - compose
  - expr: 'compose (undefined :: (b -> c))'
- - compose
  - expr: 'compose (undefined :: (b -> c)) (undefined :: (a -> b))'
- - compose
  - expr: |-
      compose (undefined :: (b -> c)) (undefined :: (a -> b))
        (undefined :: a)
- - sequence
  - expr: sequence
- - sequence
  - expr: 'sequence (undefined :: (Traversable t, Monad m) => t (m a))'
- - sequenceA
  - expr: sequenceA
- - sequenceA
  - expr: 'sequenceA (undefined :: (Traversable t, Applicative f) => t (f a))'
- - fromEnum
  - expr: fromEnum
- - fromEnum
  - expr: 'fromEnum (undefined :: Enum a => a)'
- - zero
  - expr: zero
- - prepend
  - expr: prepend
- - prepend
  - expr: 'prepend (undefined :: a)'
- - prepend
  - expr: 'prepend (undefined :: a) (undefined :: [a])'
- - foldMap
  - expr: foldMap
- - foldMap
  - expr: 'foldMap (undefined :: (Foldable t, Monoid m) => (a -> m))'
- - foldMap
  - expr: |-
      foldMap (undefined :: (Foldable t, Monoid m) => (a -> m))
        (undefined :: (Foldable t, Monoid m) => t a)
- - fmap
  - expr: fmap
- - fmap
  - expr: 'fmap (undefined :: Functor f => (a -> b))'
- - fmap
  - expr: |-
      fmap (undefined :: Functor f => (a -> b))
        (undefined :: Functor f => f a)
- - maybe
  - expr: maybe
- - maybe
  - expr: 'maybe (undefined :: b)'
- - maybe
  - expr: 'maybe (undefined :: b) (undefined :: (a -> b))'
- - maybe
  - expr: |-
      maybe (undefined :: b) (undefined :: (a -> b))
        (undefined :: Maybe a)
- - tpl
  - expr: tpl
- - tpl
  - expr: 'tpl (undefined :: a)'
- - tpl
  - expr: 'tpl (undefined :: a) (undefined :: b)'
longestString: 58
fnTypeIOs:
- - expr: toEnum
  - - - - type: Int
        - type: Char
      - - - expr: ((-17))
          - Left: '"Prelude.chr: bad argument: (-17)"'
        - - expr: ((-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: ((-19))
          - Left: '"Prelude.chr: bad argument: (-19)"'
        - - expr: ((19))
          - Right:
              expr: '''\DC3'''
        - - expr: ((15))
          - Right:
              expr: '''\SI'''
        - - expr: ((-16))
          - Left: '"Prelude.chr: bad argument: (-16)"'
        - - expr: ((-5))
          - Left: '"Prelude.chr: bad argument: (-5)"'
        - - expr: ((-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ((-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: ((-12))
          - Left: '"Prelude.chr: bad argument: (-12)"'
- - expr: sequenceA
  - - - - type: '[] ([] Char)'
        - type: '[] ([] Char)'
      - - - expr: ([['7', '1', '9', '3'], ['7']])
          - Right:
              expr: '["77", "17", "97", "37"]'
        - - expr: ([['7', '1', '9', '3']])
          - Right:
              expr: '["7", "1", "9", "3"]'
        - - expr: ([])
          - Right:
              expr: '[""]'
    - - - type: '[] (Maybe Char)'
        - type: Maybe ([] Char)
      - - - expr: ([Just '7', Just '1', Just '9', Just '3'])
          - Right:
              expr: (Just "7193")
        - - expr: ([Just '7'])
          - Right:
              expr: (Just "7")
        - - expr: ([])
          - Right:
              expr: (Just "")
        - - expr: ([Just '7', Just '1'])
          - Right:
              expr: (Just "71")
    - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
      - - - expr: (Just (Just '7'))
          - Right:
              expr: (Just (Just '7'))
        - - expr: (Just (Just '1'))
          - Right:
              expr: (Just (Just '1'))
        - - expr: (Just (Just '9'))
          - Right:
              expr: (Just (Just '9'))
        - - expr: (Just (Just '3'))
          - Right:
              expr: (Just (Just '3'))
        - - expr: (Just (Just '6'))
          - Right:
              expr: (Just (Just '6'))
        - - expr: (Just (Just '0'))
          - Right:
              expr: (Just (Just '0'))
    - - - type: Maybe ([] Char)
        - type: '[] (Maybe Char)'
      - - - expr: (Just ['7', '1', '9', '3'])
          - Right:
              expr: '[Just ''7'', Just ''1'', Just ''9'', Just ''3'']'
        - - expr: (Just ['7'])
          - Right:
              expr: '[Just ''7'']'
        - - expr: (Just [])
          - Right:
              expr: '[]'
        - - expr: (Just ['7', '1'])
          - Right:
              expr: '[Just ''7'', Just ''1'']'
- - expr: length
  - - - - type: Maybe Char
        - type: Int
      - - - expr: (Just '7')
          - Right:
              expr: '1'
        - - expr: (Just '1')
          - Right:
              expr: '1'
        - - expr: (Just '9')
          - Right:
              expr: '1'
        - - expr: (Just '3')
          - Right:
              expr: '1'
        - - expr: (Just '6')
          - Right:
              expr: '1'
        - - expr: (Just '0')
          - Right:
              expr: '1'
    - - - type: '[] Char'
        - type: Int
      - - - expr: (['7', '1', '9', '3'])
          - Right:
              expr: '4'
        - - expr: (['7'])
          - Right:
              expr: '1'
        - - expr: ([])
          - Right:
              expr: '0'
        - - expr: (['7', '1'])
          - Right:
              expr: '2'
- - expr: zip
  - - - - type: ([Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (['7', '1', '9', '3'], ['7', '1', '9', '3'])
          - Right:
              expr: '[(''7'', ''7''), (''1'', ''1''), (''9'', ''9''), (''3'', ''3'')]'
        - - expr: (['7', '1', '9', '3'], ['7'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: (['7', '1', '9', '3'], [])
          - Right:
              expr: '[]'
        - - expr: (['7', '1', '9', '3'], ['7', '1'])
          - Right:
              expr: '[(''7'', ''7''), (''1'', ''1'')]'
        - - expr: (['7'], ['7', '1', '9', '3'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: (['7'], ['7'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: (['7'], [])
          - Right:
              expr: '[]'
        - - expr: (['7'], ['7', '1'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: ([], ['7', '1', '9', '3'])
          - Right:
              expr: '[]'
        - - expr: ([], ['7'])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([], ['7', '1'])
          - Right:
              expr: '[]'
        - - expr: (['7', '1'], ['7', '1', '9', '3'])
          - Right:
              expr: '[(''7'', ''7''), (''1'', ''1'')]'
        - - expr: (['7', '1'], ['7'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: (['7', '1'], [])
          - Right:
              expr: '[]'
        - - expr: (['7', '1'], ['7', '1'])
          - Right:
              expr: '[(''7'', ''7''), (''1'', ''1'')]'
- - expr: unzip
  - - - - type: '[(Char, Char)]'
        - type: ([Char], [Char])
      - - - expr: ([('7', '7'), ('1', '1'), ('9', '9'), ('3', '3')])
          - Right:
              expr: ("7193", "7193")
        - - expr: ([('7', '7')])
          - Right:
              expr: ("7", "7")
        - - expr: ([])
          - Right:
              expr: ("", "")
        - - expr: ([('7', '7'), ('1', '1')])
          - Right:
              expr: ("71", "71")
- - expr: let prepend = (:) in prepend
  - - - - type: (Char, [Char])
        - type: '[Char]'
      - - - expr: ('7', ['7', '1', '9', '3'])
          - Right:
              expr: '"77193"'
        - - expr: ('7', ['7'])
          - Right:
              expr: '"77"'
        - - expr: ('7', [])
          - Right:
              expr: '"7"'
        - - expr: ('7', ['7', '1'])
          - Right:
              expr: '"771"'
        - - expr: ('1', ['7', '1', '9', '3'])
          - Right:
              expr: '"17193"'
        - - expr: ('1', ['7'])
          - Right:
              expr: '"17"'
        - - expr: ('1', [])
          - Right:
              expr: '"1"'
        - - expr: ('1', ['7', '1'])
          - Right:
              expr: '"171"'
        - - expr: ('9', ['7', '1', '9', '3'])
          - Right:
              expr: '"97193"'
        - - expr: ('9', ['7'])
          - Right:
              expr: '"97"'
        - - expr: ('9', [])
          - Right:
              expr: '"9"'
        - - expr: ('9', ['7', '1'])
          - Right:
              expr: '"971"'
        - - expr: ('3', ['7', '1', '9', '3'])
          - Right:
              expr: '"37193"'
        - - expr: ('3', ['7'])
          - Right:
              expr: '"37"'
        - - expr: ('3', [])
          - Right:
              expr: '"3"'
        - - expr: ('3', ['7', '1'])
          - Right:
              expr: '"371"'
        - - expr: ('6', ['7', '1', '9', '3'])
          - Right:
              expr: '"67193"'
        - - expr: ('6', ['7'])
          - Right:
              expr: '"67"'
        - - expr: ('6', [])
          - Right:
              expr: '"6"'
        - - expr: ('6', ['7', '1'])
          - Right:
              expr: '"671"'
        - - expr: ('0', ['7', '1', '9', '3'])
          - Right:
              expr: '"07193"'
        - - expr: ('0', ['7'])
          - Right:
              expr: '"07"'
        - - expr: ('0', [])
          - Right:
              expr: '"0"'
        - - expr: ('0', ['7', '1'])
          - Right:
              expr: '"071"'
- - expr: let tpl = (,) in tpl
  - - - - type: (Char, Char)
        - type: (Char, Char)
      - - - expr: ('7', '7')
          - Right:
              expr: ('7', '7')
        - - expr: ('7', '1')
          - Right:
              expr: ('7', '1')
        - - expr: ('7', '9')
          - Right:
              expr: ('7', '9')
        - - expr: ('7', '3')
          - Right:
              expr: ('7', '3')
        - - expr: ('7', '6')
          - Right:
              expr: ('7', '6')
        - - expr: ('7', '0')
          - Right:
              expr: ('7', '0')
        - - expr: ('1', '7')
          - Right:
              expr: ('1', '7')
        - - expr: ('1', '1')
          - Right:
              expr: ('1', '1')
        - - expr: ('1', '9')
          - Right:
              expr: ('1', '9')
        - - expr: ('1', '3')
          - Right:
              expr: ('1', '3')
        - - expr: ('1', '6')
          - Right:
              expr: ('1', '6')
        - - expr: ('1', '0')
          - Right:
              expr: ('1', '0')
        - - expr: ('9', '7')
          - Right:
              expr: ('9', '7')
        - - expr: ('9', '1')
          - Right:
              expr: ('9', '1')
        - - expr: ('9', '9')
          - Right:
              expr: ('9', '9')
        - - expr: ('9', '3')
          - Right:
              expr: ('9', '3')
        - - expr: ('9', '6')
          - Right:
              expr: ('9', '6')
        - - expr: ('9', '0')
          - Right:
              expr: ('9', '0')
        - - expr: ('3', '7')
          - Right:
              expr: ('3', '7')
        - - expr: ('3', '1')
          - Right:
              expr: ('3', '1')
        - - expr: ('3', '9')
          - Right:
              expr: ('3', '9')
        - - expr: ('3', '3')
          - Right:
              expr: ('3', '3')
        - - expr: ('3', '6')
          - Right:
              expr: ('3', '6')
        - - expr: ('3', '0')
          - Right:
              expr: ('3', '0')
        - - expr: ('6', '7')
          - Right:
              expr: ('6', '7')
        - - expr: ('6', '1')
          - Right:
              expr: ('6', '1')
        - - expr: ('6', '9')
          - Right:
              expr: ('6', '9')
        - - expr: ('6', '3')
          - Right:
              expr: ('6', '3')
        - - expr: ('6', '6')
          - Right:
              expr: ('6', '6')
        - - expr: ('6', '0')
          - Right:
              expr: ('6', '0')
        - - expr: ('0', '7')
          - Right:
              expr: ('0', '7')
        - - expr: ('0', '1')
          - Right:
              expr: ('0', '1')
        - - expr: ('0', '9')
          - Right:
              expr: ('0', '9')
        - - expr: ('0', '3')
          - Right:
              expr: ('0', '3')
        - - expr: ('0', '6')
          - Right:
              expr: ('0', '6')
        - - expr: ('0', '0')
          - Right:
              expr: ('0', '0')
- - expr: fromEnum
  - - - - type: Char
        - type: Int
      - - - expr: ('7')
          - Right:
              expr: '55'
        - - expr: ('1')
          - Right:
              expr: '49'
        - - expr: ('9')
          - Right:
              expr: '57'
        - - expr: ('3')
          - Right:
              expr: '51'
        - - expr: ('6')
          - Right:
              expr: '54'
        - - expr: ('0')
          - Right:
              expr: '48'
- - expr: let just = Just in just
  - - - - type: Char
        - type: Maybe Char
      - - - expr: ('7')
          - Right:
              expr: (Just '7')
        - - expr: ('1')
          - Right:
              expr: (Just '1')
        - - expr: ('9')
          - Right:
              expr: (Just '9')
        - - expr: ('3')
          - Right:
              expr: (Just '3')
        - - expr: ('6')
          - Right:
              expr: (Just '6')
        - - expr: ('0')
          - Right:
              expr: (Just '0')
- - expr: elem
  - - - - type: (Char, [] Char)
        - type: Bool
      - - - expr: ('7', ['7', '1', '9', '3'])
          - Right:
              expr: 'True'
        - - expr: ('7', ['7'])
          - Right:
              expr: 'True'
        - - expr: ('7', [])
          - Right:
              expr: 'False'
        - - expr: ('7', ['7', '1'])
          - Right:
              expr: 'True'
        - - expr: ('1', ['7', '1', '9', '3'])
          - Right:
              expr: 'True'
        - - expr: ('1', ['7'])
          - Right:
              expr: 'False'
        - - expr: ('1', [])
          - Right:
              expr: 'False'
        - - expr: ('1', ['7', '1'])
          - Right:
              expr: 'True'
        - - expr: ('9', ['7', '1', '9', '3'])
          - Right:
              expr: 'True'
        - - expr: ('9', ['7'])
          - Right:
              expr: 'False'
        - - expr: ('9', [])
          - Right:
              expr: 'False'
        - - expr: ('9', ['7', '1'])
          - Right:
              expr: 'False'
        - - expr: ('3', ['7', '1', '9', '3'])
          - Right:
              expr: 'True'
        - - expr: ('3', ['7'])
          - Right:
              expr: 'False'
        - - expr: ('3', [])
          - Right:
              expr: 'False'
        - - expr: ('3', ['7', '1'])
          - Right:
              expr: 'False'
        - - expr: ('6', ['7', '1', '9', '3'])
          - Right:
              expr: 'False'
        - - expr: ('6', ['7'])
          - Right:
              expr: 'False'
        - - expr: ('6', [])
          - Right:
              expr: 'False'
        - - expr: ('6', ['7', '1'])
          - Right:
              expr: 'False'
        - - expr: ('0', ['7', '1', '9', '3'])
          - Right:
              expr: 'False'
        - - expr: ('0', ['7'])
          - Right:
              expr: 'False'
        - - expr: ('0', [])
          - Right:
              expr: 'False'
        - - expr: ('0', ['7', '1'])
          - Right:
              expr: 'False'
    - - - type: (Char, Maybe Char)
        - type: Bool
      - - - expr: ('7', Just '7')
          - Right:
              expr: 'True'
        - - expr: ('7', Just '1')
          - Right:
              expr: 'False'
        - - expr: ('7', Just '9')
          - Right:
              expr: 'False'
        - - expr: ('7', Just '3')
          - Right:
              expr: 'False'
        - - expr: ('7', Just '6')
          - Right:
              expr: 'False'
        - - expr: ('7', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('1', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('1', Just '1')
          - Right:
              expr: 'True'
        - - expr: ('1', Just '9')
          - Right:
              expr: 'False'
        - - expr: ('1', Just '3')
          - Right:
              expr: 'False'
        - - expr: ('1', Just '6')
          - Right:
              expr: 'False'
        - - expr: ('1', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('9', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('9', Just '1')
          - Right:
              expr: 'False'
        - - expr: ('9', Just '9')
          - Right:
              expr: 'True'
        - - expr: ('9', Just '3')
          - Right:
              expr: 'False'
        - - expr: ('9', Just '6')
          - Right:
              expr: 'False'
        - - expr: ('9', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('3', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('3', Just '1')
          - Right:
              expr: 'False'
        - - expr: ('3', Just '9')
          - Right:
              expr: 'False'
        - - expr: ('3', Just '3')
          - Right:
              expr: 'True'
        - - expr: ('3', Just '6')
          - Right:
              expr: 'False'
        - - expr: ('3', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('6', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('6', Just '1')
          - Right:
              expr: 'False'
        - - expr: ('6', Just '9')
          - Right:
              expr: 'False'
        - - expr: ('6', Just '3')
          - Right:
              expr: 'False'
        - - expr: ('6', Just '6')
          - Right:
              expr: 'True'
        - - expr: ('6', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('0', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('0', Just '1')
          - Right:
              expr: 'False'
        - - expr: ('0', Just '9')
          - Right:
              expr: 'False'
        - - expr: ('0', Just '3')
          - Right:
              expr: 'False'
        - - expr: ('0', Just '6')
          - Right:
              expr: 'False'
        - - expr: ('0', Just '0')
          - Right:
              expr: 'True'
generationCfg:
  numMin: -20
  seed: 69
  charMin: '0'
  crashOnError: true
  verbosity: notice
  test: 0.3
  maxInstances: 10
  maxHoles: 1
  nestLimit: 1
  charMax: '9'
  numMax: 20
  taskPath: ./run-results/datasets-1.yml
  training: 0.35
  listMin: 0
  numInputs: 10
  validation: 0.35
  listMax: 5
  maxDataset: 1000
variantTypes:
- type: '[a] -> [b] -> [(a, b)]'
- type: '[b] -> [(a, b)]'
- type: '[(a, b)]'
- type: a -> [a] -> [a]
- type: '[a] -> [a]'
- type: '[a]'
- type: '[(a, b)] -> ([a], [b])'
- type: ([a], [b])
- type: '  (Foldable t, Eq a) => a -> t a -> Bool'
- type: '  (Foldable t, Eq a) => t a -> Bool'
- type: Bool
- type: '  Num p => p'
- type: a -> Maybe a
- type: Maybe a
- type: '  Monoid a => a'
- type: '  Enum a => Int -> a'
- type: '  Enum a => a'
- type: '  Foldable t => t a -> Int'
- type: Int
- type: a -> b -> (a, b)
- type: b -> (a, b)
- type: (a, b)
- type: '  (Traversable t, Monad m) => t (m a) -> m (t a)'
- type: '  (Traversable t, Monad m) => m (t a)'
- type: '  (Traversable t, Applicative f) => t (f a) -> f (t a)'
- type: '  (Traversable t, Applicative f) => f (t a)'
- type: '  Enum a => a -> Int'
- type: Int
- type: '  (Foldable t, Monoid m) => (a -> m) -> t a -> m'
- type: '  (Foldable t, Monoid m) => t a -> m'
- type: 'Monoid m => m'
- type: '  Functor f => (a -> b) -> f a -> f b'
- type: '  Functor f => f a -> f b'
- type: '  Functor f => f b'
- type: '  Semigroup a => a -> a -> a'
- type: '  Semigroup a => a -> a'
- type: '  Semigroup a => a'
- type: b -> (a -> b) -> Maybe a -> b
- type: (a -> b) -> Maybe a -> b
- type: Maybe a -> b
- type: b
- type: (b -> c) -> (a -> b) -> a -> c
- type: (a -> b) -> a -> c
- type: a -> c
- type: c
ruleCharMap:
  ',': 5
  \: 19
  l: 29
  g: 27
  '*': 4
  m: 30
  '-': 6
  M: 14
  =: 7
  ']': 20
  p: 33
  ' ': 0
  '[': 18
  'N': 15
  '>': 8
  'n': 31
  a: 21
  q: 34
  A: 9
  d: 24
  t: 37
  T: 17
  o: 32
  '"': 1
  B: 10
  b: 22
  r: 35
  u: 38
  E: 11
  e: 25
  (: 2
  c: 23
  s: 36
  S: 16
  f: 26
  v: 39
  F: 12
  i: 28
  'y': 40
  ): 3
  I: 13
bothCharMap:
  ',': 5
  L: 25
  \: 32
  l: 43
  g: 40
  '''': 2
  '7': 15
  J: 24
  ':': 18
  m: 44
  '-': 6
  M: 26
  ']': 33
  '0': 8
  P: 27
  ' ': 0
  '[': 31
  .: 7
  'n': 45
  a: 34
  '1': 9
  d: 37
  t: 49
  D: 21
  '4': 12
  T: 30
  o: 46
  '"': 1
  B: 19
  '2': 10
  R: 28
  b: 35
  r: 47
  u: 50
  '5': 13
  e: 38
  h: 41
  (: 3
  '8': 16
  c: 36
  s: 48
  C: 20
  '3': 11
  S: 29
  f: 39
  F: 22
  '6': 14
  '9': 17
  i: 42
  'y': 51
  ): 4
  I: 23
dsl:
  length:
    expr: length
  maybe:
    expr: maybe
  foldMap:
    expr: foldMap
  fromEnum:
    expr: fromEnum
  unzip:
    expr: unzip
  just:
    expr: Just
  zip:
    expr: zip
  elem:
    expr: elem
  sequence:
    expr: sequence
  zero:
    expr: '0'
  fmap:
    expr: fmap
  toEnum:
    expr: toEnum
  mempty:
    expr: mempty
  compose:
    expr: (.)
  tpl:
    expr: (,)
  prepend:
    expr: (:)
  sequenceA:
    expr: sequenceA
  conc:
    expr: (<>)
fnTypes:
- - expr: toEnum
  - type: '  Enum a => Int -> a'
- - expr: sequenceA
  - type: '  (Traversable t, Applicative f) => t (f a) -> f (t a)'
- - expr: length
  - type: '  Foldable t => t a -> Int'
- - expr: zip
  - type: '[a] -> [b] -> [(a, b)]'
- - expr: unzip
  - type: '[(a, b)] -> ([a], [b])'
- - expr: let prepend = (:) in prepend
  - type: a -> [a] -> [a]
- - expr: let tpl = (,) in tpl
  - type: a -> b -> (a, b)
- - expr: fromEnum
  - type: '  Enum a => a -> Int'
- - expr: let just = Just in just
  - type: a -> Maybe a
- - expr: elem
  - type: '  (Foldable t, Eq a) => a -> t a -> Bool'
exprCharMap:
  ',': 5
  L: 24
  \: 30
  l: 41
  g: 38
  '''': 2
  '7': 15
  J: 23
  ':': 18
  m: 42
  '-': 6
  ']': 31
  '0': 8
  P: 25
  ' ': 0
  '[': 29
  .: 7
  'n': 43
  a: 32
  '1': 9
  d: 35
  t: 46
  D: 20
  '4': 12
  T: 28
  '"': 1
  '2': 10
  R: 26
  b: 33
  r: 44
  u: 47
  '5': 13
  e: 36
  h: 39
  (: 3
  '8': 16
  c: 34
  s: 45
  C: 19
  '3': 11
  S: 27
  f: 37
  F: 21
  '6': 14
  '9': 17
  i: 40
  ): 4
  I: 22
datasets:
- - expr: elem
  - expr: length
  - expr: toEnum
  - expr: sequenceA
- - expr: let tpl = (,) in tpl
  - expr: unzip
  - expr: zip
  - expr: let just = Just in just
- - expr: fromEnum
  - expr: let prepend = (:) in prepend
