generatedTypes:
  '0':
  - Int
  - Char
  '1':
  - '[]'
  - Maybe
  '2':
  - (,)
  - Either
longestExprString: 178
exprBlocks:
- - zip
  - expr: zip
- - zip
  - expr: 'zip (undefined :: [a])'
- - zip
  - expr: 'zip (undefined :: [a]) (undefined :: [b])'
- - unzip
  - expr: unzip
- - unzip
  - expr: 'unzip (undefined :: [(a, b)])'
- - elem
  - expr: elem
- - elem
  - expr: 'elem (undefined :: (Foldable t, Eq a) => a)'
- - elem
  - expr: |-
      elem (undefined :: (Foldable t, Eq a) => a)
        (undefined :: (Foldable t, Eq a) => t a)
- - conc
  - expr: conc
- - conc
  - expr: 'conc (undefined :: Semigroup a => a)'
- - conc
  - expr: |-
      conc (undefined :: Semigroup a => a)
        (undefined :: Semigroup a => a)
- - just
  - expr: just
- - just
  - expr: 'just (undefined :: a)'
- - mempty
  - expr: mempty
- - toEnum
  - expr: toEnum
- - toEnum
  - expr: 'toEnum (undefined :: Enum a => Int)'
- - length
  - expr: length
- - length
  - expr: 'length (undefined :: Foldable t => t a)'
- - compose
  - expr: compose
- - compose
  - expr: 'compose (undefined :: (b -> c))'
- - compose
  - expr: 'compose (undefined :: (b -> c)) (undefined :: (a -> b))'
- - compose
  - expr: |-
      compose (undefined :: (b -> c)) (undefined :: (a -> b))
        (undefined :: a)
- - sequence
  - expr: sequence
- - sequence
  - expr: 'sequence (undefined :: (Traversable t, Monad m) => t (m a))'
- - sequenceA
  - expr: sequenceA
- - sequenceA
  - expr: 'sequenceA (undefined :: (Traversable t, Applicative f) => t (f a))'
- - fromEnum
  - expr: fromEnum
- - fromEnum
  - expr: 'fromEnum (undefined :: Enum a => a)'
- - zero
  - expr: zero
- - prepend
  - expr: prepend
- - prepend
  - expr: 'prepend (undefined :: a)'
- - prepend
  - expr: 'prepend (undefined :: a) (undefined :: [a])'
- - foldMap
  - expr: foldMap
- - foldMap
  - expr: 'foldMap (undefined :: (Foldable t, Monoid m) => (a -> m))'
- - foldMap
  - expr: |-
      foldMap (undefined :: (Foldable t, Monoid m) => (a -> m))
        (undefined :: (Foldable t, Monoid m) => t a)
- - fmap
  - expr: fmap
- - fmap
  - expr: 'fmap (undefined :: Functor f => (a -> b))'
- - fmap
  - expr: |-
      fmap (undefined :: Functor f => (a -> b))
        (undefined :: Functor f => f a)
- - maybe
  - expr: maybe
- - maybe
  - expr: 'maybe (undefined :: b)'
- - maybe
  - expr: 'maybe (undefined :: b) (undefined :: (a -> b))'
- - maybe
  - expr: |-
      maybe (undefined :: b) (undefined :: (a -> b))
        (undefined :: Maybe a)
- - tpl
  - expr: tpl
- - tpl
  - expr: 'tpl (undefined :: a)'
- - tpl
  - expr: 'tpl (undefined :: a) (undefined :: b)'
longestString: 178
fnTypeIOs:
- - expr: let compose = (.) in compose unzip (zip mempty)
  - - - - type: '[Int]'
        - type: ([Char], [Int])
      - - - expr: ([(6)])
          - Right:
              expr: ("", [])
        - - expr: ([])
          - Right:
              expr: ("", [])
        - - expr: ([(6), (7)])
          - Right:
              expr: ("", [])
    - - - type: '[Int]'
        - type: ([Int], [Int])
      - - - expr: ([(6), (7)])
          - Right:
              expr: ([], [])
        - - expr: ([])
          - Right:
              expr: ([], [])
        - - expr: ([(6)])
          - Right:
              expr: ([], [])
    - - - type: '[Char]'
        - type: ([Int], [Char])
      - - - expr: (['6', '5'])
          - Right:
              expr: ([], "")
        - - expr: (['6'])
          - Right:
              expr: ([], "")
        - - expr: ([])
          - Right:
              expr: ([], "")
    - - - type: '[Char]'
        - type: ([Char], [Char])
      - - - expr: (['6', '5'])
          - Right:
              expr: ("", "")
        - - expr: ([])
          - Right:
              expr: ("", "")
        - - expr: (['6'])
          - Right:
              expr: ("", "")
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend toEnum
  - - - - type: (Int, [Char])
        - type: '[Char]'
      - - - expr: ((-11), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ((18), [])
          - Right:
              expr: '"\DC2"'
        - - expr: ((6), [])
          - Right:
              expr: '"\ACK"'
        - - expr: ((6), ['6', '5'])
          - Right:
              expr: '"\ACK65"'
        - - expr: ((11), ['6'])
          - Right:
              expr: '"\v6"'
        - - expr: ((-9), ['6'])
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: ((-20), [])
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: ((18), ['6'])
          - Right:
              expr: '"\DC26"'
    - - - type: (Int, [Int])
        - type: '[Int]'
      - - - expr: ((18), [])
          - Right:
              expr: '[18]'
        - - expr: ((-8), [(6), (7)])
          - Right:
              expr: '[-8, 6, 7]'
        - - expr: ((-11), [(6)])
          - Right:
              expr: '[-11, 6]'
        - - expr: ((-9), [(6), (7)])
          - Right:
              expr: '[-9, 6, 7]'
        - - expr: ((7), [(6), (7)])
          - Right:
              expr: '[7, 6, 7]'
        - - expr: ((7), [])
          - Right:
              expr: '[7]'
        - - expr: ((-20), [(6), (7)])
          - Right:
              expr: '[-20, 6, 7]'
        - - expr: ((11), [(6), (7)])
          - Right:
              expr: '[11, 6, 7]'
- - expr: let compose = (.) in compose zip (sequenceA mempty)
  - - - - type: (Char, [Char])
        - type: '[(Char, Char)]'
      - - - expr: ('7', ['6'])
          - Right:
              expr: '[]'
        - - expr: ('7', [])
          - Right:
              expr: '[]'
        - - expr: ('0', ['6'])
          - Right:
              expr: '[]'
        - - expr: ('8', ['6'])
          - Right:
              expr: '[]'
        - - expr: ('4', [])
          - Right:
              expr: '[]'
        - - expr: ('6', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ('0', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ('6', ['6'])
          - Right:
              expr: '[]'
    - - - type: (Char, [Int])
        - type: '[(Int, Int)]'
      - - - expr: ('2', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('2', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ('4', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ('7', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('5', [])
          - Right:
              expr: '[]'
        - - expr: ('7', [])
          - Right:
              expr: '[]'
        - - expr: ('6', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('6', [])
          - Right:
              expr: '[]'
    - - - type: (Char, [Int])
        - type: '[(Char, Int)]'
      - - - expr: ('4', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('5', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('1', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ('7', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('0', [])
          - Right:
              expr: '[]'
        - - expr: ('7', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ('0', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ('4', [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: (Int, [Int])
        - type: '[(Char, Int)]'
      - - - expr: ((7), [])
          - Right:
              expr: '[]'
        - - expr: ((6), [])
          - Right:
              expr: '[]'
        - - expr: ((18), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((-9), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((-11), [])
          - Right:
              expr: '[]'
        - - expr: ((-9), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((-20), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((-8), [(6), (7)])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose (compose unzip) zip
  - - - - type: ([Char], [Char])
        - type: ([Char], [Char])
      - - - expr: (['6', '5'], ['6'])
          - Right:
              expr: ("6", "6")
        - - expr: (['6'], ['6', '5'])
          - Right:
              expr: ("6", "6")
        - - expr: (['6', '5'], [])
          - Right:
              expr: ("", "")
        - - expr: ([], ['6'])
          - Right:
              expr: ("", "")
        - - expr: (['6'], [])
          - Right:
              expr: ("", "")
        - - expr: ([], ['6', '5'])
          - Right:
              expr: ("", "")
        - - expr: (['6'], ['6'])
          - Right:
              expr: ("6", "6")
        - - expr: ([], [])
          - Right:
              expr: ("", "")
    - - - type: ([Int], [Char])
        - type: ([Int], [Char])
      - - - expr: ([(6), (7)], [])
          - Right:
              expr: ([], "")
        - - expr: ([], [])
          - Right:
              expr: ([], "")
        - - expr: ([], ['6'])
          - Right:
              expr: ([], "")
        - - expr: ([(6)], ['6', '5'])
          - Right:
              expr: ([6], "6")
        - - expr: ([], ['6', '5'])
          - Right:
              expr: ([], "")
        - - expr: ([(6), (7)], ['6'])
          - Right:
              expr: ([6], "6")
        - - expr: ([(6)], ['6'])
          - Right:
              expr: ([6], "6")
        - - expr: ([(6), (7)], ['6', '5'])
          - Right:
              expr: ([6, 7], "65")
    - - - type: ([Char], [Int])
        - type: ([Char], [Int])
      - - - expr: (['6', '5'], [(6), (7)])
          - Right:
              expr: ("65", [6, 7])
        - - expr: (['6', '5'], [(6)])
          - Right:
              expr: ("6", [6])
        - - expr: (['6'], [])
          - Right:
              expr: ("", [])
        - - expr: (['6'], [(6), (7)])
          - Right:
              expr: ("6", [6])
        - - expr: ([], [(6), (7)])
          - Right:
              expr: ("", [])
        - - expr: ([], [])
          - Right:
              expr: ("", [])
        - - expr: (['6', '5'], [])
          - Right:
              expr: ("", [])
        - - expr: ([], [(6)])
          - Right:
              expr: ("", [])
    - - - type: ([Int], [Int])
        - type: ([Int], [Int])
      - - - expr: ([], [(6), (7)])
          - Right:
              expr: ([], [])
        - - expr: ([(6)], [(6), (7)])
          - Right:
              expr: ([6], [6])
        - - expr: ([(6)], [])
          - Right:
              expr: ([], [])
        - - expr: ([], [])
          - Right:
              expr: ([], [])
        - - expr: ([], [(6)])
          - Right:
              expr: ([], [])
        - - expr: ([(6), (7)], [(6), (7)])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: ([(6)], [(6)])
          - Right:
              expr: ([6], [6])
        - - expr: ([(6), (7)], [(6)])
          - Right:
              expr: ([6], [6])
- - expr: |-
      let conc = (<>)
          just = Just
          zero = 0
          prepend = (:)
        in conc (prepend (just zero))
  - - - - type: (([Maybe Int] -> [Maybe Int]), [Maybe Int])
        - type: '[Maybe Int]'
      - - - expr: (let compose = (.) in compose mempty sequence, [])
          - Right:
              expr: '[Just 0]'
        - - expr: (let compose = (.) in compose mempty (zip mempty), [])
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [Nothing])
          - Right:
              expr: '[Just 0, Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [Nothing])
          - Right:
              expr: '[Just 0, Nothing]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [Nothing])
          - Right:
              expr: '[Just 0, Nothing]'
        - - expr: (let compose = (.) in compose mempty sequence, [Nothing, Just (7)])
          - Right:
              expr: '[Just 0, Nothing, Just 7]'
        - - expr: (let compose = (.) in compose mempty length, [])
          - Right:
              expr: '[Just 0]'
        - - expr: (let compose = (.) in compose sequenceA sequenceA, [Nothing])
          - Right:
              expr: '[Just 0, Nothing, Nothing]'
- - expr: let compose = (.) in compose unzip
  - - - - type: ((Char -> [(Int, Int)]), Char)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '6')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '0')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '2')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '8')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '1')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '4')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '1')
          - Right:
              expr: ([], [])
    - - - type: ((Int -> [(Int, Char)]), Int)
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-8))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (7))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty fromEnum, (-11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (18))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-20))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (18))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (7))
          - Right:
              expr: ([], "")
    - - - type: ((Int -> [(Char, Char)]), Int)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-8))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose (zip mempty) mempty, (-8))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (11))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, (6))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11))
          - Right:
              expr: ("", "")
    - - - type: ((Char -> [(Int, Char)]), Char)
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '4')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '6')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '8')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '6')
          - Right:
              expr: ([], "")
- - expr: |-
      let just = Just
          compose = (.)
          tpl = (,)
        in compose (compose tpl just)
  - - - - type: ((Int -> Int), Int, Int)
        - type: (Maybe Int, Int)
      - - - expr: (toEnum, (-8), (18))
          - Right:
              expr: (Just (-8), 18)
        - - expr: (toEnum, (6), (6))
          - Right:
              expr: (Just 6, 6)
        - - expr: (toEnum, (18), (18))
          - Right:
              expr: (Just 18, 18)
        - - expr: (toEnum, (-8), (11))
          - Right:
              expr: (Just (-8), 11)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20), (6))
          - Right:
              expr: (Just (-20), 6)
        - - expr: (fromEnum, (6), (18))
          - Right:
              expr: (Just 6, 18)
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), (6))
          - Right:
              expr: (Just (-20), 6)
        - - expr: (let compose = (.) in compose toEnum toEnum, (6), (-8))
          - Right:
              expr: (Just 6, -8)
    - - - type: ((Int -> Int), Int, Char)
        - type: (Maybe Int, Char)
      - - - expr: (let compose = (.) in compose toEnum toEnum, (-8), '1')
          - Right:
              expr: (Just (-8), '1')
        - - expr: (let compose = (.) in compose toEnum toEnum, (7), '6')
          - Right:
              expr: (Just 7, '6')
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), '4')
          - Right:
              expr: (Just (-20), '4')
        - - expr: (toEnum, (18), '5')
          - Right:
              expr: (Just 18, '5')
        - - expr: (toEnum, (-20), '2')
          - Right:
              expr: (Just (-20), '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11), '7')
          - Right:
              expr: (Just (-11), '7')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7), '2')
          - Right:
              expr: (Just 7, '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (6), '7')
          - Right:
              expr: (Just 6, '7')
    - - - type: ((Char -> Char), Char, Int)
        - type: (Maybe Char, Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '1', (-8))
          - Right:
              expr: (Just '1', -8)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', (-11))
          - Right:
              expr: (Just '8', -11)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', (6))
          - Right:
              expr: (Just '2', 6)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (18))
          - Right:
              expr: (Just '5', 18)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', (-20))
          - Right:
              expr: (Just '1', -20)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (11))
          - Right:
              expr: (Just '5', 11)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', (-11))
          - Right:
              expr: (Just '2', -11)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', (-11))
          - Right:
              expr: (Just '1', -11)
    - - - type: ((Int -> Char), Int, Char)
        - type: (Maybe Char, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (-20), '0')
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (11), '2')
          - Right:
              expr: (Just '\v', '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8), '8')
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), '8')
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (18), '0')
          - Right:
              expr: (Just '\DC2', '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11), '5')
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7), '5')
          - Right:
              expr: (Just '\a', '5')
        - - expr: (let compose = (.) in compose toEnum toEnum, (-8), '4')
          - Left: '"Prelude.chr: bad argument: (-8)"'
- - expr: |-
      let just = Just
          compose = (.)
          tpl = (,)
        in compose (compose just) tpl
  - - - - type: (Int, Char)
        - type: Maybe (Int, Char)
      - - - expr: ((-9), '8')
          - Right:
              expr: (Just (-9, '8'))
        - - expr: ((18), '8')
          - Right:
              expr: (Just (18, '8'))
        - - expr: ((-9), '5')
          - Right:
              expr: (Just (-9, '5'))
        - - expr: ((-9), '1')
          - Right:
              expr: (Just (-9, '1'))
        - - expr: ((11), '5')
          - Right:
              expr: (Just (11, '5'))
        - - expr: ((-20), '7')
          - Right:
              expr: (Just (-20, '7'))
        - - expr: ((-8), '6')
          - Right:
              expr: (Just (-8, '6'))
        - - expr: ((-11), '7')
          - Right:
              expr: (Just (-11, '7'))
    - - - type: (Char, Char)
        - type: Maybe (Char, Char)
      - - - expr: ('7', '1')
          - Right:
              expr: (Just ('7', '1'))
        - - expr: ('4', '2')
          - Right:
              expr: (Just ('4', '2'))
        - - expr: ('0', '2')
          - Right:
              expr: (Just ('0', '2'))
        - - expr: ('2', '7')
          - Right:
              expr: (Just ('2', '7'))
        - - expr: ('7', '2')
          - Right:
              expr: (Just ('7', '2'))
        - - expr: ('2', '0')
          - Right:
              expr: (Just ('2', '0'))
        - - expr: ('8', '6')
          - Right:
              expr: (Just ('8', '6'))
        - - expr: ('2', '6')
          - Right:
              expr: (Just ('2', '6'))
    - - - type: (Char, Int)
        - type: Maybe (Char, Int)
      - - - expr: ('2', (-8))
          - Right:
              expr: (Just ('2', -8))
        - - expr: ('4', (-9))
          - Right:
              expr: (Just ('4', -9))
        - - expr: ('0', (11))
          - Right:
              expr: (Just ('0', 11))
        - - expr: ('6', (7))
          - Right:
              expr: (Just ('6', 7))
        - - expr: ('4', (-20))
          - Right:
              expr: (Just ('4', -20))
        - - expr: ('6', (18))
          - Right:
              expr: (Just ('6', 18))
        - - expr: ('1', (18))
          - Right:
              expr: (Just ('1', 18))
        - - expr: ('1', (-11))
          - Right:
              expr: (Just ('1', -11))
    - - - type: (Int, Int)
        - type: Maybe (Int, Int)
      - - - expr: ((18), (-8))
          - Right:
              expr: (Just (18, -8))
        - - expr: ((18), (-20))
          - Right:
              expr: (Just (18, -20))
        - - expr: ((11), (-11))
          - Right:
              expr: (Just (11, -11))
        - - expr: ((6), (6))
          - Right:
              expr: (Just (6, 6))
        - - expr: ((-8), (-11))
          - Right:
              expr: (Just (-8, -11))
        - - expr: ((-9), (18))
          - Right:
              expr: (Just (-9, 18))
        - - expr: ((-11), (11))
          - Right:
              expr: (Just (-11, 11))
        - - expr: ((11), (-9))
          - Right:
              expr: (Just (11, -9))
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose (prepend zero)
  - - - - type: ((Int -> [Int]), Int)
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-20))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (6))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-20))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               (11))
          - Right:
              expr: '[0, 0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-20))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-9))
          - Right:
              expr: '[0]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (7))
          - Right:
              expr: '[0]'
    - - - type: ((Char -> [Int]), Char)
        - type: '[Int]'
      - - - expr: (let compose = (.) in compose mempty fromEnum, '8')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '2')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '1')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '7')
          - Right:
              expr: '[0]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '1')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '7')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '8')
          - Right:
              expr: '[0]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl unzip
  - - - - type: ([(Int, Int)], Int)
        - type: (([Int], [Int]), Int)
      - - - expr: ([((6), (6)), ((7), (7))], (-20))
          - Right:
              expr: (([6, 7], [6, 7]), -20)
        - - expr: ([], (11))
          - Right:
              expr: (([], []), 11)
        - - expr: ([((6), (6))], (-11))
          - Right:
              expr: (([6], [6]), -11)
        - - expr: ([], (-8))
          - Right:
              expr: (([], []), -8)
        - - expr: ([((6), (6)), ((7), (7))], (6))
          - Right:
              expr: (([6, 7], [6, 7]), 6)
        - - expr: ([((6), (6))], (6))
          - Right:
              expr: (([6], [6]), 6)
        - - expr: ([((6), (6)), ((7), (7))], (-11))
          - Right:
              expr: (([6, 7], [6, 7]), -11)
        - - expr: ([], (-11))
          - Right:
              expr: (([], []), -11)
    - - - type: ([(Int, Int)], Char)
        - type: (([Int], [Int]), Char)
      - - - expr: ([((6), (6))], '7')
          - Right:
              expr: (([6], [6]), '7')
        - - expr: ([((6), (6))], '1')
          - Right:
              expr: (([6], [6]), '1')
        - - expr: ([((6), (6))], '0')
          - Right:
              expr: (([6], [6]), '0')
        - - expr: ([((6), (6)), ((7), (7))], '4')
          - Right:
              expr: (([6, 7], [6, 7]), '4')
        - - expr: ([], '5')
          - Right:
              expr: (([], []), '5')
        - - expr: ([], '1')
          - Right:
              expr: (([], []), '1')
        - - expr: ([((6), (6)), ((7), (7))], '1')
          - Right:
              expr: (([6, 7], [6, 7]), '1')
        - - expr: ([], '8')
          - Right:
              expr: (([], []), '8')
    - - - type: ([(Int, Char)], Int)
        - type: (([Int], [Char]), Int)
      - - - expr: ([], (18))
          - Right:
              expr: (([], ""), 18)
        - - expr: ([((6), '6')], (18))
          - Right:
              expr: (([6], "6"), 18)
        - - expr: ([((6), '6'), ((7), '5')], (18))
          - Right:
              expr: (([6, 7], "65"), 18)
        - - expr: ([((6), '6'), ((7), '5')], (-9))
          - Right:
              expr: (([6, 7], "65"), -9)
        - - expr: ([((6), '6')], (6))
          - Right:
              expr: (([6], "6"), 6)
        - - expr: ([((6), '6')], (7))
          - Right:
              expr: (([6], "6"), 7)
        - - expr: ([], (-9))
          - Right:
              expr: (([], ""), -9)
        - - expr: ([((6), '6')], (-20))
          - Right:
              expr: (([6], "6"), -20)
    - - - type: ([(Int, Char)], Char)
        - type: (([Int], [Char]), Char)
      - - - expr: ([], '8')
          - Right:
              expr: (([], ""), '8')
        - - expr: ([((6), '6'), ((7), '5')], '6')
          - Right:
              expr: (([6, 7], "65"), '6')
        - - expr: ([((6), '6')], '6')
          - Right:
              expr: (([6], "6"), '6')
        - - expr: ([((6), '6')], '2')
          - Right:
              expr: (([6], "6"), '2')
        - - expr: ([((6), '6'), ((7), '5')], '1')
          - Right:
              expr: (([6, 7], "65"), '1')
        - - expr: ([], '7')
          - Right:
              expr: (([], ""), '7')
        - - expr: ([((6), '6')], '5')
          - Right:
              expr: (([6], "6"), '5')
        - - expr: ([], '2')
          - Right:
              expr: (([], ""), '2')
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose compose prepend
  - - - - type: (Char, (Char -> [Char]), Char)
        - type: '[Char]'
      - - - expr: |-
              ('0',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '4')
          - Right:
              expr: '"0"'
        - - expr: ('5', let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: '"5"'
        - - expr: |-
              ('0',
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6')
          - Right:
              expr: '"0"'
        - - expr: |-
              ('7',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '8')
          - Right:
              expr: '"7"'
        - - expr: |-
              ('1',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '8')
          - Right:
              expr: '"1"'
        - - expr: |-
              ('8',
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6')
          - Right:
              expr: '"8"'
        - - expr: |-
              ('2',
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '6')
          - Right:
              expr: '"2"'
        - - expr: ('8', let compose = (.) in compose mempty fromEnum, '1')
          - Right:
              expr: '"8"'
    - - - type: (Int, (Int -> [Int]), Int)
        - type: '[Int]'
      - - - expr: |-
              ((-20),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-11))
          - Right:
              expr: '[-20]'
        - - expr: |-
              ((-8),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7))
          - Right:
              expr: '[-8]'
        - - expr: |-
              ((-9),
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (18))
          - Right:
              expr: '[-9]'
        - - expr: ((11), let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: '[11]'
        - - expr: |-
              ((-8),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (11))
          - Right:
              expr: '[-8]'
        - - expr: ((18), let compose = (.) in compose mempty fromEnum, (6))
          - Right:
              expr: '[18]'
        - - expr: |-
              ((-8),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (11))
          - Right:
              expr: '[-8]'
        - - expr: |-
              ((-8),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-11))
          - Right:
              expr: '[-8]'
    - - - type: (Char, (Int -> [Char]), Int)
        - type: '[Char]'
      - - - expr: |-
              ('2',
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (7))
          - Right:
              expr: '"2"'
        - - expr: |-
              ('1',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (6))
          - Right:
              expr: '"1"'
        - - expr: |-
              ('5',
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-8))
          - Right:
              expr: '"5"'
        - - expr: |-
              ('6',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (6))
          - Right:
              expr: '"6"'
        - - expr: |-
              ('5',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-9))
          - Right:
              expr: '"5"'
        - - expr: |-
              ('2',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (6))
          - Right:
              expr: '"2"'
        - - expr: |-
              ('4',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-20))
          - Right:
              expr: '"4"'
        - - expr: |-
              ('2',
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (6))
          - Right:
              expr: '"2"'
    - - - type: (Int, (Char -> [Int]), Char)
        - type: '[Int]'
      - - - expr: |-
              ((-11),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '5')
          - Right:
              expr: '[-11]'
        - - expr: |-
              ((6),
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               '8')
          - Right:
              expr: '[6, 0]'
        - - expr: |-
              ((18),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '1')
          - Right:
              expr: '[18]'
        - - expr: |-
              ((-11),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '4')
          - Right:
              expr: '[-11]'
        - - expr: |-
              ((-9),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '0')
          - Right:
              expr: '[-9]'
        - - expr: |-
              ((-8),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '2')
          - Right:
              expr: '[-8]'
        - - expr: ((6), let compose = (.) in compose mempty maybe, '6')
          - Right:
              expr: '[6]'
        - - expr: ((-9), let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: '[-9]'
- - expr: |-
      let zero = 0
          prepend = (:)
        in maybe (prepend zero)
  - - - - type: ((Char -> [Int] -> [Int]), Maybe Char, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Nothing, [])
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '8', [(6)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, Just '8', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '5', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '0', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '5', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               Nothing, [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '0', [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Int] -> [Int]), Maybe Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend fromEnum,
               Just (-11), [(6)])
          - Right:
              expr: '[-11, 6]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend toEnum,
               Just (11), [(6)])
          - Right:
              expr: '[11, 6]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend toEnum,
               Just (18), [])
          - Right:
              expr: '[18]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (11), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (compose mempty) prepend,
               Just (18), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing, [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (7), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just (-11), [])
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose fmap (compose just)
  - - - - type: ((Int -> Int), Maybe Int)
        - type: Maybe (Maybe Int)
      - - - expr: (let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (11))
          - Right:
              expr: (Just (Just 11))
        - - expr: (toEnum, Just (7))
          - Right:
              expr: (Just (Just 7))
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (-11))
          - Right:
              expr: (Just (Just (-11)))
        - - expr: (toEnum, Just (-11))
          - Right:
              expr: (Just (Just (-11)))
        - - expr: (fromEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (toEnum, Just (11))
          - Right:
              expr: (Just (Just 11))
    - - - type: ((Int -> Char), Maybe Int)
        - type: Maybe (Maybe Char)
      - - - expr: (toEnum, Just (18))
          - Right:
              expr: (Just (Just '\DC2'))
        - - expr: (toEnum, Just (7))
          - Right:
              expr: (Just (Just '\a'))
        - - expr: (let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (11))
          - Right:
              expr: (Just (Just '\v'))
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: (Just (Just '\a'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (7))
          - Right:
              expr: (Just (Just '\a'))
        - - expr: (toEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequenceA (just fromEnum))
  - - - - type: ((Int -> Char), Int)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum toEnum, (11))
          - Right:
              expr: (Just 11)
        - - expr: (toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (toEnum, (6))
          - Right:
              expr: (Just 6)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (Just 11)
        - - expr: (let compose = (.) in compose toEnum toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
    - - - type: ((Int -> Int), Int)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum toEnum, (-20))
          - Right:
              expr: (Just (-20))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20))
          - Right:
              expr: (Just (-20))
        - - expr: (fromEnum, (18))
          - Right:
              expr: (Just 18)
        - - expr: (fromEnum, (-9))
          - Right:
              expr: (Just (-9))
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11))
          - Right:
              expr: (Just (-11))
        - - expr: (toEnum, (-9))
          - Right:
              expr: (Just (-9))
        - - expr: (let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: (Just 18)
        - - expr: (toEnum, (-11))
          - Right:
              expr: (Just (-11))
    - - - type: ((Char -> Int), Char)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (Just 49)
        - - expr: (fromEnum, '8')
          - Right:
              expr: (Just 56)
        - - expr: (fromEnum, '0')
          - Right:
              expr: (Just 48)
        - - expr: (fromEnum, '4')
          - Right:
              expr: (Just 52)
        - - expr: (fromEnum, '6')
          - Right:
              expr: (Just 54)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just 56)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just 54)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just 52)
- - expr: |-
      let conc = (<>)
          compose = (.)
          zero = 0
          prepend = (:)
        in compose conc (prepend zero)
  - - - - type: ([Int], [Int])
        - type: '[Int]'
      - - - expr: ([(6), (7)], [(6)])
          - Right:
              expr: '[0, 6, 7, 6]'
        - - expr: ([], [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: ([(6)], [])
          - Right:
              expr: '[0, 6]'
        - - expr: ([], [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: ([(6)], [(6), (7)])
          - Right:
              expr: '[0, 6, 6, 7]'
        - - expr: ([(6), (7)], [(6), (7)])
          - Right:
              expr: '[0, 6, 7, 6, 7]'
        - - expr: ([], [])
          - Right:
              expr: '[0]'
        - - expr: ([(6)], [(6)])
          - Right:
              expr: '[0, 6, 6]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend sequenceA
  - - - - type: (Maybe (Maybe Char), [Maybe (Maybe Char)])
        - type: '[Maybe (Maybe Char)]'
      - - - expr: (Just (Just '5'), [Nothing, Just (Just '5')])
          - Right:
              expr: '[Just (Just ''5''), Nothing, Just (Just ''5'')]'
        - - expr: (Just (Just '5'), [])
          - Right:
              expr: '[Just (Just ''5'')]'
        - - expr: (Nothing, [Nothing, Just (Just '5')])
          - Right:
              expr: '[Just Nothing, Nothing, Just (Just ''5'')]'
        - - expr: (Just (Just '5'), [Nothing])
          - Right:
              expr: '[Just (Just ''5''), Nothing]'
        - - expr: (Just (Just '7'), [Nothing, Just (Just '5')])
          - Right:
              expr: '[Just (Just ''7''), Nothing, Just (Just ''5'')]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[Just Nothing]'
        - - expr: (Just (Just '8'), [Nothing, Just (Just '5')])
          - Right:
              expr: '[Just (Just ''8''), Nothing, Just (Just ''5'')]'
        - - expr: (Just (Just '7'), [Nothing])
          - Right:
              expr: '[Just (Just ''7''), Nothing]'
    - - - type: (Maybe (Maybe Int), [Maybe (Maybe Int)])
        - type: '[Maybe (Maybe Int)]'
      - - - expr: (Just (Just (-11)), [Nothing, Just (Just (7))])
          - Right:
              expr: '[Just (Just (-11)), Nothing, Just (Just 7)]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[Just Nothing]'
        - - expr: (Just (Just (7)), [Nothing])
          - Right:
              expr: '[Just (Just 7), Nothing]'
        - - expr: (Just (Just (7)), [Nothing, Just (Just (7))])
          - Right:
              expr: '[Just (Just 7), Nothing, Just (Just 7)]'
        - - expr: (Nothing, [Nothing, Just (Just (7))])
          - Right:
              expr: '[Just Nothing, Nothing, Just (Just 7)]'
        - - expr: (Nothing, [Nothing])
          - Right:
              expr: '[Just Nothing, Nothing]'
        - - expr: (Just (Just (18)), [Nothing])
          - Right:
              expr: '[Just (Just 18), Nothing]'
        - - expr: (Just (Just (18)), [Nothing, Just (Just (7))])
          - Right:
              expr: '[Just (Just 18), Nothing, Just (Just 7)]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc mempty zip)
  - - - - type: ((Int -> [Int]), Int, [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (6), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (18), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-8), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (6), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               (-8), ['6'])
          - Right:
              expr: '[(0, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-9), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-20), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (7), ['6'])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Int]), Char, [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '1', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               '7', ['6'])
          - Right:
              expr: '[(0, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '8', ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '8', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               '8', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '2', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '0', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '6', ['6', '5'])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Char]), Char, [Int])
        - type: '[(Char, Int)]'
      - - - expr: (let compose = (.) in compose mempty fromEnum, '2', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '6', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '0', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '0', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '0', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '2', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '8', [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Char]), Int, [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-8), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-9), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (6), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (11), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (6), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-8), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6), [(6)])
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl (just zero))
  - - - - type: ((Int -> Int), Int)
        - type: (Maybe Int, Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (Just 0, 6)
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11))
          - Right:
              expr: (Just 0, -11)
        - - expr: (let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: (Just 0, 18)
        - - expr: (fromEnum, (-9))
          - Right:
              expr: (Just 0, -9)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8))
          - Right:
              expr: (Just 0, -8)
        - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: (Just 0, 7)
        - - expr: (toEnum, (-11))
          - Right:
              expr: (Just 0, -11)
        - - expr: (let compose = (.) in compose toEnum toEnum, (11))
          - Right:
              expr: (Just 0, 11)
    - - - type: ((Char -> Int), Char)
        - type: (Maybe Int, Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just 0, 52)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just 0, 54)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just 0, 48)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just 0, 56)
        - - expr: (fromEnum, '4')
          - Right:
              expr: (Just 0, 52)
        - - expr: (fromEnum, '5')
          - Right:
              expr: (Just 0, 53)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (Just 0, 50)
        - - expr: (fromEnum, '8')
          - Right:
              expr: (Just 0, 56)
    - - - type: ((Int -> Char), Int)
        - type: (Maybe Int, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (Just 0, '\v')
        - - expr: (let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: (Just 0, '\DC2')
        - - expr: (toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, (18))
          - Right:
              expr: (Just 0, '\DC2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (Just 0, '\ACK')
    - - - type: ((Char -> Char), Char)
        - type: (Maybe Int, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just 0, '4')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just 0, '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just 0, '8')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just 0, '6')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just 0, '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (Just 0, '1')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (Just 0, '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (Just 0, '7')
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl unzip)
  - - - - type: ((Int -> [(Int, Char)]), Int, Char)
        - type: (([Int], [Char]), Char)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (18), '8')
          - Right:
              expr: (([], ""), '8')
        - - expr: (let compose = (.) in compose (zip mempty) mempty, (-8), '1')
          - Right:
              expr: (([], ""), '1')
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (18), '0')
          - Right:
              expr: (([], ""), '0')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-11), '6')
          - Right:
              expr: (([], ""), '6')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (11), '8')
          - Right:
              expr: (([], ""), '8')
        - - expr: (let compose = (.) in compose (zip mempty) mempty, (18), '4')
          - Right:
              expr: (([], ""), '4')
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (7), '5')
          - Right:
              expr: (([], ""), '5')
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6), '0')
          - Right:
              expr: (([], ""), '0')
    - - - type: ((Int -> [(Char, Int)]), Int, Char)
        - type: (([Char], [Int]), Char)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (6), '8')
          - Right:
              expr: (("", []), '8')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (6), '2')
          - Right:
              expr: (("", []), '2')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (7), '5')
          - Right:
              expr: (("", []), '5')
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11), '4')
          - Right:
              expr: (("", []), '4')
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-8), '0')
          - Right:
              expr: (("", []), '0')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7), '4')
          - Right:
              expr: (("", []), '4')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (7), '2')
          - Right:
              expr: (("", []), '2')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (7), '4')
          - Right:
              expr: (("", []), '4')
    - - - type: ((Int -> [(Int, Char)]), Int, Int)
        - type: (([Int], [Char]), Int)
      - - - expr: (let compose = (.) in compose (zip mempty) mempty, (7), (18))
          - Right:
              expr: (([], ""), 18)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-11), (18))
          - Right:
              expr: (([], ""), 18)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11), (6))
          - Right:
              expr: (([], ""), 6)
        - - expr: (let compose = (.) in compose mempty fromEnum, (6), (11))
          - Right:
              expr: (([], ""), 11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-20), (-11))
          - Right:
              expr: (([], ""), -11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-9), (-20))
          - Right:
              expr: (([], ""), -20)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-9), (18))
          - Right:
              expr: (([], ""), 18)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-8), (11))
          - Right:
              expr: (([], ""), 11)
    - - - type: ((Char -> [(Int, Char)]), Char, Char)
        - type: (([Int], [Char]), Char)
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '8', '4')
          - Right:
              expr: (([], ""), '4')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '2', '1')
          - Right:
              expr: (([], ""), '1')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '8', '2')
          - Right:
              expr: (([], ""), '2')
        - - expr: (let compose = (.) in compose mempty fromEnum, '2', '5')
          - Right:
              expr: (([], ""), '5')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '5', '6')
          - Right:
              expr: (([], ""), '6')
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '2', '5')
          - Right:
              expr: (([], ""), '5')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '6', '1')
          - Right:
              expr: (([], ""), '1')
        - - expr: (let compose = (.) in compose mempty fromEnum, '7', '6')
          - Right:
              expr: (([], ""), '6')
- - expr: let compose = (.) in compose (maybe unzip mempty)
  - - - - type: ((Char -> Maybe Int), Char, [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '1', [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8', [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2', [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '0', [])
          - Right:
              expr: ("", "")
    - - - type: ((Int -> Maybe Char), Int, [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7), [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-20), [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-20), [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (6), [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (11), [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11), [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18), [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9), [])
          - Right:
              expr: ([], [])
    - - - type: ((Char -> Maybe Char), Char, [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: (let just = Just in just, '1', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: (let just = Just in just, '2', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: (let just = Just in just, '7', [])
          - Right:
              expr: ("", "")
        - - expr: (let just = Just in just, '7', [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: (let just = Just in just, '8', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: (let just = Just in just, '0', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: (let just = Just in just, '0', [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: (let just = Just in just, '4', [('6', '6')])
          - Right:
              expr: ("", "")
    - - - type: ((Char -> Maybe Char), Char, [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: (let just = Just in just, '2', [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: (let just = Just in just, '6', [])
          - Right:
              expr: ([], [])
        - - expr: (let just = Just in just, '2', [])
          - Right:
              expr: ([], [])
        - - expr: (let just = Just in just, '0', [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: (let just = Just in just, '8', [])
          - Right:
              expr: ([], [])
        - - expr: (let just = Just in just, '1', [])
          - Right:
              expr: ([], [])
        - - expr: (let just = Just in just, '1', [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: (let just = Just in just, '5', [])
          - Right:
              expr: ([], [])
- - expr: let compose = (.) in compose (compose unzip)
  - - - - type: ((Int -> Char -> [(Char, Char)]), Int, Char)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (7), '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8), '5')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-11), '1')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               (6), '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-8), '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6), '5')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (11), '7')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-9), '6')
          - Right:
              expr: ("", "")
    - - - type: ((Int -> Char -> [(Int, Char)]), Int, Char)
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (6), '8')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (11), '0')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-11), '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6), '1')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-20), '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8), '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (11), '7')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty fromEnum, (7), '2')
          - Right:
              expr: ([], "")
    - - - type: ((Int -> Int -> [(Int, Char)]), Int, Int)
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (18), (6))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-11), (-20))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-9), (-11))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty fromEnum, (-8), (-8))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-11), (-9))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-11), (-11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-9), (-20))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (11), (-20))
          - Right:
              expr: ([], "")
    - - - type: ((Int -> Int -> [(Char, Char)]), Int, Int)
        - type: ([Char], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-8), (-9))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (11), (11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (18), (6))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6), (-11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (7), (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-11), (-9))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-11), (-20))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (7), (-8))
          - Right:
              expr: ("", "")
- - expr: zip
  - - - - type: ([Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: ([(6), (7)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: ([], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([], ['6'])
          - Right:
              expr: '[]'
        - - expr: ([(6)], ['6', '5'])
          - Right:
              expr: '[(6, ''6'')]'
    - - - type: ([Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [(6), (7)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([(6)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([(6)], [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([(6), (7)], [(6), (7)])
          - Right:
              expr: '[(6, 6), (7, 7)]'
    - - - type: ([Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (['6', '5'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: ([], ['6'])
          - Right:
              expr: '[]'
        - - expr: (['6'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (['6'], [])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: ([], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], [])
          - Right:
              expr: '[]'
    - - - type: ([Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: (['6'], [])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: (['6'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: ([], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (['6'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (['6', '5'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: (['6', '5'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose foldMap zip)
  - - - - type: (([Char] -> Maybe [Int] -> [(Char, Int)]), [Char], Maybe [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               ['6', '5'], Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               ['6', '5'], Just [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               ['6', '5'], Just [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               ['6'], Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose (maybe mempty) zip, ['6', '5'],
               Nothing)
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, [], Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [], Just [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty (zip mempty), ['6', '5'],
               Nothing)
          - Right:
              expr: '[]'
    - - - type: (([Int] -> Maybe [Int] -> [(Int, Int)]), [Int], Maybe [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.) in compose (compose mempty) elem, [],
               Just [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose (maybe mempty) mempty, [],
               Just [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (compose mempty) elem, [], Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [(6)], Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty maybe, [(6), (7)],
               Just [(6), (7)])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [], Just [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [(6)], Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, [(6)],
               Just [(6), (7)])
          - Right:
              expr: '[(6, 6)]'
- - expr: let compose = (.) in compose unzip (sequenceA mempty)
  - - - - type: Int
        - type: ([Char], [Char])
      - - - expr: ((6))
          - Right:
              expr: ("", "")
        - - expr: ((-8))
          - Right:
              expr: ("", "")
        - - expr: ((18))
          - Right:
              expr: ("", "")
        - - expr: ((7))
          - Right:
              expr: ("", "")
        - - expr: ((11))
          - Right:
              expr: ("", "")
        - - expr: ((-9))
          - Right:
              expr: ("", "")
        - - expr: ((-11))
          - Right:
              expr: ("", "")
        - - expr: ((-20))
          - Right:
              expr: ("", "")
    - - - type: Int
        - type: ([Char], [Int])
      - - - expr: ((11))
          - Right:
              expr: ("", [])
        - - expr: ((-11))
          - Right:
              expr: ("", [])
        - - expr: ((6))
          - Right:
              expr: ("", [])
        - - expr: ((7))
          - Right:
              expr: ("", [])
        - - expr: ((-8))
          - Right:
              expr: ("", [])
        - - expr: ((-9))
          - Right:
              expr: ("", [])
        - - expr: ((18))
          - Right:
              expr: ("", [])
        - - expr: ((-20))
          - Right:
              expr: ("", [])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc mempty unzip)
  - - - - type: ((Char -> [(Int, Int)]), Char)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '2')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '8')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '1')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '5')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty maybe, '0')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '1')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty maybe, '1')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '1')
          - Right:
              expr: ([], [])
    - - - type: ((Int -> [(Int, Char)]), Int)
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-20))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (18))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose (zip mempty) mempty, (11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (7))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-9))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (18))
          - Right:
              expr: ([], "")
    - - - type: ((Int -> [(Char, Char)]), Int)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-8))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-20))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (11))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, (-8))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-20))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (11))
          - Right:
              expr: ("", "")
    - - - type: ((Char -> [(Int, Char)]), Char)
        - type: ([Int], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '4')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '5')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '6')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '6')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '4')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0')
          - Right:
              expr: ([], "")
- - expr: |-
      let just = Just
          compose = (.)
          zero = 0
          prepend = (:)
        in compose just (prepend zero)
  - - - - type: '[Int]'
        - type: Maybe [Int]
      - - - expr: ([(6)])
          - Right:
              expr: (Just [0, 6])
        - - expr: ([])
          - Right:
              expr: (Just [0])
        - - expr: ([(6), (7)])
          - Right:
              expr: (Just [0, 6, 7])
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend) prepend
  - - - - type: (Int, [Int], [[Int]])
        - type: '[[Int]]'
      - - - expr: ((-8), [], [[]])
          - Right:
              expr: '[[-8], []]'
        - - expr: ((-20), [(6), (7)], [[]])
          - Right:
              expr: '[[-20, 6, 7], []]'
        - - expr: ((-11), [(6)], [[], [(6), (7)]])
          - Right:
              expr: '[[-11, 6], [], [6, 7]]'
        - - expr: ((-20), [(6), (7)], [[], [(6), (7)]])
          - Right:
              expr: '[[-20, 6, 7], [], [6, 7]]'
        - - expr: ((-20), [], [])
          - Right:
              expr: '[[-20]]'
        - - expr: ((-20), [(6), (7)], [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[[-20, 6, 7], [], [6, 7], [6]]'
        - - expr: ((-8), [], [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[[-8], [], [6, 7], [6]]'
        - - expr: ((6), [(6)], [[]])
          - Right:
              expr: '[[6, 6], []]'
    - - - type: (Char, [Char], [[Char]])
        - type: '[[Char]]'
      - - - expr: ('8', [], [[], ['6', '5'], ['6']])
          - Right:
              expr: '["8", "", "65", "6"]'
        - - expr: ('5', ['6', '5'], [[], ['6', '5']])
          - Right:
              expr: '["565", "", "65"]'
        - - expr: ('7', ['6', '5'], [[], ['6', '5'], ['6']])
          - Right:
              expr: '["765", "", "65", "6"]'
        - - expr: ('6', ['6', '5'], [])
          - Right:
              expr: '["665"]'
        - - expr: ('0', ['6'], [])
          - Right:
              expr: '["06"]'
        - - expr: ('5', [], [[]])
          - Right:
              expr: '["5", ""]'
        - - expr: ('2', [], [[], ['6', '5'], ['6']])
          - Right:
              expr: '["2", "", "65", "6"]'
        - - expr: ('4', ['6'], [])
          - Right:
              expr: '["46"]'
- - expr: let compose = (.) in compose elem toEnum
  - - - - type: (Int, Maybe Char)
        - type: Bool
      - - - expr: ((-8), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((18), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((7), Just '0')
          - Right:
              expr: 'False'
        - - expr: ((11), Just '5')
          - Right:
              expr: 'False'
        - - expr: ((11), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((-11), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((-9), Just '8')
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: ((6), Just '0')
          - Right:
              expr: 'False'
    - - - type: (Int, Maybe Int)
        - type: Bool
      - - - expr: ((-8), Just (7))
          - Right:
              expr: 'False'
        - - expr: ((-20), Just (18))
          - Right:
              expr: 'False'
        - - expr: ((-8), Just (-11))
          - Right:
              expr: 'False'
        - - expr: ((-11), Just (11))
          - Right:
              expr: 'False'
        - - expr: ((18), Just (18))
          - Right:
              expr: 'True'
        - - expr: ((11), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((6), Just (11))
          - Right:
              expr: 'False'
        - - expr: ((7), Just (18))
          - Right:
              expr: 'False'
- - expr: let compose = (.) in compose zip (sequence mempty)
  - - - - type: (Int, [Char])
        - type: '[(Char, Char)]'
      - - - expr: ((18), [])
          - Right:
              expr: '[]'
        - - expr: ((-11), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((6), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((-9), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((6), ['6'])
          - Right:
              expr: '[]'
        - - expr: ((18), ['6'])
          - Right:
              expr: '[]'
        - - expr: ((-8), ['6'])
          - Right:
              expr: '[]'
        - - expr: ((-11), ['6'])
          - Right:
              expr: '[]'
    - - - type: (Char, [Int])
        - type: '[(Int, Int)]'
      - - - expr: ('1', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('4', [])
          - Right:
              expr: '[]'
        - - expr: ('2', [])
          - Right:
              expr: '[]'
        - - expr: ('6', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('2', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ('5', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ('0', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('8', [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: (Int, [Char])
        - type: '[(Int, Char)]'
      - - - expr: ((-20), [])
          - Right:
              expr: '[]'
        - - expr: ((7), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((6), ['6'])
          - Right:
              expr: '[]'
        - - expr: ((-9), [])
          - Right:
              expr: '[]'
        - - expr: ((11), ['6'])
          - Right:
              expr: '[]'
        - - expr: ((6), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((-8), ['6'])
          - Right:
              expr: '[]'
        - - expr: ((18), [])
          - Right:
              expr: '[]'
    - - - type: (Int, [Int])
        - type: '[(Int, Int)]'
      - - - expr: ((-9), [])
          - Right:
              expr: '[]'
        - - expr: ((18), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((-20), [])
          - Right:
              expr: '[]'
        - - expr: ((11), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((6), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((7), [])
          - Right:
              expr: '[]'
        - - expr: ((7), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((-8), [])
          - Right:
              expr: '[]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc unzip)
  - - - - type: ((Char -> [(Int, Char)] -> ([Int], [Char])), Char, [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5', [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '7', [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               '2', [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '2', [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '2', [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, '5',
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '1', [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1', [((6), '6')])
          - Right:
              expr: ([6], "6")
    - - - type: |-
            ((Char -> [(Char, Char)] -> ([Char], [Char])), Char,
             [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: (let compose = (.) in compose mempty fromEnum, '0', [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '8', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, '5',
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '1', [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '2', [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, '7',
               [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               '4', [])
          - Right:
              expr: ("", "")
    - - - type: ((Char -> [(Char, Int)] -> ([Char], [Int])), Char, [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5', [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc unzip) mempty,
               '2', [('6', (6)), ('5', (7))])
          - Right:
              expr: ("6565", [6, 7, 6, 7])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '1', [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6', [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '7', [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, '0',
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '5', [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8', [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
    - - - type: ((Int -> [(Int, Int)] -> ([Int], [Int])), Int, [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8), [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-11), [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (18), [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-9), [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-8), [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (7), [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-8), [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-8), [])
          - Right:
              expr: ([], [])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc zip
  - - - - type: ([Int], ([Char] -> [(Int, Char)]), [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose sequenceA (tpl zero),
               ['6'])
          - Right:
              expr: '[(6, ''6''), (0, ''6'')]'
        - - expr: ([], zip mempty, ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: ([(6), (7)], let compose = (.) in compose (zip mempty) mempty, [])
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: ([(6), (7)], let conc = (<>) in zip (conc mempty mempty), [])
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              ([],
               let zero = 0
                   prepend = (:)
                 in zip (prepend zero mempty),
               ['6', '5'])
          - Right:
              expr: '[(0, ''6'')]'
    - - - type: ([Int], ([Int] -> [(Int, Int)]), [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [])
          - Right:
              expr: '[]'
        - - expr: ([], let compose = (.) in compose mempty (zip mempty), [])
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], let compose = (.) in compose mempty zip, [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([], let compose = (.) in compose mempty length, [])
          - Right:
              expr: '[]'
        - - expr: ([], let conc = (<>) in zip (conc mempty mempty), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let zero = 0
                   prepend = (:)
                 in zip (prepend zero mempty),
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               [(6), (7)])
          - Right:
              expr: '[(6, 6), (7, 7)]'
    - - - type: ([Char], ([Char] -> [(Char, Char)]), [Char])
        - type: '[(Char, Char)]'
      - - - expr: (['6', '5'], let compose = (.) in compose mempty zip, ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: (['6'], let conc = (<>) in zip (conc mempty mempty), ['6', '5'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: |-
              ([],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               ['6'])
          - Right:
              expr: '[]'
        - - expr: ([], zip mempty, ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (['6'],
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               ['6', '5'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (['6'], let compose = (.) in compose mempty (zip mempty), ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: ([], let compose = (.) in compose mempty maybe, ['6'])
          - Right:
              expr: '[]'
        - - expr: (['6'], zip mempty, ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
    - - - type: ([Char], ([Int] -> [(Char, Int)]), [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (['6', '5'],
               let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (['6', '5'],
               let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              (['6'],
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [(6), (7)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (['6'], zip mempty, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (['6', '5'],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [(6), (7)])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose sequence
  - - - - type: ((Char -> Maybe ([] Int)), Char)
        - type: '[] (Maybe Int)'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               '2')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '2')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '2')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '1')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '4')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '1')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '0')
          - Right:
              expr: '[Nothing]'
    - - - type: ((Int -> [] (Maybe Char)), Int)
        - type: Maybe ([] Char)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (7))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (11))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (18))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-20))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (6))
          - Right:
              expr: (Just "")
        - - expr: (let compose = (.) in compose mempty fromEnum, (18))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6))
          - Right:
              expr: (Just "")
    - - - type: ((Char -> [] ([] Int)), Char)
        - type: '[] ([] Int)'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '5')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (prepend mempty) mempty,
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '5')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '0')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '7')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '8')
          - Right:
              expr: '[[]]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '8')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '0')
          - Right:
              expr: '[[]]'
    - - - type: ((Int -> Maybe (Maybe Int)), Int)
        - type: Maybe (Maybe Int)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (7))
          - Right:
              expr: (Just (Just 7))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (11))
          - Right:
              expr: (Just (Just 11))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (-8))
          - Right:
              expr: (Just (Just (-8)))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (-11))
          - Right:
              expr: (Just (Just (-11)))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (6))
          - Right:
              expr: (Just (Just 6))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (18))
          - Right:
              expr: (Just (Just 18))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (-20))
          - Right:
              expr: (Just (Just (-20)))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (-9))
          - Right:
              expr: (Just (Just (-9)))
- - expr: let conc = (<>) in conc (unzip mempty)
  - - - - type: ([Char], [Char])
        - type: ([Char], [Char])
      - - - expr: ((['6', '5'], ['6', '5']))
          - Right:
              expr: ("65", "65")
        - - expr: (([], []))
          - Right:
              expr: ("", "")
        - - expr: ((['6'], ['6']))
          - Right:
              expr: ("6", "6")
    - - - type: ([Int], [Char])
        - type: ([Int], [Char])
      - - - expr: (([(6), (7)], ['6', '5']))
          - Right:
              expr: ([6, 7], "65")
        - - expr: (([(6)], ['6']))
          - Right:
              expr: ([6], "6")
        - - expr: (([], []))
          - Right:
              expr: ([], "")
    - - - type: ([Char], [Int])
        - type: ([Char], [Int])
      - - - expr: (([], []))
          - Right:
              expr: ("", [])
        - - expr: ((['6', '5'], [(6), (7)]))
          - Right:
              expr: ("65", [6, 7])
        - - expr: ((['6'], [(6)]))
          - Right:
              expr: ("6", [6])
    - - - type: ([Int], [Int])
        - type: ([Int], [Int])
      - - - expr: (([(6)], [(6)]))
          - Right:
              expr: ([6], [6])
        - - expr: (([(6), (7)], [(6), (7)]))
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: (([], []))
          - Right:
              expr: ([], [])
- - expr: |-
      let just = Just
          compose = (.)
        in compose just unzip
  - - - - type: '[(Char, Char)]'
        - type: Maybe ([Char], [Char])
      - - - expr: ([('6', '6')])
          - Right:
              expr: (Just ("6", "6"))
        - - expr: ([])
          - Right:
              expr: (Just ("", ""))
        - - expr: ([('6', '6'), ('5', '5')])
          - Right:
              expr: (Just ("65", "65"))
    - - - type: '[(Int, Char)]'
        - type: Maybe ([Int], [Char])
      - - - expr: ([((6), '6'), ((7), '5')])
          - Right:
              expr: (Just ([6, 7], "65"))
        - - expr: ([])
          - Right:
              expr: (Just ([], ""))
        - - expr: ([((6), '6')])
          - Right:
              expr: (Just ([6], "6"))
    - - - type: '[(Int, Int)]'
        - type: Maybe ([Int], [Int])
      - - - expr: ([((6), (6)), ((7), (7))])
          - Right:
              expr: (Just ([6, 7], [6, 7]))
        - - expr: ([])
          - Right:
              expr: (Just ([], []))
        - - expr: ([((6), (6))])
          - Right:
              expr: (Just ([6], [6]))
    - - - type: '[(Char, Int)]'
        - type: Maybe ([Char], [Int])
      - - - expr: ([])
          - Right:
              expr: (Just ("", []))
        - - expr: ([('6', (6))])
          - Right:
              expr: (Just ("6", [6]))
        - - expr: ([('6', (6)), ('5', (7))])
          - Right:
              expr: (Just ("65", [6, 7]))
- - expr: unzip
  - - - - type: '[(Int, Char)]'
        - type: ([Int], [Char])
      - - - expr: ([((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: ([((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: ([])
          - Right:
              expr: ([], "")
    - - - type: '[(Char, Int)]'
        - type: ([Char], [Int])
      - - - expr: ([])
          - Right:
              expr: ("", [])
        - - expr: ([('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: ([('6', (6))])
          - Right:
              expr: ("6", [6])
    - - - type: '[(Char, Char)]'
        - type: ([Char], [Char])
      - - - expr: ([])
          - Right:
              expr: ("", "")
        - - expr: ([('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: ([('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
    - - - type: '[(Int, Int)]'
        - type: ([Int], [Int])
      - - - expr: ([((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: ([])
          - Right:
              expr: ([], [])
        - - expr: ([((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc (conc mempty prepend)
  - - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend fromEnum,
               (11), [(6), (7)])
          - Right:
              expr: '[11, 6, 7, 11, 6, 7]'
        - - expr: (let compose = (.) in compose (compose mempty) elem, (6), [])
          - Right:
              expr: '[6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7), [])
          - Right:
              expr: '[7]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8), [])
          - Right:
              expr: '[-8]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8), [(6), (7)])
          - Right:
              expr: '[-8, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend fromEnum,
               (-8), [])
          - Right:
              expr: '[-8, -8]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               (7), [])
          - Right:
              expr: '[7]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-11), [])
          - Right:
              expr: '[-11]'
    - - - type: ((Char -> [Char] -> [Char]), Char, [Char])
        - type: '[Char]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '2', ['6'])
          - Right:
              expr: '"26"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5', ['6', '5'])
          - Right:
              expr: '"565"'
        - - expr: (let compose = (.) in compose (compose mempty) elem, '1', [])
          - Right:
              expr: '"1"'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               '1', ['6', '5'])
          - Right:
              expr: '"16565"'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                   prepend = (:)
                 in compose (conc mempty) prepend,
               '4', [])
          - Right:
              expr: '"44"'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '8', [])
          - Right:
              expr: '"8"'
        - - expr: (let compose = (.) in compose mempty fromEnum, '2', [])
          - Right:
              expr: '"2"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '7', ['6'])
          - Right:
              expr: '"76"'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl (zip mempty)
  - - - - type: ([Int], Int)
        - type: ([(Char, Int)], Int)
      - - - expr: ([(6), (7)], (-9))
          - Right:
              expr: ([], -9)
        - - expr: ([(6)], (-11))
          - Right:
              expr: ([], -11)
        - - expr: ([(6), (7)], (18))
          - Right:
              expr: ([], 18)
        - - expr: ([], (7))
          - Right:
              expr: ([], 7)
        - - expr: ([(6)], (-20))
          - Right:
              expr: ([], -20)
        - - expr: ([(6)], (6))
          - Right:
              expr: ([], 6)
        - - expr: ([(6), (7)], (-11))
          - Right:
              expr: ([], -11)
        - - expr: ([], (18))
          - Right:
              expr: ([], 18)
    - - - type: ([Char], Char)
        - type: ([(Char, Char)], Char)
      - - - expr: ([], '5')
          - Right:
              expr: ([], '5')
        - - expr: (['6'], '8')
          - Right:
              expr: ([], '8')
        - - expr: (['6', '5'], '6')
          - Right:
              expr: ([], '6')
        - - expr: ([], '0')
          - Right:
              expr: ([], '0')
        - - expr: (['6', '5'], '7')
          - Right:
              expr: ([], '7')
        - - expr: (['6', '5'], '1')
          - Right:
              expr: ([], '1')
        - - expr: (['6', '5'], '2')
          - Right:
              expr: ([], '2')
        - - expr: ([], '2')
          - Right:
              expr: ([], '2')
    - - - type: ([Char], Int)
        - type: ([(Int, Char)], Int)
      - - - expr: ([], (6))
          - Right:
              expr: ([], 6)
        - - expr: ([], (-11))
          - Right:
              expr: ([], -11)
        - - expr: (['6'], (-11))
          - Right:
              expr: ([], -11)
        - - expr: ([], (7))
          - Right:
              expr: ([], 7)
        - - expr: ([], (-20))
          - Right:
              expr: ([], -20)
        - - expr: ([], (-8))
          - Right:
              expr: ([], -8)
        - - expr: (['6', '5'], (-8))
          - Right:
              expr: ([], -8)
        - - expr: (['6', '5'], (18))
          - Right:
              expr: ([], 18)
    - - - type: ([Int], Char)
        - type: ([(Int, Int)], Char)
      - - - expr: ([], '8')
          - Right:
              expr: ([], '8')
        - - expr: ([(6)], '4')
          - Right:
              expr: ([], '4')
        - - expr: ([(6), (7)], '4')
          - Right:
              expr: ([], '4')
        - - expr: ([], '2')
          - Right:
              expr: ([], '2')
        - - expr: ([(6)], '7')
          - Right:
              expr: ([], '7')
        - - expr: ([(6), (7)], '0')
          - Right:
              expr: ([], '0')
        - - expr: ([], '1')
          - Right:
              expr: ([], '1')
        - - expr: ([(6), (7)], '2')
          - Right:
              expr: ([], '2')
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc (conc unzip)
  - - - - type: |-
            (([(Char, Int)] -> ([Char], [Int])),
             ([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) unzip,
               unzip, [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) unzip,
               [('6', (6))])
          - Right:
              expr: ("666", [6, 6, 6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose unzip (sequence mempty), [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: |-
              (let compose = (.) in compose mempty unzip,
               let compose = (.) in compose unzip (sequence mempty), [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               let compose = (.) in compose mempty length,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
    - - - type: |-
            (([(Int, Int)] -> ([Int], [Int])),
             ([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               let compose = (.) in compose unzip (sequence mempty),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose unzip mempty,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.) in compose mempty zip, [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose mempty length, [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.) in compose unzip (sequenceA mempty),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [((6), (6))])
          - Right:
              expr: ([6], [6])
    - - - type: |-
            (([(Int, Char)] -> ([Int], [Char])),
             ([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.) in compose mempty zip,
               let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (unzip,
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [((6), '6')])
          - Right:
              expr: ([6, 6], "66")
        - - expr: |-
              (let compose = (.) in compose mempty (zip mempty),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.) in compose mempty maybe, [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose unzip (sequence mempty),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) unzip,
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7, 6, 7], "6565")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [((6), '6')])
          - Right:
              expr: ([6], "6")
    - - - type: |-
            (([(Char, Char)] -> ([Char], [Char])),
             ([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let compose = (.) in compose mempty (zip mempty),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) unzip,
               let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("6565", "6565")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               unzip, [('6', '6')])
          - Right:
              expr: ("66", "66")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (unzip,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("6565", "6565")
- - expr: let compose = (.) in compose sequenceA
  - - - - type: ((Char -> Maybe (Maybe Char)), Char)
        - type: Maybe (Maybe Char)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '2')
          - Right:
              expr: (Just (Just '2'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '5')
          - Right:
              expr: (Just (Just '5'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '6')
          - Right:
              expr: (Just (Just '6'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '4')
          - Right:
              expr: (Just (Just '4'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '8')
          - Right:
              expr: (Just (Just '8'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '1')
          - Right:
              expr: (Just (Just '1'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '0')
          - Right:
              expr: (Just (Just '0'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '7')
          - Right:
              expr: (Just (Just '7'))
    - - - type: ((Int -> [] ([] Int)), Int)
        - type: '[] ([] Int)'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-11))
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-11))
          - Right:
              expr: '[[]]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-8))
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11))
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-8))
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-20))
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-20))
          - Right:
              expr: '[[]]'
    - - - type: ((Char -> Maybe ([] Char)), Char)
        - type: '[] (Maybe Char)'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '5')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '4')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '5')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '8')
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty maybe, '6')
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '4')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '0')
          - Right:
              expr: '[Nothing]'
    - - - type: ((Char -> [] ([] Char)), Char)
        - type: '[] ([] Char)'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '0')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '4')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '8')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '8')
          - Right:
              expr: '[""]'
        - - expr: (let compose = (.) in compose mempty maybe, '8')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '5')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8')
          - Right:
              expr: '[""]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose unzip sequence)
  - - - - type: (((Char, [Int]) -> ([Char], [Int])), (Char, [Int]))
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.) in compose unzip (sequenceA mempty),
               ('7', [(6)]))
          - Right:
              expr: ("7", [6])
        - - expr: |-
              (let compose = (.) in compose unzip (sequenceA mempty),
               ('5', [(6), (7)]))
          - Right:
              expr: ("55", [6, 7])
        - - expr: (let compose = (.) in compose unzip mempty, ('6', []))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               ('7', [(6)]))
          - Right:
              expr: ("7", [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               ('7', [(6)]))
          - Right:
              expr: ("7", [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               ('6', []))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty maybe, ('7', [(6)]))
          - Right:
              expr: ("7", [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               ('7', [(6)]))
          - Right:
              expr: ("7", [6])
    - - - type: (((Int, [Int]) -> ([Int], [Int])), (Int, [Int]))
        - type: ([Int], [Int])
      - - - expr: (let compose = (.) in compose unzip (sequence mempty), ((6), []))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               ((6), []))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               ((6), []))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               ((6), []))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty sequenceA, ((6), []))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               ((7), [(6), (7)]))
          - Right:
              expr: ([7, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               ((7), [(6), (7)]))
          - Right:
              expr: ([7, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               ((6), []))
          - Right:
              expr: ([], [])
    - - - type: (((Int, [Char]) -> ([Int], [Char])), (Int, [Char]))
        - type: ([Int], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               ((18), ['6']))
          - Right:
              expr: ([18], "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ((7), ['6', '5']))
          - Right:
              expr: ([7, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               ((7), ['6', '5']))
          - Right:
              expr: ([7, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               ((7), ['6', '5']))
          - Right:
              expr: ([7, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               ((6), []))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty length, ((18), ['6']))
          - Right:
              expr: ([18], "6")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               ((18), ['6']))
          - Right:
              expr: ([18], "6")
        - - expr: |-
              (let compose = (.) in compose unzip (sequence mempty),
               ((7), ['6', '5']))
          - Right:
              expr: ([7, 7], "65")
    - - - type: (((Char, [Char]) -> ([Char], [Char])), (Char, [Char]))
        - type: ([Char], [Char])
      - - - expr: (let compose = (.) in compose unzip sequenceA, ('6', []))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               ('7', ['6']))
          - Right:
              expr: ("7", "6")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               ('5', ['6', '5']))
          - Right:
              expr: ("55", "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               ('5', ['6', '5']))
          - Right:
              expr: ("55", "65")
        - - expr: (let compose = (.) in compose unzip sequenceA, ('5', ['6', '5']))
          - Right:
              expr: ("5555", "6565")
        - - expr: (let compose = (.) in compose mempty sequence, ('5', ['6', '5']))
          - Right:
              expr: ("55", "65")
        - - expr: (let compose = (.) in compose mempty sequenceA, ('6', []))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               ('6', []))
          - Right:
              expr: ("", "")
- - expr: let compose = (.) in compose toEnum
  - - - - type: ((Char -> Int), Char)
        - type: Char
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '''1'''
        - - expr: (fromEnum, '1')
          - Right:
              expr: '''1'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '''6'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '''0'''
        - - expr: (fromEnum, '0')
          - Right:
              expr: '''0'''
        - - expr: (fromEnum, '2')
          - Right:
              expr: '''2'''
        - - expr: (fromEnum, '5')
          - Right:
              expr: '''5'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: '''5'''
    - - - type: ((Int -> Int), Int)
        - type: Char
      - - - expr: (toEnum, (7))
          - Right:
              expr: '''\a'''
        - - expr: (let compose = (.) in compose toEnum toEnum, (11))
          - Right:
              expr: '''\v'''
        - - expr: (fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (fromEnum, (7))
          - Right:
              expr: '''\a'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: '''\ACK'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
    - - - type: ((Char -> Int), Char)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '52'
        - - expr: (fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: (fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '54'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '49'
    - - - type: ((Int -> Int), Int)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: (fromEnum, (11))
          - Right:
              expr: '11'
        - - expr: (let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: '18'
        - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: '7'
        - - expr: (toEnum, (-8))
          - Right:
              expr: (-8)
        - - expr: (fromEnum, (-11))
          - Right:
              expr: (-11)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: '18'
        - - expr: (toEnum, (11))
          - Right:
              expr: '11'
- - expr: let compose = (.) in compose toEnum length
  - - - - type: Maybe Int
        - type: Char
      - - - expr: (Just (-11))
          - Right:
              expr: '''\SOH'''
        - - expr: (Nothing)
          - Right:
              expr: '''\NUL'''
        - - expr: (Just (7))
          - Right:
              expr: '''\SOH'''
        - - expr: (Just (18))
          - Right:
              expr: '''\SOH'''
        - - expr: (Just (11))
          - Right:
              expr: '''\SOH'''
    - - - type: Maybe Int
        - type: Int
      - - - expr: (Just (18))
          - Right:
              expr: '1'
        - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just (7))
          - Right:
              expr: '1'
        - - expr: (Just (11))
          - Right:
              expr: '1'
        - - expr: (Just (-11))
          - Right:
              expr: '1'
    - - - type: Maybe Char
        - type: Int
      - - - expr: (Just '0')
          - Right:
              expr: '1'
        - - expr: (Just '5')
          - Right:
              expr: '1'
        - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just '8')
          - Right:
              expr: '1'
        - - expr: (Just '7')
          - Right:
              expr: '1'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose zip (conc mempty)
  - - - - type: ([Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (['6'], [])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (['6'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: ([], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: ([], ['6'])
          - Right:
              expr: '[]'
        - - expr: (['6'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc (conc prepend mempty)
  - - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               (6), [(6)])
          - Right:
              expr: '[6, 6, 6]'
        - - expr: (let compose = (.) in compose mempty maybe, (6), [])
          - Right:
              expr: '[6]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (6), [(6), (7)])
          - Right:
              expr: '[6, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (18), [])
          - Right:
              expr: '[18]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                   prepend = (:)
                 in compose (conc mempty) prepend,
               (-11), [])
          - Right:
              expr: '[-11, -11]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (6), [(6)])
          - Right:
              expr: '[6, 6]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (18), [])
          - Right:
              expr: '[18]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-9), [(6)])
          - Right:
              expr: '[-9, 6]'
    - - - type: ((Char -> [Char] -> [Char]), Char, [Char])
        - type: '[Char]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '0', ['6'])
          - Right:
              expr: '"06"'
        - - expr: (let compose = (.) in compose mempty fromEnum, '7', ['6'])
          - Right:
              expr: '"76"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '0', ['6', '5'])
          - Right:
              expr: '"065"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               '0', [])
          - Right:
              expr: '"0"'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '4', ['6'])
          - Right:
              expr: '"46"'
        - - expr: (let compose = (.) in compose (compose mempty) elem, '5', ['6'])
          - Right:
              expr: '"56"'
        - - expr: (let compose = (.) in compose mempty fromEnum, '4', ['6'])
          - Right:
              expr: '"46"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '2', [])
          - Right:
              expr: '"2"'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl sequence)
  - - - - type: ((Char -> [] ([] Char)), Char, Int)
        - type: ([] ([] Char), Int)
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '2', (7))
          - Right:
              expr: ([""], 7)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '7', (-11))
          - Right:
              expr: ([""], -11)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8', (-8))
          - Right:
              expr: ([""], -8)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0', (-20))
          - Right:
              expr: ([""], -20)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '7', (-9))
          - Right:
              expr: ([""], -9)
        - - expr: (let compose = (.) in compose mempty maybe, '2', (-20))
          - Right:
              expr: ([""], -20)
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '0', (-11))
          - Right:
              expr: ([""], -11)
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '0', (-20))
          - Right:
              expr: ([""], -20)
    - - - type: ((Int -> Maybe ([] Int)), Int, Char)
        - type: ([] (Maybe Int), Char)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (18), '2')
          - Right:
              expr: ([Nothing], '2')
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (18), '8')
          - Right:
              expr: ([Nothing], '8')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-11), '7')
          - Right:
              expr: ([Nothing], '7')
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (11), '8')
          - Right:
              expr: ([Nothing], '8')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-8), '5')
          - Right:
              expr: ([Nothing], '5')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-11), '4')
          - Right:
              expr: ([Nothing], '4')
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-20), '6')
          - Right:
              expr: ([Nothing], '6')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-20), '5')
          - Right:
              expr: ([Nothing], '5')
    - - - type: ((Char -> [] (Maybe Char)), Char, Char)
        - type: (Maybe ([] Char), Char)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '1', '2')
          - Right:
              expr: (Just "", '2')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '2', '0')
          - Right:
              expr: (Just "", '0')
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '8', '8')
          - Right:
              expr: (Just "", '8')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '2', '7')
          - Right:
              expr: (Just "", '7')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8', '5')
          - Right:
              expr: (Just "", '5')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '6', '5')
          - Right:
              expr: (Just "", '5')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '8', '2')
          - Right:
              expr: (Just "", '2')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '0', '5')
          - Right:
              expr: (Just "", '5')
- - expr: let compose = (.) in compose (compose elem toEnum)
  - - - - type: ((Int -> Int), Int, Maybe Char)
        - type: Bool
      - - - expr: (let compose = (.) in compose toEnum toEnum, (-20), Just '7')
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20), Just '5')
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7), Nothing)
          - Right:
              expr: 'False'
        - - expr: (toEnum, (7), Just '0')
          - Right:
              expr: 'False'
        - - expr: (fromEnum, (-8), Just '7')
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (fromEnum, (-11), Nothing)
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum toEnum, (11), Nothing)
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11), Just '8')
          - Left: '"Prelude.chr: bad argument: (-11)"'
    - - - type: ((Char -> Int), Char, Maybe Char)
        - type: Bool
      - - - expr: (fromEnum, '2', Just '0')
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '0', Nothing)
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '0', Just '7')
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', Just '8')
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', Just '7')
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', Just '7')
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', Just '5')
          - Right:
              expr: 'True'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', Nothing)
          - Right:
              expr: 'False'
    - - - type: ((Int -> Int), Int, Maybe Int)
        - type: Bool
      - - - expr: (let compose = (.) in compose toEnum toEnum, (11), Just (18))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, (6), Just (11))
          - Right:
              expr: 'False'
        - - expr: (toEnum, (7), Just (11))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, (-9), Just (18))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, (6), Just (18))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, (-20), Just (18))
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (11), Nothing)
          - Right:
              expr: 'False'
        - - expr: (toEnum, (11), Just (-11))
          - Right:
              expr: 'False'
- - expr: let compose = (.) in compose (compose sequence)
  - - - - type: ((Char -> Char -> [] ([] Char)), Char, Char)
        - type: '[] ([] Char)'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '0', '5')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '8', '0')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '8', '2')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '4', '6')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '0', '5')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '8', '8')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '6', '8')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '1', '6')
          - Right:
              expr: '[""]'
    - - - type: ((Int -> Int -> Maybe ([] Int)), Int, Int)
        - type: '[] (Maybe Int)'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-20), (11))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (11), (-11))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (7), (11))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (18), (-20))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (7), (-20))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-8), (-11))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-20), (-20))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (11), (-9))
          - Right:
              expr: '[Nothing]'
    - - - type: ((Int -> Char -> [] ([] Char)), Int, Char)
        - type: '[] ([] Char)'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-8), '2')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-9), '8')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-8), '7')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (18), '2')
          - Right:
              expr: '[""]'
        - - expr: (let compose = (.) in compose mempty maybe, (-11), '5')
          - Right:
              expr: '[""]'
        - - expr: (let compose = (.) in compose mempty maybe, (18), '2')
          - Right:
              expr: '[""]'
        - - expr: (let compose = (.) in compose mempty maybe, (6), '0')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-11), '5')
          - Right:
              expr: '[""]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc unzip
  - - - - type: ([(Char, Char)], ([Char], [Char]))
        - type: ([Char], [Char])
      - - - expr: ([], (['6'], ['6']))
          - Right:
              expr: ("6", "6")
        - - expr: ([('6', '6')], (['6', '5'], ['6', '5']))
          - Right:
              expr: ("665", "665")
        - - expr: ([], ([], []))
          - Right:
              expr: ("", "")
        - - expr: ([], (['6', '5'], ['6', '5']))
          - Right:
              expr: ("65", "65")
        - - expr: ([('6', '6')], ([], []))
          - Right:
              expr: ("6", "6")
        - - expr: ([('6', '6'), ('5', '5')], ([], []))
          - Right:
              expr: ("65", "65")
        - - expr: ([('6', '6')], (['6'], ['6']))
          - Right:
              expr: ("66", "66")
        - - expr: ([('6', '6'), ('5', '5')], (['6', '5'], ['6', '5']))
          - Right:
              expr: ("6565", "6565")
    - - - type: ([(Int, Int)], ([Int], [Int]))
        - type: ([Int], [Int])
      - - - expr: ([((6), (6)), ((7), (7))], ([], []))
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: ([], ([(6), (7)], [(6), (7)]))
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: ([((6), (6)), ((7), (7))], ([(6), (7)], [(6), (7)]))
          - Right:
              expr: ([6, 7, 6, 7], [6, 7, 6, 7])
        - - expr: ([], ([(6)], [(6)]))
          - Right:
              expr: ([6], [6])
        - - expr: ([((6), (6))], ([], []))
          - Right:
              expr: ([6], [6])
        - - expr: ([((6), (6))], ([(6), (7)], [(6), (7)]))
          - Right:
              expr: ([6, 6, 7], [6, 6, 7])
        - - expr: ([((6), (6))], ([(6)], [(6)]))
          - Right:
              expr: ([6, 6], [6, 6])
        - - expr: ([((6), (6)), ((7), (7))], ([(6)], [(6)]))
          - Right:
              expr: ([6, 7, 6], [6, 7, 6])
    - - - type: ([(Int, Char)], ([Int], [Char]))
        - type: ([Int], [Char])
      - - - expr: ([], ([(6)], ['6']))
          - Right:
              expr: ([6], "6")
        - - expr: ([], ([], []))
          - Right:
              expr: ([], "")
        - - expr: ([((6), '6')], ([], []))
          - Right:
              expr: ([6], "6")
        - - expr: ([((6), '6')], ([(6), (7)], ['6', '5']))
          - Right:
              expr: ([6, 6, 7], "665")
        - - expr: ([((6), '6'), ((7), '5')], ([], []))
          - Right:
              expr: ([6, 7], "65")
        - - expr: ([], ([(6), (7)], ['6', '5']))
          - Right:
              expr: ([6, 7], "65")
        - - expr: ([((6), '6')], ([(6)], ['6']))
          - Right:
              expr: ([6, 6], "66")
        - - expr: ([((6), '6'), ((7), '5')], ([(6)], ['6']))
          - Right:
              expr: ([6, 7, 6], "656")
    - - - type: ([(Char, Int)], ([Char], [Int]))
        - type: ([Char], [Int])
      - - - expr: ([('6', (6)), ('5', (7))], (['6', '5'], [(6), (7)]))
          - Right:
              expr: ("6565", [6, 7, 6, 7])
        - - expr: ([('6', (6)), ('5', (7))], (['6'], [(6)]))
          - Right:
              expr: ("656", [6, 7, 6])
        - - expr: ([], (['6'], [(6)]))
          - Right:
              expr: ("6", [6])
        - - expr: ([], ([], []))
          - Right:
              expr: ("", [])
        - - expr: ([('6', (6))], (['6', '5'], [(6), (7)]))
          - Right:
              expr: ("665", [6, 6, 7])
        - - expr: ([('6', (6))], (['6'], [(6)]))
          - Right:
              expr: ("66", [6, 6])
        - - expr: ([], (['6', '5'], [(6), (7)]))
          - Right:
              expr: ("65", [6, 7])
        - - expr: ([('6', (6)), ('5', (7))], ([], []))
          - Right:
              expr: ("65", [6, 7])
- - expr: let compose = (.) in compose compose fmap
  - - - - type: ((Char -> Char), (Int -> [] Char), Int)
        - type: '[] Char'
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose mempty maybe, (7))
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (18))
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8))
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-9))
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (11))
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose mempty maybe, (-20))
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-11))
          - Right:
              expr: '""'
    - - - type: ((Int -> Char), (Char -> [] Int), Char)
        - type: '[] Char'
      - - - expr: |-
              (toEnum,
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '8')
          - Right:
              expr: '""'
        - - expr: |-
              (toEnum,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '2')
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '7')
          - Right:
              expr: '""'
        - - expr: |-
              (toEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '7')
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '7')
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '2')
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5')
          - Right:
              expr: '""'
    - - - type: ((Char -> Char), (Int -> Maybe Char), Int)
        - type: Maybe Char
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7))
          - Right:
              expr: (Just '\a')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18))
          - Right:
              expr: (Just '\DC2')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (11))
          - Right:
              expr: (Just '\v')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (6))
          - Right:
              expr: (Just '\ACK')
    - - - type: ((Int -> Int), (Char -> [] Int), Char)
        - type: '[] Int'
      - - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (toEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '0')
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          zero = 0
          tpl = (,)
        in tpl (just (just zero))
  - - - - type: Char
        - type: (Maybe (Maybe Int), Char)
      - - - expr: ('8')
          - Right:
              expr: (Just (Just 0), '8')
        - - expr: ('4')
          - Right:
              expr: (Just (Just 0), '4')
        - - expr: ('0')
          - Right:
              expr: (Just (Just 0), '0')
        - - expr: ('7')
          - Right:
              expr: (Just (Just 0), '7')
        - - expr: ('1')
          - Right:
              expr: (Just (Just 0), '1')
        - - expr: ('2')
          - Right:
              expr: (Just (Just 0), '2')
        - - expr: ('5')
          - Right:
              expr: (Just (Just 0), '5')
        - - expr: ('6')
          - Right:
              expr: (Just (Just 0), '6')
    - - - type: Int
        - type: (Maybe (Maybe Int), Int)
      - - - expr: ((7))
          - Right:
              expr: (Just (Just 0), 7)
        - - expr: ((-20))
          - Right:
              expr: (Just (Just 0), -20)
        - - expr: ((11))
          - Right:
              expr: (Just (Just 0), 11)
        - - expr: ((-11))
          - Right:
              expr: (Just (Just 0), -11)
        - - expr: ((-8))
          - Right:
              expr: (Just (Just 0), -8)
        - - expr: ((6))
          - Right:
              expr: (Just (Just 0), 6)
        - - expr: ((-9))
          - Right:
              expr: (Just (Just 0), -9)
        - - expr: ((18))
          - Right:
              expr: (Just (Just 0), 18)
- - expr: let compose = (.) in compose (zip mempty)
  - - - - type: ((Int -> [Int]), Int)
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-11))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-20))
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Char]), Int)
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (7))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (11))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (6))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (6))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (6))
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Int]), Char)
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '7')
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Int]), Char)
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '7')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '8')
          - Right:
              expr: '[]'
- - expr: |-
      let zero = 0
          tpl = (,)
        in maybe (tpl zero) tpl
  - - - - type: (Maybe Int, Char)
        - type: (Int, Char)
      - - - expr: (Just (-11), '8')
          - Right:
              expr: (-11, '8')
        - - expr: (Just (7), '6')
          - Right:
              expr: (7, '6')
        - - expr: (Just (11), '5')
          - Right:
              expr: (11, '5')
        - - expr: (Just (18), '0')
          - Right:
              expr: (18, '0')
        - - expr: (Just (18), '2')
          - Right:
              expr: (18, '2')
        - - expr: (Just (18), '7')
          - Right:
              expr: (18, '7')
        - - expr: (Just (11), '4')
          - Right:
              expr: (11, '4')
        - - expr: (Just (11), '7')
          - Right:
              expr: (11, '7')
    - - - type: (Maybe Int, Int)
        - type: (Int, Int)
      - - - expr: (Just (-11), (-20))
          - Right:
              expr: (-11, -20)
        - - expr: (Just (7), (18))
          - Right:
              expr: (7, 18)
        - - expr: (Just (7), (-8))
          - Right:
              expr: (7, -8)
        - - expr: (Nothing, (18))
          - Right:
              expr: (0, 18)
        - - expr: (Just (18), (-8))
          - Right:
              expr: (18, -8)
        - - expr: (Just (7), (-20))
          - Right:
              expr: (7, -20)
        - - expr: (Just (11), (11))
          - Right:
              expr: (11, 11)
        - - expr: (Just (11), (-20))
          - Right:
              expr: (11, -20)
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in conc (compose foldMap prepend)
  - - - - type: ((Char -> Maybe [Char] -> [Char]), Char, Maybe [Char])
        - type: '[Char]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '0', Just ['6'])
          - Right:
              expr: '"06"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               '0', Just ['6'])
          - Right:
              expr: '"06"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '0', Nothing)
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               '6', Nothing)
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '6', Just ['6'])
          - Right:
              expr: '"66"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '8', Just ['6', '5'])
          - Right:
              expr: '"865"'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose foldMap prepend,
               '2', Nothing)
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '8', Just ['6'])
          - Right:
              expr: '"86"'
    - - - type: ((Int -> Maybe [Int] -> [Int]), Int, Maybe [Int])
        - type: '[Int]'
      - - - expr: (let compose = (.) in compose mempty maybe, (6), Just [(6)])
          - Right:
              expr: '[6, 6]'
        - - expr: |-
              (let compose = (.) in compose (maybe mempty) mempty, (-9),
               Just [(6)])
          - Right:
              expr: '[-9, 6]'
        - - expr: |-
              (let compose = (.) in compose (maybe mempty) mempty, (-20),
               Just [(6)])
          - Right:
              expr: '[-20, 6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (18), Just [(6)])
          - Right:
              expr: '[18, 6]'
        - - expr: (let compose = (.) in compose foldMap mempty, (-8), Nothing)
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (-20), Just [(6)])
          - Right:
              expr: '[-20, 6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (6), Just [(6)])
          - Right:
              expr: '[6, 6]'
        - - expr: (let compose = (.) in compose (maybe mempty) mempty, (11), Nothing)
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl toEnum
  - - - - type: (Int, Int)
        - type: (Int, Int)
      - - - expr: ((-9), (-9))
          - Right:
              expr: (-9, -9)
        - - expr: ((6), (7))
          - Right:
              expr: (6, 7)
        - - expr: ((18), (-11))
          - Right:
              expr: (18, -11)
        - - expr: ((-11), (6))
          - Right:
              expr: (-11, 6)
        - - expr: ((7), (-8))
          - Right:
              expr: (7, -8)
        - - expr: ((-8), (11))
          - Right:
              expr: (-8, 11)
        - - expr: ((7), (7))
          - Right:
              expr: (7, 7)
        - - expr: ((18), (-9))
          - Right:
              expr: (18, -9)
    - - - type: (Int, Int)
        - type: (Char, Int)
      - - - expr: ((-8), (-9))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ((18), (11))
          - Right:
              expr: ('\DC2', 11)
        - - expr: ((6), (7))
          - Right:
              expr: ('\ACK', 7)
        - - expr: ((-11), (11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ((11), (6))
          - Right:
              expr: ('\v', 6)
        - - expr: ((-8), (11))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ((-11), (-9))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ((-11), (7))
          - Left: '"Prelude.chr: bad argument: (-11)"'
    - - - type: (Int, Char)
        - type: (Int, Char)
      - - - expr: ((-8), '0')
          - Right:
              expr: (-8, '0')
        - - expr: ((6), '1')
          - Right:
              expr: (6, '1')
        - - expr: ((-20), '1')
          - Right:
              expr: (-20, '1')
        - - expr: ((11), '7')
          - Right:
              expr: (11, '7')
        - - expr: ((6), '2')
          - Right:
              expr: (6, '2')
        - - expr: ((-11), '2')
          - Right:
              expr: (-11, '2')
        - - expr: ((-8), '4')
          - Right:
              expr: (-8, '4')
        - - expr: ((7), '7')
          - Right:
              expr: (7, '7')
    - - - type: (Int, Char)
        - type: (Char, Char)
      - - - expr: ((18), '1')
          - Right:
              expr: ('\DC2', '1')
        - - expr: ((-8), '0')
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ((7), '5')
          - Right:
              expr: ('\a', '5')
        - - expr: ((-11), '5')
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ((-8), '8')
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ((6), '8')
          - Right:
              expr: ('\ACK', '8')
        - - expr: ((-8), '2')
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ((18), '5')
          - Right:
              expr: ('\DC2', '5')
- - expr: let compose = (.) in compose (zip mempty) mempty
  - - - - type: Char
        - type: '[(Int, Char)]'
      - - - expr: ('1')
          - Right:
              expr: '[]'
        - - expr: ('5')
          - Right:
              expr: '[]'
        - - expr: ('6')
          - Right:
              expr: '[]'
        - - expr: ('7')
          - Right:
              expr: '[]'
        - - expr: ('8')
          - Right:
              expr: '[]'
        - - expr: ('4')
          - Right:
              expr: '[]'
        - - expr: ('2')
          - Right:
              expr: '[]'
        - - expr: ('0')
          - Right:
              expr: '[]'
    - - - type: Int
        - type: '[(Int, Int)]'
      - - - expr: ((-20))
          - Right:
              expr: '[]'
        - - expr: ((-9))
          - Right:
              expr: '[]'
        - - expr: ((7))
          - Right:
              expr: '[]'
        - - expr: ((11))
          - Right:
              expr: '[]'
        - - expr: ((-11))
          - Right:
              expr: '[]'
        - - expr: ((6))
          - Right:
              expr: '[]'
        - - expr: ((-8))
          - Right:
              expr: '[]'
        - - expr: ((18))
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          compose = (.)
          prepend = (:)
        in compose (compose prepend just)
  - - - - type: ((Char -> Int), Char, [Maybe Int])
        - type: '[Maybe Int]'
      - - - expr: (fromEnum, '6', [Nothing])
          - Right:
              expr: '[Just 54, Nothing]'
        - - expr: (fromEnum, '0', [Nothing, Just (7)])
          - Right:
              expr: '[Just 48, Nothing, Just 7]'
        - - expr: (fromEnum, '5', [Nothing, Just (7)])
          - Right:
              expr: '[Just 53, Nothing, Just 7]'
        - - expr: (fromEnum, '1', [Nothing, Just (7)])
          - Right:
              expr: '[Just 49, Nothing, Just 7]'
        - - expr: (fromEnum, '8', [])
          - Right:
              expr: '[Just 56]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', [Nothing])
          - Right:
              expr: '[Just 48, Nothing]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', [])
          - Right:
              expr: '[Just 54]'
        - - expr: (fromEnum, '1', [])
          - Right:
              expr: '[Just 49]'
    - - - type: ((Int -> Int), Int, [Maybe Int])
        - type: '[Maybe Int]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (6), [Nothing])
          - Right:
              expr: '[Just 6, Nothing]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11), [Nothing])
          - Right:
              expr: '[Just (-11), Nothing]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (11), [])
          - Right:
              expr: '[Just 11]'
        - - expr: (toEnum, (6), [Nothing])
          - Right:
              expr: '[Just 6, Nothing]'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum, (-11),
               [Nothing, Just (7)])
          - Right:
              expr: '[Just (-11), Nothing, Just 7]'
        - - expr: (toEnum, (-20), [Nothing])
          - Right:
              expr: '[Just (-20), Nothing]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (7), [])
          - Right:
              expr: '[Just 7]'
        - - expr: (toEnum, (-9), [Nothing, Just (7)])
          - Right:
              expr: '[Just (-9), Nothing, Just 7]'
    - - - type: ((Char -> Char), Char, [Maybe Char])
        - type: '[Maybe Char]'
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, '6',
               [Nothing, Just '5'])
          - Right:
              expr: '[Just ''6'', Nothing, Just ''5'']'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', [Nothing])
          - Right:
              expr: '[Just ''8'', Nothing]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', [])
          - Right:
              expr: '[Just ''6'']'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, '8',
               [Nothing, Just '5'])
          - Right:
              expr: '[Just ''8'', Nothing, Just ''5'']'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', [])
          - Right:
              expr: '[Just ''0'']'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', [])
          - Right:
              expr: '[Just ''4'']'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', [Nothing])
          - Right:
              expr: '[Just ''4'', Nothing]'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, '4',
               [Nothing, Just '5'])
          - Right:
              expr: '[Just ''4'', Nothing, Just ''5'']'
    - - - type: ((Int -> Char), Int, [Maybe Char])
        - type: '[Maybe Char]'
      - - - expr: |-
              (let compose = (.) in compose toEnum toEnum, (-8),
               [Nothing, Just '5'])
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9), [Nothing])
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (toEnum, (6), [Nothing, Just '5'])
          - Right:
              expr: '[Just ''\ACK'', Nothing, Just ''5'']'
        - - expr: (toEnum, (11), [])
          - Right:
              expr: '[Just ''\v'']'
        - - expr: (toEnum, (7), [])
          - Right:
              expr: '[Just ''\a'']'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7), [Nothing])
          - Right:
              expr: '[Just ''\a'', Nothing]'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, (-8),
               [Nothing, Just '5'])
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, (-11),
               [Nothing, Just '5'])
          - Left: '"Prelude.chr: bad argument: (-11)"'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend unzip
  - - - - type: ([(Int, Char)], [([Int], [Char])])
        - type: '[([Int], [Char])]'
      - - - expr: ([((6), '6'), ((7), '5')], [])
          - Right:
              expr: '[([6, 7], "65")]'
        - - expr: ([], [])
          - Right:
              expr: '[([], "")]'
        - - expr: ([((6), '6')], [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([6], "6"), ([], ""), ([6, 7], "65")]'
        - - expr: |-
              ([((6), '6')],
               [([], []), ([(6), (7)], ['6', '5']), ([(6)], ['6'])])
          - Right:
              expr: '[([6], "6"), ([], ""), ([6, 7], "65"), ([6], "6")]'
        - - expr: ([((6), '6'), ((7), '5')], [([], [])])
          - Right:
              expr: '[([6, 7], "65"), ([], "")]'
        - - expr: ([], [([], [])])
          - Right:
              expr: '[([], ""), ([], "")]'
        - - expr: ([], [([], []), ([(6), (7)], ['6', '5']), ([(6)], ['6'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65"), ([6], "6")]'
        - - expr: |-
              ([((6), '6'), ((7), '5')],
               [([], []), ([(6), (7)], ['6', '5']), ([(6)], ['6'])])
          - Right:
              expr: '[([6, 7], "65"), ([], ""), ([6, 7], "65"), ([6], "6")]'
    - - - type: ([(Char, Char)], [([Char], [Char])])
        - type: '[([Char], [Char])]'
      - - - expr: |-
              ([('6', '6'), ('5', '5')],
               [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: '[("65", "65"), ("", ""), ("65", "65"), ("6", "6")]'
        - - expr: |-
              ([('6', '6')],
               [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: '[("6", "6"), ("", ""), ("65", "65"), ("6", "6")]'
        - - expr: ([('6', '6'), ('5', '5')], [([], [])])
          - Right:
              expr: '[("65", "65"), ("", "")]'
        - - expr: ([], [])
          - Right:
              expr: '[("", "")]'
        - - expr: ([('6', '6'), ('5', '5')], [([], []), (['6', '5'], ['6', '5'])])
          - Right:
              expr: '[("65", "65"), ("", ""), ("65", "65")]'
        - - expr: ([('6', '6')], [([], [])])
          - Right:
              expr: '[("6", "6"), ("", "")]'
        - - expr: ([], [([], []), (['6', '5'], ['6', '5'])])
          - Right:
              expr: '[("", ""), ("", ""), ("65", "65")]'
        - - expr: ([], [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: '[("", ""), ("", ""), ("65", "65"), ("6", "6")]'
    - - - type: ([(Char, Int)], [([Char], [Int])])
        - type: '[([Char], [Int])]'
      - - - expr: ([('6', (6))], [([], []), (['6', '5'], [(6), (7)])])
          - Right:
              expr: '[("6", [6]), ("", []), ("65", [6, 7])]'
        - - expr: ([('6', (6)), ('5', (7))], [])
          - Right:
              expr: '[("65", [6, 7])]'
        - - expr: ([('6', (6))], [])
          - Right:
              expr: '[("6", [6])]'
        - - expr: ([('6', (6))], [([], [])])
          - Right:
              expr: '[("6", [6]), ("", [])]'
        - - expr: ([], [([], []), (['6', '5'], [(6), (7)])])
          - Right:
              expr: '[("", []), ("", []), ("65", [6, 7])]'
        - - expr: |-
              ([('6', (6)), ('5', (7))],
               [([], []), (['6', '5'], [(6), (7)]), (['6'], [(6)])])
          - Right:
              expr: '[("65", [6, 7]), ("", []), ("65", [6, 7]), ("6", [6])]'
        - - expr: ([('6', (6)), ('5', (7))], [([], [])])
          - Right:
              expr: '[("65", [6, 7]), ("", [])]'
        - - expr: ([], [([], []), (['6', '5'], [(6), (7)]), (['6'], [(6)])])
          - Right:
              expr: '[("", []), ("", []), ("65", [6, 7]), ("6", [6])]'
    - - - type: ([(Int, Int)], [([Int], [Int])])
        - type: '[([Int], [Int])]'
      - - - expr: ([((6), (6))], [])
          - Right:
              expr: '[([6], [6])]'
        - - expr: |-
              ([((6), (6)), ((7), (7))],
               [([], []), ([(6), (7)], [(6), (7)]), ([(6)], [(6)])])
          - Right:
              expr: '[([6, 7], [6, 7]), ([], []), ([6, 7], [6, 7]), ([6], [6])]'
        - - expr: ([((6), (6))], [([], []), ([(6), (7)], [(6), (7)])])
          - Right:
              expr: '[([6], [6]), ([], []), ([6, 7], [6, 7])]'
        - - expr: ([((6), (6)), ((7), (7))], [([], []), ([(6), (7)], [(6), (7)])])
          - Right:
              expr: '[([6, 7], [6, 7]), ([], []), ([6, 7], [6, 7])]'
        - - expr: ([], [([], []), ([(6), (7)], [(6), (7)])])
          - Right:
              expr: '[([], []), ([], []), ([6, 7], [6, 7])]'
        - - expr: ([], [([], [])])
          - Right:
              expr: '[([], []), ([], [])]'
        - - expr: ([], [([], []), ([(6), (7)], [(6), (7)]), ([(6)], [(6)])])
          - Right:
              expr: '[([], []), ([], []), ([6, 7], [6, 7]), ([6], [6])]'
        - - expr: ([((6), (6))], [([], [])])
          - Right:
              expr: '[([6], [6]), ([], [])]'
- - expr: |-
      let compose = (.)
          zero = 0
        in compose (maybe zero length)
  - - - - type: ((Int -> Maybe ([] Int)), Int)
        - type: Int
      - - - expr: (let compose = (.) in compose mempty fromEnum, (-20))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11))
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-9))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-9))
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-9))
          - Right:
              expr: '0'
    - - - type: ((Char -> Maybe (Maybe Char)), Char)
        - type: Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '5')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '2')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '6')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '8')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '0')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '7')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '1')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '4')
          - Right:
              expr: '1'
    - - - type: ((Int -> Maybe ([] Char)), Int)
        - type: Int
      - - - expr: (let compose = (.) in compose mempty maybe, (-11))
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               (-11))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-9))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8))
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose mempty fromEnum, (18))
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose mempty fromEnum, (-20))
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (7))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-9))
          - Right:
              expr: '0'
- - expr: |-
      let conc = (<>)
          just = Just
          compose = (.)
        in conc (compose just unzip)
  - - - - type: (([(Int, Char)] -> Maybe ([Int], [Char])), [(Int, Char)])
        - type: Maybe ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [])
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: (Just ([6, 7], "65"))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: (Just ([6, 7], "65"))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just unzip,
               [((6), '6'), ((7), '5')])
          - Right:
              expr: (Just ([6, 7, 6, 7], "6565"))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [((6), '6')])
          - Right:
              expr: (Just ([6], "6"))
        - - expr: (let compose = (.) in compose mempty (zip mempty), [])
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [])
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: (Just ([6, 7], "65"))
    - - - type: (([(Int, Int)] -> Maybe ([Int], [Int])), [(Int, Int)])
        - type: Maybe ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: (Just ([6, 7], [6, 7]))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [((6), (6))])
          - Right:
              expr: (Just ([6], [6]))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [((6), (6))])
          - Right:
              expr: (Just ([6], [6]))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [])
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [((6), (6)), ((7), (7))])
          - Right:
              expr: (Just ([6, 7], [6, 7]))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               [((6), (6))])
          - Right:
              expr: (Just ([6], [6]))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               [((6), (6))])
          - Right:
              expr: (Just ([6], [6]))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: (Just ([6, 7], [6, 7]))
    - - - type: (([(Char, Char)] -> Maybe ([Char], [Char])), [(Char, Char)])
        - type: Maybe ([Char], [Char])
      - - - expr: (let compose = (.) in compose mempty (zip mempty), [])
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [('6', '6')])
          - Right:
              expr: (Just ("6", "6"))
        - - expr: (let compose = (.) in compose mempty length, [])
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [('6', '6'), ('5', '5')])
          - Right:
              expr: (Just ("65", "65"))
        - - expr: (let compose = (.) in compose mempty zip, [('6', '6')])
          - Right:
              expr: (Just ("6", "6"))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: (Just ("65", "65"))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [('6', '6')])
          - Right:
              expr: (Just ("6", "6"))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [])
          - Right:
              expr: (Just ("", ""))
    - - - type: (([(Char, Int)] -> Maybe ([Char], [Int])), [(Char, Int)])
        - type: Maybe ([Char], [Int])
      - - - expr: (let compose = (.) in compose mempty zip, [])
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [('6', (6))])
          - Right:
              expr: (Just ("6", [6]))
        - - expr: (let compose = (.) in compose mempty zip, [('6', (6))])
          - Right:
              expr: (Just ("6", [6]))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [('6', (6))])
          - Right:
              expr: (Just ("6", [6]))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [('6', (6))])
          - Right:
              expr: (Just ("6", [6]))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: (Just ("65", [6, 7]))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [])
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [])
          - Right:
              expr: (Just ("", []))
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose (compose conc) prepend
  - - - - type: (Char, [Char], [Char])
        - type: '[Char]'
      - - - expr: ('4', ['6', '5'], ['6', '5'])
          - Right:
              expr: '"46565"'
        - - expr: ('0', ['6', '5'], ['6'])
          - Right:
              expr: '"0656"'
        - - expr: ('1', ['6'], ['6'])
          - Right:
              expr: '"166"'
        - - expr: ('5', ['6', '5'], ['6', '5'])
          - Right:
              expr: '"56565"'
        - - expr: ('7', [], [])
          - Right:
              expr: '"7"'
        - - expr: ('8', ['6'], ['6'])
          - Right:
              expr: '"866"'
        - - expr: ('8', [], ['6', '5'])
          - Right:
              expr: '"865"'
        - - expr: ('0', ['6', '5'], ['6', '5'])
          - Right:
              expr: '"06565"'
    - - - type: (Int, [Int], [Int])
        - type: '[Int]'
      - - - expr: ((6), [(6), (7)], [])
          - Right:
              expr: '[6, 6, 7]'
        - - expr: ((7), [(6), (7)], [(6)])
          - Right:
              expr: '[7, 6, 7, 6]'
        - - expr: ((18), [], [])
          - Right:
              expr: '[18]'
        - - expr: ((-11), [], [])
          - Right:
              expr: '[-11]'
        - - expr: ((-11), [(6), (7)], [(6), (7)])
          - Right:
              expr: '[-11, 6, 7, 6, 7]'
        - - expr: ((11), [(6)], [])
          - Right:
              expr: '[11, 6]'
        - - expr: ((-9), [(6), (7)], [])
          - Right:
              expr: '[-9, 6, 7]'
        - - expr: ((6), [(6), (7)], [(6)])
          - Right:
              expr: '[6, 6, 7, 6]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc unzip unzip)
  - - - - type: ((Char -> [(Int, Int)]), Char)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '6')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '8')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '1')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '2')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '5')
          - Right:
              expr: ([], [])
    - - - type: ((Int -> [(Int, Char)]), Int)
        - type: ([Int], [Char])
      - - - expr: (let compose = (.) in compose mempty fromEnum, (-20))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (18))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (18))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-9))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-20))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, (7))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (7))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8))
          - Right:
              expr: ([], "")
    - - - type: ((Char -> [(Char, Char)]), Char)
        - type: ([Char], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '4')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '1')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '6')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '1')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '8')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '8')
          - Right:
              expr: ("", "")
    - - - type: ((Int -> [(Char, Char)]), Int)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (18))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (18))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-8))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (18))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose (zip mempty) mempty, (6))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (11))
          - Right:
              expr: ("", "")
- - expr: maybe (unzip mempty)
  - - - - type: ((Char -> ([Int], [Char])), Maybe Char)
        - type: ([Int], [Char])
      - - - expr: (let compose = (.) in compose unzip (sequence mempty), Just '8')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '5')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, Just '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '7')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose unzip (sequence mempty), Just '0')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, Just '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '7')
          - Right:
              expr: ([], "")
    - - - type: ((Int -> ([Int], [Int])), Maybe Int)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (-11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (-11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing)
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (-11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               Nothing)
          - Right:
              expr: ([], [])
    - - - type: ((Int -> ([Char], [Char])), Maybe Int)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (7))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, Just (18))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (18))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, Nothing)
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (-11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (11))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (18))
          - Right:
              expr: ("", "")
    - - - type: ((Char -> ([Char], [Char])), Maybe Char)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '0')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '5')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing)
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '5')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '5')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, Just '0')
          - Right:
              expr: ("", "")
- - expr: |-
      let just = Just
          zero = 0
          tpl = (,)
        in tpl (just zero)
  - - - - type: Char
        - type: (Maybe Int, Char)
      - - - expr: ('2')
          - Right:
              expr: (Just 0, '2')
        - - expr: ('8')
          - Right:
              expr: (Just 0, '8')
        - - expr: ('7')
          - Right:
              expr: (Just 0, '7')
        - - expr: ('1')
          - Right:
              expr: (Just 0, '1')
        - - expr: ('0')
          - Right:
              expr: (Just 0, '0')
        - - expr: ('6')
          - Right:
              expr: (Just 0, '6')
        - - expr: ('5')
          - Right:
              expr: (Just 0, '5')
        - - expr: ('4')
          - Right:
              expr: (Just 0, '4')
    - - - type: Int
        - type: (Maybe Int, Int)
      - - - expr: ((-11))
          - Right:
              expr: (Just 0, -11)
        - - expr: ((7))
          - Right:
              expr: (Just 0, 7)
        - - expr: ((11))
          - Right:
              expr: (Just 0, 11)
        - - expr: ((-8))
          - Right:
              expr: (Just 0, -8)
        - - expr: ((18))
          - Right:
              expr: (Just 0, 18)
        - - expr: ((6))
          - Right:
              expr: (Just 0, 6)
        - - expr: ((-9))
          - Right:
              expr: (Just 0, -9)
        - - expr: ((-20))
          - Right:
              expr: (Just 0, -20)
- - expr: |-
      let just = Just
          compose = (.)
        in compose maybe just
  - - - - type: (Char, (Char -> Maybe Char), Maybe Char)
        - type: Maybe Char
      - - - expr: ('0', let just = Just in just, Just '7')
          - Right:
              expr: (Just '7')
        - - expr: ('2', let just = Just in just, Just '7')
          - Right:
              expr: (Just '7')
        - - expr: ('1', let just = Just in just, Just '8')
          - Right:
              expr: (Just '8')
        - - expr: ('2', let just = Just in just, Just '5')
          - Right:
              expr: (Just '5')
        - - expr: ('2', let just = Just in just, Just '8')
          - Right:
              expr: (Just '8')
        - - expr: ('5', let just = Just in just, Nothing)
          - Right:
              expr: (Just '5')
        - - expr: ('1', let just = Just in just, Nothing)
          - Right:
              expr: (Just '1')
        - - expr: ('4', let just = Just in just, Just '5')
          - Right:
              expr: (Just '5')
    - - - type: (Int, (Int -> Maybe Int), Maybe Int)
        - type: Maybe Int
      - - - expr: |-
              ((11),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just (11))
          - Right:
              expr: (Just 11)
        - - expr: |-
              ((7),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just (7))
          - Right:
              expr: (Just 7)
        - - expr: ((11), let just = Just in just, Nothing)
          - Right:
              expr: (Just 11)
        - - expr: |-
              ((-8),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just (11))
          - Right:
              expr: (Just 11)
        - - expr: |-
              ((-8),
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (11))
          - Right:
              expr: (Just 11)
        - - expr: ((-20), let just = Just in just, Just (18))
          - Right:
              expr: (Just 18)
        - - expr: |-
              ((-11),
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (11))
          - Right:
              expr: (Just 11)
        - - expr: ((-11), let just = Just in just, Just (11))
          - Right:
              expr: (Just 11)
    - - - type: (Int, (Char -> Maybe Int), Maybe Char)
        - type: Maybe Int
      - - - expr: |-
              ((-8),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '7')
          - Right:
              expr: (Just 55)
        - - expr: |-
              ((-20),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Nothing)
          - Right:
              expr: (Just (-20))
        - - expr: |-
              ((6),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '0')
          - Right:
              expr: (Just 48)
        - - expr: |-
              ((18),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '8')
          - Right:
              expr: (Just 56)
        - - expr: |-
              ((-20),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '5')
          - Right:
              expr: (Just 53)
        - - expr: |-
              ((-11),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Nothing)
          - Right:
              expr: (Just (-11))
        - - expr: |-
              ((-9),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '0')
          - Right:
              expr: (Just 48)
        - - expr: |-
              ((-8),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '5')
          - Right:
              expr: (Just 53)
    - - - type: (Char, (Int -> Maybe Char), Maybe Int)
        - type: Maybe Char
      - - - expr: |-
              ('8',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (18))
          - Right:
              expr: (Just '\DC2')
        - - expr: |-
              ('7',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              ('5',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (11))
          - Right:
              expr: (Just '\v')
        - - expr: |-
              ('0',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (11))
          - Right:
              expr: (Just '\v')
        - - expr: |-
              ('8',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (7))
          - Right:
              expr: (Just '\a')
        - - expr: |-
              ('4',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (7))
          - Right:
              expr: (Just '\a')
        - - expr: |-
              ('1',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              ('1',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Nothing)
          - Right:
              expr: (Just '1')
- - expr: let compose = (.) in maybe (compose unzip) mempty
  - - - - type: (Maybe Char, (Int -> [(Char, Int)]), Int)
        - type: ([Char], [Int])
      - - - expr: |-
              (Just '8',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (11))
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '0',
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (11))
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '8',
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-9))
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '5',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-11))
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '0',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (18))
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '8',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-20))
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '0',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (6))
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '5',
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-11))
          - Right:
              expr: ("", [])
    - - - type: (Maybe Int, (Int -> [(Int, Char)]), Int)
        - type: ([Int], [Char])
      - - - expr: |-
              (Just (7),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (18))
          - Right:
              expr: ([], "")
        - - expr: |-
              (Just (7),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-8))
          - Right:
              expr: ([], "")
        - - expr: |-
              (Nothing,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (Just (-11),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-20))
          - Right:
              expr: ([], "")
        - - expr: |-
              (Nothing,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (-11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (Just (18),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-9))
          - Right:
              expr: ([], "")
        - - expr: |-
              (Just (11),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-8))
          - Right:
              expr: ([], "")
        - - expr: |-
              (Just (11),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-9))
          - Right:
              expr: ([], "")
    - - - type: (Maybe Int, (Char -> [(Int, Int)]), Char)
        - type: ([Int], [Int])
      - - - expr: (Just (7), let compose = (.) in compose (zip mempty) mempty, '8')
          - Right:
              expr: ([], [])
        - - expr: |-
              (Just (-11),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '7')
          - Right:
              expr: ([], [])
        - - expr: |-
              (Nothing,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '4')
          - Right:
              expr: ([], [])
        - - expr: |-
              (Just (11),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '7')
          - Right:
              expr: ([], [])
        - - expr: |-
              (Just (-11),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '1')
          - Right:
              expr: ([], [])
        - - expr: |-
              (Just (11),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '0')
          - Right:
              expr: ([], [])
        - - expr: |-
              (Just (11),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '8')
          - Right:
              expr: ([], [])
        - - expr: |-
              (Just (-11),
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '1')
          - Right:
              expr: ([], [])
    - - - type: (Maybe Char, (Char -> [(Char, Int)]), Char)
        - type: ([Char], [Int])
      - - - expr: |-
              (Just '5',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '6')
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '8',
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0')
          - Right:
              expr: ("", [])
        - - expr: (Just '0', let compose = (.) in compose mempty fromEnum, '7')
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '0',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '8',
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '6')
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '8',
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '8')
          - Right:
              expr: ("", [])
        - - expr: (Just '8', let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: ("", [])
        - - expr: (Just '5', let compose = (.) in compose (zip mempty) mempty, '7')
          - Right:
              expr: ("", [])
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose (compose (prepend zero))
  - - - - type: ((Char -> Int -> [Int]), Char, Int)
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               '8', (6))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8', (18))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7', (-8))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '6', (-8))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               '2', (-8))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '6', (7))
          - Right:
              expr: '[0]'
        - - expr: (let compose = (.) in compose mempty maybe, '7', (7))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '6', (11))
          - Right:
              expr: '[0]'
    - - - type: ((Int -> Int -> [Int]), Int, Int)
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               (-11), (-8))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-11), (-8))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (7), (6))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (6), (7))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-8), (18))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (11), (18))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-11), (7))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (11), (-9))
          - Right:
              expr: '[0]'
    - - - type: ((Char -> Char -> [Int]), Char, Char)
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '7', '4')
          - Right:
              expr: '[0]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '6', '2')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '0', '5')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '2', '5')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8', '7')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7', '6')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '5', '2')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2', '0')
          - Right:
              expr: '[0]'
    - - - type: ((Int -> Char -> [Int]), Int, Char)
        - type: '[Int]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-8), '1')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (7), '4')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (11), '5')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (11), '0')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (18), '8')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6), '4')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (7), '6')
          - Right:
              expr: '[0]'
        - - expr: (let compose = (.) in compose mempty maybe, (18), '1')
          - Right:
              expr: '[0]'
- - expr: let conc = (<>) in conc zip
  - - - - type: (([Char] -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, ['6'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (let compose = (.) in compose mempty zip, ['6', '5'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               ['6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose (compose mempty) zip, ['6'],
               [(6), (7)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['6'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
    - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.) in compose foldMap mempty, ['6', '5'],
               ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: (let compose = (.) in compose mempty length, ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               ['6'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (let compose = (.) in compose (compose mempty) zip, ['6', '5'],
              [])
          - Right:
              expr: '[]'
        - - expr: (zip, [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               ['6', '5'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) zip,
               [], ['6', '5'])
          - Right:
              expr: '[]'
    - - - type: (([Int] -> [Char] -> [(Int, Char)]), [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: (let compose = (.) in compose (compose mempty) zip, [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [(6), (7)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [(6), (7)], ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [], ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [(6)], ['6', '5'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [(6), (7)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose zip (prepend zero),
               [], ['6'])
          - Right:
              expr: '[(0, ''6'')]'
    - - - type: (([Int] -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [], [(6)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip mempty, [(6)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [], [(6)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty (zip mempty), [], [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [(6)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [], [])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose fmap (compose sequenceA)
  - - - - type: ((Int -> [] ([] Int)), Maybe Int)
        - type: Maybe ([] ([] Int))
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (11))
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (-11))
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (18))
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (18))
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (7))
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (18))
          - Right:
              expr: (Just [[]])
    - - - type: ((Int -> Maybe ([] Int)), Maybe Int)
        - type: Maybe ([] (Maybe Int))
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (11))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (-11))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               Just (18))
          - Right:
              expr: (Just [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (18))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (7))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (7))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (18))
          - Right:
              expr: (Just [Nothing])
- - expr: let just = Just in maybe (just (unzip mempty))
  - - - - type: ((Char -> Maybe ([Char], [Char])), Maybe Char)
        - type: Maybe ([Char], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               Just '8')
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '5')
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '5')
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '0')
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '5')
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '5')
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing)
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '5')
          - Right:
              expr: Nothing
    - - - type: ((Char -> Maybe ([Char], [Int])), Maybe Char)
        - type: Maybe ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing)
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '0')
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing)
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               Nothing)
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '0')
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '0')
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing)
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5')
          - Right:
              expr: Nothing
    - - - type: ((Char -> Maybe ([Int], [Int])), Maybe Char)
        - type: Maybe ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '5')
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '7')
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing)
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '5')
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose mempty maybe, Just '8')
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '7')
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose mempty fromEnum, Nothing)
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing)
          - Right:
              expr: (Just ([], []))
    - - - type: ((Int -> Maybe ([Int], [Int])), Maybe Int)
        - type: Maybe ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (-11))
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               Just (18))
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (18))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (11))
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (18))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing)
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (7))
          - Right:
              expr: Nothing
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc zip zip)
  - - - - type: ((Int -> [Int]), Int, [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-8), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (18), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (7), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (-20), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (7), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (11), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-9), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (7), ['6', '5'])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Int]), Char, [Char])
        - type: '[(Int, Char)]'
      - - - expr: (let compose = (.) in compose mempty fromEnum, '7', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '7', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '8', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '0', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '8', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '2', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '1', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '1', ['6'])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Char]), Int, [Char])
        - type: '[(Char, Char)]'
      - - - expr: (let compose = (.) in compose mempty fromEnum, (6), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-20), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-8), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-20), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (6), ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (7), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (18), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-8), ['6'])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Int]), Char, [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '6', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '1', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '0', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '4', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '0', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '2', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7', [(6)])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose (compose zip sequence)
  - - - - type: ((Char -> [] [Int]), Char, [Int])
        - type: '[([] Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '8', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '8', [(6)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '7', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '5', [(6)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '4', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '2', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '7', [(6), (7)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1', [(6), (7)])
          - Right:
              expr: '[([], 6)]'
    - - - type: ((Int -> Maybe [Char]), Int, [Char])
        - type: '[(Maybe Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-9), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-9), ['6', '5'])
          - Right:
              expr: '[(Nothing, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-9), ['6', '5'])
          - Right:
              expr: '[(Nothing, ''6'')]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (-20), ['6', '5'])
          - Right:
              expr: '[(Nothing, ''6'')]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (6), ['6', '5'])
          - Right:
              expr: '[(Nothing, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (7), ['6', '5'])
          - Right:
              expr: '[(Nothing, ''6'')]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (18), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (7), [])
          - Right:
              expr: '[]'
    - - - type: ((Char -> Maybe [Char]), Char, [Int])
        - type: '[(Maybe Char, Int)]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '4', [(6)])
          - Right:
              expr: '[(Nothing, 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '1', [(6), (7)])
          - Right:
              expr: '[(Nothing, 6)]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               '5', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '6', [(6)])
          - Right:
              expr: '[(Nothing, 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5', [(6)])
          - Right:
              expr: '[(Nothing, 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '4', [(6)])
          - Right:
              expr: '[(Nothing, 6)]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6', [(6), (7)])
          - Right:
              expr: '[(Nothing, 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '8', [(6)])
          - Right:
              expr: '[(Nothing, 6)]'
    - - - type: ((Int -> [] [Char]), Int, [Char])
        - type: '[([] Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (7), ['6', '5'])
          - Right:
              expr: '[("", ''6'')]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-8), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-8), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (18), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-8), ['6'])
          - Right:
              expr: '[("", ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-9), ['6'])
          - Right:
              expr: '[("", ''6'')]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-9), ['6', '5'])
          - Right:
              expr: '[("", ''6'')]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just fromEnum))
  - - - - type: ((Int -> Char), Int)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: (Just 6)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (Just 6)
        - - expr: (toEnum, (11))
          - Right:
              expr: (Just 11)
        - - expr: (let compose = (.) in compose toEnum toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: (Just 18)
        - - expr: (toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
    - - - type: ((Int -> Int), Int)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: (Just 6)
        - - expr: (toEnum, (18))
          - Right:
              expr: (Just 18)
        - - expr: (fromEnum, (-20))
          - Right:
              expr: (Just (-20))
        - - expr: (toEnum, (-9))
          - Right:
              expr: (Just (-9))
        - - expr: (fromEnum, (-11))
          - Right:
              expr: (Just (-11))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8))
          - Right:
              expr: (Just (-8))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: (Just 18)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: (Just 7)
    - - - type: ((Char -> Int), Char)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just 52)
        - - expr: (fromEnum, '2')
          - Right:
              expr: (Just 50)
        - - expr: (fromEnum, '7')
          - Right:
              expr: (Just 55)
        - - expr: (fromEnum, '1')
          - Right:
              expr: (Just 49)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just 48)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (Just 49)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just 56)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (Just 50)
- - expr: maybe zip mempty
  - - - - type: (Maybe Char, [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: (Just '8', ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (Just '7', ['6', '5'], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just '5', ['6'], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just '0', ['6', '5'], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just '5', [], [])
          - Right:
              expr: '[]'
        - - expr: (Just '8', [], [(6)])
          - Right:
              expr: '[]'
        - - expr: (Just '5', ['6'], [])
          - Right:
              expr: '[]'
        - - expr: (Just '5', ['6'], [(6)])
          - Right:
              expr: '[]'
    - - - type: (Maybe Char, [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: (Just '7', [(6)], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Just '7', [(6), (7)], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Just '7', [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Just '0', [], [])
          - Right:
              expr: '[]'
        - - expr: (Just '8', [(6)], ['6'])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(6), (7)], ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: (Just '0', [(6)], [])
          - Right:
              expr: '[]'
        - - expr: (Just '7', [(6)], ['6'])
          - Right:
              expr: '[]'
    - - - type: (Maybe Int, [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: (Just (7), [(6)], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Just (11), [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: (Just (11), [(6)], [])
          - Right:
              expr: '[]'
        - - expr: (Just (7), [], [])
          - Right:
              expr: '[]'
        - - expr: (Just (7), [], ['6'])
          - Right:
              expr: '[]'
        - - expr: (Just (-11), [(6)], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Just (18), [(6), (7)], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Just (11), [], ['6', '5'])
          - Right:
              expr: '[]'
    - - - type: (Maybe Int, [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: (Just (7), [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just (11), ['6'], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['6'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (Nothing, ['6', '5'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: (Just (11), ['6', '5'], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just (11), ['6'], [])
          - Right:
              expr: '[]'
        - - expr: (Just (7), [], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [], [])
          - Right:
              expr: '[]'
- - expr: let tpl = (,) in tpl (unzip mempty)
  - - - - type: Char
        - type: (([Char], [Char]), Char)
      - - - expr: ('6')
          - Right:
              expr: (("", ""), '6')
        - - expr: ('4')
          - Right:
              expr: (("", ""), '4')
        - - expr: ('1')
          - Right:
              expr: (("", ""), '1')
        - - expr: ('0')
          - Right:
              expr: (("", ""), '0')
        - - expr: ('7')
          - Right:
              expr: (("", ""), '7')
        - - expr: ('8')
          - Right:
              expr: (("", ""), '8')
        - - expr: ('2')
          - Right:
              expr: (("", ""), '2')
        - - expr: ('5')
          - Right:
              expr: (("", ""), '5')
    - - - type: Char
        - type: (([Int], [Char]), Char)
      - - - expr: ('8')
          - Right:
              expr: (([], ""), '8')
        - - expr: ('4')
          - Right:
              expr: (([], ""), '4')
        - - expr: ('0')
          - Right:
              expr: (([], ""), '0')
        - - expr: ('6')
          - Right:
              expr: (([], ""), '6')
        - - expr: ('1')
          - Right:
              expr: (([], ""), '1')
        - - expr: ('2')
          - Right:
              expr: (([], ""), '2')
        - - expr: ('5')
          - Right:
              expr: (([], ""), '5')
        - - expr: ('7')
          - Right:
              expr: (([], ""), '7')
    - - - type: Char
        - type: (([Char], [Int]), Char)
      - - - expr: ('4')
          - Right:
              expr: (("", []), '4')
        - - expr: ('2')
          - Right:
              expr: (("", []), '2')
        - - expr: ('1')
          - Right:
              expr: (("", []), '1')
        - - expr: ('5')
          - Right:
              expr: (("", []), '5')
        - - expr: ('6')
          - Right:
              expr: (("", []), '6')
        - - expr: ('7')
          - Right:
              expr: (("", []), '7')
        - - expr: ('0')
          - Right:
              expr: (("", []), '0')
        - - expr: ('8')
          - Right:
              expr: (("", []), '8')
    - - - type: Int
        - type: (([Int], [Int]), Int)
      - - - expr: ((18))
          - Right:
              expr: (([], []), 18)
        - - expr: ((-20))
          - Right:
              expr: (([], []), -20)
        - - expr: ((-11))
          - Right:
              expr: (([], []), -11)
        - - expr: ((-9))
          - Right:
              expr: (([], []), -9)
        - - expr: ((-8))
          - Right:
              expr: (([], []), -8)
        - - expr: ((7))
          - Right:
              expr: (([], []), 7)
        - - expr: ((11))
          - Right:
              expr: (([], []), 11)
        - - expr: ((6))
          - Right:
              expr: (([], []), 6)
- - expr: let compose = (.) in compose compose elem
  - - - - type: (Char, (Char -> Maybe Char), Char)
        - type: Bool
      - - - expr: ('7', let just = Just in just, '5')
          - Right:
              expr: 'False'
        - - expr: ('8', let just = Just in just, '1')
          - Right:
              expr: 'False'
        - - expr: ('1', let just = Just in just, '0')
          - Right:
              expr: 'False'
        - - expr: ('2', let just = Just in just, '6')
          - Right:
              expr: 'False'
        - - expr: ('6', let just = Just in just, '7')
          - Right:
              expr: 'False'
        - - expr: ('4', let just = Just in just, '1')
          - Right:
              expr: 'False'
        - - expr: ('5', let just = Just in just, '5')
          - Right:
              expr: 'True'
        - - expr: ('1', let just = Just in just, '6')
          - Right:
              expr: 'False'
    - - - type: (Int, (Char -> [] Int), Char)
        - type: Bool
      - - - expr: |-
              ((7),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '7')
          - Right:
              expr: 'False'
        - - expr: |-
              ((-8),
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '2')
          - Right:
              expr: 'False'
        - - expr: |-
              ((6),
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               '1')
          - Right:
              expr: 'False'
        - - expr: |-
              ((-8),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '0')
          - Right:
              expr: 'False'
        - - expr: ((-9), let compose = (.) in compose mempty fromEnum, '1')
          - Right:
              expr: 'False'
        - - expr: |-
              ((-11),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '6')
          - Right:
              expr: 'False'
        - - expr: |-
              ((6),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '5')
          - Right:
              expr: 'False'
        - - expr: |-
              ((-9),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '1')
          - Right:
              expr: 'False'
    - - - type: (Int, (Int -> [] Int), Int)
        - type: Bool
      - - - expr: |-
              ((-8),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-20))
          - Right:
              expr: 'False'
        - - expr: |-
              ((7),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-8))
          - Right:
              expr: 'False'
        - - expr: |-
              ((-11),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (18))
          - Right:
              expr: 'False'
        - - expr: |-
              ((-9),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (-9))
          - Right:
              expr: 'False'
        - - expr: |-
              ((-11),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-20))
          - Right:
              expr: 'False'
        - - expr: |-
              ((-20),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-8))
          - Right:
              expr: 'False'
        - - expr: ((11), let compose = (.) in compose mempty fromEnum, (11))
          - Right:
              expr: 'False'
        - - expr: ((-20), let compose = (.) in compose mempty fromEnum, (11))
          - Right:
              expr: 'False'
    - - - type: (Int, (Int -> Maybe Int), Int)
        - type: Bool
      - - - expr: |-
              ((-11),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (7))
          - Right:
              expr: 'False'
        - - expr: ((7), let just = Just in just, (6))
          - Right:
              expr: 'False'
        - - expr: |-
              ((-20),
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (11))
          - Right:
              expr: 'False'
        - - expr: |-
              ((-20),
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11))
          - Right:
              expr: 'False'
        - - expr: ((18), let just = Just in just, (11))
          - Right:
              expr: 'False'
        - - expr: |-
              ((11),
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9))
          - Right:
              expr: 'False'
        - - expr: |-
              ((-9),
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9))
          - Right:
              expr: 'True'
        - - expr: |-
              ((-9),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-9))
          - Right:
              expr: 'True'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just
  - - - - type: ((Char -> Char), Char)
        - type: Maybe Char
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (Just '1')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just '8')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (Just '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just '4')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (Just '7')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just '6')
    - - - type: ((Int -> Int), Int)
        - type: Maybe Int
      - - - expr: (toEnum, (-9))
          - Right:
              expr: (Just (-9))
        - - expr: (toEnum, (-20))
          - Right:
              expr: (Just (-20))
        - - expr: (fromEnum, (7))
          - Right:
              expr: (Just 7)
        - - expr: (fromEnum, (-20))
          - Right:
              expr: (Just (-20))
        - - expr: (fromEnum, (-9))
          - Right:
              expr: (Just (-9))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8))
          - Right:
              expr: (Just (-8))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: (Just 7)
        - - expr: (fromEnum, (-11))
          - Right:
              expr: (Just (-11))
    - - - type: ((Char -> Int), Char)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (Just 49)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just 56)
        - - expr: (fromEnum, '0')
          - Right:
              expr: (Just 48)
        - - expr: (fromEnum, '7')
          - Right:
              expr: (Just 55)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just 53)
        - - expr: (fromEnum, '6')
          - Right:
              expr: (Just 54)
        - - expr: (fromEnum, '8')
          - Right:
              expr: (Just 56)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just 48)
    - - - type: ((Int -> Char), Int)
        - type: Maybe Char
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: (Just '\DC2')
        - - expr: (toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: (Just '\a')
        - - expr: (let compose = (.) in compose toEnum toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
- - expr: maybe (sequence (unzip mempty))
  - - - - type: ((Char -> [([Char], Char)]), Maybe Char)
        - type: '[([Char], Char)]'
      - - - expr: (let compose = (.) in compose (zip mempty) mempty, Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '8')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing)
          - Right:
              expr: '[]'
    - - - type: ((Int -> [([Int], Char)]), Maybe Int)
        - type: '[([Int], Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing)
          - Right:
              expr: '[]'
    - - - type: ((Char -> [([Int], Int)]), Maybe Char)
        - type: '[([Int], Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing)
          - Right:
              expr: '[]'
    - - - type: ((Int -> [([Char], Char)]), Maybe Int)
        - type: '[([Char], Char)]'
      - - - expr: (let compose = (.) in compose mempty fromEnum, Just (7))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (-11))
          - Right:
              expr: '[]'
- - expr: let conc = (<>) in maybe (conc mempty unzip)
  - - - - type: |-
            ((Char -> [(Int, Int)] -> ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Nothing, [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '0', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Nothing, [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '7', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '5', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7', [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing, [((6), (6))])
          - Right:
              expr: ([6], [6])
    - - - type: |-
            ((Int -> [(Int, Char)] -> ([Int], [Char])), Maybe Int,
             [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (-11), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing, [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (11), [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (7), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (11), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Just (-11),
               [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (7), [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (18), [])
          - Right:
              expr: ([], "")
    - - - type: |-
            ((Char -> [(Char, Int)] -> ([Char], [Int])), Maybe Char,
             [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.) in compose foldMap mempty, Nothing,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing, [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Nothing, [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just '0',
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty maybe, Just '5', [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '5', [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just '0',
               [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '5', [('6', (6))])
          - Right:
              expr: ("", [])
    - - - type: |-
            ((Char -> [(Int, Char)] -> ([Int], [Char])), Maybe Char,
             [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: (let compose = (.) in compose mempty maybe, Just '8', [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '8', [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '8', [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Just '8',
               [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '8', [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '7', [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [])
          - Right:
              expr: ([], "")
- - expr: let zero = 0 in maybe zero
  - - - - type: ((Char -> Int), Maybe Char)
        - type: Int
      - - - expr: (fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: (fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '8')
          - Right:
              expr: '56'
        - - expr: (fromEnum, Just '8')
          - Right:
              expr: '56'
    - - - type: ((Int -> Int), Maybe Int)
        - type: Int
      - - - expr: (toEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: (toEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: (fromEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (18))
          - Right:
              expr: '18'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (-11))
          - Right:
              expr: (-11)
        - - expr: (toEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: (fromEnum, Just (-11))
          - Right:
              expr: (-11)
- - expr: let compose = (.) in compose zip sequenceA
  - - - - type: (Maybe [Int], [Int])
        - type: '[(Maybe Int, Int)]'
      - - - expr: (Just [(6), (7)], [(6), (7)])
          - Right:
              expr: '[(Just 6, 6), (Just 7, 7)]'
        - - expr: (Just [(6)], [(6), (7)])
          - Right:
              expr: '[(Just 6, 6)]'
        - - expr: (Nothing, [(6)])
          - Right:
              expr: '[(Nothing, 6)]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just [(6), (7)], [(6)])
          - Right:
              expr: '[(Just 6, 6)]'
        - - expr: (Just [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: (Just [(6)], [(6)])
          - Right:
              expr: '[(Just 6, 6)]'
        - - expr: (Nothing, [(6), (7)])
          - Right:
              expr: '[(Nothing, 6)]'
    - - - type: (Maybe [Char], [Int])
        - type: '[(Maybe Char, Int)]'
      - - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just ['6', '5'], [(6), (7)])
          - Right:
              expr: '[(Just ''6'', 6), (Just ''5'', 7)]'
        - - expr: (Just ['6'], [(6), (7)])
          - Right:
              expr: '[(Just ''6'', 6)]'
        - - expr: (Just ['6'], [(6)])
          - Right:
              expr: '[(Just ''6'', 6)]'
        - - expr: (Just ['6'], [])
          - Right:
              expr: '[]'
        - - expr: (Just ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(6), (7)])
          - Right:
              expr: '[(Nothing, 6)]'
        - - expr: (Just ['6', '5'], [(6)])
          - Right:
              expr: '[(Just ''6'', 6)]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just unzip)
  - - - - type: ((Char -> [(Char, Char)]), Char)
        - type: Maybe ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2')
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '0')
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '6')
          - Right:
              expr: (Just ("", ""))
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '8')
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '5')
          - Right:
              expr: (Just ("", ""))
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '1')
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '1')
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '2')
          - Right:
              expr: (Just ("", ""))
    - - - type: ((Int -> [(Char, Char)]), Int)
        - type: Maybe ([Char], [Char])
      - - - expr: (let compose = (.) in compose mempty maybe, (18))
          - Right:
              expr: (Just ("", ""))
        - - expr: (let compose = (.) in compose mempty maybe, (7))
          - Right:
              expr: (Just ("", ""))
        - - expr: (let compose = (.) in compose mempty fromEnum, (-11))
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-11))
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-11))
          - Right:
              expr: (Just ("", ""))
        - - expr: (let compose = (.) in compose (zip mempty) mempty, (18))
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (6))
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (11))
          - Right:
              expr: (Just ("", ""))
    - - - type: ((Int -> [(Int, Int)]), Int)
        - type: Maybe ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (6))
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-20))
          - Right:
              expr: (Just ([], []))
        - - expr: (let compose = (.) in compose mempty maybe, (-9))
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8))
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-11))
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (6))
          - Right:
              expr: (Just ([], []))
        - - expr: (let compose = (.) in compose (zip mempty) mempty, (18))
          - Right:
              expr: (Just ([], []))
        - - expr: (let compose = (.) in compose mempty fromEnum, (11))
          - Right:
              expr: (Just ([], []))
    - - - type: ((Char -> [(Int, Int)]), Char)
        - type: Maybe ([Int], [Int])
      - - - expr: (let compose = (.) in compose (zip mempty) mempty, '8')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '6')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '0')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '6')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '1')
          - Right:
              expr: (Just ([], []))
        - - expr: (let compose = (.) in compose mempty maybe, '2')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '8')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '0')
          - Right:
              expr: (Just ([], []))
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc (conc prepend prepend)
  - - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (11), [(6)])
          - Right:
              expr: '[11, 6, 11, 6]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend toEnum,
               (6), [])
          - Right:
              expr: '[6, 6, 6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (7), [])
          - Right:
              expr: '[7, 7]'
        - - expr: (let prepend = (:) in prepend, (-9), [(6), (7)])
          - Right:
              expr: '[-9, 6, 7, -9, 6, 7, -9, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-8), [])
          - Right:
              expr: '[-8, -8]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6), [(6)])
          - Right:
              expr: '[6, 6, 6, 6]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend toEnum,
               (-11), [])
          - Right:
              expr: '[-11, -11, -11]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-9), [(6), (7)])
          - Right:
              expr: '[-9, 6, 7, -9, 6, 7]'
    - - - type: ((Char -> [Char] -> [Char]), Char, [Char])
        - type: '[Char]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '6', [])
          - Right:
              expr: '"66"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               '2', [])
          - Right:
              expr: '"22"'
        - - expr: (let compose = (.) in compose (compose mempty) elem, '1', [])
          - Right:
              expr: '"11"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7', [])
          - Right:
              expr: '"77"'
        - - expr: (let compose = (.) in compose (compose mempty) elem, '0', [])
          - Right:
              expr: '"00"'
        - - expr: (let compose = (.) in compose foldMap mempty, '5', ['6'])
          - Right:
              expr: '"5656"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '0', ['6', '5'])
          - Right:
              expr: '"065065"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '2', ['6', '5'])
          - Right:
              expr: '"265265"'
- - expr: |-
      let compose = (.)
          zero = 0
        in compose compose (maybe zero)
  - - - - type: ((Int -> Int), (Int -> Maybe Int), Int)
        - type: Int
      - - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (6))
          - Right:
              expr: '6'
        - - expr: (fromEnum, let just = Just in just, (-11))
          - Right:
              expr: (-11)
        - - expr: (toEnum, let just = Just in just, (-8))
          - Right:
              expr: (-8)
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (18))
          - Right:
              expr: '18'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (18))
          - Right:
              expr: '18'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let just = Just in just, (-8))
          - Right:
              expr: (-8)
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-20))
          - Right:
              expr: (-20)
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just in just, (11))
          - Right:
              expr: '11'
    - - - type: ((Char -> Int), (Char -> Maybe Char), Char)
        - type: Int
      - - - expr: (fromEnum, let just = Just in just, '2')
          - Right:
              expr: '50'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just in just, '4')
          - Right:
              expr: '52'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just in just, '0')
          - Right:
              expr: '48'
        - - expr: (fromEnum, let just = Just in just, '7')
          - Right:
              expr: '55'
        - - expr: (fromEnum, let just = Just in just, '8')
          - Right:
              expr: '56'
        - - expr: (fromEnum, let just = Just in just, '5')
          - Right:
              expr: '53'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just in just, '1')
          - Right:
              expr: '49'
        - - expr: (fromEnum, let just = Just in just, '6')
          - Right:
              expr: '54'
    - - - type: ((Char -> Int), (Int -> Maybe Char), Int)
        - type: Int
      - - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18))
          - Right:
              expr: '18'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18))
          - Right:
              expr: '18'
        - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
    - - - type: ((Int -> Int), (Char -> Maybe Int), Char)
        - type: Int
      - - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '6')
          - Right:
              expr: '54'
        - - expr: |-
              (toEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '0')
          - Right:
              expr: '48'
        - - expr: |-
              (toEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2')
          - Right:
              expr: '50'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '6')
          - Right:
              expr: '54'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4')
          - Right:
              expr: '52'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7')
          - Right:
              expr: '55'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2')
          - Right:
              expr: '50'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '1')
          - Right:
              expr: '49'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc (zip mempty)
  - - - - type: ([Int], [(Int, Int)])
        - type: '[(Int, Int)]'
      - - - expr: ([(6), (7)], [((6), (6)), ((7), (7))])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: ([], [((6), (6)), ((7), (7))])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: ([(6)], [((6), (6))])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([(6)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [((6), (6))])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([], [((6), (6))])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([(6)], [((6), (6)), ((7), (7))])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
    - - - type: ([Char], [(Int, Char)])
        - type: '[(Int, Char)]'
      - - - expr: (['6'], [((6), '6'), ((7), '5')])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: (['6'], [((6), '6')])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: (['6', '5'], [((6), '6')])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: (['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], [((6), '6'), ((7), '5')])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: ([], [((6), '6')])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: (['6'], [])
          - Right:
              expr: '[]'
    - - - type: ([Int], [(Char, Int)])
        - type: '[(Char, Int)]'
      - - - expr: ([], [('6', (6))])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: ([(6), (7)], [('6', (6))])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [('6', (6)), ('5', (7))])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: ([(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [('6', (6))])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: ([], [('6', (6)), ('5', (7))])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
    - - - type: ([Char], [(Char, Char)])
        - type: '[(Char, Char)]'
      - - - expr: (['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: ([], [('6', '6')])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], [('6', '6')])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (['6'], [('6', '6')])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: ([], [('6', '6'), ('5', '5')])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: (['6'], [])
          - Right:
              expr: '[]'
        - - expr: (['6'], [('6', '6'), ('5', '5')])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
- - expr: let conc = (<>) in conc (maybe mempty zip)
  - - - - type: ((Maybe [Char] -> [Int] -> [(Char, Int)]), Maybe [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: (let compose = (.) in compose mempty maybe, Just ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just ['6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just ['6'], [])
          - Right:
              expr: '[]'
        - - expr: (maybe (zip mempty) zip, Just ['6'], [(6)])
          - Right:
              expr: '[(''6'', 6), (''6'', 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just ['6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Nothing, [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [(6)])
          - Right:
              expr: '[]'
    - - - type: ((Maybe [Int] -> [Int] -> [(Int, Int)]), Maybe [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Nothing, [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just [(6)], [(6), (7)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing, [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just [(6)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty length, Just [(6), (7)],
               [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just [(6)], [(6), (7)])
          - Right:
              expr: '[(6, 6)]'
    - - - type: ((Maybe [Int] -> [Char] -> [(Int, Char)]), Maybe [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing, ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               Just [(6)], ['6', '5'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just [(6)], [])
          - Right:
              expr: '[]'
        - - expr: (maybe (zip mempty) mempty, Just [(6)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               Nothing, ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just [(6), (7)], ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
    - - - type: ((Maybe [Char] -> [Char] -> [(Char, Char)]), Maybe [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing, ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just ['6', '5'],
               ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: (maybe (zip mempty) mempty, Just ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty sequenceA, Just ['6', '5'],
               [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty length, Nothing, ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty sequence, Nothing, ['6'])
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (prepend (unzip mempty))
  - - - - type: ((Char -> [([Char], [Int])]), Char)
        - type: '[([Char], [Int])]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '7')
          - Right:
              expr: '[("", [])]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '2')
          - Right:
              expr: '[("", [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '2')
          - Right:
              expr: '[("", [])]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '1')
          - Right:
              expr: '[("", [])]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '7')
          - Right:
              expr: '[("", [])]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (prepend mempty) mempty,
               '1')
          - Right:
              expr: '[("", []), ("", [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '0')
          - Right:
              expr: '[("", [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '2')
          - Right:
              expr: '[("", [])]'
    - - - type: ((Int -> [([Int], [Int])]), Int)
        - type: '[([Int], [Int])]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (18))
          - Right:
              expr: '[([], [])]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-8))
          - Right:
              expr: '[([], [])]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (7))
          - Right:
              expr: '[([], [])]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-9))
          - Right:
              expr: '[([], [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-9))
          - Right:
              expr: '[([], [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-20))
          - Right:
              expr: '[([], [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (11))
          - Right:
              expr: '[([], [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-11))
          - Right:
              expr: '[([], [])]'
    - - - type: ((Int -> [([Int], [Char])]), Int)
        - type: '[([Int], [Char])]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-20))
          - Right:
              expr: '[([], "")]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, (18))
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11))
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-9))
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (prepend mempty) mempty,
               (18))
          - Right:
              expr: '[([], ""), ([], "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (6))
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8))
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (7))
          - Right:
              expr: '[([], "")]'
    - - - type: ((Char -> [([Int], [Char])]), Char)
        - type: '[([Int], [Char])]'
      - - - expr: (let compose = (.) in compose (zip mempty) mempty, '4')
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '4')
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '7')
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '6')
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '1')
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '6')
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (prepend mempty) mempty,
               '4')
          - Right:
              expr: '[([], ""), ([], "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '5')
          - Right:
              expr: '[([], "")]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose zip mempty)
  - - - - type: ((Char -> [Int] -> [(Int, Int)]), Char, [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               '7', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               '5', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '8', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '1', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '6', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '6', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '1', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '5', [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Char] -> [(Int, Char)]), Char, [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '8', ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip mempty, '5', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '2', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose zip (sequence mempty), '8',
               ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip (sequence mempty), '5', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '4', ['6', '5'])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Int] -> [(Char, Int)]), Int, [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-8), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (7), [(6)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip (sequence mempty), (7), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose zip (sequenceA mempty), (-9),
               [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-11), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip (sequence mempty), (-20), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (6), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-9), [])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Char] -> [(Char, Char)]), Int, [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-8), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6), ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, (-11), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (11), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose zip (sequence mempty), (-9),
               ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose zip (sequenceA mempty), (-11),
               ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-20), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (11), ['6'])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose (compose zip) fmap
  - - - - type: ((Int -> Int), [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, [(6)], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum toEnum, [], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, [], ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum toEnum, [(6)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: (toEnum, [], ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum toEnum, [], ['6'])
          - Right:
              expr: '[]'
        - - expr: (toEnum, [(6), (7)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
    - - - type: ((Int -> Char), [Int], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (toEnum, [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum toEnum, [], [])
          - Right:
              expr: '[]'
        - - expr: (toEnum, [(6), (7)], ['6', '5'])
          - Right:
              expr: '[(''\ACK'', ''6''), (''\a'', ''5'')]'
        - - expr: (toEnum, [(6)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum, [(6), (7)],
               ['6', '5'])
          - Right:
              expr: '[(''\ACK'', ''6''), (''\a'', ''5'')]'
        - - expr: (let compose = (.) in compose toEnum toEnum, [(6)], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, [(6), (7)], ['6'])
          - Right:
              expr: '[(''\ACK'', ''6'')]'
    - - - type: ((Char -> Char), [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, [], [(6)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, ['6'], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, ['6', '5'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, ['6'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, ['6', '5'],
               [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, ['6'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6)]'
    - - - type: ((Int -> Char), [Int], [Int])
        - type: '[(Char, Int)]'
      - - - expr: (toEnum, [(6)], [(6), (7)])
          - Right:
              expr: '[(''\ACK'', 6)]'
        - - expr: (let compose = (.) in compose toEnum toEnum, [], [(6)])
          - Right:
              expr: '[]'
        - - expr: (toEnum, [], [])
          - Right:
              expr: '[]'
        - - expr: (toEnum, [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (toEnum, [(6)], [(6)])
          - Right:
              expr: '[(''\ACK'', 6)]'
        - - expr: (toEnum, [(6), (7)], [(6)])
          - Right:
              expr: '[(''\ACK'', 6)]'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum, [(6), (7)],
               [(6), (7)])
          - Right:
              expr: '[(''\ACK'', 6), (''\a'', 7)]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, [], [(6)])
          - Right:
              expr: '[]'
- - expr: maybe (zip mempty) mempty
  - - - - type: (Maybe Char, [Char])
        - type: '[(Int, Char)]'
      - - - expr: (Nothing, ['6'])
          - Right:
              expr: '[]'
        - - expr: (Just '8', [])
          - Right:
              expr: '[]'
        - - expr: (Just '7', [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Just '0', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Just '7', ['6'])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just '5', [])
          - Right:
              expr: '[]'
    - - - type: (Maybe Int, [Char])
        - type: '[(Char, Char)]'
      - - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just (18), [])
          - Right:
              expr: '[]'
        - - expr: (Just (-11), ['6'])
          - Right:
              expr: '[]'
        - - expr: (Just (-11), [])
          - Right:
              expr: '[]'
        - - expr: (Just (-11), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Just (18), ['6'])
          - Right:
              expr: '[]'
        - - expr: (Just (7), ['6', '5'])
          - Right:
              expr: '[]'
    - - - type: (Maybe Char, [Int])
        - type: '[(Int, Int)]'
      - - - expr: (Just '7', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just '0', [])
          - Right:
              expr: '[]'
        - - expr: (Just '8', [(6)])
          - Right:
              expr: '[]'
        - - expr: (Just '5', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just '5', [(6)])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(6)])
          - Right:
              expr: '[]'
    - - - type: (Maybe Char, [Char])
        - type: '[(Char, Char)]'
      - - - expr: (Just '7', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Just '7', [])
          - Right:
              expr: '[]'
        - - expr: (Just '0', [])
          - Right:
              expr: '[]'
        - - expr: (Just '0', ['6'])
          - Right:
              expr: '[]'
        - - expr: (Just '0', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Just '7', ['6'])
          - Right:
              expr: '[]'
        - - expr: (Just '5', [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just length))
  - - - - type: ((Char -> [] Char), Char)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose mempty maybe, '8')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '8')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '2')
          - Right:
              expr: (Just 0)
        - - expr: (let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '5')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '2')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '5')
          - Right:
              expr: (Just 0)
    - - - type: ((Char -> [] Int), Char)
        - type: Maybe Int
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '2')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '4')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               '2')
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '5')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '4')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5')
          - Right:
              expr: (Just 0)
        - - expr: (let compose = (.) in compose mempty maybe, '7')
          - Right:
              expr: (Just 0)
    - - - type: ((Int -> Maybe Int), Int)
        - type: Maybe Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9))
          - Right:
              expr: (Just 1)
        - - expr: (let just = Just in just, (6))
          - Right:
              expr: (Just 1)
        - - expr: (let just = Just in just, (18))
          - Right:
              expr: (Just 1)
        - - expr: (let just = Just in just, (-8))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-8))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (11))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (7))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (11))
          - Right:
              expr: (Just 1)
- - expr: |-
      let just = Just
          zero = 0
          tpl = (,)
        in maybe (tpl (just zero))
  - - - - type: ((Int -> Int -> (Maybe Int, Int)), Maybe Int, Int)
        - type: (Maybe Int, Int)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Just (11), (6))
          - Right:
              expr: (Just 11, 6)
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Nothing, (11))
          - Right:
              expr: (Just 0, 11)
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Nothing, (-9))
          - Right:
              expr: (Just 0, -9)
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Just (11), (11))
          - Right:
              expr: (Just 11, 11)
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Just (18), (-11))
          - Right:
              expr: (Just 18, -11)
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Just (-11), (6))
          - Right:
              expr: (Just (-11), 6)
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Just (11), (-20))
          - Right:
              expr: (Just 11, -20)
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Just (18), (11))
          - Right:
              expr: (Just 18, 11)
    - - - type: ((Int -> Char -> (Maybe Int, Char)), Maybe Int, Char)
        - type: (Maybe Int, Char)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Nothing, '5')
          - Right:
              expr: (Just 0, '5')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Just (-11), '0')
          - Right:
              expr: (Just (-11), '0')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Just (-11), '1')
          - Right:
              expr: (Just (-11), '1')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Just (18), '0')
          - Right:
              expr: (Just 18, '0')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Nothing, '6')
          - Right:
              expr: (Just 0, '6')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Just (7), '7')
          - Right:
              expr: (Just 7, '7')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Just (-11), '2')
          - Right:
              expr: (Just (-11), '2')
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose tpl just,
               Just (11), '5')
          - Right:
              expr: (Just 11, '5')
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose maybe (prepend zero)
  - - - - type: ([Int], (Char -> [Int]), Maybe Char)
        - type: '[Int]'
      - - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               Just '5')
          - Right:
              expr: '[0]'
        - - expr: |-
              ([],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               Just '0')
          - Right:
              expr: '[0]'
        - - expr: |-
              ([(6)],
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '0')
          - Right:
              expr: '[]'
    - - - type: ([Int], (Int -> [Int]), Maybe Int)
        - type: '[Int]'
      - - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Nothing)
          - Right:
              expr: '[0]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (18))
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (18))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (11))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing)
          - Right:
              expr: '[0, 6]'
        - - expr: |-
              ([],
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (7))
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose foldMap (compose unzip)
  - - - - type: ((Int -> [(Int, Char)]), Maybe Int)
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (-11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (7))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing)
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty fromEnum, Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (11))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (11))
          - Right:
              expr: ([], "")
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend (zip mempty)
  - - - - type: ([Int], [[(Int, Int)]])
        - type: '[[(Int, Int)]]'
      - - - expr: ([(6)], [[], [((6), (6)), ((7), (7))]])
          - Right:
              expr: '[[], [], [(6, 6), (7, 7)]]'
        - - expr: ([(6), (7)], [])
          - Right:
              expr: '[[]]'
        - - expr: ([(6), (7)], [[], [((6), (6)), ((7), (7))]])
          - Right:
              expr: '[[], [], [(6, 6), (7, 7)]]'
        - - expr: ([(6), (7)], [[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([(6), (7)], [[], [((6), (6)), ((7), (7))], [((6), (6))]])
          - Right:
              expr: '[[], [], [(6, 6), (7, 7)], [(6, 6)]]'
        - - expr: ([], [[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([(6)], [[], [((6), (6)), ((7), (7))], [((6), (6))]])
          - Right:
              expr: '[[], [], [(6, 6), (7, 7)], [(6, 6)]]'
        - - expr: ([], [[], [((6), (6)), ((7), (7))]])
          - Right:
              expr: '[[], [], [(6, 6), (7, 7)]]'
    - - - type: ([Char], [[(Int, Char)]])
        - type: '[[(Int, Char)]]'
      - - - expr: ([], [[], [((6), '6'), ((7), '5')], [((6), '6')]])
          - Right:
              expr: '[[], [], [(6, ''6''), (7, ''5'')], [(6, ''6'')]]'
        - - expr: (['6'], [[], [((6), '6'), ((7), '5')]])
          - Right:
              expr: '[[], [], [(6, ''6''), (7, ''5'')]]'
        - - expr: ([], [[], [((6), '6'), ((7), '5')]])
          - Right:
              expr: '[[], [], [(6, ''6''), (7, ''5'')]]'
        - - expr: ([], [[]])
          - Right:
              expr: '[[], []]'
        - - expr: (['6', '5'], [])
          - Right:
              expr: '[[]]'
        - - expr: (['6'], [])
          - Right:
              expr: '[[]]'
        - - expr: ([], [])
          - Right:
              expr: '[[]]'
        - - expr: (['6'], [[]])
          - Right:
              expr: '[[], []]'
    - - - type: ([Int], [[(Char, Int)]])
        - type: '[[(Char, Int)]]'
      - - - expr: ([], [[], [('6', (6)), ('5', (7))]])
          - Right:
              expr: '[[], [], [(''6'', 6), (''5'', 7)]]'
        - - expr: ([], [])
          - Right:
              expr: '[[]]'
        - - expr: ([(6), (7)], [[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([], [[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([(6), (7)], [[], [('6', (6)), ('5', (7))]])
          - Right:
              expr: '[[], [], [(''6'', 6), (''5'', 7)]]'
        - - expr: ([(6)], [[], [('6', (6)), ('5', (7))], [('6', (6))]])
          - Right:
              expr: '[[], [], [(''6'', 6), (''5'', 7)], [(''6'', 6)]]'
        - - expr: ([(6), (7)], [])
          - Right:
              expr: '[[]]'
        - - expr: ([(6)], [])
          - Right:
              expr: '[[]]'
    - - - type: ([Char], [[(Char, Char)]])
        - type: '[[(Char, Char)]]'
      - - - expr: ([], [[], [('6', '6'), ('5', '5')]])
          - Right:
              expr: '[[], [], [(''6'', ''6''), (''5'', ''5'')]]'
        - - expr: (['6'], [])
          - Right:
              expr: '[[]]'
        - - expr: (['6'], [[], [('6', '6'), ('5', '5')], [('6', '6')]])
          - Right:
              expr: '[[], [], [(''6'', ''6''), (''5'', ''5'')], [(''6'', ''6'')]]'
        - - expr: ([], [[]])
          - Right:
              expr: '[[], []]'
        - - expr: (['6'], [[], [('6', '6'), ('5', '5')]])
          - Right:
              expr: '[[], [], [(''6'', ''6''), (''5'', ''5'')]]'
        - - expr: ([], [])
          - Right:
              expr: '[[]]'
        - - expr: ([], [[], [('6', '6'), ('5', '5')], [('6', '6')]])
          - Right:
              expr: '[[], [], [(''6'', ''6''), (''5'', ''5'')], [(''6'', ''6'')]]'
        - - expr: (['6', '5'], [[], [('6', '6'), ('5', '5')], [('6', '6')]])
          - Right:
              expr: '[[], [], [(''6'', ''6''), (''5'', ''5'')], [(''6'', ''6'')]]'
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero) unzip
  - - - - type: '[(Int, Char)]'
        - type: (Int, ([Int], [Char]))
      - - - expr: ([])
          - Right:
              expr: (0, ([], ""))
        - - expr: ([((6), '6'), ((7), '5')])
          - Right:
              expr: (0, ([6, 7], "65"))
        - - expr: ([((6), '6')])
          - Right:
              expr: (0, ([6], "6"))
    - - - type: '[(Char, Int)]'
        - type: (Int, ([Char], [Int]))
      - - - expr: ([])
          - Right:
              expr: (0, ("", []))
        - - expr: ([('6', (6))])
          - Right:
              expr: (0, ("6", [6]))
        - - expr: ([('6', (6)), ('5', (7))])
          - Right:
              expr: (0, ("65", [6, 7]))
    - - - type: '[(Int, Int)]'
        - type: (Int, ([Int], [Int]))
      - - - expr: ([((6), (6))])
          - Right:
              expr: (0, ([6], [6]))
        - - expr: ([])
          - Right:
              expr: (0, ([], []))
        - - expr: ([((6), (6)), ((7), (7))])
          - Right:
              expr: (0, ([6, 7], [6, 7]))
    - - - type: '[(Char, Char)]'
        - type: (Int, ([Char], [Char]))
      - - - expr: ([])
          - Right:
              expr: (0, ("", ""))
        - - expr: ([('6', '6')])
          - Right:
              expr: (0, ("6", "6"))
        - - expr: ([('6', '6'), ('5', '5')])
          - Right:
              expr: (0, ("65", "65"))
- - expr: let conc = (<>) in conc (zip mempty mempty)
  - - - - type: '[(Char, Char)]'
        - type: '[(Char, Char)]'
      - - - expr: ([('6', '6'), ('5', '5')])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([('6', '6')])
          - Right:
              expr: '[(''6'', ''6'')]'
    - - - type: '[(Int, Char)]'
        - type: '[(Int, Char)]'
      - - - expr: ([((6), '6'), ((7), '5')])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: ([((6), '6')])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: ([])
          - Right:
              expr: '[]'
    - - - type: '[(Char, Int)]'
        - type: '[(Char, Int)]'
      - - - expr: ([('6', (6))])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: ([('6', (6)), ('5', (7))])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: ([])
          - Right:
              expr: '[]'
    - - - type: '[(Int, Int)]'
        - type: '[(Int, Int)]'
      - - - expr: ([((6), (6)), ((7), (7))])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: ([((6), (6))])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose (maybe unzip) foldMap
  - - - - type: |-
            ((Int -> [(Char, Char)] -> ([Char], [Char])), Maybe (Maybe Int),
             [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just (Just (7)), [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc unzip) mempty,
               Nothing, [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just (Just (18)),
               [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (Just (-11)), [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing, [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (Just (7)), [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (Just (7)), [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (Just (18)), [('6', '6')])
          - Right:
              expr: ("", "")
    - - - type: |-
            ((Char -> [(Int, Char)] -> ([Int], [Char])), Maybe (Maybe Char),
             [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty,
               Just (Just '8'), [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc unzip) mempty,
               Just (Just '7'), [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: (let compose = (.) in compose mempty maybe, Just (Just '8'), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing, [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc unzip) mempty,
               Just (Just '8'), [])
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose foldMap mempty, Just (Just '7'), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (Just '8'), [((6), '6')])
          - Right:
              expr: ([], "")
- - expr: maybe (sequenceA (unzip mempty))
  - - - - type: ((Char -> [([Char], Char)]), Maybe Char)
        - type: '[([Char], Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '7')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '8')
          - Right:
              expr: '[]'
    - - - type: ((Int -> [([Int], Int)]), Maybe Int)
        - type: '[([Int], Int)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (7))
          - Right:
              expr: '[]'
    - - - type: ((Char -> [([Int], Char)]), Maybe Char)
        - type: '[([Int], Char)]'
      - - - expr: (let compose = (.) in compose mempty fromEnum, Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing)
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing)
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '7')
          - Right:
              expr: '[]'
    - - - type: ((Int -> [([Char], Int)]), Maybe Int)
        - type: '[([Char], Int)]'
      - - - expr: (let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, Just (18))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (7))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, Just (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (11))
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend fromEnum)
  - - - - type: ((Int -> Char), Int, [Int])
        - type: '[Int]'
      - - - expr: (toEnum, (7), [(6)])
          - Right:
              expr: '[7, 6]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-9), [])
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-8), [(6)])
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (11), [])
          - Right:
              expr: '[11]'
        - - expr: (toEnum, (-9), [])
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (18), [(6)])
          - Right:
              expr: '[18, 6]'
        - - expr: (toEnum, (18), [(6)])
          - Right:
              expr: '[18, 6]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), [(6), (7)])
          - Left: '"Prelude.chr: bad argument: (-20)"'
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '5', [(6), (7)])
          - Right:
              expr: '[53, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', [])
          - Right:
              expr: '[52]'
        - - expr: (fromEnum, '6', [(6)])
          - Right:
              expr: '[54, 6]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', [(6), (7)])
          - Right:
              expr: '[48, 6, 7]'
        - - expr: (fromEnum, '2', [(6), (7)])
          - Right:
              expr: '[50, 6, 7]'
        - - expr: (fromEnum, '7', [])
          - Right:
              expr: '[55]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', [])
          - Right:
              expr: '[55]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', [(6), (7)])
          - Right:
              expr: '[50, 6, 7]'
    - - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
      - - - expr: (toEnum, (-11), [(6), (7)])
          - Right:
              expr: '[-11, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8), [])
          - Right:
              expr: '[-8]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (7), [])
          - Right:
              expr: '[7]'
        - - expr: (toEnum, (11), [])
          - Right:
              expr: '[11]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), [])
          - Right:
              expr: '[-20]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), [(6)])
          - Right:
              expr: '[-20, 6]'
        - - expr: (fromEnum, (-20), [(6), (7)])
          - Right:
              expr: '[-20, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8), [(6), (7)])
          - Right:
              expr: '[-8, 6, 7]'
    - - - type: ((Char -> Char), Char, [Int])
        - type: '[Int]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '1', [(6)])
          - Right:
              expr: '[49, 6]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', [(6)])
          - Right:
              expr: '[50, 6]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', [])
          - Right:
              expr: '[49]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', [(6), (7)])
          - Right:
              expr: '[52, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', [])
          - Right:
              expr: '[55]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', [(6), (7)])
          - Right:
              expr: '[53, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', [(6), (7)])
          - Right:
              expr: '[56, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', [(6), (7)])
          - Right:
              expr: '[49, 6, 7]'
- - expr: let compose = (.) in compose (compose unzip mempty)
  - - - - type: ((Char -> Int), Char)
        - type: ([Int], [Char])
      - - - expr: (fromEnum, '7')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: ([], "")
        - - expr: (fromEnum, '1')
          - Right:
              expr: ([], "")
        - - expr: (fromEnum, '5')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: ([], "")
        - - expr: (fromEnum, '0')
          - Right:
              expr: ([], "")
        - - expr: (fromEnum, '8')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: ([], "")
    - - - type: ((Char -> Int), Char)
        - type: ([Char], [Char])
      - - - expr: (fromEnum, '8')
          - Right:
              expr: ("", "")
        - - expr: (fromEnum, '0')
          - Right:
              expr: ("", "")
        - - expr: (fromEnum, '6')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: ("", "")
        - - expr: (fromEnum, '4')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: ("", "")
        - - expr: (fromEnum, '7')
          - Right:
              expr: ("", "")
    - - - type: ((Char -> Char), Char)
        - type: ([Int], [Int])
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: ([], [])
    - - - type: ((Int -> Char), Int)
        - type: ([Int], [Char])
      - - - expr: (let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: ([], "")
        - - expr: (toEnum, (18))
          - Right:
              expr: ([], "")
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (maybe mempty) prepend
  - - - - type: (Int, Maybe [Int])
        - type: '[Int]'
      - - - expr: ((6), Just [(6), (7)])
          - Right:
              expr: '[6, 6, 7]'
        - - expr: ((-9), Nothing)
          - Right:
              expr: '[]'
        - - expr: ((-8), Just [(6), (7)])
          - Right:
              expr: '[-8, 6, 7]'
        - - expr: ((11), Just [(6), (7)])
          - Right:
              expr: '[11, 6, 7]'
        - - expr: ((18), Just [(6)])
          - Right:
              expr: '[18, 6]'
        - - expr: ((-20), Just [(6), (7)])
          - Right:
              expr: '[-20, 6, 7]'
        - - expr: ((6), Nothing)
          - Right:
              expr: '[]'
        - - expr: ((-11), Just [(6), (7)])
          - Right:
              expr: '[-11, 6, 7]'
    - - - type: (Char, Maybe [Char])
        - type: '[Char]'
      - - - expr: ('8', Just ['6'])
          - Right:
              expr: '"86"'
        - - expr: ('4', Nothing)
          - Right:
              expr: '""'
        - - expr: ('7', Just ['6'])
          - Right:
              expr: '"76"'
        - - expr: ('2', Just ['6', '5'])
          - Right:
              expr: '"265"'
        - - expr: ('2', Nothing)
          - Right:
              expr: '""'
        - - expr: ('0', Just ['6'])
          - Right:
              expr: '"06"'
        - - expr: ('5', Just ['6', '5'])
          - Right:
              expr: '"565"'
        - - expr: ('4', Just ['6', '5'])
          - Right:
              expr: '"465"'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose fmap prepend)
  - - - - type: ((Char -> Int), Char, Maybe [Int])
        - type: Maybe [Int]
      - - - expr: (fromEnum, '7', Just [(6)])
          - Right:
              expr: (Just [55, 6])
        - - expr: (fromEnum, '8', Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, '0',
               Just [(6), (7)])
          - Right:
              expr: (Just [48, 6, 7])
        - - expr: (fromEnum, '4', Nothing)
          - Right:
              expr: Nothing
        - - expr: (fromEnum, '7', Nothing)
          - Right:
              expr: Nothing
        - - expr: (fromEnum, '2', Just [(6), (7)])
          - Right:
              expr: (Just [50, 6, 7])
        - - expr: (fromEnum, '4', Just [(6)])
          - Right:
              expr: (Just [52, 6])
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', Nothing)
          - Right:
              expr: Nothing
    - - - type: ((Char -> Char), Char, Maybe [Char])
        - type: Maybe [Char]
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '7', Just ['6'])
          - Right:
              expr: (Just "76")
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', Just ['6'])
          - Right:
              expr: (Just "86")
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', Just ['6'])
          - Right:
              expr: (Just "26")
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, '4',
               Just ['6', '5'])
          - Right:
              expr: (Just "465")
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, '5',
               Just ['6', '5'])
          - Right:
              expr: (Just "565")
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', Just ['6'])
          - Right:
              expr: (Just "56")
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', Just ['6'])
          - Right:
              expr: (Just "46")
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend length)
  - - - - type: ((Int -> [] Int), Int, [Int])
        - type: '[Int]'
      - - - expr: (let compose = (.) in compose mempty maybe, (-9), [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-9), [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (7), [])
          - Right:
              expr: '[0]'
        - - expr: (let compose = (.) in compose mempty maybe, (-11), [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               (-9), [(6), (7)])
          - Right:
              expr: '[1, 6, 7]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-9), [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: (let compose = (.) in compose mempty maybe, (7), [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11), [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
    - - - type: ((Int -> Maybe Int), Int, [Int])
        - type: '[Int]'
      - - - expr: (let just = Just in just, (7), [(6)])
          - Right:
              expr: '[1, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18), [(6)])
          - Right:
              expr: '[1, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11), [])
          - Right:
              expr: '[1]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (6), [(6), (7)])
          - Right:
              expr: '[1, 6, 7]'
        - - expr: (let just = Just in just, (-11), [])
          - Right:
              expr: '[1]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7), [])
          - Right:
              expr: '[1]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18), [])
          - Right:
              expr: '[1]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8), [(6)])
          - Right:
              expr: '[1, 6]'
    - - - type: ((Int -> Maybe Char), Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (11), [(6)])
          - Right:
              expr: '[1, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11), [(6), (7)])
          - Right:
              expr: '[1, 6, 7]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18), [])
          - Right:
              expr: '[1]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7), [(6), (7)])
          - Right:
              expr: '[1, 6, 7]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8), [(6), (7)])
          - Right:
              expr: '[1, 6, 7]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7), [(6)])
          - Right:
              expr: '[1, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9), [(6)])
          - Right:
              expr: '[1, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7), [])
          - Right:
              expr: '[1]'
    - - - type: ((Int -> [] Char), Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-11), [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: (let compose = (.) in compose mempty maybe, (-11), [])
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-20), [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: (let compose = (.) in compose mempty maybe, (7), [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8), [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-20), [])
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-9), [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (18), [])
          - Right:
              expr: '[0]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (maybe sequenceA prepend)
  - - - - type: ((Int -> Maybe [Char]), Int, [[Char]])
        - type: '[[Char]]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (7), [[], ['6', '5'], ['6']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-9), [[], ['6', '5'], ['6']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (7), [[], ['6', '5'], ['6']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (11), [[]])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (-8), [])
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (18), [])
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (18), [[]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11), [])
          - Right:
              expr: '[""]'
    - - - type: ((Char -> Maybe [Char]), Char, [[Char]])
        - type: '[[Char]]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '8', [[], ['6', '5']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '4', [])
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '8', [[], ['6', '5'], ['6']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '5', [[], ['6', '5'], ['6']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '4', [[], ['6', '5'], ['6']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '6', [])
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '8', [[], ['6', '5'], ['6']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5', [[], ['6', '5']])
          - Right:
              expr: '[]'
    - - - type: ((Int -> Maybe [Int]), Int, [[Int]])
        - type: '[[Int]]'
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-11), [[]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (11), [])
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (6), [[], [(6), (7)]])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (-8), [[]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-11), [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (11), [[], [(6), (7)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-11), [[], [(6), (7)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-20), [])
          - Right:
              expr: '[[]]'
    - - - type: ((Char -> Maybe [Int]), Char, [[Int]])
        - type: '[[Int]]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '0', [[], [(6), (7)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '7', [[], [(6), (7)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '1', [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5', [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '6', [])
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, '1',
               [[], [(6), (7)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '7', [[]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7', [[]])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose (compose sequence sequence)
  - - - - type: ((Int -> [] (Maybe Int)), Int)
        - type: '[] (Maybe Int)'
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (18))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-9))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-11))
          - Right:
              expr: '[]'
    - - - type: ((Int -> [] ([] Char)), Int)
        - type: '[] ([] Char)'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-9))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-9))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (11))
          - Right:
              expr: '[]'
    - - - type: ((Int -> Maybe ([] Int)), Int)
        - type: Maybe ([] Int)
      - - - expr: (let compose = (.) in compose mempty maybe, (-8))
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               (-20))
          - Right:
              expr: (Just [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (6))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (18))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6))
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               (18))
          - Right:
              expr: (Just [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-11))
          - Right:
              expr: Nothing
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-8))
          - Right:
              expr: Nothing
    - - - type: ((Char -> [] ([] Int)), Char)
        - type: '[] ([] Int)'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '4')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '6')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (prepend mempty) mempty,
               '8')
          - Right:
              expr: '[[]]'
- - expr: let compose = (.) in compose (compose zip) foldMap
  - - - - type: ((Int -> [Char]), Maybe Int, [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing, ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (18), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing, ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (-11), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (18), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (18), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (11), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Nothing, ['6'])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Char]), Maybe Char, [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '8', ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just '5', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '5', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing, ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '0', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '7', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '5', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '5', ['6'])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Char]), Maybe Char, [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '0', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '5', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '8', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '7', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing, [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just '5',
               [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just '7', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing, [(6), (7)])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose fmap (compose unzip)
  - - - - type: ((Char -> [(Char, Int)]), Maybe Char)
        - type: Maybe ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '5')
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '0')
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '8')
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose (zip mempty) mempty, Just '8')
          - Right:
              expr: (Just ("", []))
    - - - type: ((Int -> [(Int, Char)]), Maybe Int)
        - type: Maybe ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (-11))
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (7))
          - Right:
              expr: (Just ([], ""))
        - - expr: (let compose = (.) in compose (zip mempty) mempty, Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7))
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (7))
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (7))
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (7))
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (-11))
          - Right:
              expr: (Just ([], ""))
- - expr: let conc = (<>) in conc (maybe mempty unzip)
  - - - - type: ((Maybe [(Int, Char)] -> ([Int], [Char])), Maybe [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               Just [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.) in compose unzip mempty,
               Just [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: (let compose = (.) in compose unzip mempty, Nothing)
          - Right:
              expr: ([], "")
        - - expr: (maybe mempty unzip, Just [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7, 6, 7], "6565")
        - - expr: (maybe mempty mempty, Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
    - - - type: ((Maybe [(Char, Int)] -> ([Char], [Int])), Maybe [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: (maybe (unzip mempty) unzip, Just [('6', (6))])
          - Right:
              expr: ("66", [6, 6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               Nothing)
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: (maybe (unzip mempty) unzip, Just [('6', (6)), ('5', (7))])
          - Right:
              expr: ("6565", [6, 7, 6, 7])
        - - expr: (let compose = (.) in compose mempty sequence, Just [('6', (6))])
          - Right:
              expr: ("6", [6])
    - - - type: ((Maybe [(Int, Int)] -> ([Int], [Int])), Maybe [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose unzip (sequence mempty),
               Just [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: (let compose = (.) in compose unzip mempty, Just [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: (let compose = (.) in compose mempty maybe, Just [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: (maybe (unzip mempty) mempty, Nothing)
          - Right:
              expr: ([], [])
    - - - type: ((Maybe [(Char, Char)] -> ([Char], [Char])), Maybe [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: (maybe mempty mempty, Just [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing)
          - Right:
              expr: ("", "")
        - - expr: (maybe mempty mempty, Just [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing)
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty length, Nothing)
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty sequenceA, Nothing)
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose unzip (sequenceA mempty), Nothing)
          - Right:
              expr: ("", "")
        - - expr: (maybe (unzip mempty) mempty, Just [('6', '6')])
          - Right:
              expr: ("6", "6")
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc unzip mempty)
  - - - - type: ((Int -> [(Int, Int)]), Int)
        - type: ([Int], [Int])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (6))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (6))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (11))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty fromEnum, (-9))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (18))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-9))
          - Right:
              expr: ([], [])
    - - - type: ((Char -> [(Char, Char)]), Char)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '6')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '1')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '2')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '4')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '6')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '0')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, '1')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '2')
          - Right:
              expr: ("", "")
    - - - type: ((Int -> [(Char, Char)]), Int)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-8))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (18))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (18))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-8))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-9))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (6))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-8))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: ("", "")
    - - - type: ((Char -> [(Char, Int)]), Char)
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '0')
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty maybe, '7')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '5')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '6')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '4')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '2')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '0')
          - Right:
              expr: ("", [])
- - expr: let compose = (.) in compose zip mempty
  - - - - type: (Int, [Char])
        - type: '[(Char, Char)]'
      - - - expr: ((-9), [])
          - Right:
              expr: '[]'
        - - expr: ((-20), ['6'])
          - Right:
              expr: '[]'
        - - expr: ((-20), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((11), [])
          - Right:
              expr: '[]'
        - - expr: ((-8), [])
          - Right:
              expr: '[]'
        - - expr: ((6), [])
          - Right:
              expr: '[]'
        - - expr: ((18), ['6'])
          - Right:
              expr: '[]'
        - - expr: ((6), ['6', '5'])
          - Right:
              expr: '[]'
    - - - type: (Int, [Char])
        - type: '[(Int, Char)]'
      - - - expr: ((-20), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((-20), ['6'])
          - Right:
              expr: '[]'
        - - expr: ((-8), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((11), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((11), [])
          - Right:
              expr: '[]'
        - - expr: ((-8), ['6'])
          - Right:
              expr: '[]'
        - - expr: ((-9), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((-11), [])
          - Right:
              expr: '[]'
    - - - type: (Int, [Int])
        - type: '[(Int, Int)]'
      - - - expr: ((11), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((-20), [])
          - Right:
              expr: '[]'
        - - expr: ((18), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((-11), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((7), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((6), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((-9), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((18), [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: (Int, [Int])
        - type: '[(Char, Int)]'
      - - - expr: ((-8), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((-20), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((6), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((-11), [])
          - Right:
              expr: '[]'
        - - expr: ((11), [])
          - Right:
              expr: '[]'
        - - expr: ((-11), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((7), [])
          - Right:
              expr: '[]'
        - - expr: ((7), [(6), (7)])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose zip (zip mempty)
  - - - - type: ([Char], [Char])
        - type: '[((Int, Char), Char)]'
      - - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (['6'], [])
          - Right:
              expr: '[]'
        - - expr: (['6'], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (['6'], ['6'])
          - Right:
              expr: '[]'
        - - expr: ([], ['6'])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], ['6'])
          - Right:
              expr: '[]'
    - - - type: ([Int], [Int])
        - type: '[((Int, Int), Int)]'
      - - - expr: ([(6)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ([], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [(6)])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ([], [(6)])
          - Right:
              expr: '[]'
    - - - type: ([Int], [Char])
        - type: '[((Int, Int), Char)]'
      - - - expr: ([(6)], ['6'])
          - Right:
              expr: '[]'
        - - expr: ([], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], ['6'])
          - Right:
              expr: '[]'
        - - expr: ([(6)], ['6', '5'])
          - Right:
              expr: '[]'
    - - - type: ([Int], [Int])
        - type: '[((Char, Int), Int)]'
      - - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ([], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ([], [(6)])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [(6)])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [(6)])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose (compose zip) zip
  - - - - type: ([Char], [Char], [Char])
        - type: '[((Char, Char), Char)]'
      - - - expr: ([], ['6'], ['6'])
          - Right:
              expr: '[]'
        - - expr: ([], [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], ['6'], ['6', '5'])
          - Right:
              expr: '[((''6'', ''6''), ''6'')]'
        - - expr: (['6'], ['6'], [])
          - Right:
              expr: '[]'
        - - expr: ([], ['6', '5'], ['6'])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], ['6', '5'], ['6', '5'])
          - Right:
              expr: '[((''6'', ''6''), ''6''), ((''5'', ''5''), ''5'')]'
        - - expr: (['6', '5'], ['6'], [])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], [], [])
          - Right:
              expr: '[]'
    - - - type: ([Char], [Int], [Char])
        - type: '[((Char, Int), Char)]'
      - - - expr: (['6'], [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ([], [(6)], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (['6'], [(6)], ['6', '5'])
          - Right:
              expr: '[((''6'', 6), ''6'')]'
        - - expr: (['6'], [(6), (7)], ['6'])
          - Right:
              expr: '[((''6'', 6), ''6'')]'
        - - expr: ([], [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (['6'], [(6)], [])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], [(6)], ['6'])
          - Right:
              expr: '[((''6'', 6), ''6'')]'
        - - expr: (['6'], [(6), (7)], ['6', '5'])
          - Right:
              expr: '[((''6'', 6), ''6'')]'
    - - - type: ([Int], [Int], [Int])
        - type: '[((Int, Int), Int)]'
      - - - expr: ([], [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [], [(6)])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [(6)], [(6)])
          - Right:
              expr: '[((6, 6), 6)]'
        - - expr: ([], [], [(6)])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [(6)], [(6)])
          - Right:
              expr: '[((6, 6), 6)]'
        - - expr: ([], [(6), (7)], [(6)])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [], [(6)])
          - Right:
              expr: '[]'
    - - - type: ([Int], [Int], [Char])
        - type: '[((Int, Int), Char)]'
      - - - expr: ([], [], ['6'])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [(6)], [])
          - Right:
              expr: '[]'
        - - expr: ([], [], [])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [(6), (7)], ['6', '5'])
          - Right:
              expr: '[((6, 6), ''6''), ((7, 7), ''5'')]'
        - - expr: ([(6)], [(6)], ['6', '5'])
          - Right:
              expr: '[((6, 6), ''6'')]'
        - - expr: ([], [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ([], [(6)], ['6'])
          - Right:
              expr: '[]'
        - - expr: ([], [(6), (7)], ['6'])
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl fromEnum
  - - - - type: (Int, Int)
        - type: (Int, Int)
      - - - expr: ((-8), (18))
          - Right:
              expr: (-8, 18)
        - - expr: ((-11), (-9))
          - Right:
              expr: (-11, -9)
        - - expr: ((-20), (6))
          - Right:
              expr: (-20, 6)
        - - expr: ((-20), (11))
          - Right:
              expr: (-20, 11)
        - - expr: ((18), (-9))
          - Right:
              expr: (18, -9)
        - - expr: ((18), (-20))
          - Right:
              expr: (18, -20)
        - - expr: ((7), (6))
          - Right:
              expr: (7, 6)
        - - expr: ((-20), (-20))
          - Right:
              expr: (-20, -20)
    - - - type: (Char, Char)
        - type: (Int, Char)
      - - - expr: ('7', '2')
          - Right:
              expr: (55, '2')
        - - expr: ('2', '5')
          - Right:
              expr: (50, '5')
        - - expr: ('0', '8')
          - Right:
              expr: (48, '8')
        - - expr: ('6', '7')
          - Right:
              expr: (54, '7')
        - - expr: ('4', '5')
          - Right:
              expr: (52, '5')
        - - expr: ('1', '5')
          - Right:
              expr: (49, '5')
        - - expr: ('2', '6')
          - Right:
              expr: (50, '6')
        - - expr: ('8', '2')
          - Right:
              expr: (56, '2')
    - - - type: (Char, Int)
        - type: (Int, Int)
      - - - expr: ('1', (-11))
          - Right:
              expr: (49, -11)
        - - expr: ('6', (-9))
          - Right:
              expr: (54, -9)
        - - expr: ('0', (-11))
          - Right:
              expr: (48, -11)
        - - expr: ('6', (-20))
          - Right:
              expr: (54, -20)
        - - expr: ('2', (11))
          - Right:
              expr: (50, 11)
        - - expr: ('0', (18))
          - Right:
              expr: (48, 18)
        - - expr: ('8', (-8))
          - Right:
              expr: (56, -8)
        - - expr: ('1', (11))
          - Right:
              expr: (49, 11)
    - - - type: (Int, Char)
        - type: (Int, Char)
      - - - expr: ((6), '4')
          - Right:
              expr: (6, '4')
        - - expr: ((11), '4')
          - Right:
              expr: (11, '4')
        - - expr: ((-20), '4')
          - Right:
              expr: (-20, '4')
        - - expr: ((-11), '1')
          - Right:
              expr: (-11, '1')
        - - expr: ((11), '2')
          - Right:
              expr: (11, '2')
        - - expr: ((18), '4')
          - Right:
              expr: (18, '4')
        - - expr: ((11), '6')
          - Right:
              expr: (11, '6')
        - - expr: ((-9), '1')
          - Right:
              expr: (-9, '1')
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (maybe mempty prepend)
  - - - - type: ((Int -> Maybe Char), Int, [Char])
        - type: '[Char]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-20), [])
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11), ['6'])
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11), [])
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-20), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (6), [])
          - Right:
              expr: '"\ACK"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9), ['6'])
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-9)"'
    - - - type: ((Char -> Maybe Int), Char, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8', [(6)])
          - Right:
              expr: '[56, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '1', [])
          - Right:
              expr: '[49]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2', [(6), (7)])
          - Right:
              expr: '[50, 6, 7]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8', [(6), (7)])
          - Right:
              expr: '[56, 6, 7]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '1', [(6)])
          - Right:
              expr: '[49, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '0', [(6)])
          - Right:
              expr: '[48, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4', [(6), (7)])
          - Right:
              expr: '[52, 6, 7]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2', [(6)])
          - Right:
              expr: '[50, 6]'
    - - - type: ((Char -> Maybe Char), Char, [Char])
        - type: '[Char]'
      - - - expr: (let just = Just in just, '5', ['6'])
          - Right:
              expr: '"56"'
        - - expr: (let just = Just in just, '5', [])
          - Right:
              expr: '"5"'
        - - expr: (let just = Just in just, '2', ['6'])
          - Right:
              expr: '"26"'
        - - expr: (let just = Just in just, '0', ['6', '5'])
          - Right:
              expr: '"065"'
        - - expr: (let just = Just in just, '6', ['6', '5'])
          - Right:
              expr: '"665"'
        - - expr: (let just = Just in just, '7', [])
          - Right:
              expr: '"7"'
        - - expr: (let just = Just in just, '6', ['6'])
          - Right:
              expr: '"66"'
        - - expr: (let just = Just in just, '7', ['6'])
          - Right:
              expr: '"76"'
    - - - type: ((Int -> Maybe Int), Int, [Int])
        - type: '[Int]'
      - - - expr: (let just = Just in just, (-9), [(6)])
          - Right:
              expr: '[-9, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (6), [(6), (7)])
          - Right:
              expr: '[6, 6, 7]'
        - - expr: (let just = Just in just, (-11), [(6), (7)])
          - Right:
              expr: '[-11, 6, 7]'
        - - expr: (let just = Just in just, (-11), [(6)])
          - Right:
              expr: '[-11, 6]'
        - - expr: (let just = Just in just, (7), [])
          - Right:
              expr: '[7]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9), [(6)])
          - Right:
              expr: '[-9, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-20), [(6), (7)])
          - Right:
              expr: '[-20, 6, 7]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9), [])
          - Right:
              expr: '[-9]'
- - expr: let just = Just in maybe (sequenceA (just unzip))
  - - - - type: |-
            ((Char -> [(Char, Char)] -> Maybe ([Char], [Char])), Maybe Char,
             [(Char, Char)])
        - type: Maybe ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '0', [('6', '6')])
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose mempty maybe, Just '8', [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '7', [('6', '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Nothing,
               [('6', '6'), ('5', '5')])
          - Right:
              expr: (Just ("65", "65"))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '5', [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [('6', '6'), ('5', '5')])
          - Right:
              expr: (Just ("65", "65"))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '0', [('6', '6'), ('5', '5')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '8', [('6', '6'), ('5', '5')])
          - Right:
              expr: Nothing
    - - - type: |-
            ((Int -> [(Int, Int)] -> Maybe ([Int], [Int])), Maybe Int,
             [(Int, Int)])
        - type: Maybe ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [])
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (7), [((6), (6)), ((7), (7))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (7), [])
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose foldMap mempty, Nothing, [])
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (11), [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (-11), [((6), (6)), ((7), (7))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (11), [((6), (6))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (-11), [((6), (6))])
          - Right:
              expr: Nothing
    - - - type: |-
            ((Int -> [(Char, Char)] -> Maybe ([Char], [Char])), Maybe Int,
             [(Char, Char)])
        - type: Maybe ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (7), [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (18), [])
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose foldMap mempty, Just (7), [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (-11), [('6', '6'), ('5', '5')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (11), [('6', '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (18), [('6', '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (-11), [('6', '6'), ('5', '5')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (18), [('6', '6'), ('5', '5')])
          - Right:
              expr: Nothing
    - - - type: |-
            ((Char -> [(Int, Int)] -> Maybe ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: Maybe ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '0', [((6), (6))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '8', [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0', [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '7', [((6), (6))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just '0',
               [((6), (6))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '7', [((6), (6)), ((7), (7))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5', [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing, [])
          - Right:
              expr: (Just ([], []))
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just fromEnum)
  - - - - type: ((Int -> Char), Int)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: (Just 7)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: (Just 18)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (Just 11)
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (toEnum, (7))
          - Right:
              expr: (Just 7)
    - - - type: ((Int -> Int), Int)
        - type: Maybe Int
      - - - expr: (fromEnum, (-20))
          - Right:
              expr: (Just (-20))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (Just 11)
        - - expr: (let compose = (.) in compose toEnum toEnum, (-8))
          - Right:
              expr: (Just (-8))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9))
          - Right:
              expr: (Just (-9))
        - - expr: (fromEnum, (-8))
          - Right:
              expr: (Just (-8))
        - - expr: (let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: (Just 6)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8))
          - Right:
              expr: (Just (-8))
        - - expr: (toEnum, (18))
          - Right:
              expr: (Just 18)
    - - - type: ((Char -> Int), Char)
        - type: Maybe Int
      - - - expr: (fromEnum, '5')
          - Right:
              expr: (Just 53)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just 53)
        - - expr: (fromEnum, '8')
          - Right:
              expr: (Just 56)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just 54)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just 48)
        - - expr: (fromEnum, '7')
          - Right:
              expr: (Just 55)
        - - expr: (fromEnum, '0')
          - Right:
              expr: (Just 48)
        - - expr: (fromEnum, '6')
          - Right:
              expr: (Just 54)
    - - - type: ((Char -> Char), Char)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (Just 55)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just 53)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (Just 50)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just 52)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just 48)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just 56)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (Just 49)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just 54)
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (compose conc unzip)
  - - - - type: ((Int -> [(Char, Char)]), Int, ([Char], [Char]))
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (7), (['6', '5'], ['6', '5']))
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (11), (['6'], ['6']))
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, (-9),
               (['6', '5'], ['6', '5']))
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-20), (['6', '5'], ['6', '5']))
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-11), (['6', '5'], ['6', '5']))
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-20), (['6'], ['6']))
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (11), (['6'], ['6']))
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, (-20),
               (['6'], ['6']))
          - Right:
              expr: ("6", "6")
    - - - type: ((Int -> [(Int, Int)]), Int, ([Int], [Int]))
        - type: ([Int], [Int])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-11), ([], []))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose (zip mempty) mempty, (-8), ([], []))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (11), ([(6)], [(6)]))
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (18), ([(6), (7)], [(6), (7)]))
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (7), ([(6)], [(6)]))
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (7), ([(6), (7)], [(6), (7)]))
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-20), ([], []))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (18), ([], []))
          - Right:
              expr: ([], [])
    - - - type: ((Char -> [(Int, Int)]), Char, ([Int], [Int]))
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.) in compose (zip mempty) mempty, '7',
               ([(6)], [(6)]))
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '5', ([], []))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty fromEnum, '5', ([], []))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '1', ([(6)], [(6)]))
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5', ([(6)], [(6)]))
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '8', ([(6), (7)], [(6), (7)]))
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '4', ([(6), (7)], [(6), (7)]))
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '2', ([], []))
          - Right:
              expr: ([], [])
    - - - type: ((Char -> [(Int, Char)]), Char, ([Int], [Char]))
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '0', ([], []))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '5', ([(6), (7)], ['6', '5']))
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '2', ([(6)], ['6']))
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '0', ([], []))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '7', ([(6), (7)], ['6', '5']))
          - Right:
              expr: ([6, 7], "65")
        - - expr: (let compose = (.) in compose mempty maybe, '8', ([], []))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '4', ([(6)], ['6']))
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '5', ([(6), (7)], ['6', '5']))
          - Right:
              expr: ([6, 7], "65")
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc zip) foldMap
  - - - - type: ((Int -> [Char] -> [(Int, Char)]), [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [(6)], ['6', '5'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose fmap tpl,
               [(6)], ['6'])
          - Right:
              expr: '[(6, ''6''), (6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [(6)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               [(6)], ['6', '5'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               [(6), (7)], ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [(6), (7)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, [(6)], [])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               ['6', '5'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               ['6'], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip (sequence mempty), ['6'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (let compose = (.) in compose zip mempty, [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, ['6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               ['6'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, ['6', '5'], [])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose sequence) tpl,
               [(6)], [(6), (7)])
          - Right:
              expr: '[(6, 6), (6, 6), (6, 7)]'
        - - expr: (let compose = (.) in compose zip (sequence mempty), [], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, [], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (compose mempty) elem, [], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (compose mempty) prepend,
               [], [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               ['6'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (let compose = (.) in compose mempty fromEnum, ['6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['6'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose sequence) tpl,
               ['6', '5'], ['6', '5'])
          - Right:
              expr: |-
                [('6', '6'), ('5', '5'), ('6', '6'), ('6', '5'), ('5', '6'),
                 ('5', '5')]
        - - expr: (let compose = (.) in compose mempty maybe, ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, ['6', '5'], [])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose sequence sequenceA
  - - - - type: Maybe (Maybe Int)
        - type: Maybe (Maybe Int)
      - - - expr: (Nothing)
          - Right:
              expr: Nothing
        - - expr: (Just (Just (18)))
          - Right:
              expr: (Just (Just 18))
        - - expr: (Just (Just (-11)))
          - Right:
              expr: (Just (Just (-11)))
        - - expr: (Just (Just (7)))
          - Right:
              expr: (Just (Just 7))
    - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
      - - - expr: (Just (Just '8'))
          - Right:
              expr: (Just (Just '8'))
        - - expr: (Just (Just '7'))
          - Right:
              expr: (Just (Just '7'))
        - - expr: (Nothing)
          - Right:
              expr: Nothing
        - - expr: (Just (Just '5'))
          - Right:
              expr: (Just (Just '5'))
- - expr: let compose = (.) in compose fromEnum
  - - - - type: ((Int -> Char), Int)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (toEnum, (18))
          - Right:
              expr: '18'
        - - expr: (toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: '6'
        - - expr: (toEnum, (6))
          - Right:
              expr: '6'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
    - - - type: ((Char -> Char), Char)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '52'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '54'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: '53'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '56'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '49'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '50'
    - - - type: ((Char -> Int), Char)
        - type: Int
      - - - expr: (fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '56'
        - - expr: (fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: (fromEnum, '8')
          - Right:
              expr: '56'
        - - expr: (fromEnum, '1')
          - Right:
              expr: '49'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '49'
    - - - type: ((Int -> Int), Int)
        - type: Int
      - - - expr: (toEnum, (11))
          - Right:
              expr: '11'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: (let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: '6'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9))
          - Right:
              expr: (-9)
        - - expr: (let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: '18'
        - - expr: (fromEnum, (-11))
          - Right:
              expr: (-11)
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11))
          - Right:
              expr: (-11)
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose (zip mempty))
  - - - - type: (((Int -> [Char]) -> Int -> [(Int, Char)]), (Int -> [Char]), Int)
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty tpl),
               let compose = (.) in compose mempty maybe, (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let compose = (.) in compose mempty maybe, (11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty (compose prepend),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-9))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (compose mempty prepend),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-9))
          - Right:
              expr: '[]'
    - - - type: |-
            (((Char -> [Char]) -> Char -> [(Char, Char)]), (Char -> [Char]),
             Char)
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.) in compose mempty (compose maybe),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty (compose length),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let compose = (.) in compose mempty fromEnum, '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose (compose mempty length),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty mempty),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '7')
          - Right:
              expr: '[]'
    - - - type: (((Char -> [Int]) -> Char -> [(Char, Int)]), (Char -> [Int]), Char)
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (compose tpl),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose (compose mempty zip),
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty (compose maybe),
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (compose mempty prepend),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty (maybe mempty),
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.) in compose mempty fromEnum, '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (compose conc),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0')
          - Right:
              expr: '[]'
    - - - type: |-
            (((Char -> [Char]) -> Char -> [(Int, Char)]), (Char -> [Char]),
             Char)
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty mempty),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty (maybe mempty),
               let compose = (.) in compose mempty fromEnum, '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (compose conc),
               let compose = (.) in compose mempty maybe, '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty compose,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let compose = (.) in compose mempty fromEnum, '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty compose,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               let compose = (.) in compose mempty maybe, '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose (compose mempty just),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '4')
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          zero = 0
        in maybe (just zero) just
  - - - - type: Maybe Int
        - type: Maybe Int
      - - - expr: (Just (7))
          - Right:
              expr: (Just 7)
        - - expr: (Just (-11))
          - Right:
              expr: (Just (-11))
        - - expr: (Nothing)
          - Right:
              expr: (Just 0)
        - - expr: (Just (11))
          - Right:
              expr: (Just 11)
        - - expr: (Just (18))
          - Right:
              expr: (Just 18)
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose tpl (tpl zero)
  - - - - type: (Int, Char)
        - type: ((Int, Int), Char)
      - - - expr: ((6), '7')
          - Right:
              expr: ((0, 6), '7')
        - - expr: ((6), '1')
          - Right:
              expr: ((0, 6), '1')
        - - expr: ((-8), '5')
          - Right:
              expr: ((0, -8), '5')
        - - expr: ((6), '2')
          - Right:
              expr: ((0, 6), '2')
        - - expr: ((-20), '5')
          - Right:
              expr: ((0, -20), '5')
        - - expr: ((6), '8')
          - Right:
              expr: ((0, 6), '8')
        - - expr: ((-20), '0')
          - Right:
              expr: ((0, -20), '0')
        - - expr: ((-8), '0')
          - Right:
              expr: ((0, -8), '0')
    - - - type: (Char, Char)
        - type: ((Int, Char), Char)
      - - - expr: ('6', '4')
          - Right:
              expr: ((0, '6'), '4')
        - - expr: ('4', '4')
          - Right:
              expr: ((0, '4'), '4')
        - - expr: ('6', '8')
          - Right:
              expr: ((0, '6'), '8')
        - - expr: ('7', '0')
          - Right:
              expr: ((0, '7'), '0')
        - - expr: ('1', '8')
          - Right:
              expr: ((0, '1'), '8')
        - - expr: ('1', '5')
          - Right:
              expr: ((0, '1'), '5')
        - - expr: ('2', '1')
          - Right:
              expr: ((0, '2'), '1')
        - - expr: ('4', '0')
          - Right:
              expr: ((0, '4'), '0')
    - - - type: (Char, Int)
        - type: ((Int, Char), Int)
      - - - expr: ('5', (-11))
          - Right:
              expr: ((0, '5'), -11)
        - - expr: ('1', (18))
          - Right:
              expr: ((0, '1'), 18)
        - - expr: ('7', (11))
          - Right:
              expr: ((0, '7'), 11)
        - - expr: ('7', (-20))
          - Right:
              expr: ((0, '7'), -20)
        - - expr: ('0', (11))
          - Right:
              expr: ((0, '0'), 11)
        - - expr: ('5', (18))
          - Right:
              expr: ((0, '5'), 18)
        - - expr: ('4', (-8))
          - Right:
              expr: ((0, '4'), -8)
        - - expr: ('1', (6))
          - Right:
              expr: ((0, '1'), 6)
    - - - type: (Int, Int)
        - type: ((Int, Int), Int)
      - - - expr: ((-8), (-8))
          - Right:
              expr: ((0, -8), -8)
        - - expr: ((11), (-9))
          - Right:
              expr: ((0, 11), -9)
        - - expr: ((-9), (6))
          - Right:
              expr: ((0, -9), 6)
        - - expr: ((7), (18))
          - Right:
              expr: ((0, 7), 18)
        - - expr: ((6), (6))
          - Right:
              expr: ((0, 6), 6)
        - - expr: ((7), (7))
          - Right:
              expr: ((0, 7), 7)
        - - expr: ((11), (-11))
          - Right:
              expr: ((0, 11), -11)
        - - expr: ((-9), (-8))
          - Right:
              expr: ((0, -9), -8)
- - expr: let compose = (.) in compose (compose toEnum fromEnum)
  - - - - type: ((Char -> Int), Char)
        - type: Char
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '''4'''
        - - expr: (fromEnum, '5')
          - Right:
              expr: '''5'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '''1'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '''6'''
        - - expr: (fromEnum, '2')
          - Right:
              expr: '''2'''
        - - expr: (fromEnum, '1')
          - Right:
              expr: '''1'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '''8'''
        - - expr: (fromEnum, '6')
          - Right:
              expr: '''6'''
    - - - type: ((Int -> Char), Int)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: '6'
        - - expr: (let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: '18'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: '7'
        - - expr: (toEnum, (6))
          - Right:
              expr: '6'
        - - expr: (toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
    - - - type: ((Char -> Char), Char)
        - type: Char
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '''6'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '''4'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: '''5'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '''2'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '''8'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '''1'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '''7'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '''0'''
    - - - type: ((Int -> Char), Int)
        - type: Char
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (toEnum, (18))
          - Right:
              expr: '''\DC2'''
        - - expr: (toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: '''\a'''
        - - expr: (toEnum, (11))
          - Right:
              expr: '''\v'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: '''\DC2'''
- - expr: |-
      let compose = (.)
          zero = 0
        in compose (maybe zero toEnum)
  - - - - type: ((Int -> Maybe Int), Int)
        - type: Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18))
          - Right:
              expr: '18'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-11))
          - Right:
              expr: (-11)
        - - expr: (let just = Just in just, (7))
          - Right:
              expr: '7'
        - - expr: (let just = Just in just, (-11))
          - Right:
              expr: (-11)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (7))
          - Right:
              expr: '7'
        - - expr: (let just = Just in just, (6))
          - Right:
              expr: '6'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-20))
          - Right:
              expr: (-20)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-8))
          - Right:
              expr: (-8)
- - expr: let prepend = (:) in maybe mempty prepend
  - - - - type: (Maybe Int, [Int])
        - type: '[Int]'
      - - - expr: (Just (18), [])
          - Right:
              expr: '[18]'
        - - expr: (Just (7), [(6)])
          - Right:
              expr: '[7, 6]'
        - - expr: (Just (-11), [(6)])
          - Right:
              expr: '[-11, 6]'
        - - expr: (Nothing, [(6)])
          - Right:
              expr: '[]'
        - - expr: (Just (11), [(6)])
          - Right:
              expr: '[11, 6]'
        - - expr: (Just (11), [])
          - Right:
              expr: '[11]'
        - - expr: (Just (-11), [])
          - Right:
              expr: '[-11]'
        - - expr: (Just (18), [(6)])
          - Right:
              expr: '[18, 6]'
    - - - type: (Maybe Char, [Char])
        - type: '[Char]'
      - - - expr: (Just '7', ['6'])
          - Right:
              expr: '"76"'
        - - expr: (Nothing, ['6'])
          - Right:
              expr: '""'
        - - expr: (Just '7', [])
          - Right:
              expr: '"7"'
        - - expr: (Just '8', ['6', '5'])
          - Right:
              expr: '"865"'
        - - expr: (Just '7', ['6', '5'])
          - Right:
              expr: '"765"'
        - - expr: (Just '8', [])
          - Right:
              expr: '"8"'
        - - expr: (Just '5', [])
          - Right:
              expr: '"5"'
        - - expr: (Just '0', ['6', '5'])
          - Right:
              expr: '"065"'
- - expr: let tpl = (,) in tpl (zip mempty mempty)
  - - - - type: Char
        - type: ([(Int, Int)], Char)
      - - - expr: ('7')
          - Right:
              expr: ([], '7')
        - - expr: ('0')
          - Right:
              expr: ([], '0')
        - - expr: ('1')
          - Right:
              expr: ([], '1')
        - - expr: ('2')
          - Right:
              expr: ([], '2')
        - - expr: ('4')
          - Right:
              expr: ([], '4')
        - - expr: ('5')
          - Right:
              expr: ([], '5')
        - - expr: ('6')
          - Right:
              expr: ([], '6')
        - - expr: ('8')
          - Right:
              expr: ([], '8')
    - - - type: Int
        - type: ([(Int, Int)], Int)
      - - - expr: ((11))
          - Right:
              expr: ([], 11)
        - - expr: ((18))
          - Right:
              expr: ([], 18)
        - - expr: ((-11))
          - Right:
              expr: ([], -11)
        - - expr: ((-8))
          - Right:
              expr: ([], -8)
        - - expr: ((-9))
          - Right:
              expr: ([], -9)
        - - expr: ((7))
          - Right:
              expr: ([], 7)
        - - expr: ((-20))
          - Right:
              expr: ([], -20)
        - - expr: ((6))
          - Right:
              expr: ([], 6)
- - expr: let prepend = (:) in prepend
  - - - - type: (Int, [Int])
        - type: '[Int]'
      - - - expr: ((18), [(6)])
          - Right:
              expr: '[18, 6]'
        - - expr: ((-8), [(6), (7)])
          - Right:
              expr: '[-8, 6, 7]'
        - - expr: ((-9), [(6), (7)])
          - Right:
              expr: '[-9, 6, 7]'
        - - expr: ((-9), [(6)])
          - Right:
              expr: '[-9, 6]'
        - - expr: ((18), [])
          - Right:
              expr: '[18]'
        - - expr: ((7), [(6)])
          - Right:
              expr: '[7, 6]'
        - - expr: ((-20), [])
          - Right:
              expr: '[-20]'
        - - expr: ((-9), [])
          - Right:
              expr: '[-9]'
    - - - type: (Char, [Char])
        - type: '[Char]'
      - - - expr: ('5', [])
          - Right:
              expr: '"5"'
        - - expr: ('1', ['6'])
          - Right:
              expr: '"16"'
        - - expr: ('4', ['6'])
          - Right:
              expr: '"46"'
        - - expr: ('7', ['6', '5'])
          - Right:
              expr: '"765"'
        - - expr: ('5', ['6'])
          - Right:
              expr: '"56"'
        - - expr: ('7', [])
          - Right:
              expr: '"7"'
        - - expr: ('8', ['6'])
          - Right:
              expr: '"86"'
        - - expr: ('5', ['6', '5'])
          - Right:
              expr: '"565"'
- - expr: |-
      let zero = 0
          prepend = (:)
          tpl = (,)
        in prepend (tpl zero zero)
  - - - - type: '[(Int, Int)]'
        - type: '[(Int, Int)]'
      - - - expr: ([((6), (6)), ((7), (7))])
          - Right:
              expr: '[(0, 0), (6, 6), (7, 7)]'
        - - expr: ([])
          - Right:
              expr: '[(0, 0)]'
        - - expr: ([((6), (6))])
          - Right:
              expr: '[(0, 0), (6, 6)]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (compose zip) conc
  - - - - type: ([Char], [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (['6', '5'], ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: (['6', '5'], [], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: (['6'], [], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (['6'], ['6'], [])
          - Right:
              expr: '[]'
        - - expr: ([], [], ['6'])
          - Right:
              expr: '[]'
        - - expr: (['6'], [], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (['6', '5'], [], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: ([], ['6'], [])
          - Right:
              expr: '[]'
    - - - type: ([Int], [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: ([(6)], [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [(6), (7)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: ([(6), (7)], [(6), (7)], ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: ([(6)], [], ['6', '5'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: ([(6)], [(6)], [])
          - Right:
              expr: '[]'
        - - expr: ([], [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ([], [(6)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: ([], [(6), (7)], [])
          - Right:
              expr: '[]'
    - - - type: ([Char], [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: ([], [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], [], [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: ([], ['6', '5'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: ([], [], [(6)])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], [], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (['6', '5'], ['6'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: ([], ['6'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (['6', '5'], ['6', '5'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
    - - - type: ([Int], [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: ([], [], [(6)])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [], [(6), (7)])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: ([(6), (7)], [(6)], [(6), (7)])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: ([(6)], [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], [], [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([(6)], [], [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([], [(6), (7)], [(6), (7)])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: ([(6), (7)], [(6), (7)], [(6)])
          - Right:
              expr: '[(6, 6)]'
- - expr: |-
      let zero = 0
          tpl = (,)
        in tpl (tpl zero zero)
  - - - - type: Int
        - type: ((Int, Int), Int)
      - - - expr: ((11))
          - Right:
              expr: ((0, 0), 11)
        - - expr: ((-20))
          - Right:
              expr: ((0, 0), -20)
        - - expr: ((-11))
          - Right:
              expr: ((0, 0), -11)
        - - expr: ((-9))
          - Right:
              expr: ((0, 0), -9)
        - - expr: ((6))
          - Right:
              expr: ((0, 0), 6)
        - - expr: ((-8))
          - Right:
              expr: ((0, 0), -8)
        - - expr: ((7))
          - Right:
              expr: ((0, 0), 7)
        - - expr: ((18))
          - Right:
              expr: ((0, 0), 18)
    - - - type: Char
        - type: ((Int, Int), Char)
      - - - expr: ('2')
          - Right:
              expr: ((0, 0), '2')
        - - expr: ('7')
          - Right:
              expr: ((0, 0), '7')
        - - expr: ('1')
          - Right:
              expr: ((0, 0), '1')
        - - expr: ('5')
          - Right:
              expr: ((0, 0), '5')
        - - expr: ('4')
          - Right:
              expr: ((0, 0), '4')
        - - expr: ('8')
          - Right:
              expr: ((0, 0), '8')
        - - expr: ('0')
          - Right:
              expr: ((0, 0), '0')
        - - expr: ('6')
          - Right:
              expr: ((0, 0), '6')
- - expr: maybe unzip mempty
  - - - - type: (Maybe Int, [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: (Just (18), [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: (Just (7), [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: (Just (11), [])
          - Right:
              expr: ("", [])
        - - expr: (Nothing, [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: (Just (18), [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: (Just (-11), [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: (Just (-11), [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: (Just (11), [('6', (6))])
          - Right:
              expr: ("", [])
    - - - type: (Maybe Char, [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: (Just '7', [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: (Just '7', [])
          - Right:
              expr: ("", "")
        - - expr: (Nothing, [])
          - Right:
              expr: ("", "")
        - - expr: (Just '7', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: (Just '0', [])
          - Right:
              expr: ("", "")
        - - expr: (Just '8', [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: (Just '5', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: (Just '5', [])
          - Right:
              expr: ("", "")
    - - - type: (Maybe Char, [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: (Just '7', [])
          - Right:
              expr: ([], [])
        - - expr: (Just '7', [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: (Nothing, [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: (Just '8', [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: (Just '7', [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: (Just '8', [])
          - Right:
              expr: ([], [])
        - - expr: (Just '5', [])
          - Right:
              expr: ([], [])
        - - expr: (Just '5', [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
    - - - type: (Maybe Char, [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: (Just '5', [])
          - Right:
              expr: ("", [])
        - - expr: (Just '0', [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: (Nothing, [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: (Nothing, [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: (Just '8', [])
          - Right:
              expr: ("", [])
        - - expr: (Nothing, [])
          - Right:
              expr: ("", [])
        - - expr: (Just '8', [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: (Just '0', [])
          - Right:
              expr: ("", [])
- - expr: |-
      let just = Just
          zero = 0
          prepend = (:)
        in maybe (prepend (just zero))
  - - - - type: ((Char -> [Maybe Int] -> [Maybe Int]), Maybe Char, [Maybe Int])
        - type: '[Maybe Int]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '8', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Just '0', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '7', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing, [Nothing])
          - Right:
              expr: '[Just 0, Nothing]'
        - - expr: (let compose = (.) in compose foldMap mempty, Nothing, [])
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0', [Nothing, Just (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               Just '5', [Nothing, Just (7)])
          - Right:
              expr: '[Nothing, Just 7]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Nothing, [Nothing])
          - Right:
              expr: '[Just 0, Nothing]'
    - - - type: ((Int -> [Maybe Int] -> [Maybe Int]), Maybe Int, [Maybe Int])
        - type: '[Maybe Int]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just (-11), [Nothing])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (-11), [Nothing])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7), [Nothing])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (-11), [Nothing])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing, [Nothing, Just (7)])
          - Right:
              expr: '[Just 0, Nothing, Just 7]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing, [Nothing, Just (7)])
          - Right:
              expr: '[Just 0, Nothing, Just 7]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (11), [Nothing, Just (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (11), [Nothing])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose (maybe (unzip mempty))
  - - - - type: ((Int -> Int -> ([Int], [Int])), Int, Maybe Int)
        - type: ([Int], [Int])
      - - - expr: (let compose = (.) in compose mempty maybe, (7), Just (7))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (11), Just (-11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (11), Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               (-20), Just (-11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (7), Just (11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-9), Just (18))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               (18), Just (18))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-9), Just (-11))
          - Right:
              expr: ([], [])
    - - - type: ((Char -> Int -> ([Char], [Char])), Char, Maybe Int)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6', Just (18))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '0', Just (18))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '4', Just (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5', Just (-11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '1', Just (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, '1',
               Just (11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '1', Just (11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '0', Nothing)
          - Right:
              expr: ("", "")
    - - - type: ((Int -> Char -> ([Char], [Int])), Int, Maybe Char)
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-8), Just '7')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-8), Nothing)
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (7), Just '7')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (11), Nothing)
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (7), Nothing)
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8), Just '5')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-11), Just '0')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (11), Just '8')
          - Right:
              expr: ("", [])
    - - - type: ((Char -> Char -> ([Int], [Char])), Char, Maybe Char)
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '7', Just '0')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, '8', Just '8')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '7', Just '7')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose (compose unzip) mempty, '1', Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '4', Just '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '5', Just '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '7', Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '7', Just '7')
          - Right:
              expr: ([], "")
- - expr: let compose = (.) in compose (compose elem unzip)
  - - - - type: ((Int -> [(Int, Char)]), Int, Maybe ([Int], [Char]))
        - type: Bool
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-9), Just ([(6), (7)], ['6', '5']))
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (7), Just ([(6)], ['6']))
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, (18),
               Just ([(6)], ['6']))
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-8), Nothing)
          - Right:
              expr: 'False'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (6), Just ([(6)], ['6']))
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, (-20),
               Just ([(6)], ['6']))
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (7), Just ([(6)], ['6']))
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (7), Nothing)
          - Right:
              expr: 'False'
    - - - type: ((Int -> [(Char, Int)]), Int, Maybe ([Char], [Int]))
        - type: Bool
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (7), Just (['6', '5'], [(6), (7)]))
          - Right:
              expr: 'False'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-9), Nothing)
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (6), Just (['6', '5'], [(6), (7)]))
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-11), Just (['6', '5'], [(6), (7)]))
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (7), Nothing)
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6), Just (['6', '5'], [(6), (7)]))
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.) in compose (zip mempty) mempty, (-20),
               Just (['6', '5'], [(6), (7)]))
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (6), Just (['6', '5'], [(6), (7)]))
          - Right:
              expr: 'False'
- - expr: let compose = (.) in compose (maybe mempty) zip
  - - - - type: ([Int], Maybe [Int])
        - type: '[(Int, Int)]'
      - - - expr: ([(6), (7)], Just [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([(6)], Nothing)
          - Right:
              expr: '[]'
        - - expr: ([(6)], Just [(6), (7)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([], Just [(6)])
          - Right:
              expr: '[]'
        - - expr: ([], Nothing)
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], Nothing)
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], Just [(6), (7)])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: ([], Just [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: ([Char], Maybe [Int])
        - type: '[(Char, Int)]'
      - - - expr: (['6', '5'], Just [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: (['6'], Just [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (['6', '5'], Nothing)
          - Right:
              expr: '[]'
        - - expr: ([], Just [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], Just [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: ([], Just [(6)])
          - Right:
              expr: '[]'
        - - expr: (['6'], Nothing)
          - Right:
              expr: '[]'
        - - expr: (['6'], Just [(6), (7)])
          - Right:
              expr: '[(''6'', 6)]'
    - - - type: ([Int], Maybe [Char])
        - type: '[(Int, Char)]'
      - - - expr: ([(6)], Nothing)
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], Nothing)
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], Just ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: ([], Just ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ([(6)], Just ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: ([], Just ['6'])
          - Right:
              expr: '[]'
        - - expr: ([], Nothing)
          - Right:
              expr: '[]'
        - - expr: ([(6)], Just ['6', '5'])
          - Right:
              expr: '[(6, ''6'')]'
    - - - type: ([Char], Maybe [Char])
        - type: '[(Char, Char)]'
      - - - expr: ([], Just ['6'])
          - Right:
              expr: '[]'
        - - expr: ([], Just ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], Just ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: (['6', '5'], Just ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (['6'], Just ['6', '5'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (['6'], Nothing)
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], Nothing)
          - Right:
              expr: '[]'
        - - expr: (['6'], Just ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose foldMap prepend)
  - - - - type: ((Char -> Int), Char, Maybe [Int])
        - type: '[Int]'
      - - - expr: (fromEnum, '7', Nothing)
          - Right:
              expr: '[]'
        - - expr: (fromEnum, '2', Nothing)
          - Right:
              expr: '[]'
        - - expr: (fromEnum, '8', Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, '8',
               Just [(6), (7)])
          - Right:
              expr: '[56, 6, 7]'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, '4',
               Just [(6), (7)])
          - Right:
              expr: '[52, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', Nothing)
          - Right:
              expr: '[]'
        - - expr: (fromEnum, '4', Nothing)
          - Right:
              expr: '[]'
        - - expr: (fromEnum, '7', Just [(6)])
          - Right:
              expr: '[55, 6]'
- - expr: let zero = 0 in maybe (maybe zero) maybe
  - - - - type: (Maybe Int, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: (Just (18), let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: (Nothing, let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (Nothing, toEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (Just (18), fromEnum, Just (-11))
          - Right:
              expr: (-11)
        - - expr: (Just (18), let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: '18'
        - - expr: (Nothing, fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: (Just (11), fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: (Just (7), toEnum, Just (-11))
          - Right:
              expr: (-11)
    - - - type: (Maybe Int, (Char -> Int), Maybe Char)
        - type: Int
      - - - expr: (Nothing, let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: (Just (-11), fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: (Just (11), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '11'
        - - expr: (Just (18), fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: (Just (7), fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: (Just (7), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '7'
        - - expr: (Nothing, let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: (Just (11), fromEnum, Just '0')
          - Right:
              expr: '48'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose compose tpl
  - - - - type: (Int, (Int -> Int), Int)
        - type: (Int, Int)
      - - - expr: ((-8), let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: (-8, 18)
        - - expr: ((7), let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (7, 11)
        - - expr: ((7), let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: (7, 6)
        - - expr: ((18), toEnum, (6))
          - Right:
              expr: (18, 6)
        - - expr: ((-20), let compose = (.) in compose toEnum fromEnum, (-11))
          - Right:
              expr: (-20, -11)
        - - expr: ((7), toEnum, (-11))
          - Right:
              expr: (7, -11)
        - - expr: ((6), fromEnum, (7))
          - Right:
              expr: (6, 7)
        - - expr: ((-9), let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: (-9, 18)
    - - - type: (Char, (Int -> Char), Int)
        - type: (Char, Char)
      - - - expr: ('0', let compose = (.) in compose toEnum fromEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ('5', toEnum, (11))
          - Right:
              expr: ('5', '\v')
        - - expr: ('6', toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ('0', toEnum, (11))
          - Right:
              expr: ('0', '\v')
        - - expr: ('0', let compose = (.) in compose toEnum toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: ('8', let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: ('8', '\DC2')
        - - expr: ('5', let compose = (.) in compose toEnum toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: ('2', let compose = (.) in compose toEnum fromEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
    - - - type: (Int, (Int -> Char), Int)
        - type: (Int, Char)
      - - - expr: ((-8), let compose = (.) in compose toEnum fromEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ((-11), let compose = (.) in compose toEnum fromEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ((-8), let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (-8, '\ACK')
        - - expr: ((18), toEnum, (18))
          - Right:
              expr: (18, '\DC2')
        - - expr: ((-8), toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ((18), let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (18, '\ACK')
        - - expr: ((18), let compose = (.) in compose toEnum fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: ((7), let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: (7, '\DC2')
    - - - type: (Char, (Int -> Int), Int)
        - type: (Char, Int)
      - - - expr: ('8', fromEnum, (-20))
          - Right:
              expr: ('8', -20)
        - - expr: ('6', let compose = (.) in compose toEnum toEnum, (-8))
          - Right:
              expr: ('6', -8)
        - - expr: ('7', let compose = (.) in compose toEnum fromEnum, (-8))
          - Right:
              expr: ('7', -8)
        - - expr: ('6', let compose = (.) in compose toEnum toEnum, (11))
          - Right:
              expr: ('6', 11)
        - - expr: ('5', fromEnum, (7))
          - Right:
              expr: ('5', 7)
        - - expr: ('1', fromEnum, (11))
          - Right:
              expr: ('1', 11)
        - - expr: ('2', toEnum, (-20))
          - Right:
              expr: ('2', -20)
        - - expr: ('5', fromEnum, (-8))
          - Right:
              expr: ('5', -8)
- - expr: let compose = (.) in compose fmap (compose sequence)
  - - - - type: ((Int -> [] (Maybe Int)), Maybe Int)
        - type: Maybe (Maybe ([] Int))
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (7))
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (11))
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (11))
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (18))
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (7))
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (7))
          - Right:
              expr: (Just (Just []))
        - - expr: (let compose = (.) in compose mempty maybe, Just (11))
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (-11))
          - Right:
              expr: (Just (Just []))
    - - - type: ((Int -> Maybe ([] Int)), Maybe Int)
        - type: Maybe ([] (Maybe Int))
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (18))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               Just (18))
          - Right:
              expr: (Just [])
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (18))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (18))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (18))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (-11))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               Just (7))
          - Right:
              expr: (Just [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (11))
          - Right:
              expr: (Just [Nothing])
- - expr: let conc = (<>) in conc (conc zip zip)
  - - - - type: (([Char] -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               ['6', '5'], [(6)])
          - Right:
              expr: '[(''6'', 6), (''6'', 6)]'
        - - expr: |-
              (let compose = (.) in compose (compose mempty) zip, ['6', '5'],
               [(6)])
          - Right:
              expr: '[(''6'', 6), (''6'', 6)]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) zip,
               ['6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose (compose mempty) zip, ['6', '5'],
               [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7), (''6'', 6), (''5'', 7)]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) zip,
               [], [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               ['6', '5'], [(6)])
          - Right:
              expr: '[(''6'', 6), (''6'', 6)]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               ['6', '5'], [(6)])
          - Right:
              expr: '[(''6'', 6), (''6'', 6)]'
    - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.) in compose (compose mempty) zip, ['6', '5'],
               ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5''), (''6'', ''6''), (''5'', ''5'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5''), (''6'', ''6''), (''5'', ''5'')]'
        - - expr: (let compose = (.) in compose mempty length, ['6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (compose mempty) conc,
               ['6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5''), (''6'', ''6''), (''5'', ''5'')]'
        - - expr: (let compose = (.) in compose mempty zip, ['6'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''6'', ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [], ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5''), (''6'', ''6''), (''5'', ''5'')]'
    - - - type: (([Int] -> [Char] -> [(Int, Char)]), [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose zip (conc mempty),
               [(6), (7)], ['6'])
          - Right:
              expr: '[(6, ''6''), (6, ''6''), (6, ''6'')]'
        - - expr: (let compose = (.) in compose mempty zip, [], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [], ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [(6)], ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty (zip mempty), [(6)], [])
          - Right:
              expr: '[]'
    - - - type: (([Int] -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (compose mempty) zip, [(6)], [(6)])
          - Right:
              expr: '[(6, 6), (6, 6)]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [], [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty zip, [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [(6)], [(6), (7)])
          - Right:
              expr: '[(6, 6), (6, 6)]'
        - - expr: (zip, [(6)], [(6)])
          - Right:
              expr: '[(6, 6), (6, 6), (6, 6)]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose compose (compose just)
  - - - - type: ((Char -> Char), (Int -> Char), Int)
        - type: Maybe Char
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: (Just '\a')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, toEnum, (18))
          - Right:
              expr: (Just '\DC2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, toEnum, (11))
          - Right:
              expr: (Just '\v')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (Just '\v')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (Just '\ACK')
    - - - type: ((Int -> Char), (Int -> Int), Int)
        - type: Maybe Char
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (Just '\ACK')
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: (Just '\ACK')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: (Just '\DC2')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (Just '\ACK')
        - - expr: (toEnum, let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: (Just '\ACK')
        - - expr: (let compose = (.) in compose toEnum toEnum, fromEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (toEnum, let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: (Just '\a')
    - - - type: ((Char -> Int), (Int -> Char), Int)
        - type: Maybe Int
      - - - expr: (fromEnum, toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: (Just 18)
        - - expr: (fromEnum, let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: (Just 18)
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (Just 6)
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
    - - - type: ((Char -> Int), (Char -> Char), Char)
        - type: Maybe Int
      - - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just 56)
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just 48)
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just 56)
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just 53)
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just 54)
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just 48)
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (Just 55)
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (Just 55)
- - expr: maybe (zip mempty mempty)
  - - - - type: ((Int -> [(Char, Char)]), Maybe Int)
        - type: '[(Char, Char)]'
      - - - expr: (let compose = (.) in compose (zip mempty) mempty, Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (11))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just (18))
          - Right:
              expr: '[]'
    - - - type: ((Int -> [(Char, Int)]), Maybe Int)
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (-11))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing)
          - Right:
              expr: '[]'
    - - - type: ((Char -> [(Int, Int)]), Maybe Char)
        - type: '[(Int, Int)]'
      - - - expr: (let compose = (.) in compose (zip mempty) mempty, Nothing)
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '8')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just '8')
          - Right:
              expr: '[]'
    - - - type: ((Int -> [(Int, Char)]), Maybe Int)
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (18))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, Nothing)
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (11))
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
          tpl = (,)
        in compose tpl (prepend zero)
  - - - - type: ([Int], Int)
        - type: ([Int], Int)
      - - - expr: ([(6)], (-20))
          - Right:
              expr: ([0, 6], -20)
        - - expr: ([], (-11))
          - Right:
              expr: ([0], -11)
        - - expr: ([(6), (7)], (-9))
          - Right:
              expr: ([0, 6, 7], -9)
        - - expr: ([(6), (7)], (18))
          - Right:
              expr: ([0, 6, 7], 18)
        - - expr: ([], (-9))
          - Right:
              expr: ([0], -9)
        - - expr: ([(6)], (-8))
          - Right:
              expr: ([0, 6], -8)
        - - expr: ([], (7))
          - Right:
              expr: ([0], 7)
        - - expr: ([(6), (7)], (-11))
          - Right:
              expr: ([0, 6, 7], -11)
    - - - type: ([Int], Char)
        - type: ([Int], Char)
      - - - expr: ([(6), (7)], '5')
          - Right:
              expr: ([0, 6, 7], '5')
        - - expr: ([(6), (7)], '1')
          - Right:
              expr: ([0, 6, 7], '1')
        - - expr: ([(6), (7)], '0')
          - Right:
              expr: ([0, 6, 7], '0')
        - - expr: ([(6), (7)], '7')
          - Right:
              expr: ([0, 6, 7], '7')
        - - expr: ([(6)], '4')
          - Right:
              expr: ([0, 6], '4')
        - - expr: ([(6)], '6')
          - Right:
              expr: ([0, 6], '6')
        - - expr: ([(6)], '2')
          - Right:
              expr: ([0, 6], '2')
        - - expr: ([], '1')
          - Right:
              expr: ([0], '1')
- - expr: |-
      let just = Just
          compose = (.)
          zero = 0
          prepend = (:)
        in compose (prepend (just zero))
  - - - - type: ((Char -> [Maybe Int]), Char)
        - type: '[Maybe Int]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '4')
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '2')
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '4')
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2')
          - Right:
              expr: '[Just 0]'
        - - expr: (let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '0')
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '6')
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '6')
          - Right:
              expr: '[Just 0]'
    - - - type: ((Int -> [Maybe Int]), Int)
        - type: '[Maybe Int]'
      - - - expr: (let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6))
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (18))
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-20))
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (11))
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-8))
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-20))
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (11))
          - Right:
              expr: '[Just 0]'
- - expr: let prepend = (:) in maybe prepend mempty
  - - - - type: (Maybe Int, Char, [Char])
        - type: '[Char]'
      - - - expr: (Nothing, '2', ['6'])
          - Right:
              expr: '"26"'
        - - expr: (Nothing, '2', ['6', '5'])
          - Right:
              expr: '"265"'
        - - expr: (Just (7), '8', ['6', '5'])
          - Right:
              expr: '""'
        - - expr: (Just (-11), '0', [])
          - Right:
              expr: '""'
        - - expr: (Nothing, '0', [])
          - Right:
              expr: '"0"'
        - - expr: (Just (11), '8', [])
          - Right:
              expr: '""'
        - - expr: (Just (18), '7', [])
          - Right:
              expr: '""'
        - - expr: (Just (7), '7', [])
          - Right:
              expr: '""'
    - - - type: (Maybe Char, Int, [Int])
        - type: '[Int]'
      - - - expr: (Just '7', (6), [])
          - Right:
              expr: '[]'
        - - expr: (Just '8', (-8), [(6)])
          - Right:
              expr: '[]'
        - - expr: (Just '5', (18), [])
          - Right:
              expr: '[]'
        - - expr: (Just '5', (-8), [(6)])
          - Right:
              expr: '[]'
        - - expr: (Just '5', (7), [])
          - Right:
              expr: '[]'
        - - expr: (Just '7', (11), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just '5', (-9), [])
          - Right:
              expr: '[]'
        - - expr: (Just '5', (7), [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: (Maybe Int, Int, [Int])
        - type: '[Int]'
      - - - expr: (Just (-11), (-20), [])
          - Right:
              expr: '[]'
        - - expr: (Just (11), (6), [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, (-9), [(6)])
          - Right:
              expr: '[-9, 6]'
        - - expr: (Nothing, (7), [(6)])
          - Right:
              expr: '[7, 6]'
        - - expr: (Just (7), (11), [(6)])
          - Right:
              expr: '[]'
        - - expr: (Nothing, (-9), [])
          - Right:
              expr: '[-9]'
        - - expr: (Just (18), (-11), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just (7), (6), [])
          - Right:
              expr: '[]'
    - - - type: (Maybe Char, Char, [Char])
        - type: '[Char]'
      - - - expr: (Just '5', '8', ['6'])
          - Right:
              expr: '""'
        - - expr: (Nothing, '0', ['6', '5'])
          - Right:
              expr: '"065"'
        - - expr: (Just '5', '1', ['6', '5'])
          - Right:
              expr: '""'
        - - expr: (Just '8', '4', ['6'])
          - Right:
              expr: '""'
        - - expr: (Just '8', '2', ['6'])
          - Right:
              expr: '""'
        - - expr: (Just '8', '4', ['6', '5'])
          - Right:
              expr: '""'
        - - expr: (Just '0', '5', ['6', '5'])
          - Right:
              expr: '""'
        - - expr: (Nothing, '1', ['6', '5'])
          - Right:
              expr: '"165"'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose zip sequenceA)
  - - - - type: |-
            ((Maybe [Char] -> [Char] -> [(Maybe Char, Char)]), Maybe [Char],
             [Char])
        - type: '[(Maybe Char, Char)]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing, ['6'])
          - Right:
              expr: '[(Nothing, ''6'')]'
        - - expr: (maybe mempty mempty, Just ['6'], ['6', '5'])
          - Right:
              expr: '[(Just ''6'', ''6'')]'
        - - expr: (let compose = (.) in compose foldMap mempty, Just ['6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Nothing, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose zip (sequence mempty), Just ['6'],
               ['6'])
          - Right:
              expr: '[(Just ''6'', ''6'')]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, ['6', '5'])
          - Right:
              expr: '[(Nothing, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing, [])
          - Right:
              expr: '[]'
    - - - type: |-
            ((Maybe [Char] -> [Int] -> [(Maybe Char, Int)]), Maybe [Char],
             [Int])
        - type: '[(Maybe Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Nothing, [(6), (7)])
          - Right:
              expr: '[(Nothing, 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just ['6', '5'], [(6)])
          - Right:
              expr: '[(Just ''6'', 6)]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               Just ['6'], [(6), (7)])
          - Right:
              expr: '[(Just ''6'', 6)]'
        - - expr: |-
              (let compose = (.) in compose zip sequenceA, Just ['6', '5'],
               [(6)])
          - Right:
              expr: '[(Just ''6'', 6), (Just ''6'', 6)]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just ['6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose zip (sequence mempty),
               Just ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing, [(6)])
          - Right:
              expr: '[(Nothing, 6)]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just sequenceA)
  - - - - type: ((Int -> [] ([] Char)), Int)
        - type: Maybe ([] ([] Char))
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-9))
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (7))
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-8))
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6))
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-9))
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8))
          - Right:
              expr: (Just [""])
        - - expr: (let compose = (.) in compose mempty fromEnum, (6))
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-20))
          - Right:
              expr: (Just [""])
    - - - type: ((Char -> [] (Maybe Int)), Char)
        - type: Maybe (Maybe ([] Int))
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '5')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '5')
          - Right:
              expr: (Just (Just []))
        - - expr: (let compose = (.) in compose mempty maybe, '5')
          - Right:
              expr: (Just (Just []))
        - - expr: (let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '6')
          - Right:
              expr: (Just (Just []))
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
          tpl = (,)
        in compose prepend (tpl zero)
  - - - - type: (Int, [(Int, Int)])
        - type: '[(Int, Int)]'
      - - - expr: ((-8), [])
          - Right:
              expr: '[(0, -8)]'
        - - expr: ((6), [])
          - Right:
              expr: '[(0, 6)]'
        - - expr: ((-11), [])
          - Right:
              expr: '[(0, -11)]'
        - - expr: ((7), [((6), (6))])
          - Right:
              expr: '[(0, 7), (6, 6)]'
        - - expr: ((-9), [((6), (6)), ((7), (7))])
          - Right:
              expr: '[(0, -9), (6, 6), (7, 7)]'
        - - expr: ((-8), [((6), (6))])
          - Right:
              expr: '[(0, -8), (6, 6)]'
        - - expr: ((7), [])
          - Right:
              expr: '[(0, 7)]'
        - - expr: ((11), [((6), (6)), ((7), (7))])
          - Right:
              expr: '[(0, 11), (6, 6), (7, 7)]'
    - - - type: (Char, [(Int, Char)])
        - type: '[(Int, Char)]'
      - - - expr: ('7', [((6), '6')])
          - Right:
              expr: '[(0, ''7''), (6, ''6'')]'
        - - expr: ('2', [((6), '6'), ((7), '5')])
          - Right:
              expr: '[(0, ''2''), (6, ''6''), (7, ''5'')]'
        - - expr: ('2', [((6), '6')])
          - Right:
              expr: '[(0, ''2''), (6, ''6'')]'
        - - expr: ('1', [((6), '6')])
          - Right:
              expr: '[(0, ''1''), (6, ''6'')]'
        - - expr: ('6', [((6), '6')])
          - Right:
              expr: '[(0, ''6''), (6, ''6'')]'
        - - expr: ('0', [((6), '6')])
          - Right:
              expr: '[(0, ''0''), (6, ''6'')]'
        - - expr: ('8', [((6), '6'), ((7), '5')])
          - Right:
              expr: '[(0, ''8''), (6, ''6''), (7, ''5'')]'
        - - expr: ('1', [((6), '6'), ((7), '5')])
          - Right:
              expr: '[(0, ''1''), (6, ''6''), (7, ''5'')]'
- - expr: let compose = (.) in compose (compose foldMap zip)
  - - - - type: ((Int -> [Int]), Int, Maybe [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (6), Just [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-20), Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-9), Just [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-11), Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (11), Just [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (18), Nothing)
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (-20), Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-9), Just [(6)])
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose sequenceA) tpl
  - - - - type: (Char, Maybe Char)
        - type: Maybe (Char, Char)
      - - - expr: ('4', Just '7')
          - Right:
              expr: (Just ('4', '7'))
        - - expr: ('8', Just '5')
          - Right:
              expr: (Just ('8', '5'))
        - - expr: ('4', Just '0')
          - Right:
              expr: (Just ('4', '0'))
        - - expr: ('0', Just '0')
          - Right:
              expr: (Just ('0', '0'))
        - - expr: ('6', Nothing)
          - Right:
              expr: Nothing
        - - expr: ('4', Just '8')
          - Right:
              expr: (Just ('4', '8'))
        - - expr: ('8', Just '7')
          - Right:
              expr: (Just ('8', '7'))
        - - expr: ('4', Nothing)
          - Right:
              expr: Nothing
    - - - type: (Int, Maybe Char)
        - type: Maybe (Int, Char)
      - - - expr: ((6), Just '7')
          - Right:
              expr: (Just (6, '7'))
        - - expr: ((-9), Just '8')
          - Right:
              expr: (Just (-9, '8'))
        - - expr: ((7), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((-11), Just '7')
          - Right:
              expr: (Just (-11, '7'))
        - - expr: ((-20), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((11), Just '8')
          - Right:
              expr: (Just (11, '8'))
        - - expr: ((-9), Just '7')
          - Right:
              expr: (Just (-9, '7'))
        - - expr: ((11), Just '5')
          - Right:
              expr: (Just (11, '5'))
- - expr: |-
      let just = Just
          compose = (.)
        in compose just just
  - - - - type: Char
        - type: Maybe (Maybe Char)
      - - - expr: ('6')
          - Right:
              expr: (Just (Just '6'))
        - - expr: ('7')
          - Right:
              expr: (Just (Just '7'))
        - - expr: ('4')
          - Right:
              expr: (Just (Just '4'))
        - - expr: ('8')
          - Right:
              expr: (Just (Just '8'))
        - - expr: ('5')
          - Right:
              expr: (Just (Just '5'))
        - - expr: ('0')
          - Right:
              expr: (Just (Just '0'))
        - - expr: ('2')
          - Right:
              expr: (Just (Just '2'))
        - - expr: ('1')
          - Right:
              expr: (Just (Just '1'))
    - - - type: Int
        - type: Maybe (Maybe Int)
      - - - expr: ((-8))
          - Right:
              expr: (Just (Just (-8)))
        - - expr: ((-9))
          - Right:
              expr: (Just (Just (-9)))
        - - expr: ((18))
          - Right:
              expr: (Just (Just 18))
        - - expr: ((6))
          - Right:
              expr: (Just (Just 6))
        - - expr: ((11))
          - Right:
              expr: (Just (Just 11))
        - - expr: ((-11))
          - Right:
              expr: (Just (Just (-11)))
        - - expr: ((7))
          - Right:
              expr: (Just (Just 7))
        - - expr: ((-20))
          - Right:
              expr: (Just (Just (-20)))
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc (zip mempty))
  - - - - type: ((Char -> [Int] -> [(Char, Int)]), Char, [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '8', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '2', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '2', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '2', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip mempty, '1', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '6', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose fmap tpl,
               '7', [(6), (7)])
          - Right:
              expr: '[(''7'', 6), (''7'', 7)]'
        - - expr: (let compose = (.) in compose zip mempty, '5', [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Char] -> [(Int, Char)]), Char, [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '1', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '6', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '1', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '1', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, '7', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, '8', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '2', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1', ['6'])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Char] -> [(Char, Char)]), Int, [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (6), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (11), ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip mempty, (-11), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (18), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-20), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-11), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip mempty, (7), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-11), ['6', '5'])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Char] -> [(Int, Char)]), Int, [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (18), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (11), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-20), ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, (-20), ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip (sequence mempty), (18), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-20), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose sequenceA) tpl,
               (-8), ['6', '5'])
          - Right:
              expr: '[(-8, ''6''), (-8, ''5'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11), [])
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          prepend = (:)
          tpl = (,)
        in compose (compose tpl) prepend
  - - - - type: (Char, [Char], Char)
        - type: ([Char], Char)
      - - - expr: ('2', ['6'], '7')
          - Right:
              expr: ("26", '7')
        - - expr: ('7', [], '6')
          - Right:
              expr: ("7", '6')
        - - expr: ('4', ['6', '5'], '2')
          - Right:
              expr: ("465", '2')
        - - expr: ('0', [], '8')
          - Right:
              expr: ("0", '8')
        - - expr: ('7', ['6', '5'], '4')
          - Right:
              expr: ("765", '4')
        - - expr: ('2', [], '8')
          - Right:
              expr: ("2", '8')
        - - expr: ('1', [], '0')
          - Right:
              expr: ("1", '0')
        - - expr: ('7', ['6'], '2')
          - Right:
              expr: ("76", '2')
    - - - type: (Int, [Int], Char)
        - type: ([Int], Char)
      - - - expr: ((6), [], '7')
          - Right:
              expr: ([6], '7')
        - - expr: ((-8), [(6)], '2')
          - Right:
              expr: ([-8, 6], '2')
        - - expr: ((-20), [(6), (7)], '7')
          - Right:
              expr: ([-20, 6, 7], '7')
        - - expr: ((-8), [], '6')
          - Right:
              expr: ([-8], '6')
        - - expr: ((7), [], '6')
          - Right:
              expr: ([7], '6')
        - - expr: ((18), [], '2')
          - Right:
              expr: ([18], '2')
        - - expr: ((-9), [(6), (7)], '4')
          - Right:
              expr: ([-9, 6, 7], '4')
        - - expr: ((7), [(6)], '8')
          - Right:
              expr: ([7, 6], '8')
    - - - type: (Int, [Int], Int)
        - type: ([Int], Int)
      - - - expr: ((-8), [(6), (7)], (18))
          - Right:
              expr: ([-8, 6, 7], 18)
        - - expr: ((7), [], (-11))
          - Right:
              expr: ([7], -11)
        - - expr: ((-11), [], (-20))
          - Right:
              expr: ([-11], -20)
        - - expr: ((6), [(6), (7)], (-9))
          - Right:
              expr: ([6, 6, 7], -9)
        - - expr: ((-11), [(6)], (11))
          - Right:
              expr: ([-11, 6], 11)
        - - expr: ((-11), [(6)], (6))
          - Right:
              expr: ([-11, 6], 6)
        - - expr: ((7), [], (7))
          - Right:
              expr: ([7], 7)
        - - expr: ((-20), [(6)], (-9))
          - Right:
              expr: ([-20, 6], -9)
    - - - type: (Char, [Char], Int)
        - type: ([Char], Int)
      - - - expr: ('4', ['6'], (-20))
          - Right:
              expr: ("46", -20)
        - - expr: ('6', ['6', '5'], (7))
          - Right:
              expr: ("665", 7)
        - - expr: ('5', [], (6))
          - Right:
              expr: ("5", 6)
        - - expr: ('6', [], (7))
          - Right:
              expr: ("6", 7)
        - - expr: ('7', ['6'], (11))
          - Right:
              expr: ("76", 11)
        - - expr: ('4', ['6'], (-9))
          - Right:
              expr: ("46", -9)
        - - expr: ('6', ['6'], (-11))
          - Right:
              expr: ("66", -11)
        - - expr: ('4', ['6'], (11))
          - Right:
              expr: ("46", 11)
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose (conc prepend mempty)
  - - - - type: ((Char -> Char), Char, [Char])
        - type: '[Char]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '4', ['6', '5'])
          - Right:
              expr: '"465"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', ['6'])
          - Right:
              expr: '"56"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', ['6', '5'])
          - Right:
              expr: '"065"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', [])
          - Right:
              expr: '"4"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', ['6', '5'])
          - Right:
              expr: '"165"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', ['6', '5'])
          - Right:
              expr: '"265"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', ['6'])
          - Right:
              expr: '"06"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', ['6'])
          - Right:
              expr: '"76"'
    - - - type: ((Int -> Char), Int, [Char])
        - type: '[Char]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (18), ['6'])
          - Right:
              expr: '"\DC26"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (11), ['6', '5'])
          - Right:
              expr: '"\v65"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7), ['6'])
          - Right:
              expr: '"\a6"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), ['6'])
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (toEnum, (-9), [])
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (7), ['6'])
          - Right:
              expr: '"\a6"'
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
      - - - expr: (fromEnum, '4', [])
          - Right:
              expr: '[52]'
        - - expr: (fromEnum, '0', [])
          - Right:
              expr: '[48]'
        - - expr: (fromEnum, '1', [(6)])
          - Right:
              expr: '[49, 6]'
        - - expr: (fromEnum, '6', [])
          - Right:
              expr: '[54]'
        - - expr: (fromEnum, '0', [(6), (7)])
          - Right:
              expr: '[48, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', [(6), (7)])
          - Right:
              expr: '[49, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', [(6), (7)])
          - Right:
              expr: '[55, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', [])
          - Right:
              expr: '[54]'
    - - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
      - - - expr: (fromEnum, (-11), [])
          - Right:
              expr: '[-11]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9), [(6), (7)])
          - Right:
              expr: '[-9, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11), [(6), (7)])
          - Right:
              expr: '[-11, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (6), [(6)])
          - Right:
              expr: '[6, 6]'
        - - expr: (fromEnum, (7), [(6), (7)])
          - Right:
              expr: '[7, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-8), [(6)])
          - Right:
              expr: '[-8, 6]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (11), [(6), (7)])
          - Right:
              expr: '[11, 6, 7]'
        - - expr: (toEnum, (11), [])
          - Right:
              expr: '[11]'
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose (conc prepend prepend)
  - - - - type: ((Char -> Char), Char, [Char])
        - type: '[Char]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '7', ['6'])
          - Right:
              expr: '"7676"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', ['6'])
          - Right:
              expr: '"5656"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', ['6', '5'])
          - Right:
              expr: '"265265"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', ['6', '5'])
          - Right:
              expr: '"165165"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', ['6', '5'])
          - Right:
              expr: '"565565"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', [])
          - Right:
              expr: '"11"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', ['6'])
          - Right:
              expr: '"1616"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', ['6', '5'])
          - Right:
              expr: '"065065"'
    - - - type: ((Int -> Char), Int, [Char])
        - type: '[Char]'
      - - - expr: (let compose = (.) in compose toEnum toEnum, (-11), [])
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, (-9), ['6'])
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (18), [])
          - Right:
              expr: '"\DC2\DC2"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (6), ['6', '5'])
          - Right:
              expr: '"\ACK65\ACK65"'
        - - expr: (toEnum, (7), ['6', '5'])
          - Right:
              expr: '"\a65\a65"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (11), ['6', '5'])
          - Right:
              expr: '"\v65\v65"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9), [])
          - Left: '"Prelude.chr: bad argument: (-9)"'
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '8', [])
          - Right:
              expr: '[56, 56]'
        - - expr: (fromEnum, '2', [(6), (7)])
          - Right:
              expr: '[50, 6, 7, 50, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', [(6)])
          - Right:
              expr: '[54, 6, 54, 6]'
        - - expr: (fromEnum, '4', [(6), (7)])
          - Right:
              expr: '[52, 6, 7, 52, 6, 7]'
        - - expr: (fromEnum, '5', [(6), (7)])
          - Right:
              expr: '[53, 6, 7, 53, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', [])
          - Right:
              expr: '[48, 48]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', [(6)])
          - Right:
              expr: '[52, 6, 52, 6]'
        - - expr: (fromEnum, '0', [(6), (7)])
          - Right:
              expr: '[48, 6, 7, 48, 6, 7]'
    - - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (7), [])
          - Right:
              expr: '[7, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9), [])
          - Right:
              expr: '[-9, -9]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (6), [])
          - Right:
              expr: '[6, 6]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-8), [])
          - Right:
              expr: '[-8, -8]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9), [(6)])
          - Right:
              expr: '[-9, 6, -9, 6]'
        - - expr: (toEnum, (-11), [(6), (7)])
          - Right:
              expr: '[-11, 6, 7, -11, 6, 7]'
        - - expr: (toEnum, (7), [])
          - Right:
              expr: '[7, 7]'
        - - expr: (toEnum, (-8), [])
          - Right:
              expr: '[-8, -8]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl toEnum)
  - - - - type: ((Char -> Int), Char, Int)
        - type: (Int, Int)
      - - - expr: (fromEnum, '8', (18))
          - Right:
              expr: (56, 18)
        - - expr: (fromEnum, '7', (6))
          - Right:
              expr: (55, 6)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', (-8))
          - Right:
              expr: (52, -8)
        - - expr: (fromEnum, '5', (-20))
          - Right:
              expr: (53, -20)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (7))
          - Right:
              expr: (53, 7)
        - - expr: (fromEnum, '4', (-20))
          - Right:
              expr: (52, -20)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (-9))
          - Right:
              expr: (53, -9)
        - - expr: (fromEnum, '6', (6))
          - Right:
              expr: (54, 6)
    - - - type: ((Int -> Int), Int, Char)
        - type: (Int, Char)
      - - - expr: (let compose = (.) in compose toEnum toEnum, (-8), '2')
          - Right:
              expr: (-8, '2')
        - - expr: (toEnum, (7), '1')
          - Right:
              expr: (7, '1')
        - - expr: (let compose = (.) in compose toEnum toEnum, (-9), '5')
          - Right:
              expr: (-9, '5')
        - - expr: (toEnum, (7), '6')
          - Right:
              expr: (7, '6')
        - - expr: (toEnum, (18), '1')
          - Right:
              expr: (18, '1')
        - - expr: (let compose = (.) in compose toEnum toEnum, (-9), '4')
          - Right:
              expr: (-9, '4')
        - - expr: (fromEnum, (-9), '8')
          - Right:
              expr: (-9, '8')
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), '6')
          - Right:
              expr: (-20, '6')
    - - - type: ((Char -> Int), Char, Char)
        - type: (Char, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '1', '0')
          - Right:
              expr: ('1', '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', '6')
          - Right:
              expr: ('7', '6')
        - - expr: (fromEnum, '2', '2')
          - Right:
              expr: ('2', '2')
        - - expr: (fromEnum, '5', '7')
          - Right:
              expr: ('5', '7')
        - - expr: (fromEnum, '0', '6')
          - Right:
              expr: ('0', '6')
        - - expr: (fromEnum, '7', '6')
          - Right:
              expr: ('7', '6')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', '1')
          - Right:
              expr: ('5', '1')
        - - expr: (fromEnum, '0', '1')
          - Right:
              expr: ('0', '1')
    - - - type: ((Int -> Int), Int, Char)
        - type: (Char, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (18), '5')
          - Right:
              expr: ('\DC2', '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8), '7')
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (toEnum, (-11), '0')
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (18), '7')
          - Right:
              expr: ('\DC2', '7')
        - - expr: (fromEnum, (11), '1')
          - Right:
              expr: ('\v', '1')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (6), '1')
          - Right:
              expr: ('\ACK', '1')
        - - expr: (let compose = (.) in compose toEnum toEnum, (6), '8')
          - Right:
              expr: ('\ACK', '8')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (11), '7')
          - Right:
              expr: ('\v', '7')
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose unzip sequenceA)
  - - - - type: (((Char, [Int]) -> ([Char], [Int])), (Char, [Int]))
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               ('6', []))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose unzip (sequenceA mempty),
               ('7', [(6)]))
          - Right:
              expr: ("7", [6])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               ('7', [(6)]))
          - Right:
              expr: ("7", [6])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               ('5', [(6), (7)]))
          - Right:
              expr: ("55", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               ('5', [(6), (7)]))
          - Right:
              expr: ("55", [6, 7])
        - - expr: (let compose = (.) in compose unzip sequence, ('5', [(6), (7)]))
          - Right:
              expr: ("5555", [6, 7, 6, 7])
        - - expr: (let compose = (.) in compose mempty sequenceA, ('7', [(6)]))
          - Right:
              expr: ("7", [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               ('5', [(6), (7)]))
          - Right:
              expr: ("55", [6, 7])
    - - - type: (((Int, [Int]) -> ([Int], [Int])), (Int, [Int]))
        - type: ([Int], [Int])
      - - - expr: (let compose = (.) in compose unzip mempty, ((18), [(6)]))
          - Right:
              expr: ([18], [6])
        - - expr: |-
              (let compose = (.) in compose unzip (sequenceA mempty),
               ((7), [(6), (7)]))
          - Right:
              expr: ([7, 7], [6, 7])
        - - expr: (let compose = (.) in compose mempty length, ((6), []))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose unzip mempty, ((7), [(6), (7)]))
          - Right:
              expr: ([7, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ((18), [(6)]))
          - Right:
              expr: ([18], [6])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               ((6), []))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               ((6), []))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               ((18), [(6)]))
          - Right:
              expr: ([18], [6])
    - - - type: (((Int, [Char]) -> ([Int], [Char])), (Int, [Char]))
        - type: ([Int], [Char])
      - - - expr: (let compose = (.) in compose unzip mempty, ((7), ['6', '5']))
          - Right:
              expr: ([7, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               ((18), ['6']))
          - Right:
              expr: ([18], "6")
        - - expr: (let compose = (.) in compose unzip mempty, ((6), []))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty length, ((18), ['6']))
          - Right:
              expr: ([18], "6")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               ((18), ['6']))
          - Right:
              expr: ([18], "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               ((6), []))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty sequenceA, ((6), []))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose unzip sequenceA, ((18), ['6']))
          - Right:
              expr: ([18, 18], "66")
    - - - type: (((Char, [Char]) -> ([Char], [Char])), (Char, [Char]))
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               ('7', ['6']))
          - Right:
              expr: ("7", "6")
        - - expr: |-
              (let compose = (.) in compose unzip (sequence mempty),
               ('5', ['6', '5']))
          - Right:
              expr: ("55", "65")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               ('5', ['6', '5']))
          - Right:
              expr: ("55", "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               ('5', ['6', '5']))
          - Right:
              expr: ("55", "65")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               ('5', ['6', '5']))
          - Right:
              expr: ("55", "65")
        - - expr: (let compose = (.) in compose mempty sequence, ('7', ['6']))
          - Right:
              expr: ("7", "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ('6', []))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty sequenceA, ('6', []))
          - Right:
              expr: ("", "")
- - expr: |-
      let conc = (<>)
          compose = (.)
          zero = 0
          prepend = (:)
        in conc (compose (prepend zero))
  - - - - type: (((Char -> [Int]) -> Char -> [Int]), (Char -> [Int]), Char)
        - type: '[Int]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty (compose just),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '0')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in conc (compose mempty maybe),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '8')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (compose mempty conc),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '2')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '6')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in conc (compose mempty maybe),
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               '8')
          - Right:
              expr: '[0, 0, 0]'
        - - expr: |-
              (let compose = (.) in compose (compose mempty zip),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '0')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.) in compose mempty (maybe mempty),
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '1')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let conc = (<>) in conc mempty,
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '5')
          - Right:
              expr: '[0]'
    - - - type: (((Int -> [Int]) -> Int -> [Int]), (Int -> [Int]), Int)
        - type: '[Int]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (compose mempty conc),
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               (11))
          - Right:
              expr: '[0, 0]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (compose conc),
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               (-20))
          - Right:
              expr: '[0, 0]'
        - - expr: |-
              (let compose = (.) in compose (compose mempty zip),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-8))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               (-9))
          - Right:
              expr: '[0, 0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-11))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (compose conc),
               let compose = (.) in compose mempty maybe, (-9))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                   prepend = (:)
                 in conc (compose mempty prepend),
               let compose = (.) in compose mempty fromEnum, (-8))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-11))
          - Right:
              expr: '[0]'
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose zip (prepend zero)
  - - - - type: ([Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: ([], ['6', '5'])
          - Right:
              expr: '[(0, ''6'')]'
        - - expr: ([], ['6'])
          - Right:
              expr: '[(0, ''6'')]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], ['6'])
          - Right:
              expr: '[(0, ''6'')]'
        - - expr: ([(6)], ['6'])
          - Right:
              expr: '[(0, ''6'')]'
        - - expr: ([(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], ['6', '5'])
          - Right:
              expr: '[(0, ''6''), (6, ''5'')]'
        - - expr: ([(6), (7)], ['6', '5'])
          - Right:
              expr: '[(0, ''6''), (6, ''5'')]'
    - - - type: ([Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: ([(6), (7)], [(6), (7)])
          - Right:
              expr: '[(0, 6), (6, 7)]'
        - - expr: ([(6)], [(6), (7)])
          - Right:
              expr: '[(0, 6), (6, 7)]'
        - - expr: ([(6)], [(6)])
          - Right:
              expr: '[(0, 6)]'
        - - expr: ([], [(6)])
          - Right:
              expr: '[(0, 6)]'
        - - expr: ([(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [])
          - Right:
              expr: '[]'
        - - expr: ([], [(6), (7)])
          - Right:
              expr: '[(0, 6)]'
- - expr: let conc = (<>) in conc (conc mempty zip)
  - - - - type: (([Char] -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               ['6'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (let compose = (.) in compose zip (sequenceA mempty), ['6'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               ['6'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, ['6', '5'],
               [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: (zip, ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty (zip mempty), ['6'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: |-
              (let compose = (.) in compose zip (sequence mempty), [],
               [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.) in compose mempty (zip mempty), ['6'],
               ['6', '5'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: |-
              (let compose = (.) in compose zip (sequence mempty), ['6', '5'],
               ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (let compose = (.) in compose zip (sequenceA mempty), ['6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               [], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (compose mempty) zip, ['6'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (let compose = (.) in compose mempty zip, ['6', '5'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (zip, ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5''), (''6'', ''6''), (''5'', ''5'')]'
    - - - type: (([Int] -> [Char] -> [(Int, Char)]), [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: (let compose = (.) in compose zip (sequence mempty), [], ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose mempty (prepend zero),
               [(6), (7)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose zip (sequenceA mempty), [(6), (7)],
               ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: (let compose = (.) in compose foldMap mempty, [(6)], ['6', '5'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [(6)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: (zip, [(6)], ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [(6)], ['6', '5'])
          - Right:
              expr: '[(6, ''6'')]'
    - - - type: (([Int] -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [(6)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose zip (conc mempty),
               [(6)], [(6)])
          - Right:
              expr: '[(6, 6), (6, 6)]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose zip (conc mempty),
               [(6)], [(6), (7)])
          - Right:
              expr: '[(6, 6), (6, 6)]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip mempty, [(6), (7)], [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [(6)], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, [], [])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose (compose toEnum length)
  - - - - type: ((Char -> Maybe Int), Char)
        - type: Char
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '0')
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '1')
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8')
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2')
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '6')
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5')
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7')
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4')
          - Right:
              expr: '''\SOH'''
    - - - type: ((Char -> [] Char), Char)
        - type: Int
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '6')
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7')
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose mempty fromEnum, '6')
          - Right:
              expr: '0'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '5')
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose mempty maybe, '0')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '6')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '5')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '0')
          - Right:
              expr: '0'
    - - - type: ((Int -> [] Char), Int)
        - type: Int
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-11))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-11))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (7))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (6))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-11))
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose mempty fromEnum, (11))
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose mempty fromEnum, (6))
          - Right:
              expr: '0'
    - - - type: ((Int -> Maybe Int), Int)
        - type: Char
      - - - expr: (let just = Just in just, (7))
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-20))
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-11))
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (11))
          - Right:
              expr: '''\SOH'''
        - - expr: (let just = Just in just, (-8))
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (6))
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7))
          - Right:
              expr: '''\SOH'''
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (7))
          - Right:
              expr: '''\SOH'''
- - expr: let compose = (.) in compose compose zip
  - - - - type: ([Int], (Int -> [Char]), Int)
        - type: '[(Int, Char)]'
      - - - expr: |-
              ([(6)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (7))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (6))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (18))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-9))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (-20))
          - Right:
              expr: '[]'
    - - - type: ([Int], (Char -> [Int]), Char)
        - type: '[(Int, Int)]'
      - - - expr: |-
              ([(6)],
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '2')
          - Right:
              expr: '[]'
        - - expr: ([(6)], let compose = (.) in compose mempty maybe, '7')
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               '1')
          - Right:
              expr: '[(6, 0)]'
    - - - type: ([Int], (Int -> [Int]), Int)
        - type: '[(Int, Int)]'
      - - - expr: |-
              ([(6)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (6))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (6))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (18))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-9))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (18))
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], let compose = (.) in compose mempty maybe, (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (11))
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (11))
          - Right:
              expr: '[]'
    - - - type: ([Char], (Char -> [Int]), Char)
        - type: '[(Char, Int)]'
      - - - expr: |-
              (['6'],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (['6', '5'],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (['6'],
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               '4')
          - Right:
              expr: '[(''6'', 0)]'
        - - expr: (['6'], let compose = (.) in compose mempty fromEnum, '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (['6'],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (['6', '5'],
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (['6', '5'],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '0')
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose (compose sequenceA)
  - - - - type: ((Int -> Char -> [] ([] Int)), Int, Char)
        - type: '[] ([] Int)'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11), '6')
          - Right:
              expr: '[[]]'
        - - expr: (let compose = (.) in compose mempty maybe, (18), '6')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (7), '8')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (7), '6')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-20), '1')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (11), '7')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (6), '0')
          - Right:
              expr: '[[]]'
        - - expr: (let compose = (.) in compose mempty maybe, (7), '4')
          - Right:
              expr: '[[]]'
    - - - type: ((Char -> Char -> [] ([] Char)), Char, Char)
        - type: '[] ([] Char)'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '6', '2')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '0', '2')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6', '7')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '1', '0')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '7', '5')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '6', '5')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '7', '4')
          - Right:
              expr: '[""]'
        - - expr: (let compose = (.) in compose mempty maybe, '8', '7')
          - Right:
              expr: '[""]'
    - - - type: ((Char -> Int -> [] (Maybe Int)), Char, Int)
        - type: Maybe ([] Int)
      - - - expr: (let compose = (.) in compose mempty fromEnum, '5', (-8))
          - Right:
              expr: (Just [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '1', (-20))
          - Right:
              expr: (Just [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5', (-9))
          - Right:
              expr: (Just [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '1', (-20))
          - Right:
              expr: (Just [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '1', (-8))
          - Right:
              expr: (Just [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '0', (18))
          - Right:
              expr: (Just [])
        - - expr: (let compose = (.) in compose mempty fromEnum, '2', (-8))
          - Right:
              expr: (Just [])
        - - expr: (let compose = (.) in compose mempty maybe, '8', (11))
          - Right:
              expr: (Just [])
    - - - type: ((Int -> Char -> [] (Maybe Char)), Int, Char)
        - type: Maybe ([] Char)
      - - - expr: (let compose = (.) in compose mempty fromEnum, (-8), '7')
          - Right:
              expr: (Just "")
        - - expr: (let compose = (.) in compose mempty maybe, (6), '8')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6), '2')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               (-9), '5')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-9), '6')
          - Right:
              expr: (Just "")
        - - expr: (let compose = (.) in compose mempty maybe, (-9), '6')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-9), '6')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (18), '2')
          - Right:
              expr: (Just "")
- - expr: let conc = (<>) in maybe (conc unzip mempty)
  - - - - type: |-
            ((Int -> [(Char, Int)] -> ([Char], [Int])), Maybe Int,
             [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (18), [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just (7), [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (18), [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (7), [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (11), [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (-11), [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (7), [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing, [])
          - Right:
              expr: ("", [])
    - - - type: |-
            ((Int -> [(Int, Char)] -> ([Int], [Char])), Maybe Int,
             [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: (let compose = (.) in compose mempty maybe, Just (18), [])
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (7), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing, [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc unzip) mempty,
               Just (-11), [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (-11), [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (18), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just (-11),
               [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (18), [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
    - - - type: |-
            ((Char -> [(Char, Char)] -> ([Char], [Char])), Maybe Char,
             [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: (let compose = (.) in compose foldMap mempty, Nothing, [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '8', [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '8', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '0', [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '5', [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '7', [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7', [])
          - Right:
              expr: ("", "")
    - - - type: |-
            ((Char -> [(Char, Int)] -> ([Char], [Int])), Maybe Char,
             [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '5', [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '0', [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '8', [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '7', [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '8', [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '0', [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '5', [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '7', [('6', (6))])
          - Right:
              expr: ("", [])
- - expr: let compose = (.) in compose (compose (zip mempty))
  - - - - type: ((Int -> Int -> [Int]), Int, Int)
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-9), (-11))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (6), (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-8), (-9))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (6), (7))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (-8), (11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-9), (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-20), (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-20), (11))
          - Right:
              expr: '[]'
    - - - type: ((Char -> Int -> [Int]), Char, Int)
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5', (7))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '6', (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '0', (-8))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '5', (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4', (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '8', (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '0', (18))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '0', (-9))
          - Right:
              expr: '[]'
    - - - type: ((Int -> Char -> [Char]), Int, Char)
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (11), '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (7), '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-8), '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-11), '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (6), '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6), '1')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (6), '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (6), '6')
          - Right:
              expr: '[]'
    - - - type: ((Int -> Int -> [Char]), Int, Int)
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-20), (6))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (-8), (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (18), (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               (7), (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (18), (11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-20), (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               (-9), (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-9), (-11))
          - Right:
              expr: '[]'
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose (conc mempty prepend)
  - - - - type: ((Char -> Char), Char, [Char])
        - type: '[Char]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '5', ['6', '5'])
          - Right:
              expr: '"565"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', ['6', '5'])
          - Right:
              expr: '"065"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', ['6', '5'])
          - Right:
              expr: '"265"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', [])
          - Right:
              expr: '"4"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', ['6', '5'])
          - Right:
              expr: '"765"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', ['6', '5'])
          - Right:
              expr: '"465"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', ['6'])
          - Right:
              expr: '"56"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', ['6', '5'])
          - Right:
              expr: '"165"'
    - - - type: ((Int -> Char), Int, [Char])
        - type: '[Char]'
      - - - expr: (let compose = (.) in compose toEnum toEnum, (6), ['6', '5'])
          - Right:
              expr: '"\ACK65"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), ['6'])
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20), ['6'])
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (toEnum, (7), ['6'])
          - Right:
              expr: '"\a6"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-9), ['6'])
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (11), [])
          - Right:
              expr: '"\v"'
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
      - - - expr: (fromEnum, '0', [(6), (7)])
          - Right:
              expr: '[48, 6, 7]'
        - - expr: (fromEnum, '2', [(6), (7)])
          - Right:
              expr: '[50, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', [])
          - Right:
              expr: '[54]'
        - - expr: (fromEnum, '4', [])
          - Right:
              expr: '[52]'
        - - expr: (fromEnum, '0', [])
          - Right:
              expr: '[48]'
        - - expr: (fromEnum, '5', [(6)])
          - Right:
              expr: '[53, 6]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', [(6), (7)])
          - Right:
              expr: '[48, 6, 7]'
        - - expr: (fromEnum, '5', [])
          - Right:
              expr: '[53]'
    - - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
      - - - expr: (toEnum, (18), [])
          - Right:
              expr: '[18]'
        - - expr: (toEnum, (18), [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), [])
          - Right:
              expr: '[-20]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11), [])
          - Right:
              expr: '[-11]'
        - - expr: (toEnum, (-11), [(6), (7)])
          - Right:
              expr: '[-11, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (7), [(6), (7)])
          - Right:
              expr: '[7, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11), [(6), (7)])
          - Right:
              expr: '[-11, 6, 7]'
        - - expr: (toEnum, (11), [(6)])
          - Right:
              expr: '[11, 6]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl) tpl
  - - - - type: (Char, Int, Char)
        - type: ((Char, Int), Char)
      - - - expr: ('2', (11), '0')
          - Right:
              expr: (('2', 11), '0')
        - - expr: ('5', (-9), '4')
          - Right:
              expr: (('5', -9), '4')
        - - expr: ('4', (-8), '4')
          - Right:
              expr: (('4', -8), '4')
        - - expr: ('7', (-11), '5')
          - Right:
              expr: (('7', -11), '5')
        - - expr: ('6', (-9), '4')
          - Right:
              expr: (('6', -9), '4')
        - - expr: ('6', (-8), '5')
          - Right:
              expr: (('6', -8), '5')
        - - expr: ('8', (18), '8')
          - Right:
              expr: (('8', 18), '8')
        - - expr: ('7', (-20), '5')
          - Right:
              expr: (('7', -20), '5')
    - - - type: (Char, Char, Int)
        - type: ((Char, Char), Int)
      - - - expr: ('7', '8', (-20))
          - Right:
              expr: (('7', '8'), -20)
        - - expr: ('7', '2', (18))
          - Right:
              expr: (('7', '2'), 18)
        - - expr: ('4', '2', (18))
          - Right:
              expr: (('4', '2'), 18)
        - - expr: ('1', '8', (6))
          - Right:
              expr: (('1', '8'), 6)
        - - expr: ('6', '2', (7))
          - Right:
              expr: (('6', '2'), 7)
        - - expr: ('8', '5', (-9))
          - Right:
              expr: (('8', '5'), -9)
        - - expr: ('4', '6', (-11))
          - Right:
              expr: (('4', '6'), -11)
        - - expr: ('0', '6', (-8))
          - Right:
              expr: (('0', '6'), -8)
    - - - type: (Int, Char, Char)
        - type: ((Int, Char), Char)
      - - - expr: ((-9), '0', '2')
          - Right:
              expr: ((-9, '0'), '2')
        - - expr: ((18), '2', '2')
          - Right:
              expr: ((18, '2'), '2')
        - - expr: ((-20), '6', '6')
          - Right:
              expr: ((-20, '6'), '6')
        - - expr: ((-11), '5', '7')
          - Right:
              expr: ((-11, '5'), '7')
        - - expr: ((11), '7', '5')
          - Right:
              expr: ((11, '7'), '5')
        - - expr: ((-9), '4', '4')
          - Right:
              expr: ((-9, '4'), '4')
        - - expr: ((-11), '1', '8')
          - Right:
              expr: ((-11, '1'), '8')
        - - expr: ((7), '1', '0')
          - Right:
              expr: ((7, '1'), '0')
    - - - type: (Char, Char, Char)
        - type: ((Char, Char), Char)
      - - - expr: ('5', '5', '2')
          - Right:
              expr: (('5', '5'), '2')
        - - expr: ('2', '2', '1')
          - Right:
              expr: (('2', '2'), '1')
        - - expr: ('6', '4', '7')
          - Right:
              expr: (('6', '4'), '7')
        - - expr: ('5', '2', '2')
          - Right:
              expr: (('5', '2'), '2')
        - - expr: ('1', '0', '2')
          - Right:
              expr: (('1', '0'), '2')
        - - expr: ('6', '1', '8')
          - Right:
              expr: (('6', '1'), '8')
        - - expr: ('6', '2', '6')
          - Right:
              expr: (('6', '2'), '6')
        - - expr: ('2', '1', '4')
          - Right:
              expr: (('2', '1'), '4')
- - expr: |-
      let zero = 0
          prepend = (:)
        in maybe (prepend zero) prepend
  - - - - type: (Maybe Int, [Int])
        - type: '[Int]'
      - - - expr: (Just (11), [(6)])
          - Right:
              expr: '[11, 6]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[0]'
        - - expr: (Just (-11), [(6)])
          - Right:
              expr: '[-11, 6]'
        - - expr: (Nothing, [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: (Just (18), [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
        - - expr: (Just (18), [(6)])
          - Right:
              expr: '[18, 6]'
        - - expr: (Just (-11), [])
          - Right:
              expr: '[-11]'
        - - expr: (Just (11), [])
          - Right:
              expr: '[11]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc unzip) foldMap
  - - - - type: (((Int, Int) -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose unzip (sequenceA mempty),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: (let compose = (.) in compose mempty length, [])
          - Right:
              expr: ([], [])
    - - - type: (((Char, Int) -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.) in compose mempty length,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: (let compose = (.) in compose unzip (sequence mempty), [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose unzip (sequenceA mempty),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.) in compose unzip (sequence mempty),
               [('6', (6))])
          - Right:
              expr: ("6", [6])
    - - - type: (((Char, Char) -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: (let compose = (.) in compose unzip (sequence mempty), [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
    - - - type: (((Int, Char) -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.) in compose unzip (sequence mempty),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose unzip mempty,
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
- - expr: maybe (zip mempty)
  - - - - type: ((Int -> [Int] -> [(Char, Int)]), Maybe Int, [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (11), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (18), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just (7), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (18), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose zip (sequenceA mempty), Just (18),
               [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (-11), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (7), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (11), [(6)])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Int] -> [(Int, Int)]), Maybe Char, [Int])
        - type: '[(Int, Int)]'
      - - - expr: (let compose = (.) in compose mempty fromEnum, Nothing, [(6)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Nothing, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip mempty, Nothing, [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '0', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '8', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just '8', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [(6)])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Char] -> [(Char, Char)]), Maybe Char, [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose fmap tpl,
               Just '8', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose zip (sequenceA mempty), Just '7',
               ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '0', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (compose mempty) prepend,
               Just '7', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose fmap tpl,
               Just '5', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose sequenceA) tpl,
               Nothing, ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip mempty, Just '8', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip (sequenceA mempty), Just '5',
              [])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Char] -> [(Char, Char)]), Maybe Int, [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (11), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (7), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (-11), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (18), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (18), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (11), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (7), ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip mempty, Just (7), ['6'])
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          compose = (.)
        in maybe (compose just unzip)
  - - - - type: |-
            ((Char -> [(Char, Char)] -> Maybe ([Char], [Char])), Maybe Char,
             [(Char, Char)])
        - type: Maybe ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5', [('6', '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing, [('6', '6'), ('5', '5')])
          - Right:
              expr: (Just ("65", "65"))
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Nothing,
               [('6', '6'), ('5', '5')])
          - Right:
              expr: (Just ("65", "65"))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '8', [('6', '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '0', [('6', '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '7', [('6', '6'), ('5', '5')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '8', [('6', '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Nothing, [('6', '6'), ('5', '5')])
          - Right:
              expr: (Just ("65", "65"))
    - - - type: |-
            ((Char -> [(Int, Char)] -> Maybe ([Int], [Char])), Maybe Char,
             [(Int, Char)])
        - type: Maybe ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '7', [((6), '6'), ((7), '5')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just '5',
               [((6), '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '7', [((6), '6'), ((7), '5')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '0', [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '8', [((6), '6'), ((7), '5')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '5', [((6), '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose (compose just) mempty,
               Just '8', [((6), '6')])
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just '8',
               [((6), '6')])
          - Right:
              expr: Nothing
    - - - type: |-
            ((Int -> [(Int, Int)] -> Maybe ([Int], [Int])), Maybe Int,
             [(Int, Int)])
        - type: Maybe ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (18), [((6), (6))])
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (11), [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing, [])
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (-11), [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just (18), [((6), (6)), ((7), (7))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (11), [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (7), [((6), (6))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing, [((6), (6)), ((7), (7))])
          - Right:
              expr: (Just ([6, 7], [6, 7]))
    - - - type: |-
            ((Char -> [(Int, Int)] -> Maybe ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: Maybe ([Int], [Int])
      - - - expr: |-
              (let compose = (.) in compose mempty maybe, Just '0',
               [((6), (6)), ((7), (7))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing, [((6), (6))])
          - Right:
              expr: (Just ([6], [6]))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '7', [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing, [((6), (6))])
          - Right:
              expr: (Just ([6], [6]))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose (compose just) mempty,
               Just '7', [((6), (6)), ((7), (7))])
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '5', [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just '5',
               [((6), (6)), ((7), (7))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing, [((6), (6))])
          - Right:
              expr: (Just ([6], [6]))
- - expr: let compose = (.) in compose sequenceA unzip
  - - - - type: '[(Char, Int)]'
        - type: '[([Char], Int)]'
      - - - expr: ([('6', (6)), ('5', (7))])
          - Right:
              expr: '[("65", 6), ("65", 7)]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([('6', (6))])
          - Right:
              expr: '[("6", 6)]'
    - - - type: '[(Int, Char)]'
        - type: '[([Int], Char)]'
      - - - expr: ([((6), '6'), ((7), '5')])
          - Right:
              expr: '[([6, 7], ''6''), ([6, 7], ''5'')]'
        - - expr: ([((6), '6')])
          - Right:
              expr: '[([6], ''6'')]'
        - - expr: ([])
          - Right:
              expr: '[]'
    - - - type: '[(Int, Int)]'
        - type: '[([Int], Int)]'
      - - - expr: ([((6), (6))])
          - Right:
              expr: '[([6], 6)]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([((6), (6)), ((7), (7))])
          - Right:
              expr: '[([6, 7], 6), ([6, 7], 7)]'
    - - - type: '[(Char, Char)]'
        - type: '[([Char], Char)]'
      - - - expr: ([('6', '6'), ('5', '5')])
          - Right:
              expr: '[("65", ''6''), ("65", ''5'')]'
        - - expr: ([('6', '6')])
          - Right:
              expr: '[("6", ''6'')]'
        - - expr: ([])
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose fmap prepend
  - - - - type: (Char, Maybe [Char])
        - type: Maybe [Char]
      - - - expr: ('1', Just ['6', '5'])
          - Right:
              expr: (Just "165")
        - - expr: ('8', Just ['6', '5'])
          - Right:
              expr: (Just "865")
        - - expr: ('5', Just ['6', '5'])
          - Right:
              expr: (Just "565")
        - - expr: ('8', Just ['6'])
          - Right:
              expr: (Just "86")
        - - expr: ('2', Just ['6', '5'])
          - Right:
              expr: (Just "265")
        - - expr: ('7', Just ['6', '5'])
          - Right:
              expr: (Just "765")
        - - expr: ('8', Nothing)
          - Right:
              expr: Nothing
        - - expr: ('4', Just ['6'])
          - Right:
              expr: (Just "46")
    - - - type: (Int, Maybe [Int])
        - type: Maybe [Int]
      - - - expr: ((11), Just [(6)])
          - Right:
              expr: (Just [11, 6])
        - - expr: ((7), Just [(6), (7)])
          - Right:
              expr: (Just [7, 6, 7])
        - - expr: ((6), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((18), Just [(6), (7)])
          - Right:
              expr: (Just [18, 6, 7])
        - - expr: ((18), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((-8), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((-9), Just [(6), (7)])
          - Right:
              expr: (Just [-9, 6, 7])
        - - expr: ((-11), Just [(6), (7)])
          - Right:
              expr: (Just [-11, 6, 7])
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in conc (compose prepend sequence)
  - - - - type: |-
            ((Maybe (Maybe Int) -> [Maybe (Maybe Int)] -> [Maybe (Maybe Int)]),
             Maybe (Maybe Int), [Maybe (Maybe Int)])
        - type: '[Maybe (Maybe Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Nothing, [])
          - Right:
              expr: '[Just Nothing]'
        - - expr: (maybe mempty mempty, Just (Just (18)), [Nothing])
          - Right:
              expr: '[Just (Just 18), Nothing]'
        - - expr: (let compose = (.) in compose (compose mempty) elem, Nothing, [])
          - Right:
              expr: '[Just Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (Just (18)), [])
          - Right:
              expr: '[Just (Just 18)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing, [Nothing, Just (Just (7))])
          - Right:
              expr: '[Just Nothing, Nothing, Just (Just 7)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just (Just (-11)), [Nothing])
          - Right:
              expr: '[Just (Just (-11)), Nothing]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend sequence,
               Just (Just (18)), [])
          - Right:
              expr: '[Just (Just 18), Just (Just 18)]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing, [Nothing])
          - Right:
              expr: '[Just Nothing, Nothing]'
- - expr: let tpl = (,) in tpl
  - - - - type: (Int, Int)
        - type: (Int, Int)
      - - - expr: ((-9), (-9))
          - Right:
              expr: (-9, -9)
        - - expr: ((6), (-20))
          - Right:
              expr: (6, -20)
        - - expr: ((-8), (11))
          - Right:
              expr: (-8, 11)
        - - expr: ((-20), (11))
          - Right:
              expr: (-20, 11)
        - - expr: ((7), (-11))
          - Right:
              expr: (7, -11)
        - - expr: ((7), (-9))
          - Right:
              expr: (7, -9)
        - - expr: ((11), (-20))
          - Right:
              expr: (11, -20)
        - - expr: ((-9), (18))
          - Right:
              expr: (-9, 18)
    - - - type: (Char, Char)
        - type: (Char, Char)
      - - - expr: ('0', '1')
          - Right:
              expr: ('0', '1')
        - - expr: ('5', '5')
          - Right:
              expr: ('5', '5')
        - - expr: ('2', '0')
          - Right:
              expr: ('2', '0')
        - - expr: ('7', '4')
          - Right:
              expr: ('7', '4')
        - - expr: ('4', '8')
          - Right:
              expr: ('4', '8')
        - - expr: ('1', '5')
          - Right:
              expr: ('1', '5')
        - - expr: ('8', '8')
          - Right:
              expr: ('8', '8')
        - - expr: ('1', '4')
          - Right:
              expr: ('1', '4')
    - - - type: (Char, Int)
        - type: (Char, Int)
      - - - expr: ('0', (11))
          - Right:
              expr: ('0', 11)
        - - expr: ('8', (7))
          - Right:
              expr: ('8', 7)
        - - expr: ('5', (7))
          - Right:
              expr: ('5', 7)
        - - expr: ('6', (11))
          - Right:
              expr: ('6', 11)
        - - expr: ('5', (-11))
          - Right:
              expr: ('5', -11)
        - - expr: ('5', (6))
          - Right:
              expr: ('5', 6)
        - - expr: ('1', (-8))
          - Right:
              expr: ('1', -8)
        - - expr: ('0', (-20))
          - Right:
              expr: ('0', -20)
    - - - type: (Int, Char)
        - type: (Int, Char)
      - - - expr: ((-20), '7')
          - Right:
              expr: (-20, '7')
        - - expr: ((-20), '4')
          - Right:
              expr: (-20, '4')
        - - expr: ((18), '8')
          - Right:
              expr: (18, '8')
        - - expr: ((11), '8')
          - Right:
              expr: (11, '8')
        - - expr: ((-9), '2')
          - Right:
              expr: (-9, '2')
        - - expr: ((6), '6')
          - Right:
              expr: (6, '6')
        - - expr: ((-11), '8')
          - Right:
              expr: (-11, '8')
        - - expr: ((6), '7')
          - Right:
              expr: (6, '7')
- - expr: let just = Just in maybe (sequence (just unzip))
  - - - - type: |-
            ((Char -> [(Char, Char)] -> Maybe ([Char], [Char])), Maybe Char,
             [(Char, Char)])
        - type: Maybe ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '8', [('6', '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '8', [('6', '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '8', [('6', '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '0', [('6', '6'), ('5', '5')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing, [('6', '6'), ('5', '5')])
          - Right:
              expr: (Just ("65", "65"))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing, [])
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing, [('6', '6')])
          - Right:
              expr: (Just ("6", "6"))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '7', [])
          - Right:
              expr: Nothing
    - - - type: |-
            ((Char -> [(Int, Char)] -> Maybe ([Int], [Char])), Maybe Char,
             [(Int, Char)])
        - type: Maybe ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '0', [((6), '6'), ((7), '5')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing, [((6), '6')])
          - Right:
              expr: (Just ([6], "6"))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '0', [((6), '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '0', [((6), '6')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '5', [((6), '6'), ((7), '5')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '7', [((6), '6'), ((7), '5')])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '7', [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '0', [((6), '6')])
          - Right:
              expr: Nothing
    - - - type: |-
            ((Int -> [(Int, Int)] -> Maybe ([Int], [Int])), Maybe Int,
             [(Int, Int)])
        - type: Maybe ([Int], [Int])
      - - - expr: (let compose = (.) in compose mempty maybe, Just (-11), [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose (compose just) mempty,
               Just (11), [])
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just (7),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [((6), (6)), ((7), (7))])
          - Right:
              expr: (Just ([6, 7], [6, 7]))
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (11), [((6), (6)), ((7), (7))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (11), [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just (18),
               [((6), (6))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (7), [])
          - Right:
              expr: Nothing
    - - - type: |-
            ((Char -> [(Int, Int)] -> Maybe ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: Maybe ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '8', [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '8', [((6), (6))])
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose (compose just) mempty,
               Just '0', [((6), (6)), ((7), (7))])
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '0', [])
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose foldMap mempty, Just '8', [])
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Nothing,
               [((6), (6)), ((7), (7))])
          - Right:
              expr: (Just ([6, 7], [6, 7]))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose (compose just) mempty,
               Nothing, [])
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '8', [((6), (6)), ((7), (7))])
          - Right:
              expr: Nothing
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in conc (compose prepend fromEnum)
  - - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (6), [])
          - Right:
              expr: '[6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-11), [(6)])
          - Right:
              expr: '[-11, 6]'
        - - expr: (let compose = (.) in compose foldMap mempty, (18), [(6)])
          - Right:
              expr: '[18, 6]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend fromEnum,
               (-11), [(6)])
          - Right:
              expr: '[-11, 6, -11, 6]'
        - - expr: (let compose = (.) in compose foldMap mempty, (-8), [])
          - Right:
              expr: '[-8]'
        - - expr: (let prepend = (:) in prepend, (-11), [(6)])
          - Right:
              expr: '[-11, 6, -11, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6), [(6), (7)])
          - Right:
              expr: '[6, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               (11), [(6)])
          - Right:
              expr: '[11, 6]'
    - - - type: ((Char -> [Int] -> [Int]), Char, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1', [])
          - Right:
              expr: '[49]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '8', [(6)])
          - Right:
              expr: '[56, 6]'
        - - expr: (let compose = (.) in compose mempty maybe, '7', [])
          - Right:
              expr: '[55]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '5', [(6)])
          - Right:
              expr: '[53, 6]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               '1', [(6)])
          - Right:
              expr: '[49, 6, 6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5', [(6)])
          - Right:
              expr: '[53, 6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '5', [(6), (7)])
          - Right:
              expr: '[53, 6, 7]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               '6', [(6), (7)])
          - Right:
              expr: '[54, 6, 7, 6, 7]'
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc (prepend (unzip mempty))
  - - - - type: (([([Char], [Int])] -> [([Char], [Int])]), [([Char], [Int])])
        - type: '[([Char], [Int])]'
      - - - expr: |-
              (let compose = (.) in compose sequence sequence,
               [([], []), (['6', '5'], [(6), (7)]), (['6'], [(6)])])
          - Right:
              expr: |-
                [("", []), ("", []), ("65", [6, 7]), ("6", [6]), ("656", []),
                 ("656", [6, 7]), ("656", [6])]
        - - expr: (let compose = (.) in compose mempty sequence, [([], [])])
          - Right:
              expr: '[("", []), ("", [])]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [])
          - Right:
              expr: '[("", [])]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (prepend mempty) mempty,
               [([], []), (['6', '5'], [(6), (7)])])
          - Right:
              expr: '[("", []), ("", []), ("65", [6, 7]), ("", [])]'
        - - expr: |-
              (let compose = (.) in compose sequence sequence,
               [([], []), (['6', '5'], [(6), (7)])])
          - Right:
              expr: '[("", []), ("", []), ("65", [6, 7]), ("65", []), ("65", [6, 7])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [])
          - Right:
              expr: '[("", [])]'
        - - expr: (let compose = (.) in compose mempty maybe, [])
          - Right:
              expr: '[("", [])]'
        - - expr: |-
              (let compose = (.) in compose mempty length,
               [([], []), (['6', '5'], [(6), (7)]), (['6'], [(6)])])
          - Right:
              expr: '[("", []), ("", []), ("65", [6, 7]), ("6", [6])]'
    - - - type: (([([Int], [Char])] -> [([Int], [Char])]), [([Int], [Char])])
        - type: '[([Int], [Char])]'
      - - - expr: (let compose = (.) in compose mempty maybe, [])
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [])
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let conc = (<>)
                   prepend = (:)
                 in prepend (conc mempty mempty),
               [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: |-
                [([], ""), ([], ""), ([6, 7], "65"), ([], ""), ([], ""),
                 ([6, 7], "65")]
        - - expr: (let compose = (.) in compose sequenceA sequenceA, [([], [])])
          - Right:
              expr: '[([], ""), ([], ""), ([], "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [])
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [([], [])])
          - Right:
              expr: '[([], ""), ([], "")]'
        - - expr: (let compose = (.) in compose sequenceA sequence, [])
          - Right:
              expr: '[([], "")]'
    - - - type: (([([Int], [Int])] -> [([Int], [Int])]), [([Int], [Int])])
        - type: '[([Int], [Int])]'
      - - - expr: |-
              (let conc = (<>) in conc mempty,
               [([], []), ([(6), (7)], [(6), (7)]), ([(6)], [(6)])])
          - Right:
              expr: |-
                [([], []), ([], []), ([6, 7], [6, 7]), ([6], [6]), ([], []),
                 ([6, 7], [6, 7]), ([6], [6])]
        - - expr: |-
              (let compose = (.) in compose sequenceA sequence,
               [([], []), ([(6), (7)], [(6), (7)]), ([(6)], [(6)])])
          - Right:
              expr: |-
                [([], []), ([], []), ([6, 7], [6, 7]), ([6], [6]), ([6, 7, 6], []),
                 ([6, 7, 6], [6, 7]), ([6, 7, 6], [6])]
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [([], [])])
          - Right:
              expr: '[([], []), ([], [])]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty (prepend mempty),
               [([], [])])
          - Right:
              expr: '[([], []), ([], [])]'
        - - expr: |-
              (let conc = (<>)
                   prepend = (:)
                 in conc (prepend mempty mempty),
               [([], [])])
          - Right:
              expr: '[([], []), ([], []), ([], []), ([], [])]'
        - - expr: |-
              (let compose = (.) in compose sequence sequence,
               [([], []), ([(6), (7)], [(6), (7)])])
          - Right:
              expr: |-
                [([], []), ([], []), ([6, 7], [6, 7]), ([6, 7], []),
                 ([6, 7], [6, 7])]
        - - expr: (let compose = (.) in compose mempty unzip, [([], [])])
          - Right:
              expr: '[([], []), ([], [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [([], [])])
          - Right:
              expr: '[([], []), ([], [])]'
    - - - type: (([([Char], [Char])] -> [([Char], [Char])]), [([Char], [Char])])
        - type: '[([Char], [Char])]'
      - - - expr: (let compose = (.) in compose mempty sequence, [])
          - Right:
              expr: '[("", "")]'
        - - expr: |-
              (let conc = (<>)
                   prepend = (:)
                 in prepend (conc mempty mempty),
               [([], []), (['6', '5'], ['6', '5'])])
          - Right:
              expr: |-
                [("", ""), ("", ""), ("65", "65"), ("", ""), ("", ""),
                 ("65", "65")]
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: '[("", ""), ("", ""), ("65", "65"), ("6", "6")]'
        - - expr: |-
              (let conc = (<>) in conc mempty,
               [([], []), (['6', '5'], ['6', '5'])])
          - Right:
              expr: '[("", ""), ("", ""), ("65", "65"), ("", ""), ("65", "65")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [])
          - Right:
              expr: '[("", "")]'
        - - expr: (let conc = (<>) in conc mempty, [])
          - Right:
              expr: '[("", "")]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (prepend mempty) mempty,
               [([], [])])
          - Right:
              expr: '[("", ""), ("", ""), ("", "")]'
        - - expr: |-
              (let conc = (<>) in conc (zip mempty mempty),
               [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: |-
                [("", ""), ("", ""), ("65", "65"), ("6", "6"), ("", ""),
                 ("65", "65"), ("6", "6")]
- - expr: |-
      let conc = (<>)
          just = Just
          compose = (.)
          prepend = (:)
        in conc (compose prepend just)
  - - - - type: ((Int -> [Maybe Int] -> [Maybe Int]), Int, [Maybe Int])
        - type: '[Maybe Int]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               (-8), [])
          - Right:
              expr: '[Just (-8)]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-20), [])
          - Right:
              expr: '[Just (-20)]'
        - - expr: (let compose = (.) in compose foldMap mempty, (-8), [])
          - Right:
              expr: '[Just (-8)]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (18), [Nothing])
          - Right:
              expr: '[Just 18, Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7), [Nothing, Just (7)])
          - Right:
              expr: '[Just 7, Nothing, Just 7]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-9), [Nothing])
          - Right:
              expr: '[Just (-9), Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               (-8), [])
          - Right:
              expr: '[Just (-8)]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-8), [])
          - Right:
              expr: '[Just (-8)]'
    - - - type: ((Char -> [Maybe Char] -> [Maybe Char]), Char, [Maybe Char])
        - type: '[Maybe Char]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '4', [Nothing])
          - Right:
              expr: '[Just ''4'', Nothing]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '0', [Nothing, Just '5'])
          - Right:
              expr: '[Just ''0'', Nothing, Just ''5'']'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '4', [])
          - Right:
              expr: '[Just ''4'']'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7', [])
          - Right:
              expr: '[Just ''7'']'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '2', [Nothing, Just '5'])
          - Right:
              expr: '[Just ''2'', Nothing, Just ''5'']'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '7', [Nothing, Just '5'])
          - Right:
              expr: '[Just ''7'', Nothing, Just ''5'']'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '4', [])
          - Right:
              expr: '[Just ''4'']'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '6', [Nothing])
          - Right:
              expr: '[Just ''6'', Nothing]'
- - expr: fmap
  - - - - type: ((Int -> Int), Maybe Int)
        - type: Maybe Int
      - - - expr: (fromEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (toEnum, Just (18))
          - Right:
              expr: (Just 18)
        - - expr: (fromEnum, Just (-11))
          - Right:
              expr: (Just (-11))
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (18))
          - Right:
              expr: (Just 18)
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (-11))
          - Right:
              expr: (Just (-11))
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (11))
          - Right:
              expr: (Just 11)
        - - expr: (fromEnum, Just (11))
          - Right:
              expr: (Just 11)
        - - expr: (toEnum, Just (11))
          - Right:
              expr: (Just 11)
    - - - type: ((Int -> Char), Maybe Int)
        - type: Maybe Char
      - - - expr: (toEnum, Just (7))
          - Right:
              expr: (Just '\a')
        - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (18))
          - Right:
              expr: (Just '\DC2')
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: (Just '\a')
        - - expr: (toEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (18))
          - Right:
              expr: (Just '\DC2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: Nothing
    - - - type: ((Char -> Int), Maybe Char)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: (Just 53)
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '8')
          - Right:
              expr: (Just 56)
        - - expr: (fromEnum, Just '7')
          - Right:
              expr: (Just 55)
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: (Just 55)
        - - expr: (fromEnum, Just '0')
          - Right:
              expr: (Just 48)
        - - expr: (fromEnum, Just '5')
          - Right:
              expr: (Just 53)
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: (Just 48)
        - - expr: (fromEnum, Just '8')
          - Right:
              expr: (Just 56)
- - expr: let compose = (.) in maybe (compose unzip sequence)
  - - - - type: |-
            ((Int -> (Int, [Char]) -> ([Int], [Char])), Maybe Int,
             (Int, [Char]))
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (11), ((18), ['6']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Nothing, ((6), []))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (11), ((6), []))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just (18),
               ((7), ['6', '5']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing, ((6), []))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just (18), ((7), ['6', '5']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just (-11), ((6), []))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (7), ((7), ['6', '5']))
          - Right:
              expr: ([], "")
    - - - type: |-
            ((Char -> (Int, [Int]) -> ([Int], [Int])), Maybe Char,
             (Int, [Int]))
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '0', ((18), [(6)]))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '5', ((7), [(6), (7)]))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '7', ((7), [(6), (7)]))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, ((6), []))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Nothing,
               ((7), [(6), (7)]))
          - Right:
              expr: ([7, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing, ((6), []))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0', ((7), [(6), (7)]))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '7', ((18), [(6)]))
          - Right:
              expr: ([], [])
    - - - type: |-
            ((Char -> (Char, [Char]) -> ([Char], [Char])), Maybe Char,
             (Char, [Char]))
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing, ('6', []))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '0', ('6', []))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing, ('7', ['6']))
          - Right:
              expr: ("7", "6")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '7', ('6', []))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '8', ('5', ['6', '5']))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '0', ('6', []))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7', ('7', ['6']))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, Just '0', ('6', []))
          - Right:
              expr: ("", "")
    - - - type: |-
            ((Char -> (Int, [Char]) -> ([Int], [Char])), Maybe Char,
             (Int, [Char]))
        - type: ([Int], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '5', ((18), ['6']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '7', ((7), ['6', '5']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '5', ((18), ['6']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Nothing, ((6), []))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '8', ((18), ['6']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '5', ((7), ['6', '5']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just '0',
               ((18), ['6']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '7', ((6), []))
          - Right:
              expr: ([], "")
- - expr: let compose = (.) in maybe (compose sequence unzip)
  - - - - type: |-
            ((Int -> [(Char, Int)] -> [([Char], Int)]), Maybe Int,
             [(Char, Int)])
        - type: '[([Char], Int)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing, [('6', (6))])
          - Right:
              expr: '[("6", 6)]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (18), [('6', (6))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing, [('6', (6))])
          - Right:
              expr: '[("6", 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (18), [('6', (6)), ('5', (7))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Nothing, [('6', (6))])
          - Right:
              expr: '[("6", 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (-11), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (-11), [('6', (6)), ('5', (7))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (-11), [('6', (6)), ('5', (7))])
          - Right:
              expr: '[]'
    - - - type: |-
            ((Char -> [(Int, Int)] -> [([Int], Int)]), Maybe Char,
             [(Int, Int)])
        - type: '[([Int], Int)]'
      - - - expr: (let compose = (.) in compose mempty maybe, Just '7', [((6), (6))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '0', [((6), (6)), ((7), (7))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '8', [((6), (6)), ((7), (7))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '8', [((6), (6)), ((7), (7))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just '8',
               [((6), (6))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '8', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, Nothing, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '0', [])
          - Right:
              expr: '[]'
    - - - type: |-
            ((Int -> [(Int, Char)] -> [([Int], Char)]), Maybe Int,
             [(Int, Char)])
        - type: '[([Int], Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (-11), [((6), '6')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (18), [((6), '6')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (18), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (7), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (-11), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just (7), [((6), '6')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Nothing, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (18), [((6), '6'), ((7), '5')])
          - Right:
              expr: '[]'
    - - - type: |-
            ((Char -> [(Int, Char)] -> [([Int], Char)]), Maybe Char,
             [(Int, Char)])
        - type: '[([Int], Char)]'
      - - - expr: (let compose = (.) in compose mempty maybe, Just '5', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '0', [((6), '6')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '5', [((6), '6'), ((7), '5')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '5', [((6), '6')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing, [((6), '6'), ((7), '5')])
          - Right:
              expr: '[([6, 7], ''6''), ([6, 7], ''5'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '7', [((6), '6'), ((7), '5')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just '0',
               [((6), '6'), ((7), '5')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '8', [((6), '6'), ((7), '5')])
          - Right:
              expr: '[]'
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc prepend
  - - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               (11), [(6)])
          - Right:
              expr: '[11, 6]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend fromEnum,
               (11), [(6)])
          - Right:
              expr: '[11, 6, 11, 6]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               (7), [(6)])
          - Right:
              expr: '[7, 6, 6]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-20), [])
          - Right:
              expr: '[-20]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (7), [(6)])
          - Right:
              expr: '[7, 6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-20), [])
          - Right:
              expr: '[-20]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-11), [])
          - Right:
              expr: '[-11]'
        - - expr: (let compose = (.) in compose mempty maybe, (11), [])
          - Right:
              expr: '[11]'
    - - - type: ((Char -> [Char] -> [Char]), Char, [Char])
        - type: '[Char]'
      - - - expr: |-
              (let compose = (.) in compose (compose mempty) elem, '7',
               ['6', '5'])
          - Right:
              expr: '"765"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5', [])
          - Right:
              expr: '"5"'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                   prepend = (:)
                 in compose (conc mempty) prepend,
               '4', ['6', '5'])
          - Right:
              expr: '"465465"'
        - - expr: (let compose = (.) in compose foldMap mempty, '6', ['6'])
          - Right:
              expr: '"66"'
        - - expr: (let compose = (.) in compose mempty maybe, '2', [])
          - Right:
              expr: '"2"'
        - - expr: (let compose = (.) in compose mempty fromEnum, '6', ['6'])
          - Right:
              expr: '"66"'
        - - expr: (let compose = (.) in compose foldMap mempty, '6', [])
          - Right:
              expr: '"6"'
        - - expr: (let compose = (.) in compose foldMap mempty, '5', [])
          - Right:
              expr: '"5"'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend) zip
  - - - - type: ([Int], [Int], [[(Int, Int)]])
        - type: '[[(Int, Int)]]'
      - - - expr: ([(6), (7)], [(6), (7)], [])
          - Right:
              expr: '[[(6, 6), (7, 7)]]'
        - - expr: ([], [(6), (7)], [[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([(6), (7)], [(6), (7)], [[], [((6), (6)), ((7), (7))]])
          - Right:
              expr: '[[(6, 6), (7, 7)], [], [(6, 6), (7, 7)]]'
        - - expr: ([(6)], [(6)], [])
          - Right:
              expr: '[[(6, 6)]]'
        - - expr: ([(6), (7)], [(6)], [[], [((6), (6)), ((7), (7))]])
          - Right:
              expr: '[[(6, 6)], [], [(6, 6), (7, 7)]]'
        - - expr: |-
              ([(6), (7)], [(6), (7)],
               [[], [((6), (6)), ((7), (7))], [((6), (6))]])
          - Right:
              expr: '[[(6, 6), (7, 7)], [], [(6, 6), (7, 7)], [(6, 6)]]'
        - - expr: ([], [(6), (7)], [[], [((6), (6)), ((7), (7))]])
          - Right:
              expr: '[[], [], [(6, 6), (7, 7)]]'
        - - expr: ([(6)], [(6)], [[], [((6), (6)), ((7), (7))]])
          - Right:
              expr: '[[(6, 6)], [], [(6, 6), (7, 7)]]'
    - - - type: ([Int], [Char], [[(Int, Char)]])
        - type: '[[(Int, Char)]]'
      - - - expr: ([(6), (7)], ['6'], [[]])
          - Right:
              expr: '[[(6, ''6'')], []]'
        - - expr: ([], ['6'], [[], [((6), '6'), ((7), '5')]])
          - Right:
              expr: '[[], [], [(6, ''6''), (7, ''5'')]]'
        - - expr: ([(6), (7)], ['6', '5'], [[], [((6), '6'), ((7), '5')]])
          - Right:
              expr: '[[(6, ''6''), (7, ''5'')], [], [(6, ''6''), (7, ''5'')]]'
        - - expr: ([], ['6', '5'], [])
          - Right:
              expr: '[[]]'
        - - expr: ([], ['6', '5'], [[], [((6), '6'), ((7), '5')], [((6), '6')]])
          - Right:
              expr: '[[], [], [(6, ''6''), (7, ''5'')], [(6, ''6'')]]'
        - - expr: ([], ['6', '5'], [[], [((6), '6'), ((7), '5')]])
          - Right:
              expr: '[[], [], [(6, ''6''), (7, ''5'')]]'
        - - expr: ([], ['6'], [[], [((6), '6'), ((7), '5')], [((6), '6')]])
          - Right:
              expr: '[[], [], [(6, ''6''), (7, ''5'')], [(6, ''6'')]]'
        - - expr: ([(6), (7)], ['6'], [[], [((6), '6'), ((7), '5')]])
          - Right:
              expr: '[[(6, ''6'')], [], [(6, ''6''), (7, ''5'')]]'
    - - - type: ([Char], [Int], [[(Char, Int)]])
        - type: '[[(Char, Int)]]'
      - - - expr: |-
              (['6', '5'], [(6), (7)],
               [[], [('6', (6)), ('5', (7))], [('6', (6))]])
          - Right:
              expr: '[[(''6'', 6), (''5'', 7)], [], [(''6'', 6), (''5'', 7)], [(''6'',
                6)]]'
        - - expr: (['6'], [(6)], [])
          - Right:
              expr: '[[(''6'', 6)]]'
        - - expr: (['6', '5'], [(6), (7)], [[], [('6', (6)), ('5', (7))]])
          - Right:
              expr: '[[(''6'', 6), (''5'', 7)], [], [(''6'', 6), (''5'', 7)]]'
        - - expr: (['6'], [(6), (7)], [[]])
          - Right:
              expr: '[[(''6'', 6)], []]'
        - - expr: (['6'], [(6), (7)], [[], [('6', (6)), ('5', (7))]])
          - Right:
              expr: '[[(''6'', 6)], [], [(''6'', 6), (''5'', 7)]]'
        - - expr: ([], [], [])
          - Right:
              expr: '[[]]'
        - - expr: ([], [(6)], [[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([], [(6), (7)], [[], [('6', (6)), ('5', (7))]])
          - Right:
              expr: '[[], [], [(''6'', 6), (''5'', 7)]]'
    - - - type: ([Char], [Char], [[(Char, Char)]])
        - type: '[[(Char, Char)]]'
      - - - expr: ([], [], [[], [('6', '6'), ('5', '5')], [('6', '6')]])
          - Right:
              expr: '[[], [], [(''6'', ''6''), (''5'', ''5'')], [(''6'', ''6'')]]'
        - - expr: (['6', '5'], [], [])
          - Right:
              expr: '[[]]'
        - - expr: (['6', '5'], [], [[], [('6', '6'), ('5', '5')], [('6', '6')]])
          - Right:
              expr: '[[], [], [(''6'', ''6''), (''5'', ''5'')], [(''6'', ''6'')]]'
        - - expr: (['6', '5'], ['6'], [])
          - Right:
              expr: '[[(''6'', ''6'')]]'
        - - expr: ([], ['6', '5'], [[], [('6', '6'), ('5', '5')]])
          - Right:
              expr: '[[], [], [(''6'', ''6''), (''5'', ''5'')]]'
        - - expr: ([], ['6'], [[]])
          - Right:
              expr: '[[], []]'
        - - expr: (['6'], ['6', '5'], [[], [('6', '6'), ('5', '5')], [('6', '6')]])
          - Right:
              expr: '[[(''6'', ''6'')], [], [(''6'', ''6''), (''5'', ''5'')], [(''6'',
                ''6'')]]'
        - - expr: (['6', '5'], [], [[], [('6', '6'), ('5', '5')]])
          - Right:
              expr: '[[], [], [(''6'', ''6''), (''5'', ''5'')]]'
- - expr: let compose = (.) in compose (compose zip sequenceA)
  - - - - type: ((Int -> [] [Int]), Int, [Char])
        - type: '[([] Int, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (6), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-9), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7), ['6'])
          - Right:
              expr: '[([], ''6'')]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (7), ['6'])
          - Right:
              expr: '[([], ''6'')]'
        - - expr: (let compose = (.) in compose mempty maybe, (-11), ['6', '5'])
          - Right:
              expr: '[([], ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (6), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (7), ['6'])
          - Right:
              expr: '[([], ''6'')]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11), ['6'])
          - Right:
              expr: '[([], ''6'')]'
    - - - type: ((Char -> [] [Int]), Char, [Int])
        - type: '[([] Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6', [(6)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '6', [(6), (7)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '7', [(6), (7)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7', [(6)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '5', [(6), (7)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '7', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '6', [(6), (7)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '4', [])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [] [Char]), Char, [Char])
        - type: '[([] Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5', ['6'])
          - Right:
              expr: '[("", ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '2', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (prepend mempty) mempty,
               '2', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '5', ['6', '5'])
          - Right:
              expr: '[("", ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '4', ['6', '5'])
          - Right:
              expr: '[("", ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1', ['6', '5'])
          - Right:
              expr: '[("", ''6'')]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (prepend mempty) mempty,
               '1', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '8', [])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [] [Int]), Int, [Int])
        - type: '[([] Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (18), [(6), (7)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-20), [(6), (7)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (18), [(6)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (11), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (11), [(6)])
          - Right:
              expr: '[([], 6)]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-11), [(6), (7)])
          - Right:
              expr: '[([], 6)]'
- - expr: let compose = (.) in compose maybe unzip
  - - - - type: ([(Int, Int)], (Char -> ([Int], [Int])), Maybe Char)
        - type: ([Int], [Int])
      - - - expr: |-
              ([((6), (6))],
               let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               Just '0')
          - Right:
              expr: ([], [])
        - - expr: |-
              ([((6), (6))],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7')
          - Right:
              expr: ([], [])
        - - expr: |-
              ([], let compose = (.) in compose unzip (sequenceA mempty),
               Just '8')
          - Right:
              expr: ([], [])
        - - expr: |-
              ([((6), (6))],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '5')
          - Right:
              expr: ([], [])
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               Just '7')
          - Right:
              expr: ([], [])
        - - expr: |-
              ([((6), (6))],
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '8')
          - Right:
              expr: ([], [])
        - - expr: |-
              ([((6), (6)), ((7), (7))],
               let compose = (.) in compose unzip (sequenceA mempty), Just '0')
          - Right:
              expr: ([], [])
        - - expr: ([], let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: ([], [])
    - - - type: ([(Char, Int)], (Char -> ([Char], [Int])), Maybe Char)
        - type: ([Char], [Int])
      - - - expr: |-
              ([],
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '7')
          - Right:
              expr: ("", [])
        - - expr: ([], let compose = (.) in compose unzip mempty, Nothing)
          - Right:
              expr: ("", [])
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '5')
          - Right:
              expr: ("", [])
        - - expr: |-
              ([('6', (6)), ('5', (7))],
               let compose = (.) in compose mempty fromEnum, Just '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '0')
          - Right:
              expr: ("", [])
        - - expr: |-
              ([('6', (6))],
               let compose = (.) in compose unzip (sequenceA mempty), Just '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              ([('6', (6))],
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '0')
          - Right:
              expr: ("", [])
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '7')
          - Right:
              expr: ("", [])
    - - - type: ([(Int, Char)], (Char -> ([Int], [Char])), Maybe Char)
        - type: ([Int], [Char])
      - - - expr: |-
              ([((6), '6'), ((7), '5')],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              ([((6), '6'), ((7), '5')],
               let compose = (.) in compose mempty maybe, Just '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              ([((6), '6'), ((7), '5')],
               let compose = (.) in compose unzip (sequence mempty), Nothing)
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              ([((6), '6'), ((7), '5')],
               let compose = (.) in compose unzip (sequenceA mempty), Just '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              ([((6), '6'), ((7), '5')],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              ([((6), '6'), ((7), '5')],
               let compose = (.) in compose unzip (sequence mempty), Just '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              ([((6), '6')],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '0')
          - Right:
              expr: ([], "")
        - - expr: |-
              ([((6), '6'), ((7), '5')],
               let compose = (.) in compose mempty fromEnum, Just '8')
          - Right:
              expr: ([], "")
    - - - type: ([(Char, Int)], (Int -> ([Char], [Int])), Maybe Int)
        - type: ([Char], [Int])
      - - - expr: |-
              ([('6', (6))],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Nothing)
          - Right:
              expr: ("6", [6])
        - - expr: |-
              ([('6', (6)), ('5', (7))],
               let compose = (.) in compose unzip (sequenceA mempty), Nothing)
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              ([('6', (6)), ('5', (7))],
               let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               Nothing)
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              ([('6', (6))],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (-11))
          - Right:
              expr: ("", [])
        - - expr: |-
              ([('6', (6)), ('5', (7))],
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing)
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              ([('6', (6))],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (7))
          - Right:
              expr: ("", [])
        - - expr: |-
              ([('6', (6)), ('5', (7))],
               let compose = (.) in compose mempty maybe, Just (18))
          - Right:
              expr: ("", [])
        - - expr: ([], let compose = (.) in compose unzip mempty, Just (18))
          - Right:
              expr: ("", [])
- - expr: let prepend = (:) in prepend (zip mempty mempty)
  - - - - type: '[[(Int, Char)]]'
        - type: '[[(Int, Char)]]'
      - - - expr: ([[], [((6), '6'), ((7), '5')]])
          - Right:
              expr: '[[], [], [(6, ''6''), (7, ''5'')]]'
        - - expr: ([[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([[], [((6), '6'), ((7), '5')], [((6), '6')]])
          - Right:
              expr: '[[], [], [(6, ''6''), (7, ''5'')], [(6, ''6'')]]'
        - - expr: ([])
          - Right:
              expr: '[[]]'
    - - - type: '[[(Char, Char)]]'
        - type: '[[(Char, Char)]]'
      - - - expr: ([[], [('6', '6'), ('5', '5')], [('6', '6')]])
          - Right:
              expr: '[[], [], [(''6'', ''6''), (''5'', ''5'')], [(''6'', ''6'')]]'
        - - expr: ([[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([[], [('6', '6'), ('5', '5')]])
          - Right:
              expr: '[[], [], [(''6'', ''6''), (''5'', ''5'')]]'
        - - expr: ([])
          - Right:
              expr: '[[]]'
    - - - type: '[[(Char, Int)]]'
        - type: '[[(Char, Int)]]'
      - - - expr: ([[], [('6', (6)), ('5', (7))], [('6', (6))]])
          - Right:
              expr: '[[], [], [(''6'', 6), (''5'', 7)], [(''6'', 6)]]'
        - - expr: ([])
          - Right:
              expr: '[[]]'
        - - expr: ([[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([[], [('6', (6)), ('5', (7))]])
          - Right:
              expr: '[[], [], [(''6'', 6), (''5'', 7)]]'
    - - - type: '[[(Int, Int)]]'
        - type: '[[(Int, Int)]]'
      - - - expr: ([[], [((6), (6)), ((7), (7))]])
          - Right:
              expr: '[[], [], [(6, 6), (7, 7)]]'
        - - expr: ([[], [((6), (6)), ((7), (7))], [((6), (6))]])
          - Right:
              expr: '[[], [], [(6, 6), (7, 7)], [(6, 6)]]'
        - - expr: ([[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([])
          - Right:
              expr: '[[]]'
- - expr: maybe
  - - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: ((-8), let compose = (.) in compose toEnum fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((-20), let compose = (.) in compose toEnum fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((18), fromEnum, Nothing)
          - Right:
              expr: '18'
        - - expr: ((-8), toEnum, Just (18))
          - Right:
              expr: '18'
        - - expr: ((-20), let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((7), toEnum, Just (18))
          - Right:
              expr: '18'
        - - expr: ((-8), let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((6), let compose = (.) in compose toEnum toEnum, Just (-11))
          - Right:
              expr: (-11)
    - - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
      - - - expr: ((-20), fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ((11), fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((-8), let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((-9), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: (-9)
        - - expr: ((6), let compose = (.) in compose toEnum fromEnum, Just '8')
          - Right:
              expr: '56'
        - - expr: ((6), let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: ((-8), fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ((7), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '7'
    - - - type: (Char, (Int -> Char), Maybe Int)
        - type: Char
      - - - expr: ('6', toEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ('1', toEnum, Just (11))
          - Right:
              expr: '''\v'''
        - - expr: ('5', let compose = (.) in compose toEnum toEnum, Just (11))
          - Right:
              expr: '''\v'''
        - - expr: ('2', let compose = (.) in compose toEnum fromEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ('1', toEnum, Nothing)
          - Right:
              expr: '''1'''
        - - expr: ('5', let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '''5'''
        - - expr: ('2', let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: '''2'''
        - - expr: ('0', toEnum, Just (7))
          - Right:
              expr: '''\a'''
    - - - type: (Char, (Char -> Char), Maybe Char)
        - type: Char
      - - - expr: ('7', let compose = (.) in compose toEnum fromEnum, Just '8')
          - Right:
              expr: '''8'''
        - - expr: ('6', let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '''5'''
        - - expr: ('1', let compose = (.) in compose toEnum fromEnum, Just '8')
          - Right:
              expr: '''8'''
        - - expr: ('4', let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '''0'''
        - - expr: ('7', let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '''7'''
        - - expr: ('8', let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '''7'''
        - - expr: ('4', let compose = (.) in compose toEnum fromEnum, Just '8')
          - Right:
              expr: '''8'''
        - - expr: ('2', let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '''2'''
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just length)
  - - - - type: ((Char -> [] Char), Char)
        - type: Maybe Int
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '4')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '5')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '7')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '1')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '2')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '0')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '5')
          - Right:
              expr: (Just 0)
    - - - type: ((Int -> [] Char), Int)
        - type: Maybe Int
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (6))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (6))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-9))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (6))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (18))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-11))
          - Right:
              expr: (Just 0)
    - - - type: ((Int -> Maybe Char), Int)
        - type: Maybe Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (11))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-20))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (6))
          - Right:
              expr: (Just 1)
    - - - type: ((Int -> [] Int), Int)
        - type: Maybe Int
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-11))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (18))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (18))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-20))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (18))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-8))
          - Right:
              expr: (Just 0)
- - expr: let conc = (<>) in conc unzip
  - - - - type: (([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [])
          - Right:
              expr: ([], "")
        - - expr: (unzip, [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [])
          - Right:
              expr: ([], "")
    - - - type: (([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) unzip,
               [((6), (6))])
          - Right:
              expr: ([6, 6], [6, 6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [])
          - Right:
              expr: ([], [])
    - - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: (let compose = (.) in compose mempty maybe, [])
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty unzip, [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose unzip (sequenceA mempty),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
    - - - type: (([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: (let compose = (.) in compose mempty maybe, [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: (let compose = (.) in compose unzip mempty, [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [])
          - Right:
              expr: ("", [])
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose prepend (prepend zero)
  - - - - type: ([Int], [[Int]])
        - type: '[[Int]]'
      - - - expr: ([(6), (7)], [[], [(6), (7)]])
          - Right:
              expr: '[[0, 6, 7], [], [6, 7]]'
        - - expr: ([], [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[[0], [], [6, 7], [6]]'
        - - expr: ([(6), (7)], [])
          - Right:
              expr: '[[0, 6, 7]]'
        - - expr: ([(6)], [])
          - Right:
              expr: '[[0, 6]]'
        - - expr: ([(6), (7)], [[]])
          - Right:
              expr: '[[0, 6, 7], []]'
        - - expr: ([(6)], [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[[0, 6], [], [6, 7], [6]]'
        - - expr: ([(6), (7)], [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[[0, 6, 7], [], [6, 7], [6]]'
        - - expr: ([], [])
          - Right:
              expr: '[[0]]'
- - expr: let compose = (.) in compose (compose sequenceA unzip)
  - - - - type: ((Char -> [(Int, Int)]), Char)
        - type: '[([Int], Int)]'
      - - - expr: (let compose = (.) in compose mempty maybe, '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '7')
          - Right:
              expr: '[]'
    - - - type: ((Char -> [(Char, Char)]), Char)
        - type: '[([Char], Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '5')
          - Right:
              expr: '[]'
    - - - type: ((Char -> [(Int, Char)]), Char)
        - type: '[([Int], Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '0')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '2')
          - Right:
              expr: '[]'
    - - - type: ((Int -> [(Int, Char)]), Int)
        - type: '[([Int], Char)]'
      - - - expr: (let compose = (.) in compose (zip mempty) mempty, (-8))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, (-20))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (11))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (6))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (7))
          - Right:
              expr: '[]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (compose unzip) conc
  - - - - type: ([(Char, Char)], [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: ([('6', '6'), ('5', '5')], [])
          - Right:
              expr: ("65", "65")
        - - expr: ([], [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: ([('6', '6'), ('5', '5')], [('6', '6')])
          - Right:
              expr: ("656", "656")
        - - expr: ([('6', '6'), ('5', '5')], [('6', '6'), ('5', '5')])
          - Right:
              expr: ("6565", "6565")
        - - expr: ([('6', '6')], [])
          - Right:
              expr: ("6", "6")
        - - expr: ([('6', '6')], [('6', '6')])
          - Right:
              expr: ("66", "66")
        - - expr: ([], [])
          - Right:
              expr: ("", "")
        - - expr: ([], [('6', '6')])
          - Right:
              expr: ("6", "6")
    - - - type: ([(Int, Char)], [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: ([], [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: ([((6), '6')], [])
          - Right:
              expr: ([6], "6")
        - - expr: ([((6), '6'), ((7), '5')], [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7, 6, 7], "6565")
        - - expr: ([], [])
          - Right:
              expr: ([], "")
        - - expr: ([], [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: ([((6), '6'), ((7), '5')], [])
          - Right:
              expr: ([6, 7], "65")
        - - expr: ([((6), '6')], [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 6, 7], "665")
        - - expr: ([((6), '6'), ((7), '5')], [((6), '6')])
          - Right:
              expr: ([6, 7, 6], "656")
    - - - type: ([(Int, Int)], [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: ([((6), (6)), ((7), (7))], [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7, 6, 7], [6, 7, 6, 7])
        - - expr: ([((6), (6)), ((7), (7))], [((6), (6))])
          - Right:
              expr: ([6, 7, 6], [6, 7, 6])
        - - expr: ([((6), (6))], [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 6, 7], [6, 6, 7])
        - - expr: ([((6), (6)), ((7), (7))], [])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: ([], [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: ([((6), (6))], [((6), (6))])
          - Right:
              expr: ([6, 6], [6, 6])
        - - expr: ([((6), (6))], [])
          - Right:
              expr: ([6], [6])
        - - expr: ([], [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
    - - - type: ([(Char, Int)], [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: ([('6', (6)), ('5', (7))], [])
          - Right:
              expr: ("65", [6, 7])
        - - expr: ([('6', (6))], [])
          - Right:
              expr: ("6", [6])
        - - expr: ([], [])
          - Right:
              expr: ("", [])
        - - expr: ([], [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: ([], [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: ([('6', (6))], [('6', (6)), ('5', (7))])
          - Right:
              expr: ("665", [6, 6, 7])
        - - expr: ([('6', (6))], [('6', (6))])
          - Right:
              expr: ("66", [6, 6])
        - - expr: ([('6', (6)), ('5', (7))], [('6', (6))])
          - Right:
              expr: ("656", [6, 7, 6])
- - expr: |-
      let just = Just
          zero = 0
          prepend = (:)
        in prepend (just zero)
  - - - - type: '[Maybe Int]'
        - type: '[Maybe Int]'
      - - - expr: ([Nothing, Just (7)])
          - Right:
              expr: '[Just 0, Nothing, Just 7]'
        - - expr: ([])
          - Right:
              expr: '[Just 0]'
        - - expr: ([Nothing])
          - Right:
              expr: '[Just 0, Nothing]'
- - expr: let conc = (<>) in maybe (conc unzip) mempty
  - - - - type: (Maybe Int, ([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (Just (18),
               let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (Just (18),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (Just (-11),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (Nothing,
               let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (Just (7),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (Just (7),
               let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (Just (11),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (Just (18),
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [((6), '6')])
          - Right:
              expr: ([], "")
    - - - type: (Maybe Char, ([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (Just '5',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: (Just '7', let compose = (.) in compose mempty length, [])
          - Right:
              expr: ([], "")
        - - expr: (Just '5', unzip, [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (Nothing,
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (Nothing, let compose = (.) in compose unzip (sequenceA mempty),
               [])
          - Right:
              expr: ([], "")
        - - expr: (Just '0', let compose = (.) in compose unzip mempty, [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (Just '0',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (Just '5',
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [])
          - Right:
              expr: ([], "")
    - - - type: (Maybe Char, ([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: (Nothing, let compose = (.) in compose mempty length, [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: |-
              (Just '0',
               let just = Just
                   compose = (.)
                 in compose mempty just,
               [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '7',
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: (Just '7', let compose = (.) in compose mempty unzip, [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (Just '0',
               let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (Nothing,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (Nothing,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (Nothing,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [('6', (6))])
          - Right:
              expr: ("6", [6])
    - - - type: (Maybe Int, ([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: (Just (11), let compose = (.) in compose mempty length, [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (Nothing,
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (Nothing,
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) unzip,
               [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (Nothing,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (Just (7),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) unzip,
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (Just (-11), let compose = (.) in compose unzip (sequenceA mempty),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (Nothing, let compose = (.) in compose mempty (zip mempty),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (Just (-11),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               [])
          - Right:
              expr: ([], [])
- - expr: let compose = (.) in maybe (compose unzip sequenceA)
  - - - - type: |-
            ((Int -> (Char, [Int]) -> ([Char], [Int])), Maybe Int,
             (Char, [Int]))
        - type: ([Char], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (11), ('5', [(6), (7)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Just (-11),
               ('6', []))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (11), ('6', []))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (-11), ('5', [(6), (7)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (11), ('5', [(6), (7)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just (18),
               ('7', [(6)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (-11), ('7', [(6)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Nothing, ('5', [(6), (7)]))
          - Right:
              expr: ("55", [6, 7])
    - - - type: |-
            ((Char -> (Int, [Int]) -> ([Int], [Int])), Maybe Char,
             (Int, [Int]))
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing, ((7), [(6), (7)]))
          - Right:
              expr: ([7, 7], [6, 7])
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just '5',
               ((18), [(6)]))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '7', ((18), [(6)]))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just '0',
               ((18), [(6)]))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing, ((7), [(6), (7)]))
          - Right:
              expr: ([7, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '5', ((7), [(6), (7)]))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose foldMap mempty, Just '7', ((6), []))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '0', ((6), []))
          - Right:
              expr: ([], [])
    - - - type: |-
            ((Char -> (Char, [Int]) -> ([Char], [Int])), Maybe Char,
             (Char, [Int]))
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing, ('7', [(6)]))
          - Right:
              expr: ("7", [6])
        - - expr: (let compose = (.) in compose mempty maybe, Just '0', ('7', [(6)]))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty maybe, Just '5', ('6', []))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '0', ('6', []))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7', ('5', [(6), (7)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Nothing,
               ('6', []))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty maybe, Just '8', ('6', []))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty fromEnum, Just '8', ('6', []))
          - Right:
              expr: ("", [])
    - - - type: |-
            ((Char -> (Int, [Char]) -> ([Int], [Char])), Maybe Char,
             (Int, [Char]))
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '5', ((18), ['6']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Nothing, ((7), ['6', '5']))
          - Right:
              expr: ([7, 7], "65")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7', ((7), ['6', '5']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just '5',
               ((18), ['6']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing, ((7), ['6', '5']))
          - Right:
              expr: ([7, 7], "65")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '7', ((7), ['6', '5']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '0', ((7), ['6', '5']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '7', ((7), ['6', '5']))
          - Right:
              expr: ([], "")
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero) fromEnum
  - - - - type: Char
        - type: (Int, Int)
      - - - expr: ('6')
          - Right:
              expr: (0, 54)
        - - expr: ('4')
          - Right:
              expr: (0, 52)
        - - expr: ('2')
          - Right:
              expr: (0, 50)
        - - expr: ('1')
          - Right:
              expr: (0, 49)
        - - expr: ('5')
          - Right:
              expr: (0, 53)
        - - expr: ('0')
          - Right:
              expr: (0, 48)
        - - expr: ('8')
          - Right:
              expr: (0, 56)
        - - expr: ('7')
          - Right:
              expr: (0, 55)
- - expr: |-
      let just = Just
          compose = (.)
          tpl = (,)
        in compose tpl just
  - - - - type: (Char, Int)
        - type: (Maybe Char, Int)
      - - - expr: ('5', (6))
          - Right:
              expr: (Just '5', 6)
        - - expr: ('0', (18))
          - Right:
              expr: (Just '0', 18)
        - - expr: ('2', (-8))
          - Right:
              expr: (Just '2', -8)
        - - expr: ('2', (6))
          - Right:
              expr: (Just '2', 6)
        - - expr: ('2', (11))
          - Right:
              expr: (Just '2', 11)
        - - expr: ('2', (18))
          - Right:
              expr: (Just '2', 18)
        - - expr: ('1', (7))
          - Right:
              expr: (Just '1', 7)
        - - expr: ('6', (-11))
          - Right:
              expr: (Just '6', -11)
    - - - type: (Int, Int)
        - type: (Maybe Int, Int)
      - - - expr: ((-20), (-11))
          - Right:
              expr: (Just (-20), -11)
        - - expr: ((18), (18))
          - Right:
              expr: (Just 18, 18)
        - - expr: ((-9), (-9))
          - Right:
              expr: (Just (-9), -9)
        - - expr: ((-9), (18))
          - Right:
              expr: (Just (-9), 18)
        - - expr: ((18), (6))
          - Right:
              expr: (Just 18, 6)
        - - expr: ((7), (6))
          - Right:
              expr: (Just 7, 6)
        - - expr: ((-11), (-11))
          - Right:
              expr: (Just (-11), -11)
        - - expr: ((-8), (6))
          - Right:
              expr: (Just (-8), 6)
    - - - type: (Char, Char)
        - type: (Maybe Char, Char)
      - - - expr: ('0', '0')
          - Right:
              expr: (Just '0', '0')
        - - expr: ('1', '0')
          - Right:
              expr: (Just '1', '0')
        - - expr: ('8', '5')
          - Right:
              expr: (Just '8', '5')
        - - expr: ('6', '4')
          - Right:
              expr: (Just '6', '4')
        - - expr: ('2', '1')
          - Right:
              expr: (Just '2', '1')
        - - expr: ('6', '1')
          - Right:
              expr: (Just '6', '1')
        - - expr: ('5', '5')
          - Right:
              expr: (Just '5', '5')
        - - expr: ('5', '2')
          - Right:
              expr: (Just '5', '2')
    - - - type: (Int, Char)
        - type: (Maybe Int, Char)
      - - - expr: ((7), '0')
          - Right:
              expr: (Just 7, '0')
        - - expr: ((18), '1')
          - Right:
              expr: (Just 18, '1')
        - - expr: ((-20), '7')
          - Right:
              expr: (Just (-20), '7')
        - - expr: ((-11), '5')
          - Right:
              expr: (Just (-11), '5')
        - - expr: ((18), '2')
          - Right:
              expr: (Just 18, '2')
        - - expr: ((7), '7')
          - Right:
              expr: (Just 7, '7')
        - - expr: ((-20), '6')
          - Right:
              expr: (Just (-20), '6')
        - - expr: ((18), '5')
          - Right:
              expr: (Just 18, '5')
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequenceA (just just))
  - - - - type: ((Char -> Int), Char)
        - type: Maybe (Maybe Int)
      - - - expr: (fromEnum, '0')
          - Right:
              expr: (Just (Just 48))
        - - expr: (fromEnum, '6')
          - Right:
              expr: (Just (Just 54))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just (Just 53))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just (Just 52))
        - - expr: (fromEnum, '1')
          - Right:
              expr: (Just (Just 49))
        - - expr: (fromEnum, '8')
          - Right:
              expr: (Just (Just 56))
        - - expr: (fromEnum, '4')
          - Right:
              expr: (Just (Just 52))
        - - expr: (fromEnum, '5')
          - Right:
              expr: (Just (Just 53))
    - - - type: ((Int -> Int), Int)
        - type: Maybe (Maybe Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (Just (Just 11))
        - - expr: (fromEnum, (7))
          - Right:
              expr: (Just (Just 7))
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20))
          - Right:
              expr: (Just (Just (-20)))
        - - expr: (toEnum, (18))
          - Right:
              expr: (Just (Just 18))
        - - expr: (toEnum, (6))
          - Right:
              expr: (Just (Just 6))
        - - expr: (toEnum, (-20))
          - Right:
              expr: (Just (Just (-20)))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11))
          - Right:
              expr: (Just (Just (-11)))
        - - expr: (toEnum, (7))
          - Right:
              expr: (Just (Just 7))
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc (maybe mempty prepend)
  - - - - type: ((Maybe Int -> [Int] -> [Int]), Maybe Int, [Int])
        - type: '[Int]'
      - - - expr: (let compose = (.) in compose mempty length, Just (11), [(6)])
          - Right:
              expr: '[11, 6]'
        - - expr: (let compose = (.) in compose foldMap mempty, Nothing, [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   prepend = (:)
                 in maybe (conc mempty) prepend,
               Just (11), [(6)])
          - Right:
              expr: '[11, 6, 11, 6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (-11), [])
          - Right:
              expr: '[-11]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (11), [(6)])
          - Right:
              expr: '[11, 6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (-11), [(6)])
          - Right:
              expr: '[-11, 6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing, [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (11), [(6), (7)])
          - Right:
              expr: '[11, 6, 7]'
    - - - type: ((Maybe Char -> [Char] -> [Char]), Maybe Char, [Char])
        - type: '[Char]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing, ['6', '5'])
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '8', ['6', '5'])
          - Right:
              expr: '"865"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '5', [])
          - Right:
              expr: '"5"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, ['6', '5'])
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '8', ['6'])
          - Right:
              expr: '"86"'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '8', ['6', '5'])
          - Right:
              expr: '"865"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '5', ['6', '5'])
          - Right:
              expr: '"565"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '8', ['6', '5'])
          - Right:
              expr: '"865"'
- - expr: let compose = (.) in compose (compose sequenceA) fmap
  - - - - type: ((Int -> Maybe Int), Maybe Int)
        - type: Maybe (Maybe Int)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just (-11))
          - Right:
              expr: (Just (Just (-11)))
        - - expr: (let just = Just in just, Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (let just = Just in just, Just (7))
          - Right:
              expr: (Just (Just 7))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (18))
          - Right:
              expr: (Just (Just 18))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (11))
          - Right:
              expr: (Just (Just 11))
        - - expr: (let just = Just in just, Just (-11))
          - Right:
              expr: (Just (Just (-11)))
    - - - type: ((Char -> Maybe Int), Maybe Char)
        - type: Maybe (Maybe Int)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '0')
          - Right:
              expr: (Just (Just 48))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '5')
          - Right:
              expr: (Just (Just 53))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '7')
          - Right:
              expr: (Just (Just 55))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '8')
          - Right:
              expr: (Just (Just 56))
    - - - type: ((Char -> [] Int), Maybe Char)
        - type: '[] (Maybe Int)'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               Nothing)
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty maybe, Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7')
          - Right:
              expr: '[]'
- - expr: maybe mempty zip
  - - - - type: (Maybe [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: (Just ['6'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (Nothing, [(6)])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (Just ['6'], [])
          - Right:
              expr: '[]'
        - - expr: (Just ['6', '5'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: (Nothing, [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just ['6', '5'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
    - - - type: (Maybe [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: (Just [(6), (7)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: (Just [(6)], [])
          - Right:
              expr: '[]'
        - - expr: (Just [(6)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: (Just [(6)], ['6', '5'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: (Nothing, ['6'])
          - Right:
              expr: '[]'
        - - expr: (Just [(6), (7)], ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['6', '5'])
          - Right:
              expr: '[]'
    - - - type: (Maybe [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: (Just [(6)], [])
          - Right:
              expr: '[]'
        - - expr: (Just [(6)], [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: (Nothing, [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: (Just [(6), (7)], [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just [(6)], [(6), (7)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: (Nothing, [(6)])
          - Right:
              expr: '[]'
    - - - type: (Maybe [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just ['6'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (Just ['6', '5'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (Just ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: (Just ['6'], [])
          - Right:
              expr: '[]'
        - - expr: (Just ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['6'])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['6', '5'])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in maybe (compose unzip mempty)
  - - - - type: ((Int -> Int -> ([Char], [Char])), Maybe Int, Int)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (7), (6))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (11), (11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (7), (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just (7), (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (7), (11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (-11), (-9))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (7), (-11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just (7), (11))
          - Right:
              expr: ("", "")
    - - - type: ((Char -> Int -> ([Int], [Char])), Maybe Char, Int)
        - type: ([Int], [Char])
      - - - expr: (let compose = (.) in compose mempty fromEnum, Just '5', (6))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, Just '0', (-9))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Just '5',
               (-20))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Nothing, (18))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty fromEnum, Nothing, (18))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing, (18))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '7', (-20))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing, (-9))
          - Right:
              expr: ([], "")
    - - - type: ((Int -> Char -> ([Int], [Char])), Maybe Int, Char)
        - type: ([Int], [Char])
      - - - expr: (let compose = (.) in compose mempty maybe, Just (18), '2')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (18), '8')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, '1')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (-11), '7')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (18), '2')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (11), '6')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (-11), '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (11), '4')
          - Right:
              expr: ([], "")
    - - - type: ((Char -> Char -> ([Int], [Char])), Maybe Char, Char)
        - type: ([Int], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '7', '8')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '8', '2')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty fromEnum, Just '0', '8')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '5', '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '0', '2')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '5', '2')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, Just '8', '6')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '5', '4')
          - Right:
              expr: ([], "")
- - expr: let conc = (<>) in maybe (conc unzip unzip)
  - - - - type: |-
            ((Char -> [(Int, Int)] -> ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '5', [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '5', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '0', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '0', [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just '0',
               [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '8', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '7', [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '7', [((6), (6))])
          - Right:
              expr: ([], [])
    - - - type: ((Int -> [(Int, Int)] -> ([Int], [Int])), Maybe Int, [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (7), [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Just (11),
               [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Just (-11),
               [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (18), [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc unzip) mempty,
               Just (11), [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (-11), [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Nothing, [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (18), [])
          - Right:
              expr: ([], [])
    - - - type: |-
            ((Char -> [(Char, Char)] -> ([Char], [Char])), Maybe Char,
             [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '5', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, Just '7', [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '0', [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '7', [])
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose (compose unzip) mempty, Just '5',
              [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '8', [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc unzip) mempty,
               Just '8', [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '7', [('6', '6')])
          - Right:
              expr: ("", "")
    - - - type: |-
            ((Char -> [(Char, Int)] -> ([Char], [Int])), Maybe Char,
             [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Nothing, [('6', (6))])
          - Right:
              expr: ("66", [6, 6])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '8', [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '8', [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty maybe, Just '7', [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc unzip) mempty,
               Just '8', [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '7', [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose (compose unzip) mempty, Just '5',
              [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '8', [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose (conc prepend) mempty
  - - - - type: (Int, Int, [Int])
        - type: '[Int]'
      - - - expr: ((11), (-20), [(6)])
          - Right:
              expr: '[-20, 6]'
        - - expr: ((-11), (-20), [])
          - Right:
              expr: '[-20]'
        - - expr: ((18), (-11), [(6), (7)])
          - Right:
              expr: '[-11, 6, 7]'
        - - expr: ((-8), (18), [])
          - Right:
              expr: '[18]'
        - - expr: ((18), (-8), [(6), (7)])
          - Right:
              expr: '[-8, 6, 7]'
        - - expr: ((18), (-9), [])
          - Right:
              expr: '[-9]'
        - - expr: ((-8), (11), [(6), (7)])
          - Right:
              expr: '[11, 6, 7]'
        - - expr: ((7), (11), [])
          - Right:
              expr: '[11]'
    - - - type: (Char, Char, [Char])
        - type: '[Char]'
      - - - expr: ('0', '0', ['6'])
          - Right:
              expr: '"06"'
        - - expr: ('0', '1', [])
          - Right:
              expr: '"1"'
        - - expr: ('1', '2', [])
          - Right:
              expr: '"2"'
        - - expr: ('7', '1', [])
          - Right:
              expr: '"1"'
        - - expr: ('1', '7', ['6'])
          - Right:
              expr: '"76"'
        - - expr: ('8', '1', [])
          - Right:
              expr: '"1"'
        - - expr: ('2', '1', ['6', '5'])
          - Right:
              expr: '"165"'
        - - expr: ('7', '7', [])
          - Right:
              expr: '"7"'
    - - - type: (Int, Char, [Char])
        - type: '[Char]'
      - - - expr: ((6), '5', ['6', '5'])
          - Right:
              expr: '"565"'
        - - expr: ((-8), '2', [])
          - Right:
              expr: '"2"'
        - - expr: ((-20), '7', ['6'])
          - Right:
              expr: '"76"'
        - - expr: ((-11), '4', ['6', '5'])
          - Right:
              expr: '"465"'
        - - expr: ((-11), '0', ['6', '5'])
          - Right:
              expr: '"065"'
        - - expr: ((18), '7', ['6', '5'])
          - Right:
              expr: '"765"'
        - - expr: ((-9), '4', [])
          - Right:
              expr: '"4"'
        - - expr: ((-8), '8', ['6'])
          - Right:
              expr: '"86"'
    - - - type: (Char, Int, [Int])
        - type: '[Int]'
      - - - expr: ('6', (7), [(6), (7)])
          - Right:
              expr: '[7, 6, 7]'
        - - expr: ('4', (-8), [(6)])
          - Right:
              expr: '[-8, 6]'
        - - expr: ('0', (7), [(6), (7)])
          - Right:
              expr: '[7, 6, 7]'
        - - expr: ('5', (7), [(6), (7)])
          - Right:
              expr: '[7, 6, 7]'
        - - expr: ('7', (-20), [])
          - Right:
              expr: '[-20]'
        - - expr: ('8', (6), [])
          - Right:
              expr: '[6]'
        - - expr: ('8', (7), [(6), (7)])
          - Right:
              expr: '[7, 6, 7]'
        - - expr: ('2', (7), [])
          - Right:
              expr: '[7]'
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in conc (compose prepend toEnum)
  - - - - type: ((Int -> [Char] -> [Char]), Int, [Char])
        - type: '[Char]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               (6), [])
          - Right:
              expr: '"\ACK"'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-8), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-8), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-8), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               (-8), [])
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8), ['6'])
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose mempty maybe, (-8), [])
          - Left: '"Prelude.chr: bad argument: (-8)"'
    - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (7), [(6)])
          - Right:
              expr: '[7, 6]'
        - - expr: (let compose = (.) in compose foldMap mempty, (7), [(6)])
          - Right:
              expr: '[7, 6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               (-8), [(6), (7)])
          - Right:
              expr: '[-8, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (11), [(6), (7)])
          - Right:
              expr: '[11, 6, 7]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (6), [(6), (7)])
          - Right:
              expr: '[6, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (compose mempty) prepend,
               (18), [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-20), [])
          - Right:
              expr: '[-20]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (18), [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in conc (compose prepend sequenceA)
  - - - - type: |-
            ((Maybe (Maybe Int) -> [Maybe (Maybe Int)] -> [Maybe (Maybe Int)]),
             Maybe (Maybe Int), [Maybe (Maybe Int)])
        - type: '[Maybe (Maybe Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (Just (18)), [Nothing, Just (Just (7))])
          - Right:
              expr: '[Just (Just 18), Nothing, Just (Just 7)]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend sequenceA,
               Nothing, [])
          - Right:
              expr: '[Just Nothing, Just Nothing]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing, [Nothing, Just (Just (7))])
          - Right:
              expr: '[Just Nothing, Nothing, Just (Just 7)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (Just (18)), [Nothing, Just (Just (7))])
          - Right:
              expr: '[Just (Just 18), Nothing, Just (Just 7)]'
        - - expr: |-
              (let compose = (.) in compose mempty sequenceA, Just (Just (-11)),
               [])
          - Right:
              expr: '[Just (Just (-11))]'
        - - expr: |-
              (let compose = (.) in compose (compose mempty) elem,
               Just (Just (18)), [Nothing])
          - Right:
              expr: '[Just (Just 18), Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing, [])
          - Right:
              expr: '[Just Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (Just (7)), [])
          - Right:
              expr: '[Just (Just 7)]'
    - - - type: |-
            ((Maybe (Maybe Char) ->
                [Maybe (Maybe Char)] -> [Maybe (Maybe Char)]),
             Maybe (Maybe Char), [Maybe (Maybe Char)])
        - type: '[Maybe (Maybe Char)]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (Just '7'), [Nothing, Just (Just '5')])
          - Right:
              expr: '[Just (Just ''7''), Nothing, Just (Just ''5'')]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (Just '7'), [Nothing])
          - Right:
              expr: '[Just (Just ''7''), Nothing]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (Just '7'), [Nothing])
          - Right:
              expr: '[Just (Just ''7''), Nothing]'
        - - expr: (maybe mempty mempty, Nothing, [Nothing])
          - Right:
              expr: '[Just Nothing, Nothing]'
        - - expr: (let compose = (.) in compose foldMap mempty, Just (Just '8'), [])
          - Right:
              expr: '[Just (Just ''8'')]'
        - - expr: |-
              (let compose = (.) in compose mempty length, Just (Just '8'),
               [Nothing, Just (Just '5')])
          - Right:
              expr: '[Just (Just ''8''), Nothing, Just (Just ''5'')]'
        - - expr: (let prepend = (:) in prepend, Just (Just '7'), [Nothing])
          - Right:
              expr: '[Just (Just ''7''), Nothing, Just (Just ''7''), Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (Just '5'), [Nothing])
          - Right:
              expr: '[Just (Just ''5''), Nothing]'
- - expr: let conc = (<>) in conc (maybe unzip mempty)
  - - - - type: |-
            ((Maybe Int -> [(Char, Char)] -> ([Char], [Char])), Maybe Int,
             [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Just (18),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (11), [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7), [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.) in compose mempty length, Just (-11),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (18), [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just (18),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing, [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
    - - - type: |-
            ((Maybe Int -> [(Int, Int)] -> ([Int], [Int])), Maybe Int,
             [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing, [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: (let compose = (.) in compose mempty length, Just (-11), [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing, [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: (maybe unzip mempty, Just (11), [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing, [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (18), [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just (11),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (7), [((6), (6))])
          - Right:
              expr: ([], [])
    - - - type: |-
            ((Maybe Char -> [(Int, Int)] -> ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '8', [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '8', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '5', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '5', [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Nothing, [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '5', [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose (compose unzip) mempty, Nothing, [])
          - Right:
              expr: ([], [])
        - - expr: (maybe unzip mempty, Nothing, [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7, 6, 7], [6, 7, 6, 7])
    - - - type: |-
            ((Maybe Int -> [(Char, Int)] -> ([Char], [Int])), Maybe Int,
             [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.) in compose foldMap mempty, Nothing,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc unzip) mempty,
               Just (18), [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing, [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just (18),
               [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (7), [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (18), [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (11), [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (-11), [('6', (6))])
          - Right:
              expr: ("", [])
- - expr: let compose = (.) in compose maybe toEnum
  - - - - type: (Int, (Int -> Char), Maybe Int)
        - type: Char
      - - - expr: ((-8), let compose = (.) in compose toEnum fromEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ((-8), let compose = (.) in compose toEnum fromEnum, Just (7))
          - Right:
              expr: '''\a'''
        - - expr: ((-11), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ((11), toEnum, Just (11))
          - Right:
              expr: '''\v'''
        - - expr: ((-20), toEnum, Nothing)
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: ((6), let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: '''\a'''
        - - expr: ((6), let compose = (.) in compose toEnum fromEnum, Just (11))
          - Right:
              expr: '''\v'''
        - - expr: ((6), toEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
    - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: ((18), fromEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((11), fromEnum, Just (18))
          - Right:
              expr: '18'
        - - expr: ((7), fromEnum, Nothing)
          - Right:
              expr: '7'
        - - expr: ((-20), let compose = (.) in compose toEnum toEnum, Just (18))
          - Right:
              expr: '18'
        - - expr: ((-11), fromEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((7), toEnum, Nothing)
          - Right:
              expr: '7'
        - - expr: ((6), toEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((6), let compose = (.) in compose toEnum fromEnum, Just (-11))
          - Right:
              expr: (-11)
    - - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
      - - - expr: ((18), fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ((6), fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: ((7), fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((-11), fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((-20), fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((6), fromEnum, Nothing)
          - Right:
              expr: '6'
        - - expr: ((-9), fromEnum, Nothing)
          - Right:
              expr: (-9)
        - - expr: ((11), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '11'
    - - - type: (Int, (Char -> Char), Maybe Char)
        - type: Char
      - - - expr: ((11), let compose = (.) in compose toEnum fromEnum, Just '8')
          - Right:
              expr: '''8'''
        - - expr: ((-9), let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '''7'''
        - - expr: ((-9), let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '''0'''
        - - expr: ((-8), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ((-20), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: ((-11), let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '''5'''
        - - expr: ((-20), let compose = (.) in compose toEnum fromEnum, Just '8')
          - Right:
              expr: '''8'''
        - - expr: ((-8), let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '''0'''
- - expr: let compose = (.) in compose length
  - - - - type: ((Int -> [] Int), Int)
        - type: Int
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-9))
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose mempty fromEnum, (6))
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (18))
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-11))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               (18))
          - Right:
              expr: '1'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-20))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-8))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (7))
          - Right:
              expr: '0'
    - - - type: ((Int -> Maybe Int), Int)
        - type: Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-8))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7))
          - Right:
              expr: '1'
        - - expr: (let just = Just in just, (-8))
          - Right:
              expr: '1'
        - - expr: (let just = Just in just, (6))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (18))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-9))
          - Right:
              expr: '1'
        - - expr: (let just = Just in just, (-11))
          - Right:
              expr: '1'
    - - - type: ((Char -> Maybe Int), Char)
        - type: Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '6')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '0')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '1')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2')
          - Right:
              expr: '1'
    - - - type: ((Int -> Maybe Char), Int)
        - type: Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-20))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (6))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (11))
          - Right:
              expr: '1'
- - expr: let compose = (.) in compose compose (compose fromEnum)
  - - - - type: ((Int -> Char), (Int -> Int), Int)
        - type: Int
      - - - expr: (toEnum, toEnum, (11))
          - Right:
              expr: '11'
        - - expr: (let compose = (.) in compose toEnum toEnum, toEnum, (18))
          - Right:
              expr: '18'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: '11'
        - - expr: (toEnum, let compose = (.) in compose toEnum fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (toEnum, fromEnum, (7))
          - Right:
              expr: '7'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (toEnum, toEnum, (18))
          - Right:
              expr: '18'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum fromEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
    - - - type: ((Int -> Int), (Int -> Int), Int)
        - type: Int
      - - - expr: (fromEnum, let compose = (.) in compose toEnum toEnum, (-11))
          - Right:
              expr: (-11)
        - - expr: (let compose = (.) in compose toEnum toEnum, toEnum, (-11))
          - Right:
              expr: (-11)
        - - expr: (fromEnum, toEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: (let compose = (.) in compose toEnum fromEnum, toEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, (-8))
          - Right:
              expr: (-8)
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: '18'
        - - expr: (toEnum, let compose = (.) in compose toEnum fromEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: (fromEnum, let compose = (.) in compose toEnum toEnum, (-8))
          - Right:
              expr: (-8)
    - - - type: ((Int -> Int), (Char -> Int), Char)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum toEnum, fromEnum, '4')
          - Right:
              expr: '52'
        - - expr: (fromEnum, fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: (toEnum, fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (toEnum, let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '49'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '49'
        - - expr: (toEnum, fromEnum, '4')
          - Right:
              expr: '52'
        - - expr: (toEnum, let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '52'
    - - - type: ((Char -> Int), (Char -> Char), Char)
        - type: Int
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: '53'
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: '53'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '56'
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '49'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '54'
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '54'
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '55'
- - expr: let compose = (.) in compose maybe (zip mempty)
  - - - - type: ([Int], (Char -> [(Int, Int)]), Maybe Char)
        - type: '[(Int, Int)]'
      - - - expr: |-
              ([(6)],
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '0')
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], let compose = (.) in compose mempty maybe, Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '8')
          - Right:
              expr: '[]'
    - - - type: ([Int], (Int -> [(Int, Int)]), Maybe Int)
        - type: '[(Int, Int)]'
      - - - expr: |-
              ([(6)],
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (11))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (11))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (-11))
          - Right:
              expr: '[]'
    - - - type: ([Int], (Char -> [(Char, Int)]), Maybe Char)
        - type: '[(Char, Int)]'
      - - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '8')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '7')
          - Right:
              expr: '[]'
    - - - type: ([Int], (Int -> [(Char, Int)]), Maybe Int)
        - type: '[(Char, Int)]'
      - - - expr: ([(6)], let compose = (.) in compose mempty fromEnum, Just (11))
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)], let compose = (.) in compose mempty fromEnum,
               Just (11))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (11))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(6), (7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (18))
          - Right:
              expr: '[]'
        - - expr: ([], let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: '[]'
- - expr: maybe mempty unzip
  - - - - type: Maybe [(Char, Char)]
        - type: ([Char], [Char])
      - - - expr: (Just [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: (Just [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: (Nothing)
          - Right:
              expr: ("", "")
    - - - type: Maybe [(Char, Int)]
        - type: ([Char], [Int])
      - - - expr: (Nothing)
          - Right:
              expr: ("", [])
        - - expr: (Just [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: (Just [('6', (6))])
          - Right:
              expr: ("6", [6])
    - - - type: Maybe [(Int, Int)]
        - type: ([Int], [Int])
      - - - expr: (Just [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: (Nothing)
          - Right:
              expr: ([], [])
        - - expr: (Just [((6), (6))])
          - Right:
              expr: ([6], [6])
    - - - type: Maybe [(Int, Char)]
        - type: ([Int], [Char])
      - - - expr: (Nothing)
          - Right:
              expr: ([], "")
        - - expr: (Just [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: (Just [((6), '6')])
          - Right:
              expr: ([6], "6")
- - expr: let conc = (<>) in conc (conc unzip mempty)
  - - - - type: (([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: (let compose = (.) in compose mempty zip, [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.) in compose mempty length,
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [])
          - Right:
              expr: ([], "")
    - - - type: (([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [])
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty maybe, [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [])
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty zip, [])
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty unzip, [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.) in compose unzip (sequence mempty),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [((6), (6))])
          - Right:
              expr: ([6], [6])
    - - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [])
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: (unzip, [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose unzip (sequence mempty),
               [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
    - - - type: (([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.) in compose mempty unzip,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               [('6', (6))])
          - Right:
              expr: ("66", [6, 6])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [('6', (6))])
          - Right:
              expr: ("6", [6])
- - expr: let zero = 0 in maybe zero fromEnum
  - - - - type: Maybe Int
        - type: Int
      - - - expr: (Just (18))
          - Right:
              expr: '18'
        - - expr: (Just (11))
          - Right:
              expr: '11'
        - - expr: (Just (-11))
          - Right:
              expr: (-11)
        - - expr: (Just (7))
          - Right:
              expr: '7'
        - - expr: (Nothing)
          - Right:
              expr: '0'
    - - - type: Maybe Char
        - type: Int
      - - - expr: (Just '0')
          - Right:
              expr: '48'
        - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just '7')
          - Right:
              expr: '55'
        - - expr: (Just '5')
          - Right:
              expr: '53'
        - - expr: (Just '8')
          - Right:
              expr: '56'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc (unzip mempty))
  - - - - type: ((Int -> ([Char], [Int])), Int)
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (6))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               (18))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-20))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (7))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose unzip (sequenceA mempty), (11))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose unzip (sequence mempty), (7))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-11))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty maybe, (11))
          - Right:
              expr: ("", [])
    - - - type: ((Char -> ([Int], [Char])), Char)
        - type: ([Int], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '4')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose unzip mempty, '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '4')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose unzip mempty, '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '6')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '8')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose unzip mempty, '2')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '5')
          - Right:
              expr: ([], "")
    - - - type: ((Int -> ([Int], [Int])), Int)
        - type: ([Int], [Int])
      - - - expr: (let compose = (.) in compose mempty fromEnum, (-11))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty maybe, (6))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-20))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (18))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-20))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (6))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (7))
          - Right:
              expr: ([], [])
    - - - type: ((Int -> ([Int], [Char])), Int)
        - type: ([Int], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-20))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (18))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (6))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, (18))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-11))
          - Right:
              expr: ([], "")
- - expr: |-
      let just = Just
          compose = (.)
          prepend = (:)
        in compose (compose just) prepend
  - - - - type: (Char, [Char])
        - type: Maybe [Char]
      - - - expr: ('1', ['6', '5'])
          - Right:
              expr: (Just "165")
        - - expr: ('0', ['6'])
          - Right:
              expr: (Just "06")
        - - expr: ('6', ['6', '5'])
          - Right:
              expr: (Just "665")
        - - expr: ('2', ['6', '5'])
          - Right:
              expr: (Just "265")
        - - expr: ('8', ['6'])
          - Right:
              expr: (Just "86")
        - - expr: ('6', ['6'])
          - Right:
              expr: (Just "66")
        - - expr: ('1', [])
          - Right:
              expr: (Just "1")
        - - expr: ('8', ['6', '5'])
          - Right:
              expr: (Just "865")
    - - - type: (Int, [Int])
        - type: Maybe [Int]
      - - - expr: ((-11), [])
          - Right:
              expr: (Just [-11])
        - - expr: ((-11), [(6)])
          - Right:
              expr: (Just [-11, 6])
        - - expr: ((18), [(6), (7)])
          - Right:
              expr: (Just [18, 6, 7])
        - - expr: ((-20), [(6)])
          - Right:
              expr: (Just [-20, 6])
        - - expr: ((-20), [(6), (7)])
          - Right:
              expr: (Just [-20, 6, 7])
        - - expr: ((-8), [])
          - Right:
              expr: (Just [-8])
        - - expr: ((-20), [])
          - Right:
              expr: (Just [-20])
        - - expr: ((-9), [(6)])
          - Right:
              expr: (Just [-9, 6])
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl) zip
  - - - - type: ([Char], [Int], Char)
        - type: ([(Char, Int)], Char)
      - - - expr: ([], [(6)], '7')
          - Right:
              expr: ([], '7')
        - - expr: ([], [], '2')
          - Right:
              expr: ([], '2')
        - - expr: (['6', '5'], [], '2')
          - Right:
              expr: ([], '2')
        - - expr: ([], [(6)], '2')
          - Right:
              expr: ([], '2')
        - - expr: (['6'], [(6), (7)], '8')
          - Right:
              expr: ([('6', 6)], '8')
        - - expr: (['6', '5'], [], '7')
          - Right:
              expr: ([], '7')
        - - expr: (['6', '5'], [(6), (7)], '2')
          - Right:
              expr: ([('6', 6), ('5', 7)], '2')
        - - expr: ([], [(6)], '8')
          - Right:
              expr: ([], '8')
    - - - type: ([Char], [Char], Char)
        - type: ([(Char, Char)], Char)
      - - - expr: (['6'], ['6', '5'], '0')
          - Right:
              expr: ([('6', '6')], '0')
        - - expr: ([], ['6', '5'], '4')
          - Right:
              expr: ([], '4')
        - - expr: (['6'], ['6'], '8')
          - Right:
              expr: ([('6', '6')], '8')
        - - expr: ([], ['6', '5'], '0')
          - Right:
              expr: ([], '0')
        - - expr: (['6', '5'], ['6'], '4')
          - Right:
              expr: ([('6', '6')], '4')
        - - expr: (['6', '5'], ['6', '5'], '5')
          - Right:
              expr: ([('6', '6'), ('5', '5')], '5')
        - - expr: (['6'], [], '6')
          - Right:
              expr: ([], '6')
        - - expr: (['6', '5'], ['6', '5'], '4')
          - Right:
              expr: ([('6', '6'), ('5', '5')], '4')
    - - - type: ([Int], [Char], Char)
        - type: ([(Int, Char)], Char)
      - - - expr: ([], ['6', '5'], '8')
          - Right:
              expr: ([], '8')
        - - expr: ([(6), (7)], ['6'], '8')
          - Right:
              expr: ([(6, '6')], '8')
        - - expr: ([], [], '4')
          - Right:
              expr: ([], '4')
        - - expr: ([(6), (7)], ['6'], '0')
          - Right:
              expr: ([(6, '6')], '0')
        - - expr: ([], [], '0')
          - Right:
              expr: ([], '0')
        - - expr: ([(6), (7)], [], '7')
          - Right:
              expr: ([], '7')
        - - expr: ([], ['6', '5'], '1')
          - Right:
              expr: ([], '1')
        - - expr: ([], ['6'], '4')
          - Right:
              expr: ([], '4')
    - - - type: ([Int], [Char], Int)
        - type: ([(Int, Char)], Int)
      - - - expr: ([], [], (18))
          - Right:
              expr: ([], 18)
        - - expr: ([(6), (7)], ['6', '5'], (11))
          - Right:
              expr: ([(6, '6'), (7, '5')], 11)
        - - expr: ([(6), (7)], ['6'], (-20))
          - Right:
              expr: ([(6, '6')], -20)
        - - expr: ([], ['6', '5'], (11))
          - Right:
              expr: ([], 11)
        - - expr: ([(6), (7)], ['6', '5'], (-8))
          - Right:
              expr: ([(6, '6'), (7, '5')], -8)
        - - expr: ([], [], (-11))
          - Right:
              expr: ([], -11)
        - - expr: ([(6)], ['6'], (7))
          - Right:
              expr: ([(6, '6')], 7)
        - - expr: ([(6)], ['6'], (-8))
          - Right:
              expr: ([(6, '6')], -8)
- - expr: let prepend = (:) in prepend (sequenceA (unzip mempty))
  - - - - type: '[[([Int], Int)]]'
        - type: '[[([Int], Int)]]'
      - - - expr: ([[], [([], (6)), ([(6), (7)], (7))]])
          - Right:
              expr: '[[], [], [([], 6), ([6, 7], 7)]]'
        - - expr: ([])
          - Right:
              expr: '[[]]'
        - - expr: ([[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([[], [([], (6)), ([(6), (7)], (7))], [([], (6))]])
          - Right:
              expr: '[[], [], [([], 6), ([6, 7], 7)], [([], 6)]]'
    - - - type: '[[([Int], Char)]]'
        - type: '[[([Int], Char)]]'
      - - - expr: ([[], [([], '6'), ([(6), (7)], '5')], [([], '6')]])
          - Right:
              expr: '[[], [], [([], ''6''), ([6, 7], ''5'')], [([], ''6'')]]'
        - - expr: ([[], [([], '6'), ([(6), (7)], '5')]])
          - Right:
              expr: '[[], [], [([], ''6''), ([6, 7], ''5'')]]'
        - - expr: ([[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([])
          - Right:
              expr: '[[]]'
    - - - type: '[[([Char], Int)]]'
        - type: '[[([Char], Int)]]'
      - - - expr: ([[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([[], [([], (6)), (['6', '5'], (7))]])
          - Right:
              expr: '[[], [], [("", 6), ("65", 7)]]'
        - - expr: ([[], [([], (6)), (['6', '5'], (7))], [([], (6))]])
          - Right:
              expr: '[[], [], [("", 6), ("65", 7)], [("", 6)]]'
        - - expr: ([])
          - Right:
              expr: '[[]]'
    - - - type: '[[([Char], Char)]]'
        - type: '[[([Char], Char)]]'
      - - - expr: ([[], [([], '6'), (['6', '5'], '5')], [([], '6')]])
          - Right:
              expr: '[[], [], [("", ''6''), ("65", ''5'')], [("", ''6'')]]'
        - - expr: ([[]])
          - Right:
              expr: '[[], []]'
        - - expr: ([])
          - Right:
              expr: '[[]]'
        - - expr: ([[], [([], '6'), (['6', '5'], '5')]])
          - Right:
              expr: '[[], [], [("", ''6''), ("65", ''5'')]]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just just))
  - - - - type: ((Int -> Char), Int)
        - type: Maybe (Maybe Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, (11))
          - Right:
              expr: (Just (Just '\v'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: (Just (Just '\DC2'))
        - - expr: (let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: (Just (Just '\ACK'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (Just (Just '\ACK'))
        - - expr: (toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
    - - - type: ((Char -> Int), Char)
        - type: Maybe (Maybe Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just (Just 56))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just (Just 53))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (Just (Just 49))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (Just (Just 50))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (Just (Just 55))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just (Just 52))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just (Just 48))
        - - expr: (fromEnum, '4')
          - Right:
              expr: (Just (Just 52))
    - - - type: ((Int -> Int), Int)
        - type: Maybe (Maybe Int)
      - - - expr: (toEnum, (18))
          - Right:
              expr: (Just (Just 18))
        - - expr: (let compose = (.) in compose toEnum toEnum, (11))
          - Right:
              expr: (Just (Just 11))
        - - expr: (let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: (Just (Just 6))
        - - expr: (toEnum, (-11))
          - Right:
              expr: (Just (Just (-11)))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9))
          - Right:
              expr: (Just (Just (-9)))
        - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: (Just (Just 7))
        - - expr: (toEnum, (-9))
          - Right:
              expr: (Just (Just (-9)))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (Just (Just 6))
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just just)
  - - - - type: ((Int -> Char), Int)
        - type: Maybe (Maybe Char)
      - - - expr: (let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: (Just (Just '\DC2'))
        - - expr: (toEnum, (6))
          - Right:
              expr: (Just (Just '\ACK'))
        - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: (Just (Just '\a'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: (Just (Just '\a'))
        - - expr: (let compose = (.) in compose toEnum toEnum, (11))
          - Right:
              expr: (Just (Just '\v'))
        - - expr: (toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
    - - - type: ((Char -> Int), Char)
        - type: Maybe (Maybe Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (Just (Just 50))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just (Just 48))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just (Just 53))
        - - expr: (fromEnum, '4')
          - Right:
              expr: (Just (Just 52))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just (Just 54))
        - - expr: (fromEnum, '2')
          - Right:
              expr: (Just (Just 50))
        - - expr: (fromEnum, '8')
          - Right:
              expr: (Just (Just 56))
        - - expr: (fromEnum, '0')
          - Right:
              expr: (Just (Just 48))
    - - - type: ((Char -> Char), Char)
        - type: Maybe (Maybe Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just (Just '4'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just (Just '6'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (Just (Just '2'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just (Just '8'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (Just (Just '1'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (Just (Just '7'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just (Just '5'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just (Just '0'))
    - - - type: ((Int -> Int), Int)
        - type: Maybe (Maybe Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (Just (Just 11))
        - - expr: (toEnum, (18))
          - Right:
              expr: (Just (Just 18))
        - - expr: (toEnum, (6))
          - Right:
              expr: (Just (Just 6))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11))
          - Right:
              expr: (Just (Just (-11)))
        - - expr: (fromEnum, (6))
          - Right:
              expr: (Just (Just 6))
        - - expr: (fromEnum, (7))
          - Right:
              expr: (Just (Just 7))
        - - expr: (fromEnum, (18))
          - Right:
              expr: (Just (Just 18))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: (Just (Just 7))
- - expr: |-
      let zero = 0
          tpl = (,)
        in maybe (tpl zero)
  - - - - type: ((Int -> Char -> (Int, Char)), Maybe Int, Char)
        - type: (Int, Char)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Just (18), '4')
          - Right:
              expr: (18, '4')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just (-11), '8')
          - Right:
              expr: (-11, '8')
        - - expr: (let tpl = (,) in tpl, Just (18), '5')
          - Right:
              expr: (18, '5')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Nothing, '4')
          - Right:
              expr: (0, '4')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Just (-11), '8')
          - Right:
              expr: (-11, '8')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Just (11), '6')
          - Right:
              expr: (11, '6')
        - - expr: (let tpl = (,) in tpl, Just (-11), '2')
          - Right:
              expr: (-11, '2')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just (11), '6')
          - Right:
              expr: (11, '6')
    - - - type: ((Int -> Int -> (Int, Int)), Maybe Int, Int)
        - type: (Int, Int)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Just (11), (11))
          - Right:
              expr: (11, 11)
        - - expr: (let tpl = (,) in tpl, Just (11), (7))
          - Right:
              expr: (11, 7)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Just (11), (-9))
          - Right:
              expr: (11, -9)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Nothing, (18))
          - Right:
              expr: (0, 18)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Just (-11), (-20))
          - Right:
              expr: (-11, -20)
        - - expr: (let tpl = (,) in tpl, Just (18), (11))
          - Right:
              expr: (18, 11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Just (18), (-11))
          - Right:
              expr: (18, -11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just (-11), (-8))
          - Right:
              expr: (-11, -8)
    - - - type: ((Char -> Int -> (Int, Int)), Maybe Char, Int)
        - type: (Int, Int)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '5', (18))
          - Right:
              expr: (53, 18)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Nothing, (-9))
          - Right:
              expr: (0, -9)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Nothing, (-11))
          - Right:
              expr: (0, -11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '0', (-20))
          - Right:
              expr: (48, -20)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '5', (11))
          - Right:
              expr: (53, 11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '8', (6))
          - Right:
              expr: (56, 6)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Nothing, (11))
          - Right:
              expr: (0, 11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '8', (-11))
          - Right:
              expr: (56, -11)
    - - - type: ((Char -> Char -> (Int, Char)), Maybe Char, Char)
        - type: (Int, Char)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '0', '6')
          - Right:
              expr: (48, '6')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '8', '5')
          - Right:
              expr: (56, '5')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '0', '5')
          - Right:
              expr: (48, '5')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '7', '8')
          - Right:
              expr: (55, '8')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Nothing, '4')
          - Right:
              expr: (0, '4')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '7', '2')
          - Right:
              expr: (55, '2')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '7', '0')
          - Right:
              expr: (55, '0')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '5', '4')
          - Right:
              expr: (53, '4')
- - expr: |-
      let just = Just
          compose = (.)
        in compose just fromEnum
  - - - - type: Char
        - type: Maybe Int
      - - - expr: ('8')
          - Right:
              expr: (Just 56)
        - - expr: ('0')
          - Right:
              expr: (Just 48)
        - - expr: ('7')
          - Right:
              expr: (Just 55)
        - - expr: ('6')
          - Right:
              expr: (Just 54)
        - - expr: ('2')
          - Right:
              expr: (Just 50)
        - - expr: ('4')
          - Right:
              expr: (Just 52)
        - - expr: ('1')
          - Right:
              expr: (Just 49)
        - - expr: ('5')
          - Right:
              expr: (Just 53)
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc mempty) zip
  - - - - type: ([Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: ([], ['6'])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)], ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: ([(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: ([], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ([(6)], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], ['6', '5'])
          - Right:
              expr: '[(6, ''6'')]'
- - expr: let compose = (.) in compose (compose sequenceA sequence)
  - - - - type: ((Int -> Maybe ([] Char)), Int)
        - type: Maybe ([] Char)
      - - - expr: (let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (7))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (7))
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose mempty fromEnum, (18))
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-8))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (6))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-9))
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose mempty fromEnum, (-20))
          - Right:
              expr: Nothing
    - - - type: ((Char -> [] (Maybe Char)), Char)
        - type: '[] (Maybe Char)'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '1')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '5')
          - Right:
              expr: '[]'
    - - - type: ((Char -> [] ([] Char)), Char)
        - type: '[] ([] Char)'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '2')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '0')
          - Right:
              expr: '[]'
    - - - type: ((Char -> [] ([] Int)), Char)
        - type: '[] ([] Int)'
      - - - expr: (let compose = (.) in compose mempty maybe, '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8')
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose
  - - - - type: ((Int -> Char), (Char -> Int), Char)
        - type: Char
      - - - expr: (let compose = (.) in compose toEnum fromEnum, fromEnum, '7')
          - Right:
              expr: '''7'''
        - - expr: (toEnum, let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '''6'''
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '''7'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, fromEnum, '8')
          - Right:
              expr: '''8'''
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '''7'''
        - - expr: (toEnum, fromEnum, '8')
          - Right:
              expr: '''8'''
        - - expr: (toEnum, fromEnum, '1')
          - Right:
              expr: '''1'''
        - - expr: (toEnum, let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '''0'''
    - - - type: ((Char -> Char), (Int -> Char), Int)
        - type: Char
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: '''\v'''
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: '''\ACK'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: '''\a'''
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: '''\DC2'''
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
    - - - type: ((Int -> Char), (Int -> Int), Int)
        - type: Char
      - - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum fromEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, fromEnum, (6))
          - Right:
              expr: '''\ACK'''
        - - expr: (let compose = (.) in compose toEnum toEnum, toEnum, (18))
          - Right:
              expr: '''\DC2'''
        - - expr: (toEnum, toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (toEnum, let compose = (.) in compose toEnum toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (toEnum, fromEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, let compose = (.) in compose toEnum toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
    - - - type: ((Int -> Int), (Char -> Int), Char)
        - type: Int
      - - - expr: (fromEnum, fromEnum, '1')
          - Right:
              expr: '49'
        - - expr: (fromEnum, fromEnum, '6')
          - Right:
              expr: '54'
        - - expr: (let compose = (.) in compose toEnum toEnum, fromEnum, '5')
          - Right:
              expr: '53'
        - - expr: (let compose = (.) in compose toEnum toEnum, fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (let compose = (.) in compose toEnum fromEnum, fromEnum, '6')
          - Right:
              expr: '54'
        - - expr: (toEnum, fromEnum, '1')
          - Right:
              expr: '49'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: (toEnum, fromEnum, '8')
          - Right:
              expr: '56'
- - expr: let conc = (<>) in conc (zip mempty)
  - - - - type: (([Int] -> [(Int, Int)]), [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty (zip mempty), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty length, [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose sequence (tpl zero),
               [(6), (7)])
          - Right:
              expr: '[(0, 6), (0, 7)]'
        - - expr: (let compose = (.) in compose mempty length, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let zero = 0
                   prepend = (:)
                 in zip (prepend zero mempty),
               [(6), (7)])
          - Right:
              expr: '[(0, 6)]'
    - - - type: (([Char] -> [(Int, Char)]), [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let zero = 0
                   prepend = (:)
                 in zip (prepend zero mempty),
               ['6'])
          - Right:
              expr: '[(0, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty zip, ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose sequenceA (tpl zero),
               ['6', '5'])
          - Right:
              expr: '[(0, ''6''), (0, ''5'')]'
    - - - type: (([Char] -> [(Char, Char)]), [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let conc = (<>) in zip (conc mempty mempty), ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty length, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               ['6', '5'])
          - Right:
              expr: '[]'
    - - - type: (([Int] -> [(Char, Int)]), [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [(6)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty length, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [(6)])
          - Right:
              expr: '[]'
        - - expr: (let conc = (<>) in zip (conc mempty mempty), [])
          - Right:
              expr: '[]'
- - expr: let prepend = (:) in maybe (prepend (unzip mempty))
  - - - - type: |-
            ((Char -> [([Int], [Int])] -> [([Int], [Int])]), Maybe Char,
             [([Int], [Int])])
        - type: '[([Int], [Int])]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '7', [([], [])])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '8', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing, [([], []), ([(6), (7)], [(6), (7)])])
          - Right:
              expr: '[([], []), ([], []), ([6, 7], [6, 7])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '0', [([], [])])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing, [([], [])])
          - Right:
              expr: '[([], []), ([], [])]'
        - - expr: |-
              (let compose = (.) in compose fmap mempty, Just '8',
               [([], []), ([(6), (7)], [(6), (7)]), ([(6)], [(6)])])
          - Right:
              expr: '[([], []), ([], []), ([], [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing, [([], []), ([(6), (7)], [(6), (7)]), ([(6)], [(6)])])
          - Right:
              expr: '[([], []), ([], []), ([6, 7], [6, 7]), ([6], [6])]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just '8',
               [([], []), ([(6), (7)], [(6), (7)])])
          - Right:
              expr: '[]'
    - - - type: |-
            ((Int -> [([Int], [Char])] -> [([Int], [Char])]), Maybe Int,
             [([Int], [Char])])
        - type: '[([Int], [Char])]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing, [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend mempty,
               Just (18), [])
          - Right:
              expr: '[([], "")]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (11), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               Just (7), [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (7), [([], []), ([(6), (7)], ['6', '5']), ([(6)], ['6'])])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just (7), [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing, [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Nothing, [([], [])])
          - Right:
              expr: '[([], ""), ([], "")]'
    - - - type: |-
            ((Char -> [([Int], [Char])] -> [([Int], [Char])]), Maybe Char,
             [([Int], [Char])])
        - type: '[([Int], [Char])]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '0', [([], []), ([(6), (7)], ['6', '5']), ([(6)], ['6'])])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '8', [([], []), ([(6), (7)], ['6', '5']), ([(6)], ['6'])])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               Just '8', [([], []), ([(6), (7)], ['6', '5']), ([(6)], ['6'])])
          - Right:
              expr: '[([], ""), ([6, 7], "65"), ([6], "6")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing, [])
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Nothing,
               [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '5', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               Just '0', [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '5', [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[]'
    - - - type: |-
            ((Char -> [([Char], [Char])] -> [([Char], [Char])]), Maybe Char,
             [([Char], [Char])])
        - type: '[([Char], [Char])]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '0', [([], []), (['6', '5'], ['6', '5'])])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing, [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: '[("", ""), ("", ""), ("65", "65"), ("6", "6")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '8', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0', [([], [])])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '8', [([], [])])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend mempty,
               Just '0', [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: '[("", ""), ("", ""), ("65", "65"), ("6", "6")]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '5', [([], [])])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose fmap mempty, Just '8', [])
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just unzip))
  - - - - type: ((Int -> [(Char, Char)]), Int)
        - type: Maybe ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6))
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8))
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-8))
          - Right:
              expr: (Just ("", ""))
        - - expr: (let compose = (.) in compose mempty fromEnum, (-11))
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-9))
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (6))
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-8))
          - Right:
              expr: (Just ("", ""))
        - - expr: (let compose = (.) in compose mempty maybe, (-20))
          - Right:
              expr: (Just ("", ""))
    - - - type: ((Char -> [(Int, Char)]), Char)
        - type: Maybe ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '4')
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '4')
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7')
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '7')
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '6')
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '5')
          - Right:
              expr: (Just ([], ""))
        - - expr: (let compose = (.) in compose mempty fromEnum, '7')
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '2')
          - Right:
              expr: (Just ([], ""))
    - - - type: ((Char -> [(Char, Int)]), Char)
        - type: Maybe ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '1')
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '2')
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '5')
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '7')
          - Right:
              expr: (Just ("", []))
        - - expr: (let compose = (.) in compose mempty fromEnum, '4')
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: (Just ("", []))
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '7')
          - Right:
              expr: (Just ("", []))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '8')
          - Right:
              expr: (Just ("", []))
    - - - type: ((Char -> [(Int, Int)]), Char)
        - type: Maybe ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '1')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '0')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '5')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '6')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '2')
          - Right:
              expr: (Just ([], []))
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '5')
          - Right:
              expr: (Just ([], []))
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl
  - - - - type: ((Char -> Int), Char, Int)
        - type: (Int, Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '6', (-8))
          - Right:
              expr: (54, -8)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', (-8))
          - Right:
              expr: (48, -8)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', (11))
          - Right:
              expr: (55, 11)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', (-8))
          - Right:
              expr: (52, -8)
        - - expr: (fromEnum, '4', (11))
          - Right:
              expr: (52, 11)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (6))
          - Right:
              expr: (53, 6)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', (-20))
          - Right:
              expr: (49, -20)
        - - expr: (fromEnum, '7', (-20))
          - Right:
              expr: (55, -20)
    - - - type: ((Char -> Char), Char, Char)
        - type: (Char, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '4', '1')
          - Right:
              expr: ('4', '1')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', '1')
          - Right:
              expr: ('2', '1')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', '2')
          - Right:
              expr: ('8', '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', '0')
          - Right:
              expr: ('2', '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', '0')
          - Right:
              expr: ('1', '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', '0')
          - Right:
              expr: ('4', '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', '7')
          - Right:
              expr: ('8', '7')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', '0')
          - Right:
              expr: ('7', '0')
    - - - type: ((Char -> Int), Char, Char)
        - type: (Int, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '8', '7')
          - Right:
              expr: (56, '7')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', '4')
          - Right:
              expr: (52, '4')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', '7')
          - Right:
              expr: (49, '7')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', '2')
          - Right:
              expr: (48, '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', '5')
          - Right:
              expr: (52, '5')
        - - expr: (fromEnum, '5', '1')
          - Right:
              expr: (53, '1')
        - - expr: (fromEnum, '5', '2')
          - Right:
              expr: (53, '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', '8')
          - Right:
              expr: (50, '8')
    - - - type: ((Char -> Char), Char, Int)
        - type: (Char, Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '0', (7))
          - Right:
              expr: ('0', 7)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', (7))
          - Right:
              expr: ('2', 7)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', (6))
          - Right:
              expr: ('1', 6)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', (-20))
          - Right:
              expr: ('0', -20)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', (11))
          - Right:
              expr: ('6', 11)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (6))
          - Right:
              expr: ('5', 6)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (-20))
          - Right:
              expr: ('5', -20)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', (-11))
          - Right:
              expr: ('2', -11)
- - expr: |-
      let zero = 0
          prepend = (:)
        in prepend (prepend zero mempty)
  - - - - type: '[[Int]]'
        - type: '[[Int]]'
      - - - expr: ([[], [(6), (7)]])
          - Right:
              expr: '[[0], [], [6, 7]]'
        - - expr: ([])
          - Right:
              expr: '[[0]]'
        - - expr: ([[]])
          - Right:
              expr: '[[0], []]'
        - - expr: ([[], [(6), (7)], [(6)]])
          - Right:
              expr: '[[0], [], [6, 7], [6]]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose unzip) prepend
  - - - - type: ((Char, Int), [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: (('6', (6)), [('6', (6)), ('5', (7))])
          - Right:
              expr: ("665", [6, 6, 7])
        - - expr: (('2', (-20)), [])
          - Right:
              expr: ("2", [-20])
        - - expr: (('7', (18)), [('6', (6))])
          - Right:
              expr: ("76", [18, 6])
        - - expr: (('5', (7)), [])
          - Right:
              expr: ("5", [7])
        - - expr: (('5', (7)), [('6', (6)), ('5', (7))])
          - Right:
              expr: ("565", [7, 6, 7])
        - - expr: (('6', (6)), [('6', (6))])
          - Right:
              expr: ("66", [6, 6])
        - - expr: (('8', (-11)), [])
          - Right:
              expr: ("8", [-11])
        - - expr: (('5', (7)), [('6', (6))])
          - Right:
              expr: ("56", [7, 6])
    - - - type: ((Int, Int), [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: (((6), (6)), [((6), (6))])
          - Right:
              expr: ([6, 6], [6, 6])
        - - expr: (((-11), (-11)), [])
          - Right:
              expr: ([-11], [-11])
        - - expr: (((18), (18)), [((6), (6))])
          - Right:
              expr: ([18, 6], [18, 6])
        - - expr: (((-8), (-8)), [])
          - Right:
              expr: ([-8], [-8])
        - - expr: (((6), (6)), [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 6, 7], [6, 6, 7])
        - - expr: (((-9), (-9)), [((6), (6))])
          - Right:
              expr: ([-9, 6], [-9, 6])
        - - expr: (((11), (11)), [((6), (6))])
          - Right:
              expr: ([11, 6], [11, 6])
        - - expr: (((-20), (-20)), [((6), (6))])
          - Right:
              expr: ([-20, 6], [-20, 6])
    - - - type: ((Int, Char), [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: (((7), '5'), [((6), '6'), ((7), '5')])
          - Right:
              expr: ([7, 6, 7], "565")
        - - expr: (((-11), '8'), [((6), '6'), ((7), '5')])
          - Right:
              expr: ([-11, 6, 7], "865")
        - - expr: (((7), '5'), [])
          - Right:
              expr: ([7], "5")
        - - expr: (((18), '7'), [])
          - Right:
              expr: ([18], "7")
        - - expr: (((18), '7'), [((6), '6'), ((7), '5')])
          - Right:
              expr: ([18, 6, 7], "765")
        - - expr: (((6), '6'), [])
          - Right:
              expr: ([6], "6")
        - - expr: (((11), '0'), [((6), '6'), ((7), '5')])
          - Right:
              expr: ([11, 6, 7], "065")
        - - expr: (((11), '0'), [((6), '6')])
          - Right:
              expr: ([11, 6], "06")
    - - - type: ((Char, Char), [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: (('4', '4'), [])
          - Right:
              expr: ("4", "4")
        - - expr: (('5', '5'), [('6', '6')])
          - Right:
              expr: ("56", "56")
        - - expr: (('8', '8'), [('6', '6'), ('5', '5')])
          - Right:
              expr: ("865", "865")
        - - expr: (('7', '7'), [('6', '6'), ('5', '5')])
          - Right:
              expr: ("765", "765")
        - - expr: (('7', '7'), [])
          - Right:
              expr: ("7", "7")
        - - expr: (('6', '6'), [])
          - Right:
              expr: ("6", "6")
        - - expr: (('0', '0'), [('6', '6')])
          - Right:
              expr: ("06", "06")
        - - expr: (('0', '0'), [])
          - Right:
              expr: ("0", "0")
- - expr: |-
      let zero = 0
          prepend = (:)
        in zip (prepend zero mempty)
  - - - - type: '[Char]'
        - type: '[(Int, Char)]'
      - - - expr: (['6'])
          - Right:
              expr: '[(0, ''6'')]'
        - - expr: (['6', '5'])
          - Right:
              expr: '[(0, ''6'')]'
        - - expr: ([])
          - Right:
              expr: '[]'
    - - - type: '[Int]'
        - type: '[(Int, Int)]'
      - - - expr: ([(6)])
          - Right:
              expr: '[(0, 6)]'
        - - expr: ([(6), (7)])
          - Right:
              expr: '[(0, 6)]'
        - - expr: ([])
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose sequence just)
  - - - - type: ((Char -> [] Char), Char)
        - type: '[] (Maybe Char)'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '6')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '2')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: '[]'
    - - - type: ((Char -> Maybe Char), Char)
        - type: Maybe (Maybe Char)
      - - - expr: (let just = Just in just, '2')
          - Right:
              expr: (Just (Just '2'))
        - - expr: (let just = Just in just, '8')
          - Right:
              expr: (Just (Just '8'))
        - - expr: (let just = Just in just, '6')
          - Right:
              expr: (Just (Just '6'))
        - - expr: (let just = Just in just, '4')
          - Right:
              expr: (Just (Just '4'))
        - - expr: (let just = Just in just, '1')
          - Right:
              expr: (Just (Just '1'))
        - - expr: (let just = Just in just, '5')
          - Right:
              expr: (Just (Just '5'))
        - - expr: (let just = Just in just, '0')
          - Right:
              expr: (Just (Just '0'))
        - - expr: (let just = Just in just, '7')
          - Right:
              expr: (Just (Just '7'))
    - - - type: ((Char -> Maybe Int), Char)
        - type: Maybe (Maybe Int)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2')
          - Right:
              expr: (Just (Just 50))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '6')
          - Right:
              expr: (Just (Just 54))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7')
          - Right:
              expr: (Just (Just 55))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5')
          - Right:
              expr: (Just (Just 53))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '1')
          - Right:
              expr: (Just (Just 49))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '0')
          - Right:
              expr: (Just (Just 48))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4')
          - Right:
              expr: (Just (Just 52))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8')
          - Right:
              expr: (Just (Just 56))
    - - - type: ((Int -> Maybe Char), Int)
        - type: Maybe (Maybe Char)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (11))
          - Right:
              expr: (Just (Just '\v'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (6))
          - Right:
              expr: (Just (Just '\ACK'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18))
          - Right:
              expr: (Just (Just '\DC2'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7))
          - Right:
              expr: (Just (Just '\a'))
- - expr: maybe (maybe mempty unzip)
  - - - - type: |-
            ((Char -> Maybe [(Int, Int)] -> ([Int], [Int])), Maybe Char,
             Maybe [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Nothing, Just [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Nothing, Just [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Nothing, Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose (maybe mempty) mempty, Just '5',
               Just [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '7', Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '5', Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '0', Just [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '5', Nothing)
          - Right:
              expr: ([], [])
    - - - type: |-
            ((Char -> Maybe [(Char, Int)] -> ([Char], [Int])), Maybe Char,
             Maybe [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '5', Nothing)
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Nothing,
               Just [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '8', Nothing)
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose (maybe mempty) mempty, Just '8',
               Just [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '0', Just [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '8', Just [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '0', Nothing)
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '7', Nothing)
          - Right:
              expr: ("", [])
    - - - type: |-
            ((Char -> Maybe [(Int, Char)] -> ([Int], [Char])), Maybe Char,
             Maybe [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just '0',
               Just [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just '0',
               Just [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '8', Just [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '5', Just [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose foldMap mempty, Just '5', Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '0', Just [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing, Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '0', Just [((6), '6')])
          - Right:
              expr: ([], "")
    - - - type: |-
            ((Int -> Maybe [(Int, Char)] -> ([Int], [Char])), Maybe Int,
             Maybe [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.) in compose (maybe mempty) mempty, Just (-11),
               Just [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing, Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (11), Just [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Nothing, Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just (18),
               Just [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Nothing,
               Just [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (-11), Just [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just (18),
               Just [((6), '6')])
          - Right:
              expr: ([], "")
- - expr: |-
      let zero = 0
          tpl = (,)
        in tpl zero
  - - - - type: Char
        - type: (Int, Char)
      - - - expr: ('5')
          - Right:
              expr: (0, '5')
        - - expr: ('2')
          - Right:
              expr: (0, '2')
        - - expr: ('4')
          - Right:
              expr: (0, '4')
        - - expr: ('6')
          - Right:
              expr: (0, '6')
        - - expr: ('7')
          - Right:
              expr: (0, '7')
        - - expr: ('1')
          - Right:
              expr: (0, '1')
        - - expr: ('8')
          - Right:
              expr: (0, '8')
        - - expr: ('0')
          - Right:
              expr: (0, '0')
    - - - type: Int
        - type: (Int, Int)
      - - - expr: ((6))
          - Right:
              expr: (0, 6)
        - - expr: ((7))
          - Right:
              expr: (0, 7)
        - - expr: ((-11))
          - Right:
              expr: (0, -11)
        - - expr: ((11))
          - Right:
              expr: (0, 11)
        - - expr: ((-9))
          - Right:
              expr: (0, -9)
        - - expr: ((-20))
          - Right:
              expr: (0, -20)
        - - expr: ((-8))
          - Right:
              expr: (0, -8)
        - - expr: ((18))
          - Right:
              expr: (0, 18)
- - expr: |-
      let just = Just
          compose = (.)
          zero = 0
          tpl = (,)
        in compose just (tpl zero)
  - - - - type: Int
        - type: Maybe (Int, Int)
      - - - expr: ((18))
          - Right:
              expr: (Just (0, 18))
        - - expr: ((-11))
          - Right:
              expr: (Just (0, -11))
        - - expr: ((7))
          - Right:
              expr: (Just (0, 7))
        - - expr: ((6))
          - Right:
              expr: (Just (0, 6))
        - - expr: ((-9))
          - Right:
              expr: (Just (0, -9))
        - - expr: ((-20))
          - Right:
              expr: (Just (0, -20))
        - - expr: ((-8))
          - Right:
              expr: (Just (0, -8))
        - - expr: ((11))
          - Right:
              expr: (Just (0, 11))
    - - - type: Char
        - type: Maybe (Int, Char)
      - - - expr: ('6')
          - Right:
              expr: (Just (0, '6'))
        - - expr: ('4')
          - Right:
              expr: (Just (0, '4'))
        - - expr: ('2')
          - Right:
              expr: (Just (0, '2'))
        - - expr: ('0')
          - Right:
              expr: (Just (0, '0'))
        - - expr: ('8')
          - Right:
              expr: (Just (0, '8'))
        - - expr: ('5')
          - Right:
              expr: (Just (0, '5'))
        - - expr: ('7')
          - Right:
              expr: (Just (0, '7'))
        - - expr: ('1')
          - Right:
              expr: (Just (0, '1'))
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequenceA (just unzip))
  - - - - type: ((Char -> [(Char, Char)]), Char)
        - type: Maybe ([Char], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '2')
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '1')
          - Right:
              expr: (Just ("", ""))
        - - expr: (let compose = (.) in compose mempty maybe, '8')
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0')
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '6')
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '5')
          - Right:
              expr: (Just ("", ""))
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '0')
          - Right:
              expr: (Just ("", ""))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '4')
          - Right:
              expr: (Just ("", ""))
    - - - type: ((Int -> [(Int, Int)]), Int)
        - type: Maybe ([Int], [Int])
      - - - expr: (let compose = (.) in compose mempty fromEnum, (-8))
          - Right:
              expr: (Just ([], []))
        - - expr: (let compose = (.) in compose mempty fromEnum, (6))
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-9))
          - Right:
              expr: (Just ([], []))
        - - expr: (let compose = (.) in compose mempty fromEnum, (-11))
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-8))
          - Right:
              expr: (Just ([], []))
        - - expr: (let compose = (.) in compose mempty maybe, (11))
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-11))
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-9))
          - Right:
              expr: (Just ([], []))
    - - - type: ((Char -> [(Int, Char)]), Char)
        - type: Maybe ([Int], [Char])
      - - - expr: (let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: (Just ([], ""))
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '7')
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '5')
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '1')
          - Right:
              expr: (Just ([], ""))
        - - expr: (let compose = (.) in compose mempty fromEnum, '6')
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '5')
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '4')
          - Right:
              expr: (Just ([], ""))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '1')
          - Right:
              expr: (Just ([], ""))
    - - - type: ((Char -> [(Int, Int)]), Char)
        - type: Maybe ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '8')
          - Right:
              expr: (Just ([], []))
        - - expr: (let compose = (.) in compose mempty maybe, '2')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '7')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '0')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '7')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '0')
          - Right:
              expr: (Just ([], []))
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '2')
          - Right:
              expr: (Just ([], []))
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just) zip
  - - - - type: ([Char], [Char])
        - type: Maybe [(Char, Char)]
      - - - expr: (['6', '5'], ['6'])
          - Right:
              expr: (Just [('6', '6')])
        - - expr: ([], ['6', '5'])
          - Right:
              expr: (Just [])
        - - expr: ([], ['6'])
          - Right:
              expr: (Just [])
        - - expr: (['6'], [])
          - Right:
              expr: (Just [])
        - - expr: (['6'], ['6'])
          - Right:
              expr: (Just [('6', '6')])
        - - expr: ([], [])
          - Right:
              expr: (Just [])
        - - expr: (['6', '5'], ['6', '5'])
          - Right:
              expr: (Just [('6', '6'), ('5', '5')])
        - - expr: (['6', '5'], [])
          - Right:
              expr: (Just [])
    - - - type: ([Int], [Int])
        - type: Maybe [(Int, Int)]
      - - - expr: ([], [(6), (7)])
          - Right:
              expr: (Just [])
        - - expr: ([(6), (7)], [])
          - Right:
              expr: (Just [])
        - - expr: ([(6)], [(6)])
          - Right:
              expr: (Just [(6, 6)])
        - - expr: ([(6)], [(6), (7)])
          - Right:
              expr: (Just [(6, 6)])
        - - expr: ([(6), (7)], [(6)])
          - Right:
              expr: (Just [(6, 6)])
        - - expr: ([], [(6)])
          - Right:
              expr: (Just [])
        - - expr: ([], [])
          - Right:
              expr: (Just [])
        - - expr: ([(6), (7)], [(6), (7)])
          - Right:
              expr: (Just [(6, 6), (7, 7)])
    - - - type: ([Char], [Int])
        - type: Maybe [(Char, Int)]
      - - - expr: (['6'], [])
          - Right:
              expr: (Just [])
        - - expr: ([], [])
          - Right:
              expr: (Just [])
        - - expr: (['6', '5'], [(6), (7)])
          - Right:
              expr: (Just [('6', 6), ('5', 7)])
        - - expr: (['6', '5'], [(6)])
          - Right:
              expr: (Just [('6', 6)])
        - - expr: ([], [(6), (7)])
          - Right:
              expr: (Just [])
        - - expr: (['6'], [(6)])
          - Right:
              expr: (Just [('6', 6)])
        - - expr: (['6', '5'], [])
          - Right:
              expr: (Just [])
        - - expr: ([], [(6)])
          - Right:
              expr: (Just [])
    - - - type: ([Int], [Char])
        - type: Maybe [(Int, Char)]
      - - - expr: ([(6)], [])
          - Right:
              expr: (Just [])
        - - expr: ([(6), (7)], ['6'])
          - Right:
              expr: (Just [(6, '6')])
        - - expr: ([(6)], ['6', '5'])
          - Right:
              expr: (Just [(6, '6')])
        - - expr: ([], ['6', '5'])
          - Right:
              expr: (Just [])
        - - expr: ([(6)], ['6'])
          - Right:
              expr: (Just [(6, '6')])
        - - expr: ([], [])
          - Right:
              expr: (Just [])
        - - expr: ([(6), (7)], [])
          - Right:
              expr: (Just [])
        - - expr: ([], ['6'])
          - Right:
              expr: (Just [])
- - expr: let compose = (.) in compose compose (compose sequenceA)
  - - - - type: ((Int -> Maybe ([] Int)), (Int -> Int), Int)
        - type: '[] (Maybe Int)'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose toEnum toEnum, (11))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.) in compose toEnum fromEnum, (-20))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum,
               let compose = (.) in compose toEnum fromEnum, (-11))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               let compose = (.) in compose toEnum fromEnum, (-11))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               fromEnum, (-11))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let compose = (.) in compose toEnum fromEnum, (-20))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               fromEnum, (18))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let compose = (.) in compose toEnum toEnum, (-11))
          - Right:
              expr: '[Nothing]'
    - - - type: ((Int -> [] ([] Char)), (Char -> Int), Char)
        - type: '[] ([] Char)'
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               fromEnum, '6')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               fromEnum, '1')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               fromEnum, '1')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               fromEnum, '2')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '[""]'
    - - - type: ((Char -> [] (Maybe Char)), (Int -> Char), Int)
        - type: Maybe ([] Char)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               toEnum, (-9))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               toEnum, (-11))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               toEnum, (-9))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose toEnum fromEnum, (-9))
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum,
               let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: (Just "")
    - - - type: ((Char -> [] ([] Int)), (Char -> Char), Char)
        - type: '[] ([] Int)'
      - - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '[[]]'
- - expr: let compose = (.) in compose (maybe unzip) mempty
  - - - - type: (Int, Maybe Int, [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: ((-8), Just (-11), [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: ((18), Just (7), [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: ((11), Just (18), [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: ((-20), Just (18), [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: ((18), Just (11), [])
          - Right:
              expr: ("", "")
        - - expr: ((7), Just (11), [('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: ((11), Just (7), [('6', '6'), ('5', '5')])
          - Right:
              expr: ("", "")
        - - expr: ((-8), Nothing, [('6', '6')])
          - Right:
              expr: ("6", "6")
    - - - type: (Char, Maybe Int, [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: ('6', Just (-11), [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: ('5', Just (11), [])
          - Right:
              expr: ("", [])
        - - expr: ('8', Just (18), [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: ('0', Nothing, [])
          - Right:
              expr: ("", [])
        - - expr: ('2', Just (-11), [])
          - Right:
              expr: ("", [])
        - - expr: ('1', Nothing, [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: ('0', Just (7), [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: ('2', Just (18), [('6', (6))])
          - Right:
              expr: ("", [])
    - - - type: (Char, Maybe Char, [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: ('1', Nothing, [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: ('7', Nothing, [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: ('4', Just '5', [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: ('5', Nothing, [])
          - Right:
              expr: ([], "")
        - - expr: ('8', Just '8', [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: ('4', Just '7', [])
          - Right:
              expr: ([], "")
        - - expr: ('4', Just '5', [])
          - Right:
              expr: ([], "")
        - - expr: ('5', Just '5', [((6), '6')])
          - Right:
              expr: ([], "")
    - - - type: (Int, Maybe Char, [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: ((6), Nothing, [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: ((6), Just '5', [])
          - Right:
              expr: ([], [])
        - - expr: ((-20), Just '5', [])
          - Right:
              expr: ([], [])
        - - expr: ((7), Just '5', [])
          - Right:
              expr: ([], [])
        - - expr: ((-8), Just '8', [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: ((11), Just '8', [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: ((6), Just '7', [((6), (6))])
          - Right:
              expr: ([], [])
        - - expr: ((-20), Just '0', [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
- - expr: sequence
  - - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
      - - - expr: (Just (Just '8'))
          - Right:
              expr: (Just (Just '8'))
        - - expr: (Just (Just '7'))
          - Right:
              expr: (Just (Just '7'))
        - - expr: (Just (Just '5'))
          - Right:
              expr: (Just (Just '5'))
        - - expr: (Nothing)
          - Right:
              expr: (Just Nothing)
- - expr: maybe (unzip mempty) sequenceA
  - - - - type: Maybe [([Char], Char)]
        - type: ([Char], [Char])
      - - - expr: (Just [([], '6')])
          - Right:
              expr: ("", "6")
        - - expr: (Just [([], '6'), (['6', '5'], '5')])
          - Right:
              expr: ("65", "65")
        - - expr: (Nothing)
          - Right:
              expr: ("", "")
    - - - type: Maybe [([Char], Int)]
        - type: ([Char], [Int])
      - - - expr: (Just [([], (6)), (['6', '5'], (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: (Just [([], (6))])
          - Right:
              expr: ("", [6])
        - - expr: (Nothing)
          - Right:
              expr: ("", [])
    - - - type: Maybe [([Int], Int)]
        - type: ([Int], [Int])
      - - - expr: (Nothing)
          - Right:
              expr: ([], [])
        - - expr: (Just [([], (6))])
          - Right:
              expr: ([], [6])
        - - expr: (Just [([], (6)), ([(6), (7)], (7))])
          - Right:
              expr: ([6, 7], [6, 7])
    - - - type: Maybe [([Int], Char)]
        - type: ([Int], [Char])
      - - - expr: (Nothing)
          - Right:
              expr: ([], "")
        - - expr: (Just [([], '6'), ([(6), (7)], '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: (Just [([], '6')])
          - Right:
              expr: ([], "6")
- - expr: |-
      let just = Just
          compose = (.)
          prepend = (:)
        in compose prepend just
  - - - - type: (Char, [Maybe Char])
        - type: '[Maybe Char]'
      - - - expr: ('8', [Nothing, Just '5'])
          - Right:
              expr: '[Just ''8'', Nothing, Just ''5'']'
        - - expr: ('1', [Nothing, Just '5'])
          - Right:
              expr: '[Just ''1'', Nothing, Just ''5'']'
        - - expr: ('7', [Nothing])
          - Right:
              expr: '[Just ''7'', Nothing]'
        - - expr: ('5', [])
          - Right:
              expr: '[Just ''5'']'
        - - expr: ('8', [Nothing])
          - Right:
              expr: '[Just ''8'', Nothing]'
        - - expr: ('6', [Nothing, Just '5'])
          - Right:
              expr: '[Just ''6'', Nothing, Just ''5'']'
        - - expr: ('0', [Nothing, Just '5'])
          - Right:
              expr: '[Just ''0'', Nothing, Just ''5'']'
        - - expr: ('4', [Nothing])
          - Right:
              expr: '[Just ''4'', Nothing]'
    - - - type: (Int, [Maybe Int])
        - type: '[Maybe Int]'
      - - - expr: ((6), [Nothing])
          - Right:
              expr: '[Just 6, Nothing]'
        - - expr: ((7), [Nothing, Just (7)])
          - Right:
              expr: '[Just 7, Nothing, Just 7]'
        - - expr: ((11), [])
          - Right:
              expr: '[Just 11]'
        - - expr: ((18), [Nothing, Just (7)])
          - Right:
              expr: '[Just 18, Nothing, Just 7]'
        - - expr: ((-9), [])
          - Right:
              expr: '[Just (-9)]'
        - - expr: ((-9), [Nothing])
          - Right:
              expr: '[Just (-9), Nothing]'
        - - expr: ((-8), [])
          - Right:
              expr: '[Just (-8)]'
        - - expr: ((6), [])
          - Right:
              expr: '[Just 6]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend unzip)
  - - - - type: ((Char -> [(Int, Char)]), Char, [([Int], [Char])])
        - type: '[([Int], [Char])]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '7', [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '1', [([], [])])
          - Right:
              expr: '[([], ""), ([], "")]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '8', [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '1', [])
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, '0',
               [([], []), ([(6), (7)], ['6', '5']), ([(6)], ['6'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65"), ([6], "6")]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '2', [([], [])])
          - Right:
              expr: '[([], ""), ([], "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '2', [([], [])])
          - Right:
              expr: '[([], ""), ([], "")]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '1', [])
          - Right:
              expr: '[([], "")]'
    - - - type: ((Char -> [(Int, Int)]), Char, [([Int], [Int])])
        - type: '[([Int], [Int])]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '6', [([], [])])
          - Right:
              expr: '[([], []), ([], [])]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '5', [])
          - Right:
              expr: '[([], [])]'
        - - expr: (let compose = (.) in compose mempty maybe, '8', [])
          - Right:
              expr: '[([], [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '4', [([], []), ([(6), (7)], [(6), (7)]), ([(6)], [(6)])])
          - Right:
              expr: '[([], []), ([], []), ([6, 7], [6, 7]), ([6], [6])]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6', [])
          - Right:
              expr: '[([], [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '1', [([], []), ([(6), (7)], [(6), (7)])])
          - Right:
              expr: '[([], []), ([], []), ([6, 7], [6, 7])]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6', [([], []), ([(6), (7)], [(6), (7)]), ([(6)], [(6)])])
          - Right:
              expr: '[([], []), ([], []), ([6, 7], [6, 7]), ([6], [6])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '5', [([], []), ([(6), (7)], [(6), (7)])])
          - Right:
              expr: '[([], []), ([], []), ([6, 7], [6, 7])]'
    - - - type: ((Int -> [(Int, Char)]), Int, [([Int], [Char])])
        - type: '[([Int], [Char])]'
      - - - expr: |-
              (let compose = (.) in compose mempty fromEnum, (18),
               [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (11), [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (11), [([], [])])
          - Right:
              expr: '[([], ""), ([], "")]'
        - - expr: (let compose = (.) in compose mempty maybe, (18), [])
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-9), [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (18), [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-8), [])
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-11), [])
          - Right:
              expr: '[([], "")]'
    - - - type: ((Int -> [(Char, Int)]), Int, [([Char], [Int])])
        - type: '[([Char], [Int])]'
      - - - expr: |-
              (let compose = (.) in compose mempty maybe, (-9),
               [([], []), (['6', '5'], [(6), (7)])])
          - Right:
              expr: '[("", []), ("", []), ("65", [6, 7])]'
        - - expr: (let compose = (.) in compose mempty maybe, (-9), [])
          - Right:
              expr: '[("", [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (6), [([], []), (['6', '5'], [(6), (7)]), (['6'], [(6)])])
          - Right:
              expr: '[("", []), ("", []), ("65", [6, 7]), ("6", [6])]'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, (-8),
               [([], []), (['6', '5'], [(6), (7)]), (['6'], [(6)])])
          - Right:
              expr: '[("", []), ("", []), ("65", [6, 7]), ("6", [6])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-20), [([], []), (['6', '5'], [(6), (7)])])
          - Right:
              expr: '[("", []), ("", []), ("65", [6, 7])]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-20), [])
          - Right:
              expr: '[("", [])]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-20), [])
          - Right:
              expr: '[("", [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-9), [([], [])])
          - Right:
              expr: '[("", []), ("", [])]'
- - expr: let compose = (.) in compose compose (compose toEnum)
  - - - - type: ((Int -> Int), (Int -> Int), Int)
        - type: Char
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (toEnum, let compose = (.) in compose toEnum fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (toEnum, toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, fromEnum, (7))
          - Right:
              expr: '''\a'''
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum fromEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
    - - - type: ((Int -> Int), (Char -> Int), Char)
        - type: Char
      - - - expr: (fromEnum, fromEnum, '5')
          - Right:
              expr: '''5'''
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '''0'''
        - - expr: (fromEnum, fromEnum, '0')
          - Right:
              expr: '''0'''
        - - expr: (fromEnum, fromEnum, '2')
          - Right:
              expr: '''2'''
        - - expr: (let compose = (.) in compose toEnum toEnum, fromEnum, '4')
          - Right:
              expr: '''4'''
        - - expr: (toEnum, fromEnum, '6')
          - Right:
              expr: '''6'''
        - - expr: (toEnum, let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '''6'''
        - - expr: (toEnum, let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: '''5'''
    - - - type: ((Int -> Int), (Int -> Int), Int)
        - type: Int
      - - - expr: (fromEnum, fromEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: '7'
        - - expr: (toEnum, let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: '7'
        - - expr: (toEnum, let compose = (.) in compose toEnum fromEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: (let compose = (.) in compose toEnum toEnum, fromEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: '7'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum fromEnum, (-9))
          - Right:
              expr: (-9)
        - - expr: (toEnum, fromEnum, (6))
          - Right:
              expr: '6'
    - - - type: ((Int -> Int), (Char -> Int), Char)
        - type: Int
      - - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '49'
        - - expr: (let compose = (.) in compose toEnum fromEnum, fromEnum, '5')
          - Right:
              expr: '53'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '49'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: (fromEnum, fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: '53'
        - - expr: (let compose = (.) in compose toEnum fromEnum, fromEnum, '8')
          - Right:
              expr: '56'
        - - expr: (let compose = (.) in compose toEnum fromEnum, fromEnum, '0')
          - Right:
              expr: '48'
- - expr: |-
      let conc = (<>)
          just = Just
        in conc (just (unzip mempty))
  - - - - type: Maybe ([Int], [Char])
        - type: Maybe ([Int], [Char])
      - - - expr: (Nothing)
          - Right:
              expr: (Just ([], ""))
        - - expr: (Just ([(6)], ['6']))
          - Right:
              expr: (Just ([6], "6"))
        - - expr: (Just ([(6), (7)], ['6', '5']))
          - Right:
              expr: (Just ([6, 7], "65"))
    - - - type: Maybe ([Char], [Int])
        - type: Maybe ([Char], [Int])
      - - - expr: (Just (['6'], [(6)]))
          - Right:
              expr: (Just ("6", [6]))
        - - expr: (Just (['6', '5'], [(6), (7)]))
          - Right:
              expr: (Just ("65", [6, 7]))
        - - expr: (Nothing)
          - Right:
              expr: (Just ("", []))
    - - - type: Maybe ([Char], [Char])
        - type: Maybe ([Char], [Char])
      - - - expr: (Just (['6', '5'], ['6', '5']))
          - Right:
              expr: (Just ("65", "65"))
        - - expr: (Just (['6'], ['6']))
          - Right:
              expr: (Just ("6", "6"))
        - - expr: (Nothing)
          - Right:
              expr: (Just ("", ""))
    - - - type: Maybe ([Int], [Int])
        - type: Maybe ([Int], [Int])
      - - - expr: (Just ([(6), (7)], [(6), (7)]))
          - Right:
              expr: (Just ([6, 7], [6, 7]))
        - - expr: (Nothing)
          - Right:
              expr: (Just ([], []))
        - - expr: (Just ([(6)], [(6)]))
          - Right:
              expr: (Just ([6], [6]))
- - expr: let compose = (.) in compose (compose fmap) maybe
  - - - - type: (Int, (Int -> Int), Maybe (Maybe Int))
        - type: Maybe Int
      - - - expr: |-
              ((-20), let compose = (.) in compose toEnum toEnum,
               Just (Just (-11)))
          - Right:
              expr: (Just (-11))
        - - expr: ((-9), fromEnum, Just (Just (18)))
          - Right:
              expr: (Just 18)
        - - expr: ((6), toEnum, Just (Just (-11)))
          - Right:
              expr: (Just (-11))
        - - expr: ((7), let compose = (.) in compose toEnum toEnum, Just (Just (7)))
          - Right:
              expr: (Just 7)
        - - expr: ((-8), toEnum, Just (Just (7)))
          - Right:
              expr: (Just 7)
        - - expr: ((-20), toEnum, Just (Just (18)))
          - Right:
              expr: (Just 18)
        - - expr: ((-20), fromEnum, Just (Just (-11)))
          - Right:
              expr: (Just (-11))
        - - expr: ((-11), toEnum, Just (Just (7)))
          - Right:
              expr: (Just 7)
    - - - type: (Char, (Char -> Char), Maybe (Maybe Char))
        - type: Maybe Char
      - - - expr: |-
              ('8', let compose = (.) in compose toEnum fromEnum,
               Just (Just '7'))
          - Right:
              expr: (Just '7')
        - - expr: |-
              ('2', let compose = (.) in compose toEnum fromEnum,
               Just (Just '7'))
          - Right:
              expr: (Just '7')
        - - expr: |-
              ('2', let compose = (.) in compose toEnum fromEnum,
               Just (Just '8'))
          - Right:
              expr: (Just '8')
        - - expr: |-
              ('7', let compose = (.) in compose toEnum fromEnum,
               Just (Just '7'))
          - Right:
              expr: (Just '7')
        - - expr: |-
              ('5', let compose = (.) in compose toEnum fromEnum,
               Just (Just '5'))
          - Right:
              expr: (Just '5')
        - - expr: |-
              ('0', let compose = (.) in compose toEnum fromEnum,
               Just (Just '5'))
          - Right:
              expr: (Just '5')
        - - expr: |-
              ('1', let compose = (.) in compose toEnum fromEnum,
               Just (Just '5'))
          - Right:
              expr: (Just '5')
        - - expr: |-
              ('7', let compose = (.) in compose toEnum fromEnum,
               Just (Just '8'))
          - Right:
              expr: (Just '8')
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend) fmap
  - - - - type: ((Char -> Char), Maybe Char, [Maybe Char])
        - type: '[Maybe Char]'
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, Just '8',
               [Nothing, Just '5'])
          - Right:
              expr: '[Just ''8'', Nothing, Just ''5'']'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing, [])
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '0', [Nothing])
          - Right:
              expr: '[Just ''0'', Nothing]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '7', [])
          - Right:
              expr: '[Just ''7'']'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '8', [])
          - Right:
              expr: '[Just ''8'']'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, Just '5',
               [Nothing, Just '5'])
          - Right:
              expr: '[Just ''5'', Nothing, Just ''5'']'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, Just '7',
               [Nothing, Just '5'])
          - Right:
              expr: '[Just ''7'', Nothing, Just ''5'']'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, Nothing,
               [Nothing, Just '5'])
          - Right:
              expr: '[Nothing, Nothing, Just ''5'']'
- - expr: let compose = (.) in compose zip
  - - - - type: ((Char -> [Int]), Char, [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '6', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '8', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '2', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '2', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '7', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '6', ['6'])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Char]), Int, [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (7), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (18), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-11), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-9), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (7), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-20), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (7), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-20), ['6'])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Char]), Int, [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-9), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-20), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7), [(6)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (7), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (7), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-20), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11), [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Char]), Char, [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '0', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '1', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '2', ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '4', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '8', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '4', ['6', '5'])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose compose (compose length)
  - - - - type: ((Char -> Maybe Int), (Int -> Char), Int)
        - type: Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               let compose = (.) in compose toEnum fromEnum, (-9))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               toEnum, (-9))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               toEnum, (-11))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               toEnum, (18))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               let compose = (.) in compose toEnum toEnum, (11))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               toEnum, (-20))
          - Right:
              expr: '1'
    - - - type: ((Char -> Maybe Char), (Int -> Char), Int)
        - type: Int
      - - - expr: |-
              (let just = Just in just,
               let compose = (.) in compose toEnum toEnum, (-8))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just in just,
               let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just in just,
               let compose = (.) in compose toEnum toEnum, (-20))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just in just,
               let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just in just,
               let compose = (.) in compose toEnum toEnum, (-11))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just in just,
               let compose = (.) in compose toEnum fromEnum, (-11))
          - Right:
              expr: '1'
        - - expr: (let just = Just in just, toEnum, (-8))
          - Right:
              expr: '1'
        - - expr: (let just = Just in just, toEnum, (6))
          - Right:
              expr: '1'
    - - - type: ((Int -> [] Char), (Int -> Int), Int)
        - type: Int
      - - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose toEnum toEnum, (-9))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               fromEnum, (6))
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               fromEnum, (-11))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               toEnum, (6))
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose toEnum toEnum, (11))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let compose = (.) in compose toEnum toEnum, (-20))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               let compose = (.) in compose toEnum fromEnum, (-9))
          - Right:
              expr: '0'
    - - - type: ((Int -> [] Int), (Int -> Int), Int)
        - type: Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               fromEnum, (11))
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               fromEnum, (7))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: '0'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               toEnum, (6))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               let compose = (.) in compose toEnum fromEnum, (-20))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose toEnum toEnum, (-9))
          - Right:
              expr: '0'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc (compose unzip)
  - - - - type: ((Char -> [(Int, Int)]), (Char -> ([Int], [Int])), Char)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.) in compose mempty fromEnum, '8')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose (zip mempty) mempty,
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '2')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose unzip (sequenceA mempty), '5')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               '7')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '2')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '2')
          - Right:
              expr: ([], [])
    - - - type: ((Char -> [(Char, Int)]), (Char -> ([Char], [Int])), Char)
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '2')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose (zip mempty) mempty,
               let compose = (.) in compose unzip (sequenceA mempty), '7')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '1')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum,
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '6')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '0')
          - Right:
              expr: ("", [])
    - - - type: ((Int -> [(Int, Int)]), (Int -> ([Int], [Int])), Int)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (18))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-9))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let compose = (.) in compose unzip mempty, (-8))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose mempty maybe, (11))
          - Right:
              expr: ([], [])
    - - - type: ((Int -> [(Int, Char)]), (Int -> ([Int], [Char])), Int)
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (-20))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-9))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               let compose = (.) in compose mempty fromEnum, (-9))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               (7))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum,
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (6))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               let compose = (.) in compose unzip (sequence mempty), (11))
          - Right:
              expr: ([], "")
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend fromEnum
  - - - - type: (Int, [Int])
        - type: '[Int]'
      - - - expr: ((-20), [(6), (7)])
          - Right:
              expr: '[-20, 6, 7]'
        - - expr: ((-11), [])
          - Right:
              expr: '[-11]'
        - - expr: ((-8), [])
          - Right:
              expr: '[-8]'
        - - expr: ((18), [(6)])
          - Right:
              expr: '[18, 6]'
        - - expr: ((-20), [(6)])
          - Right:
              expr: '[-20, 6]'
        - - expr: ((18), [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
        - - expr: ((7), [(6), (7)])
          - Right:
              expr: '[7, 6, 7]'
        - - expr: ((7), [(6)])
          - Right:
              expr: '[7, 6]'
    - - - type: (Char, [Int])
        - type: '[Int]'
      - - - expr: ('2', [(6), (7)])
          - Right:
              expr: '[50, 6, 7]'
        - - expr: ('6', [(6)])
          - Right:
              expr: '[54, 6]'
        - - expr: ('7', [(6), (7)])
          - Right:
              expr: '[55, 6, 7]'
        - - expr: ('5', [(6), (7)])
          - Right:
              expr: '[53, 6, 7]'
        - - expr: ('2', [])
          - Right:
              expr: '[50]'
        - - expr: ('1', [(6), (7)])
          - Right:
              expr: '[49, 6, 7]'
        - - expr: ('2', [(6)])
          - Right:
              expr: '[50, 6]'
        - - expr: ('7', [(6)])
          - Right:
              expr: '[55, 6]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequenceA (just length))
  - - - - type: ((Char -> [] Char), Char)
        - type: Maybe Int
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '4')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '2')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '8')
          - Right:
              expr: (Just 0)
        - - expr: (let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '1')
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '1')
          - Right:
              expr: (Just 0)
        - - expr: (let compose = (.) in compose mempty fromEnum, '7')
          - Right:
              expr: (Just 0)
    - - - type: ((Char -> Maybe Int), Char)
        - type: Maybe Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '6')
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2')
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '1')
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8')
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5')
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7')
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4')
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '0')
          - Right:
              expr: (Just 1)
    - - - type: ((Int -> Maybe Int), Int)
        - type: Maybe Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-20))
          - Right:
              expr: (Just 1)
        - - expr: (let just = Just in just, (18))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-11))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (11))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (11))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-8))
          - Right:
              expr: (Just 1)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (7))
          - Right:
              expr: (Just 1)
        - - expr: (let just = Just in just, (-8))
          - Right:
              expr: (Just 1)
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend
  - - - - type: ((Char -> Char), Char, [Char])
        - type: '[Char]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '6', [])
          - Right:
              expr: '"6"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', ['6'])
          - Right:
              expr: '"56"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', ['6', '5'])
          - Right:
              expr: '"465"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', ['6', '5'])
          - Right:
              expr: '"065"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', [])
          - Right:
              expr: '"7"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', ['6', '5'])
          - Right:
              expr: '"665"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', [])
          - Right:
              expr: '"0"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', ['6', '5'])
          - Right:
              expr: '"765"'
    - - - type: ((Int -> Char), Int, [Char])
        - type: '[Char]'
      - - - expr: (toEnum, (18), ['6'])
          - Right:
              expr: '"\DC26"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), [])
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (11), ['6', '5'])
          - Right:
              expr: '"\v65"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (6), ['6'])
          - Right:
              expr: '"\ACK6"'
        - - expr: (toEnum, (-11), ['6', '5'])
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (11), ['6'])
          - Right:
              expr: '"\v6"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8), [])
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (toEnum, (-9), ['6'])
          - Left: '"Prelude.chr: bad argument: (-9)"'
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
      - - - expr: (fromEnum, '0', [(6)])
          - Right:
              expr: '[48, 6]'
        - - expr: (fromEnum, '2', [])
          - Right:
              expr: '[50]'
        - - expr: (fromEnum, '0', [(6), (7)])
          - Right:
              expr: '[48, 6, 7]'
        - - expr: (fromEnum, '4', [])
          - Right:
              expr: '[52]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', [])
          - Right:
              expr: '[48]'
        - - expr: (fromEnum, '2', [(6)])
          - Right:
              expr: '[50, 6]'
        - - expr: (fromEnum, '1', [(6)])
          - Right:
              expr: '[49, 6]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', [(6), (7)])
          - Right:
              expr: '[48, 6, 7]'
    - - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (7), [(6)])
          - Right:
              expr: '[7, 6]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-8), [(6), (7)])
          - Right:
              expr: '[-8, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (11), [(6), (7)])
          - Right:
              expr: '[11, 6, 7]'
        - - expr: (fromEnum, (7), [(6)])
          - Right:
              expr: '[7, 6]'
        - - expr: (fromEnum, (18), [])
          - Right:
              expr: '[18]'
        - - expr: (toEnum, (18), [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (18), [(6)])
          - Right:
              expr: '[18, 6]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (6), [(6), (7)])
          - Right:
              expr: '[6, 6, 7]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose foldMap (compose prepend)
  - - - - type: ((Int -> Int), Maybe Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, Just (11),
               [(6), (7)])
          - Right:
              expr: '[11, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (18), [])
          - Right:
              expr: '[18]'
        - - expr: (toEnum, Just (18), [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (11), [(6)])
          - Right:
              expr: '[11, 6]'
        - - expr: (toEnum, Just (-11), [])
          - Right:
              expr: '[-11]'
        - - expr: (toEnum, Just (7), [(6), (7)])
          - Right:
              expr: '[7, 6, 7]'
        - - expr: (toEnum, Just (7), [(6)])
          - Right:
              expr: '[7, 6]'
        - - expr: (fromEnum, Just (18), [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
    - - - type: ((Char -> Char), Maybe Char, [Char])
        - type: '[Char]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, Just '8', [])
          - Right:
              expr: '"8"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '7', ['6'])
          - Right:
              expr: '"76"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '0', ['6'])
          - Right:
              expr: '"06"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '7', [])
          - Right:
              expr: '"7"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, Just '0',
               ['6', '5'])
          - Right:
              expr: '"065"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '5', ['6'])
          - Right:
              expr: '"56"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing, [])
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, Just '8',
               ['6', '5'])
          - Right:
              expr: '"865"'
    - - - type: ((Int -> Char), Maybe Int, [Char])
        - type: '[Char]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, Just (11), ['6'])
          - Right:
              expr: '"\v6"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing, ['6', '5'])
          - Right:
              expr: '""'
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (18), ['6', '5'])
          - Right:
              expr: '"\DC265"'
        - - expr: (toEnum, Just (18), [])
          - Right:
              expr: '"\DC2"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (18), ['6'])
          - Right:
              expr: '"\DC26"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, Just (11),
               ['6', '5'])
          - Right:
              expr: '"\v65"'
        - - expr: (toEnum, Just (11), ['6'])
          - Right:
              expr: '"\v6"'
        - - expr: (toEnum, Just (7), [])
          - Right:
              expr: '"\a"'
- - expr: let compose = (.) in compose (maybe mempty zip)
  - - - - type: ((Int -> Maybe [Int]), Int, [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-9), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               (6), [(6)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (11), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (7), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-11), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (11), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-11), [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: ((Int -> Maybe [Char]), Int, [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (18), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (18), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-9), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (7), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-11), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-20), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (18), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (7), [])
          - Right:
              expr: '[]'
    - - - type: ((Char -> Maybe [Int]), Char, [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '0', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '5', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '1', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '8', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '5', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '0', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '8', [])
          - Right:
              expr: '[]'
    - - - type: ((Int -> Maybe [Int]), Int, [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-20), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (7), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-8), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-20), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-9), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-9), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-9), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-9), ['6', '5'])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose unzip sequenceA
  - - - - type: (Char, [Int])
        - type: ([Char], [Int])
      - - - expr: (('5', [(6), (7)]))
          - Right:
              expr: ("55", [6, 7])
        - - expr: (('7', [(6)]))
          - Right:
              expr: ("7", [6])
        - - expr: (('6', []))
          - Right:
              expr: ("", [])
    - - - type: (Int, [Int])
        - type: ([Int], [Int])
      - - - expr: (((18), [(6)]))
          - Right:
              expr: ([18], [6])
        - - expr: (((7), [(6), (7)]))
          - Right:
              expr: ([7, 7], [6, 7])
        - - expr: (((6), []))
          - Right:
              expr: ([], [])
    - - - type: (Int, [Char])
        - type: ([Int], [Char])
      - - - expr: (((7), ['6', '5']))
          - Right:
              expr: ([7, 7], "65")
        - - expr: (((18), ['6']))
          - Right:
              expr: ([18], "6")
        - - expr: (((6), []))
          - Right:
              expr: ([], "")
    - - - type: (Char, [Char])
        - type: ([Char], [Char])
      - - - expr: (('5', ['6', '5']))
          - Right:
              expr: ("55", "65")
        - - expr: (('6', []))
          - Right:
              expr: ("", "")
        - - expr: (('7', ['6']))
          - Right:
              expr: ("7", "6")
- - expr: let compose = (.) in compose (compose sequence unzip)
  - - - - type: ((Int -> [(Char, Int)]), Int)
        - type: '[([Char], Int)]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-9))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (-20))
          - Right:
              expr: '[]'
    - - - type: ((Char -> [(Char, Char)]), Char)
        - type: '[([Char], Char)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '7')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: '[]'
    - - - type: ((Int -> [(Int, Int)]), Int)
        - type: '[([Int], Int)]'
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (6))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (18))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, (7))
          - Right:
              expr: '[]'
    - - - type: ((Char -> [(Char, Int)]), Char)
        - type: '[([Char], Int)]'
      - - - expr: (let compose = (.) in compose (zip mempty) mempty, '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '6')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose (zip mempty) mempty, '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '5')
          - Right:
              expr: '[]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc zip) mempty
  - - - - type: (Char, [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: ('2', ['6'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: ('4', [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ('5', [], ['6'])
          - Right:
              expr: '[]'
        - - expr: ('8', ['6'], [])
          - Right:
              expr: '[]'
        - - expr: ('6', [], ['6'])
          - Right:
              expr: '[]'
        - - expr: ('1', ['6'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: ('5', [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ('5', ['6'], [])
          - Right:
              expr: '[]'
    - - - type: (Int, [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: ((-9), [], [])
          - Right:
              expr: '[]'
        - - expr: ((18), ['6'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: ((7), ['6', '5'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: ((18), [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((-9), ['6'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: ((11), ['6', '5'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: ((7), ['6'], [])
          - Right:
              expr: '[]'
        - - expr: ((11), ['6', '5'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
    - - - type: (Int, [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: ((-8), [(6)], [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ((-8), [(6)], [(6), (7)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ((-9), [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ((6), [], [])
          - Right:
              expr: '[]'
        - - expr: ((-20), [(6)], [(6), (7)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ((-11), [(6), (7)], [(6), (7)])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: ((-20), [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((6), [(6)], [(6)])
          - Right:
              expr: '[(6, 6)]'
    - - - type: (Int, [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: ((-11), ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: ((-11), ['6'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: ((18), [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((-11), ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: ((6), [], [])
          - Right:
              expr: '[]'
        - - expr: ((-11), [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((11), ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: ((-8), ['6', '5'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just toEnum))
  - - - - type: ((Int -> Int), Int)
        - type: Maybe Char
      - - - expr: (fromEnum, (11))
          - Right:
              expr: (Just '\v')
        - - expr: (let compose = (.) in compose toEnum toEnum, (11))
          - Right:
              expr: (Just '\v')
        - - expr: (let compose = (.) in compose toEnum toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (toEnum, (18))
          - Right:
              expr: (Just '\DC2')
        - - expr: (toEnum, (11))
          - Right:
              expr: (Just '\v')
        - - expr: (toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: (Just '\DC2')
    - - - type: ((Char -> Int), Char)
        - type: Maybe Char
      - - - expr: (fromEnum, '6')
          - Right:
              expr: (Just '6')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just '6')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just '8')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just '4')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (Just '1')
        - - expr: (fromEnum, '0')
          - Right:
              expr: (Just '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (Just '7')
    - - - type: ((Int -> Int), Int)
        - type: Maybe Int
      - - - expr: (toEnum, (6))
          - Right:
              expr: (Just 6)
        - - expr: (fromEnum, (7))
          - Right:
              expr: (Just 7)
        - - expr: (toEnum, (18))
          - Right:
              expr: (Just 18)
        - - expr: (let compose = (.) in compose toEnum toEnum, (-9))
          - Right:
              expr: (Just (-9))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: (Just 7)
        - - expr: (toEnum, (-20))
          - Right:
              expr: (Just (-20))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11))
          - Right:
              expr: (Just (-11))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9))
          - Right:
              expr: (Just (-9))
- - expr: let compose = (.) in compose (compose fmap zip)
  - - - - type: ((Char -> [Char]), Char, Maybe [Int])
        - type: Maybe [(Char, Int)]
      - - - expr: (let compose = (.) in compose mempty maybe, '2', Just [(6)])
          - Right:
              expr: (Just [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '1', Just [(6), (7)])
          - Right:
              expr: (Just [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '0', Just [(6), (7)])
          - Right:
              expr: (Just [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '5', Just [(6), (7)])
          - Right:
              expr: (Just [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '1', Just [(6), (7)])
          - Right:
              expr: (Just [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '4', Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '1', Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '4', Just [(6)])
          - Right:
              expr: (Just [])
    - - - type: ((Char -> [Int]), Char, Maybe [Int])
        - type: Maybe [(Int, Int)]
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5', Just [(6), (7)])
          - Right:
              expr: (Just [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '6', Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '4', Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose mempty maybe, '5', Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '7', Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '6', Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               '6', Just [(6)])
          - Right:
              expr: (Just [(0, 6)])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '8', Nothing)
          - Right:
              expr: Nothing
- - expr: |-
      let zero = 0
          prepend = (:)
        in maybe (prepend zero) mempty
  - - - - type: (Maybe Int, [Int])
        - type: '[Int]'
      - - - expr: (Nothing, [])
          - Right:
              expr: '[0]'
        - - expr: (Just (11), [])
          - Right:
              expr: '[]'
        - - expr: (Just (-11), [(6)])
          - Right:
              expr: '[]'
        - - expr: (Just (7), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just (18), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just (11), [(6)])
          - Right:
              expr: '[]'
        - - expr: (Just (-11), [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
    - - - type: (Maybe Char, [Int])
        - type: '[Int]'
      - - - expr: (Just '0', [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[0]'
        - - expr: (Just '8', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just '5', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just '8', [(6)])
          - Right:
              expr: '[]'
        - - expr: (Just '7', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just '0', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just '7', [])
          - Right:
              expr: '[]'
- - expr: |-
      let zero = 0
          prepend = (:)
          tpl = (,)
        in tpl (prepend zero mempty)
  - - - - type: Char
        - type: ([Int], Char)
      - - - expr: ('6')
          - Right:
              expr: ([0], '6')
        - - expr: ('7')
          - Right:
              expr: ([0], '7')
        - - expr: ('0')
          - Right:
              expr: ([0], '0')
        - - expr: ('2')
          - Right:
              expr: ([0], '2')
        - - expr: ('4')
          - Right:
              expr: ([0], '4')
        - - expr: ('1')
          - Right:
              expr: ([0], '1')
        - - expr: ('5')
          - Right:
              expr: ([0], '5')
        - - expr: ('8')
          - Right:
              expr: ([0], '8')
    - - - type: Int
        - type: ([Int], Int)
      - - - expr: ((-11))
          - Right:
              expr: ([0], -11)
        - - expr: ((18))
          - Right:
              expr: ([0], 18)
        - - expr: ((6))
          - Right:
              expr: ([0], 6)
        - - expr: ((11))
          - Right:
              expr: ([0], 11)
        - - expr: ((-9))
          - Right:
              expr: ([0], -9)
        - - expr: ((-20))
          - Right:
              expr: ([0], -20)
        - - expr: ((-8))
          - Right:
              expr: ([0], -8)
        - - expr: ((7))
          - Right:
              expr: ([0], 7)
- - expr: let compose = (.) in compose foldMap (maybe unzip)
  - - - - type: |-
            ((Char -> [(Char, Int)] -> ([Char], [Int])), Maybe (Maybe Char),
             [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing, [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (Just '7'), [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just (Just '7'),
               [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (Just '5'), [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing, [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (Just '7'), [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (Just '8'), [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (Just '7'), [])
          - Right:
              expr: ("", [])
    - - - type: |-
            ((Char -> [(Int, Char)] -> ([Int], [Char])), Maybe (Maybe Char),
             [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (Just '8'), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (Just '7'), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing, [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (Just '7'), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing, [])
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, Nothing, [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (Just '7'), [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (Just '8'), [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
- - expr: |-
      let just = Just
          zero = 0
          prepend = (:)
        in prepend (just (just zero))
  - - - - type: '[Maybe (Maybe Int)]'
        - type: '[Maybe (Maybe Int)]'
      - - - expr: ([Nothing, Just (Just (7))])
          - Right:
              expr: '[Just (Just 0), Nothing, Just (Just 7)]'
        - - expr: ([Nothing])
          - Right:
              expr: '[Just (Just 0), Nothing]'
        - - expr: ([])
          - Right:
              expr: '[Just (Just 0)]'
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose conc prepend
  - - - - type: (Int, ([Int] -> [Int]), [Int])
        - type: '[Int]'
      - - - expr: |-
              ((-11),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [(6), (7)])
          - Right:
              expr: '[-11, 6, 7]'
        - - expr: ((-8), let conc = (<>) in conc mempty, [])
          - Right:
              expr: '[-8]'
        - - expr: ((-20), let compose = (.) in compose mempty (zip mempty), [])
          - Right:
              expr: '[-20]'
        - - expr: ((-9), let conc = (<>) in conc (conc mempty mempty), [(6), (7)])
          - Right:
              expr: '[-9, 6, 7, 6, 7]'
        - - expr: ((18), let compose = (.) in compose mempty zip, [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
        - - expr: ((6), let compose = (.) in compose mempty (zip mempty), [(6), (7)])
          - Right:
              expr: '[6, 6, 7]'
        - - expr: |-
              ((-8),
               let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose mempty (prepend zero),
               [])
          - Right:
              expr: '[-8]'
        - - expr: |-
              ((11),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [(6)])
          - Right:
              expr: '[11, 6]'
    - - - type: (Char, ([Char] -> [Char]), [Char])
        - type: '[Char]'
      - - - expr: |-
              ('2',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [])
          - Right:
              expr: '"2"'
        - - expr: ('6', let conc = (<>) in conc mempty, ['6', '5'])
          - Right:
              expr: '"66565"'
        - - expr: ('5', let conc = (<>) in conc (conc mempty mempty), [])
          - Right:
              expr: '"5"'
        - - expr: |-
              ('7',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               ['6'])
          - Right:
              expr: '"76"'
        - - expr: |-
              ('6',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['6', '5'])
          - Right:
              expr: '"665"'
        - - expr: ('2', let compose = (.) in compose mempty maybe, [])
          - Right:
              expr: '"2"'
        - - expr: |-
              ('4',
               let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               ['6', '5'])
          - Right:
              expr: '"465"'
        - - expr: |-
              ('1',
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               ['6'])
          - Right:
              expr: '"16"'
- - expr: let tpl = (,) in maybe (tpl (unzip mempty))
  - - - - type: ((Int -> Int -> (([Int], [Int]), Int)), Maybe Int, Int)
        - type: (([Int], [Int]), Int)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (11), (11))
          - Right:
              expr: (([], []), 11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (7), (-11))
          - Right:
              expr: (([], []), -11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (18), (6))
          - Right:
              expr: (([], []), 6)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (18), (18))
          - Right:
              expr: (([], []), 18)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (-11), (-8))
          - Right:
              expr: (([], []), -8)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (-11), (-11))
          - Right:
              expr: (([], []), -11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (7), (-9))
          - Right:
              expr: (([], []), -9)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (11), (18))
          - Right:
              expr: (([], []), 18)
    - - - type: ((Char -> Int -> (([Int], [Int]), Int)), Maybe Char, Int)
        - type: (([Int], [Int]), Int)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '0', (7))
          - Right:
              expr: (([], []), 7)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '8', (-8))
          - Right:
              expr: (([], []), -8)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Nothing, (-20))
          - Right:
              expr: (([], []), -20)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Nothing, (6))
          - Right:
              expr: (([], []), 6)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '5', (-20))
          - Right:
              expr: (([], []), -20)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '5', (-8))
          - Right:
              expr: (([], []), -8)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '5', (11))
          - Right:
              expr: (([], []), 11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '8', (6))
          - Right:
              expr: (([], []), 6)
    - - - type: ((Char -> Int -> (([Int], [Char]), Int)), Maybe Char, Int)
        - type: (([Int], [Char]), Int)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '7', (-8))
          - Right:
              expr: (([], ""), -8)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '5', (7))
          - Right:
              expr: (([], ""), 7)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '8', (-8))
          - Right:
              expr: (([], ""), -8)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '0', (-8))
          - Right:
              expr: (([], ""), -8)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '8', (11))
          - Right:
              expr: (([], ""), 11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Nothing, (-11))
          - Right:
              expr: (([], ""), -11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '7', (11))
          - Right:
              expr: (([], ""), 11)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just '0', (-11))
          - Right:
              expr: (([], ""), -11)
    - - - type: ((Int -> Char -> (([Int], [Int]), Char)), Maybe Int, Char)
        - type: (([Int], [Int]), Char)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Nothing, '2')
          - Right:
              expr: (([], []), '2')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (11), '1')
          - Right:
              expr: (([], []), '1')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (18), '2')
          - Right:
              expr: (([], []), '2')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (-11), '2')
          - Right:
              expr: (([], []), '2')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (11), '4')
          - Right:
              expr: (([], []), '4')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (7), '1')
          - Right:
              expr: (([], []), '1')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (11), '7')
          - Right:
              expr: (([], []), '7')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl mempty,
               Just (7), '8')
          - Right:
              expr: (([], []), '8')
- - expr: let compose = (.) in compose (compose zip) mempty
  - - - - type: (Int, Int, [Int])
        - type: '[(Char, Int)]'
      - - - expr: ((18), (-9), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((-9), (-8), [])
          - Right:
              expr: '[]'
        - - expr: ((6), (-8), [])
          - Right:
              expr: '[]'
        - - expr: ((6), (11), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((-8), (-9), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((-9), (-11), [])
          - Right:
              expr: '[]'
        - - expr: ((7), (7), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((18), (6), [(6)])
          - Right:
              expr: '[]'
    - - - type: (Int, Char, [Char])
        - type: '[(Int, Char)]'
      - - - expr: ((11), '8', ['6'])
          - Right:
              expr: '[]'
        - - expr: ((-11), '4', ['6'])
          - Right:
              expr: '[]'
        - - expr: ((-20), '1', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ((7), '5', [])
          - Right:
              expr: '[]'
        - - expr: ((11), '1', ['6'])
          - Right:
              expr: '[]'
        - - expr: ((-9), '2', [])
          - Right:
              expr: '[]'
        - - expr: ((-8), '0', [])
          - Right:
              expr: '[]'
        - - expr: ((18), '0', ['6'])
          - Right:
              expr: '[]'
    - - - type: (Char, Char, [Int])
        - type: '[(Int, Int)]'
      - - - expr: ('1', '4', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('6', '6', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ('5', '5', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('4', '8', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ('7', '1', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('4', '0', [])
          - Right:
              expr: '[]'
        - - expr: ('2', '8', [(6)])
          - Right:
              expr: '[]'
        - - expr: ('5', '5', [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: (Int, Int, [Int])
        - type: '[(Int, Int)]'
      - - - expr: ((-8), (-9), [])
          - Right:
              expr: '[]'
        - - expr: ((-9), (7), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((18), (-11), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((-8), (6), [(6)])
          - Right:
              expr: '[]'
        - - expr: ((-9), (-9), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: ((7), (-20), [])
          - Right:
              expr: '[]'
        - - expr: ((-9), (-9), [])
          - Right:
              expr: '[]'
        - - expr: ((11), (6), [])
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just sequenceA))
  - - - - type: ((Char -> [] ([] Char)), Char)
        - type: Maybe ([] ([] Char))
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (prepend mempty) mempty,
               '2')
          - Right:
              expr: (Just [])
        - - expr: (let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '5')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '5')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '8')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '1')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '1')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: (Just [""])
    - - - type: ((Int -> [] ([] Char)), Int)
        - type: Maybe ([] ([] Char))
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (7))
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11))
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (18))
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (11))
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-20))
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-9))
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-11))
          - Right:
              expr: (Just [""])
        - - expr: (let compose = (.) in compose mempty fromEnum, (-11))
          - Right:
              expr: (Just [""])
    - - - type: ((Char -> [] (Maybe Int)), Char)
        - type: Maybe (Maybe ([] Int))
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '4')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '5')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '7')
          - Right:
              expr: (Just (Just []))
        - - expr: (let compose = (.) in compose mempty fromEnum, '7')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '4')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '8')
          - Right:
              expr: (Just (Just []))
        - - expr: (let compose = (.) in compose mempty maybe, '8')
          - Right:
              expr: (Just (Just []))
    - - - type: ((Char -> Maybe (Maybe Char)), Char)
        - type: Maybe (Maybe (Maybe Char))
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '4')
          - Right:
              expr: (Just (Just (Just '4')))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '0')
          - Right:
              expr: (Just (Just (Just '0')))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '6')
          - Right:
              expr: (Just (Just (Just '6')))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '1')
          - Right:
              expr: (Just (Just (Just '1')))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '7')
          - Right:
              expr: (Just (Just (Just '7')))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '5')
          - Right:
              expr: (Just (Just (Just '5')))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '2')
          - Right:
              expr: (Just (Just (Just '2')))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '8')
          - Right:
              expr: (Just (Just (Just '8')))
- - expr: let compose = (.) in compose unzip mempty
  - - - - type: Int
        - type: ([Int], [Int])
      - - - expr: ((7))
          - Right:
              expr: ([], [])
        - - expr: ((-9))
          - Right:
              expr: ([], [])
        - - expr: ((18))
          - Right:
              expr: ([], [])
        - - expr: ((11))
          - Right:
              expr: ([], [])
        - - expr: ((-20))
          - Right:
              expr: ([], [])
        - - expr: ((-8))
          - Right:
              expr: ([], [])
        - - expr: ((6))
          - Right:
              expr: ([], [])
        - - expr: ((-11))
          - Right:
              expr: ([], [])
    - - - type: Char
        - type: ([Char], [Int])
      - - - expr: ('0')
          - Right:
              expr: ("", [])
        - - expr: ('5')
          - Right:
              expr: ("", [])
        - - expr: ('7')
          - Right:
              expr: ("", [])
        - - expr: ('6')
          - Right:
              expr: ("", [])
        - - expr: ('8')
          - Right:
              expr: ("", [])
        - - expr: ('1')
          - Right:
              expr: ("", [])
        - - expr: ('2')
          - Right:
              expr: ("", [])
        - - expr: ('4')
          - Right:
              expr: ("", [])
    - - - type: Char
        - type: ([Char], [Char])
      - - - expr: ('8')
          - Right:
              expr: ("", "")
        - - expr: ('6')
          - Right:
              expr: ("", "")
        - - expr: ('4')
          - Right:
              expr: ("", "")
        - - expr: ('7')
          - Right:
              expr: ("", "")
        - - expr: ('1')
          - Right:
              expr: ("", "")
        - - expr: ('5')
          - Right:
              expr: ("", "")
        - - expr: ('2')
          - Right:
              expr: ("", "")
        - - expr: ('0')
          - Right:
              expr: ("", "")
    - - - type: Char
        - type: ([Int], [Int])
      - - - expr: ('2')
          - Right:
              expr: ([], [])
        - - expr: ('4')
          - Right:
              expr: ([], [])
        - - expr: ('1')
          - Right:
              expr: ([], [])
        - - expr: ('5')
          - Right:
              expr: ([], [])
        - - expr: ('0')
          - Right:
              expr: ([], [])
        - - expr: ('8')
          - Right:
              expr: ([], [])
        - - expr: ('7')
          - Right:
              expr: ([], [])
        - - expr: ('6')
          - Right:
              expr: ([], [])
- - expr: maybe mempty (zip mempty)
  - - - - type: Maybe [Int]
        - type: '[(Int, Int)]'
      - - - expr: (Nothing)
          - Right:
              expr: '[]'
        - - expr: (Just [(6)])
          - Right:
              expr: '[]'
        - - expr: (Just [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: Maybe [Char]
        - type: '[(Char, Char)]'
      - - - expr: (Just ['6'])
          - Right:
              expr: '[]'
        - - expr: (Just ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Nothing)
          - Right:
              expr: '[]'
- - expr: |-
      let conc = (<>)
          zero = 0
          prepend = (:)
        in maybe (prepend zero) conc
  - - - - type: (Maybe [Int], [Int])
        - type: '[Int]'
      - - - expr: (Nothing, [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: (Just [(6)], [(6)])
          - Right:
              expr: '[6, 6]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[0]'
        - - expr: (Just [(6), (7)], [])
          - Right:
              expr: '[6, 7]'
        - - expr: (Nothing, [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: (Just [(6), (7)], [(6)])
          - Right:
              expr: '[6, 7, 6]'
        - - expr: (Just [(6)], [(6), (7)])
          - Right:
              expr: '[6, 6, 7]'
        - - expr: (Just [(6)], [])
          - Right:
              expr: '[6]'
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose (prepend zero) mempty
  - - - - type: Char
        - type: '[Int]'
      - - - expr: ('8')
          - Right:
              expr: '[0]'
        - - expr: ('6')
          - Right:
              expr: '[0]'
        - - expr: ('0')
          - Right:
              expr: '[0]'
        - - expr: ('5')
          - Right:
              expr: '[0]'
        - - expr: ('4')
          - Right:
              expr: '[0]'
        - - expr: ('1')
          - Right:
              expr: '[0]'
        - - expr: ('2')
          - Right:
              expr: '[0]'
        - - expr: ('7')
          - Right:
              expr: '[0]'
    - - - type: Int
        - type: '[Int]'
      - - - expr: ((6))
          - Right:
              expr: '[0]'
        - - expr: ((-9))
          - Right:
              expr: '[0]'
        - - expr: ((-20))
          - Right:
              expr: '[0]'
        - - expr: ((18))
          - Right:
              expr: '[0]'
        - - expr: ((-8))
          - Right:
              expr: '[0]'
        - - expr: ((-11))
          - Right:
              expr: '[0]'
        - - expr: ((7))
          - Right:
              expr: '[0]'
        - - expr: ((11))
          - Right:
              expr: '[0]'
- - expr: |-
      let conc = (<>)
          zero = 0
          prepend = (:)
        in conc (prepend zero)
  - - - - type: (([Int] -> [Int]), [Int])
        - type: '[Int]'
      - - - expr: |-
              (let conc = (<>)
                   zero = 0
                   prepend = (:)
                 in conc (prepend zero mempty),
               [])
          - Right:
              expr: '[0, 0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: (let compose = (.) in compose mempty maybe, [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: (let compose = (.) in compose mempty length, [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [])
          - Right:
              expr: '[0]'
        - - expr: |-
              (let zero = 0
                   prepend = (:)
                 in prepend zero,
               [(6)])
          - Right:
              expr: '[0, 6, 0, 6]'
- - expr: let conc = (<>) in maybe (conc (unzip mempty))
  - - - - type: |-
            ((Int -> ([Char], [Int]) -> ([Char], [Int])), Maybe Int,
             ([Char], [Int]))
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (11), ([], []))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just (7),
               (['6', '5'], [(6), (7)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (7), (['6', '5'], [(6), (7)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose fmap mempty, Just (7),
               (['6'], [(6)]))
          - Right:
              expr: ("6", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (11), (['6', '5'], [(6), (7)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (18), (['6', '5'], [(6), (7)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (18), (['6', '5'], [(6), (7)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (7), (['6', '5'], [(6), (7)]))
          - Right:
              expr: ("", [])
    - - - type: |-
            ((Char -> ([Char], [Char]) -> ([Char], [Char])), Maybe Char,
             ([Char], [Char]))
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '0', (['6'], ['6']))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '5', (['6'], ['6']))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '0', (['6'], ['6']))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '8', (['6', '5'], ['6', '5']))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, Nothing, ([], []))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Just '5',
               (['6', '5'], ['6', '5']))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Nothing,
               (['6'], ['6']))
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Nothing,
               (['6', '5'], ['6', '5']))
          - Right:
              expr: ("65", "65")
    - - - type: |-
            ((Char -> ([Int], [Char]) -> ([Int], [Char])), Maybe Char,
             ([Int], [Char]))
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Just '7',
               ([], []))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '0', ([], []))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Nothing, ([(6)], ['6']))
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               Just '0', ([(6)], ['6']))
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing, ([(6), (7)], ['6', '5']))
          - Right:
              expr: ([6, 7], "65")
        - - expr: (let compose = (.) in compose fmap mempty, Just '8', ([], []))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just '8',
               ([(6)], ['6']))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '7', ([(6)], ['6']))
          - Right:
              expr: ([], "")
    - - - type: |-
            ((Char -> ([Char], [Int]) -> ([Char], [Int])), Maybe Char,
             ([Char], [Int]))
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Just '7',
               (['6'], [(6)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '5', ([], []))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just '8',
               (['6'], [(6)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '7', (['6'], [(6)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '8', (['6'], [(6)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '8', (['6'], [(6)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '5', (['6', '5'], [(6), (7)]))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               Just '5', ([], []))
          - Right:
              expr: ("", [])
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just toEnum)
  - - - - type: ((Int -> Int), Int)
        - type: Maybe Char
      - - - expr: (toEnum, (7))
          - Right:
              expr: (Just '\a')
        - - expr: (toEnum, (11))
          - Right:
              expr: (Just '\v')
        - - expr: (fromEnum, (6))
          - Right:
              expr: (Just '\ACK')
        - - expr: (fromEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (Just '\v')
        - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: (Just '\a')
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (fromEnum, (7))
          - Right:
              expr: (Just '\a')
    - - - type: ((Char -> Int), Char)
        - type: Maybe Char
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just '8')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (Just '2')
        - - expr: (fromEnum, '6')
          - Right:
              expr: (Just '6')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just '4')
        - - expr: (fromEnum, '4')
          - Right:
              expr: (Just '4')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (Just '1')
        - - expr: (fromEnum, '1')
          - Right:
              expr: (Just '1')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (Just '7')
    - - - type: ((Int -> Int), Int)
        - type: Maybe Int
      - - - expr: (toEnum, (-8))
          - Right:
              expr: (Just (-8))
        - - expr: (fromEnum, (11))
          - Right:
              expr: (Just 11)
        - - expr: (fromEnum, (-8))
          - Right:
              expr: (Just (-8))
        - - expr: (let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (Just 6)
        - - expr: (toEnum, (-20))
          - Right:
              expr: (Just (-20))
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11))
          - Right:
              expr: (Just (-11))
        - - expr: (toEnum, (6))
          - Right:
              expr: (Just 6)
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20))
          - Right:
              expr: (Just (-20))
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (maybe sequence prepend)
  - - - - type: ((Int -> Maybe [Char]), Int, [[Char]])
        - type: '[[Char]]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (6), [[], ['6', '5']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6), [])
          - Right:
              expr: '[""]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               (7), [[], ['6', '5'], ['6']])
          - Right:
              expr: '["", "", "65", "6"]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (7), [[]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (6), [[]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (11), [[], ['6', '5']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (6), [[], ['6', '5'], ['6']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-8), [[]])
          - Right:
              expr: '[]'
    - - - type: ((Char -> Maybe [Char]), Char, [[Char]])
        - type: '[[Char]]'
      - - - expr: (let compose = (.) in compose mempty fromEnum, '4', [])
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '0', [[], ['6', '5']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '8', [[]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '2', [[], ['6', '5']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '4', [[], ['6', '5'], ['6']])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               '4', [[]])
          - Right:
              expr: '["", ""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '2', [])
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1', [[], ['6', '5'], ['6']])
          - Right:
              expr: '[]'
    - - - type: ((Int -> Maybe [Int]), Int, [[Int]])
        - type: '[[Int]]'
      - - - expr: (let compose = (.) in compose mempty maybe, (11), [])
          - Right:
              expr: '[[]]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (18), [])
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (11), [])
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (18), [])
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (11), [[]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-9), [[]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (6), [])
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-11), [])
          - Right:
              expr: '[[]]'
    - - - type: ((Char -> Maybe [Int]), Char, [[Int]])
        - type: '[[Int]]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '6', [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '4', [])
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '4', [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '2', [[], [(6), (7)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '4', [[]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5', [[]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '4', [[], [(6), (7)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5', [])
          - Right:
              expr: '[[]]'
- - expr: |-
      let just = Just
          compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero) just
  - - - - type: Char
        - type: (Int, Maybe Char)
      - - - expr: ('7')
          - Right:
              expr: (0, Just '7')
        - - expr: ('0')
          - Right:
              expr: (0, Just '0')
        - - expr: ('2')
          - Right:
              expr: (0, Just '2')
        - - expr: ('8')
          - Right:
              expr: (0, Just '8')
        - - expr: ('6')
          - Right:
              expr: (0, Just '6')
        - - expr: ('5')
          - Right:
              expr: (0, Just '5')
        - - expr: ('4')
          - Right:
              expr: (0, Just '4')
        - - expr: ('1')
          - Right:
              expr: (0, Just '1')
    - - - type: Int
        - type: (Int, Maybe Int)
      - - - expr: ((11))
          - Right:
              expr: (0, Just 11)
        - - expr: ((-9))
          - Right:
              expr: (0, Just (-9))
        - - expr: ((7))
          - Right:
              expr: (0, Just 7)
        - - expr: ((18))
          - Right:
              expr: (0, Just 18)
        - - expr: ((6))
          - Right:
              expr: (0, Just 6)
        - - expr: ((-20))
          - Right:
              expr: (0, Just (-20))
        - - expr: ((-11))
          - Right:
              expr: (0, Just (-11))
        - - expr: ((-8))
          - Right:
              expr: (0, Just (-8))
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just sequence)
  - - - - type: ((Int -> [] (Maybe Char)), Int)
        - type: Maybe (Maybe ([] Char))
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-8))
          - Right:
              expr: (Just (Just ""))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (6))
          - Right:
              expr: (Just (Just ""))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-8))
          - Right:
              expr: (Just (Just ""))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (7))
          - Right:
              expr: (Just (Just ""))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11))
          - Right:
              expr: (Just (Just ""))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-9))
          - Right:
              expr: (Just (Just ""))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (7))
          - Right:
              expr: (Just (Just ""))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-9))
          - Right:
              expr: (Just (Just ""))
    - - - type: ((Char -> [] ([] Char)), Char)
        - type: Maybe ([] ([] Char))
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '6')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '8')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '6')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '6')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '5')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '2')
          - Right:
              expr: (Just [""])
        - - expr: (let compose = (.) in compose mempty fromEnum, '8')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: (Just [""])
- - expr: maybe (unzip mempty) mempty
  - - - - type: Maybe Char
        - type: ([Int], [Char])
      - - - expr: (Nothing)
          - Right:
              expr: ([], "")
        - - expr: (Just '8')
          - Right:
              expr: ([], "")
        - - expr: (Just '5')
          - Right:
              expr: ([], "")
        - - expr: (Just '0')
          - Right:
              expr: ([], "")
        - - expr: (Just '7')
          - Right:
              expr: ([], "")
    - - - type: Maybe Int
        - type: ([Char], [Int])
      - - - expr: (Just (18))
          - Right:
              expr: ("", [])
        - - expr: (Nothing)
          - Right:
              expr: ("", [])
        - - expr: (Just (11))
          - Right:
              expr: ("", [])
        - - expr: (Just (7))
          - Right:
              expr: ("", [])
        - - expr: (Just (-11))
          - Right:
              expr: ("", [])
    - - - type: Maybe Int
        - type: ([Int], [Int])
      - - - expr: (Just (11))
          - Right:
              expr: ([], [])
        - - expr: (Just (-11))
          - Right:
              expr: ([], [])
        - - expr: (Nothing)
          - Right:
              expr: ([], [])
        - - expr: (Just (18))
          - Right:
              expr: ([], [])
        - - expr: (Just (7))
          - Right:
              expr: ([], [])
    - - - type: Maybe Int
        - type: ([Char], [Char])
      - - - expr: (Just (18))
          - Right:
              expr: ("", "")
        - - expr: (Just (-11))
          - Right:
              expr: ("", "")
        - - expr: (Just (11))
          - Right:
              expr: ("", "")
        - - expr: (Nothing)
          - Right:
              expr: ("", "")
        - - expr: (Just (7))
          - Right:
              expr: ("", "")
- - expr: maybe (zip mempty) zip
  - - - - type: (Maybe [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(6)])
          - Right:
              expr: '[]'
        - - expr: (Just ['6'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (Just ['6'], [])
          - Right:
              expr: '[]'
        - - expr: (Just ['6', '5'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: (Nothing, [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (Just ['6'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (Just ['6', '5'], [])
          - Right:
              expr: '[]'
    - - - type: (Maybe [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: (Just [(6)], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(6)])
          - Right:
              expr: '[]'
        - - expr: (Just [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: (Just [(6)], [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: (Just [(6), (7)], [(6), (7)])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: (Just [(6)], [(6), (7)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just [(6), (7)], [(6)])
          - Right:
              expr: '[(6, 6)]'
    - - - type: (Maybe [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (Nothing, ['6'])
          - Right:
              expr: '[]'
        - - expr: (Just ['6', '5'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (Just ['6'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (Just ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: (Nothing, ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (Just ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just ['6'], [])
          - Right:
              expr: '[]'
- - expr: |-
      let conc = (<>)
          compose = (.)
          zero = 0
          prepend = (:)
        in compose (conc (prepend zero))
  - - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-20), [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend toEnum,
               (7), [(6), (7)])
          - Right:
              expr: '[0, 6, 7, 7, 6, 7]'
        - - expr: |-
              (let compose = (.) in compose (compose mempty) elem, (6),
               [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6), [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (compose mempty) prepend,
               (-9), [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-9), [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-9), [])
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend fromEnum,
               (18), [(6)])
          - Right:
              expr: '[0, 6, 18, 6]'
    - - - type: ((Char -> [Int] -> [Int]), Char, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '1', [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '5', [])
          - Right:
              expr: '[0]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '7', [])
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '4', [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '2', [])
          - Right:
              expr: '[0]'
        - - expr: (let compose = (.) in compose mempty maybe, '8', [])
          - Right:
              expr: '[0]'
        - - expr: (let compose = (.) in compose mempty maybe, '0', [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '6', [(6)])
          - Right:
              expr: '[0, 6]'
- - expr: let prepend = (:) in prepend (unzip mempty)
  - - - - type: '[([Char], [Char])]'
        - type: '[([Char], [Char])]'
      - - - expr: ([([], []), (['6', '5'], ['6', '5'])])
          - Right:
              expr: '[("", ""), ("", ""), ("65", "65")]'
        - - expr: ([([], [])])
          - Right:
              expr: '[("", ""), ("", "")]'
        - - expr: ([])
          - Right:
              expr: '[("", "")]'
        - - expr: ([([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: '[("", ""), ("", ""), ("65", "65"), ("6", "6")]'
    - - - type: '[([Int], [Int])]'
        - type: '[([Int], [Int])]'
      - - - expr: ([([], []), ([(6), (7)], [(6), (7)])])
          - Right:
              expr: '[([], []), ([], []), ([6, 7], [6, 7])]'
        - - expr: ([([], []), ([(6), (7)], [(6), (7)]), ([(6)], [(6)])])
          - Right:
              expr: '[([], []), ([], []), ([6, 7], [6, 7]), ([6], [6])]'
        - - expr: ([([], [])])
          - Right:
              expr: '[([], []), ([], [])]'
        - - expr: ([])
          - Right:
              expr: '[([], [])]'
    - - - type: '[([Char], [Int])]'
        - type: '[([Char], [Int])]'
      - - - expr: ([])
          - Right:
              expr: '[("", [])]'
        - - expr: ([([], []), (['6', '5'], [(6), (7)])])
          - Right:
              expr: '[("", []), ("", []), ("65", [6, 7])]'
        - - expr: ([([], []), (['6', '5'], [(6), (7)]), (['6'], [(6)])])
          - Right:
              expr: '[("", []), ("", []), ("65", [6, 7]), ("6", [6])]'
        - - expr: ([([], [])])
          - Right:
              expr: '[("", []), ("", [])]'
    - - - type: '[([Int], [Char])]'
        - type: '[([Int], [Char])]'
      - - - expr: ([([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: ([])
          - Right:
              expr: '[([], "")]'
        - - expr: ([([], []), ([(6), (7)], ['6', '5']), ([(6)], ['6'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65"), ([6], "6")]'
        - - expr: ([([], [])])
          - Right:
              expr: '[([], ""), ([], "")]'
- - expr: let just = Just in just
  - - - - type: Char
        - type: Maybe Char
      - - - expr: ('2')
          - Right:
              expr: (Just '2')
        - - expr: ('7')
          - Right:
              expr: (Just '7')
        - - expr: ('1')
          - Right:
              expr: (Just '1')
        - - expr: ('8')
          - Right:
              expr: (Just '8')
        - - expr: ('5')
          - Right:
              expr: (Just '5')
        - - expr: ('6')
          - Right:
              expr: (Just '6')
        - - expr: ('4')
          - Right:
              expr: (Just '4')
        - - expr: ('0')
          - Right:
              expr: (Just '0')
    - - - type: Int
        - type: Maybe Int
      - - - expr: ((11))
          - Right:
              expr: (Just 11)
        - - expr: ((-8))
          - Right:
              expr: (Just (-8))
        - - expr: ((-9))
          - Right:
              expr: (Just (-9))
        - - expr: ((7))
          - Right:
              expr: (Just 7)
        - - expr: ((18))
          - Right:
              expr: (Just 18)
        - - expr: ((6))
          - Right:
              expr: (Just 6)
        - - expr: ((-20))
          - Right:
              expr: (Just (-20))
        - - expr: ((-11))
          - Right:
              expr: (Just (-11))
- - expr: let conc = (<>) in conc (conc zip mempty)
  - - - - type: (([Char] -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['6'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               ['6'], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty (zip mempty), [], [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (zip, ['6', '5'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7), (''6'', 6), (''5'', 7)]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) zip,
               [], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               ['6', '5'], [(6), (7)])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: (zip, ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               ['6', '5'], [(6)])
          - Right:
              expr: '[(''6'', 6)]'
    - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (zip, [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               ['6'], ['6'])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [], ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) zip,
               ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5''), (''6'', ''6''), (''5'', ''5'')]'
        - - expr: (zip, ['6'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''6'', ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               [], ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [], ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, ['6', '5'], ['6', '5'])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
    - - - type: (([Int] -> [Char] -> [(Int, Char)]), [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose zip (conc mempty),
               [], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose zip (prepend zero),
               [], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty zip, [(6), (7)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [(6)], ['6', '5'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [(6), (7)], ['6', '5'])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [(6)], ['6'])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [], ['6'])
          - Right:
              expr: '[]'
    - - - type: (([Int] -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose zip (prepend zero),
               [(6)], [(6)])
          - Right:
              expr: '[(6, 6), (0, 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [(6), (7)], [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [(6)], [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: |-
              (let compose = (.) in compose zip (sequence mempty), [],
               [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [(6), (7)], [(6)])
          - Right:
              expr: '[(6, 6)]'
        - - expr: (let compose = (.) in compose mempty length, [(6)], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, [(6)], [])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in maybe (compose sequenceA unzip)
  - - - - type: |-
            ((Char -> [(Char, Char)] -> [([Char], Char)]), Maybe Char,
             [(Char, Char)])
        - type: '[([Char], Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '8', [('6', '6'), ('5', '5')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just '0',
               [('6', '6')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '5', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '0', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0', [('6', '6')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Nothing, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '7', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '0', [])
          - Right:
              expr: '[]'
    - - - type: |-
            ((Char -> [(Int, Int)] -> [([Int], Int)]), Maybe Char,
             [(Int, Int)])
        - type: '[([Int], Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '0', [((6), (6)), ((7), (7))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '8', [((6), (6)), ((7), (7))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '8', [((6), (6)), ((7), (7))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '0', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '0', [((6), (6))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '5', [((6), (6))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '5', [((6), (6)), ((7), (7))])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Nothing, [((6), (6))])
          - Right:
              expr: '[([6], 6)]'
    - - - type: |-
            ((Int -> [(Int, Char)] -> [([Int], Char)]), Maybe Int,
             [(Int, Char)])
        - type: '[([Int], Char)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Nothing, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just (18),
               [((6), '6')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (-11), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (18), [((6), '6')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (-11), [((6), '6')])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (18), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing, [((6), '6'), ((7), '5')])
          - Right:
              expr: '[([6, 7], ''6''), ([6, 7], ''5'')]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (-11), [((6), '6'), ((7), '5')])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [(Int, Int)] -> [([Int], Int)]), Maybe Int, [(Int, Int)])
        - type: '[([Int], Int)]'
      - - - expr: (let compose = (.) in compose mempty maybe, Nothing, [((6), (6))])
          - Right:
              expr: '[([6], 6)]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (-11), [((6), (6))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (7), [((6), (6))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Nothing, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (-11), [((6), (6)), ((7), (7))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just (18),
               [((6), (6))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just (18), [((6), (6)), ((7), (7))])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (11), [])
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          zero = 0
        in maybe (just zero)
  - - - - type: ((Int -> Maybe Int), Maybe Int)
        - type: Maybe Int
      - - - expr: (let just = Just in just, Just (18))
          - Right:
              expr: (Just 18)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just (11))
          - Right:
              expr: (Just 11)
        - - expr: (let just = Just in just, Nothing)
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just (18))
          - Right:
              expr: (Just 18)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (11))
          - Right:
              expr: (Just 11)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (18))
          - Right:
              expr: (Just 18)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Nothing)
          - Right:
              expr: (Just 0)
        - - expr: (let just = Just in just, Just (11))
          - Right:
              expr: (Just 11)
    - - - type: ((Char -> Maybe Int), Maybe Char)
        - type: Maybe Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '5')
          - Right:
              expr: (Just 53)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '0')
          - Right:
              expr: (Just 48)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '8')
          - Right:
              expr: (Just 56)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '7')
          - Right:
              expr: (Just 55)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Nothing)
          - Right:
              expr: (Just 0)
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose compose (conc unzip)
  - - - - type: (([(Char, Int)] -> ([Char], [Int])), (Int -> [(Char, Int)]), Int)
        - type: ([Char], [Int])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-11))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (11))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose (zip mempty) mempty, (-8))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose unzip (sequence mempty),
               let compose = (.) in compose (zip mempty) mempty, (6))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose mempty maybe, (-8))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let compose = (.) in compose mempty maybe, (-8))
          - Right:
              expr: ("", [])
    - - - type: |-
            (([(Char, Char)] -> ([Char], [Char])), (Char -> [(Char, Char)]),
             Char)
        - type: ([Char], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) unzip,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty length,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '1')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '7')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '6')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty zip,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty length,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '7')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose unzip (sequence mempty),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '6')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '1')
          - Right:
              expr: ("", "")
    - - - type: (([(Char, Int)] -> ([Char], [Int])), (Char -> [(Char, Int)]), Char)
        - type: ([Char], [Int])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               let compose = (.) in compose mempty maybe, '1')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               let compose = (.) in compose (zip mempty) mempty, '5')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty (zip mempty),
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.) in compose (zip mempty) mempty, '0')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '6')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '0')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               let compose = (.) in compose (zip mempty) mempty, '5')
          - Right:
              expr: ("", [])
    - - - type: |-
            (([(Char, Char)] -> ([Char], [Char])), (Int -> [(Char, Char)]),
             Int)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-20))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose unzip (sequenceA mempty),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (6))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty unzip,
               let compose = (.) in compose mempty maybe, (6))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-11))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              (unzip,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-20))
          - Right:
              expr: ("", "")
- - expr: let prepend = (:) in maybe sequence prepend
  - - - - type: (Maybe [Char], [[Char]])
        - type: '[[Char]]'
      - - - expr: (Just ['6'], [[]])
          - Right:
              expr: '["6", ""]'
        - - expr: (Nothing, [[]])
          - Right:
              expr: '[]'
        - - expr: (Just ['6', '5'], [[]])
          - Right:
              expr: '["65", ""]'
        - - expr: (Just ['6'], [])
          - Right:
              expr: '["6"]'
        - - expr: (Just ['6', '5'], [])
          - Right:
              expr: '["65"]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[""]'
        - - expr: (Just ['6', '5'], [[], ['6', '5']])
          - Right:
              expr: '["65", "", "65"]'
        - - expr: (Nothing, [[], ['6', '5'], ['6']])
          - Right:
              expr: '[]'
    - - - type: (Maybe [Int], [[Int]])
        - type: '[[Int]]'
      - - - expr: (Just [(6)], [])
          - Right:
              expr: '[[6]]'
        - - expr: (Nothing, [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [[], [(6), (7)]])
          - Right:
              expr: '[]'
        - - expr: (Just [(6), (7)], [[], [(6), (7)]])
          - Right:
              expr: '[[6, 7], [], [6, 7]]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[[]]'
        - - expr: (Just [(6), (7)], [])
          - Right:
              expr: '[[6, 7]]'
        - - expr: (Nothing, [[]])
          - Right:
              expr: '[]'
        - - expr: (Just [(6)], [[]])
          - Right:
              expr: '[[6], []]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose sequenceA) prepend
  - - - - type: (Maybe Char, [Maybe Char])
        - type: Maybe [Char]
      - - - expr: (Just '0', [])
          - Right:
              expr: (Just "0")
        - - expr: (Just '7', [])
          - Right:
              expr: (Just "7")
        - - expr: (Nothing, [])
          - Right:
              expr: Nothing
        - - expr: (Nothing, [Nothing])
          - Right:
              expr: Nothing
        - - expr: (Just '8', [])
          - Right:
              expr: (Just "8")
        - - expr: (Just '0', [Nothing])
          - Right:
              expr: Nothing
        - - expr: (Just '5', [Nothing])
          - Right:
              expr: Nothing
        - - expr: (Just '8', [Nothing, Just '5'])
          - Right:
              expr: Nothing
    - - - type: (Maybe Int, [Maybe Int])
        - type: Maybe [Int]
      - - - expr: (Just (7), [Nothing, Just (7)])
          - Right:
              expr: Nothing
        - - expr: (Just (-11), [])
          - Right:
              expr: (Just [-11])
        - - expr: (Just (18), [])
          - Right:
              expr: (Just [18])
        - - expr: (Nothing, [Nothing])
          - Right:
              expr: Nothing
        - - expr: (Nothing, [Nothing, Just (7)])
          - Right:
              expr: Nothing
        - - expr: (Just (11), [Nothing])
          - Right:
              expr: Nothing
        - - expr: (Just (11), [])
          - Right:
              expr: (Just [11])
        - - expr: (Just (11), [Nothing, Just (7)])
          - Right:
              expr: Nothing
- - expr: let compose = (.) in compose elem unzip
  - - - - type: ([(Int, Char)], Maybe ([Int], [Char]))
        - type: Bool
      - - - expr: ([((6), '6'), ((7), '5')], Just ([(6), (7)], ['6', '5']))
          - Right:
              expr: 'True'
        - - expr: ([], Just ([(6)], ['6']))
          - Right:
              expr: 'False'
        - - expr: ([((6), '6'), ((7), '5')], Nothing)
          - Right:
              expr: 'False'
        - - expr: ([], Nothing)
          - Right:
              expr: 'False'
        - - expr: ([((6), '6')], Just ([(6)], ['6']))
          - Right:
              expr: 'True'
        - - expr: ([], Just ([(6), (7)], ['6', '5']))
          - Right:
              expr: 'False'
        - - expr: ([((6), '6')], Just ([(6), (7)], ['6', '5']))
          - Right:
              expr: 'False'
        - - expr: ([((6), '6'), ((7), '5')], Just ([(6)], ['6']))
          - Right:
              expr: 'False'
    - - - type: ([(Char, Char)], Maybe ([Char], [Char]))
        - type: Bool
      - - - expr: ([('6', '6'), ('5', '5')], Nothing)
          - Right:
              expr: 'False'
        - - expr: ([], Nothing)
          - Right:
              expr: 'False'
        - - expr: ([('6', '6'), ('5', '5')], Just (['6', '5'], ['6', '5']))
          - Right:
              expr: 'True'
        - - expr: ([('6', '6')], Nothing)
          - Right:
              expr: 'False'
        - - expr: ([], Just (['6'], ['6']))
          - Right:
              expr: 'False'
        - - expr: ([], Just (['6', '5'], ['6', '5']))
          - Right:
              expr: 'False'
        - - expr: ([('6', '6')], Just (['6', '5'], ['6', '5']))
          - Right:
              expr: 'False'
        - - expr: ([('6', '6'), ('5', '5')], Just (['6'], ['6']))
          - Right:
              expr: 'False'
- - expr: let compose = (.) in compose toEnum fromEnum
  - - - - type: Char
        - type: Int
      - - - expr: ('2')
          - Right:
              expr: '50'
        - - expr: ('7')
          - Right:
              expr: '55'
        - - expr: ('1')
          - Right:
              expr: '49'
        - - expr: ('4')
          - Right:
              expr: '52'
        - - expr: ('8')
          - Right:
              expr: '56'
        - - expr: ('0')
          - Right:
              expr: '48'
        - - expr: ('5')
          - Right:
              expr: '53'
        - - expr: ('6')
          - Right:
              expr: '54'
    - - - type: Int
        - type: Int
      - - - expr: ((6))
          - Right:
              expr: '6'
        - - expr: ((-8))
          - Right:
              expr: (-8)
        - - expr: ((11))
          - Right:
              expr: '11'
        - - expr: ((-11))
          - Right:
              expr: (-11)
        - - expr: ((-9))
          - Right:
              expr: (-9)
        - - expr: ((18))
          - Right:
              expr: '18'
        - - expr: ((-20))
          - Right:
              expr: (-20)
        - - expr: ((7))
          - Right:
              expr: '7'
    - - - type: Char
        - type: Char
      - - - expr: ('1')
          - Right:
              expr: '''1'''
        - - expr: ('2')
          - Right:
              expr: '''2'''
        - - expr: ('0')
          - Right:
              expr: '''0'''
        - - expr: ('6')
          - Right:
              expr: '''6'''
        - - expr: ('4')
          - Right:
              expr: '''4'''
        - - expr: ('5')
          - Right:
              expr: '''5'''
        - - expr: ('7')
          - Right:
              expr: '''7'''
        - - expr: ('8')
          - Right:
              expr: '''8'''
    - - - type: Int
        - type: Char
      - - - expr: ((-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: ((11))
          - Right:
              expr: '''\v'''
        - - expr: ((-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ((-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ((6))
          - Right:
              expr: '''\ACK'''
        - - expr: ((18))
          - Right:
              expr: '''\DC2'''
        - - expr: ((-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: ((7))
          - Right:
              expr: '''\a'''
- - expr: let compose = (.) in compose maybe fromEnum
  - - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: ((7), let compose = (.) in compose toEnum fromEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((-8), fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((7), let compose = (.) in compose toEnum fromEnum, Just (-11))
          - Right:
              expr: (-11)
        - - expr: ((18), toEnum, Nothing)
          - Right:
              expr: '18'
        - - expr: ((11), fromEnum, Nothing)
          - Right:
              expr: '11'
        - - expr: ((-20), fromEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((-8), let compose = (.) in compose toEnum toEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ((7), toEnum, Just (18))
          - Right:
              expr: '18'
    - - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
      - - - expr: ((7), fromEnum, Nothing)
          - Right:
              expr: '7'
        - - expr: ((6), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '6'
        - - expr: ((-11), fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((11), let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((18), let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((18), fromEnum, Just '8')
          - Right:
              expr: '56'
        - - expr: ((11), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '11'
        - - expr: ((-20), let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '55'
    - - - type: (Char, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: ('0', let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '48'
        - - expr: ('6', let compose = (.) in compose toEnum toEnum, Just (18))
          - Right:
              expr: '18'
        - - expr: ('4', let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: '52'
        - - expr: ('6', toEnum, Just (18))
          - Right:
              expr: '18'
        - - expr: ('5', let compose = (.) in compose toEnum fromEnum, Just (18))
          - Right:
              expr: '18'
        - - expr: ('2', let compose = (.) in compose toEnum fromEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ('6', let compose = (.) in compose toEnum fromEnum, Just (11))
          - Right:
              expr: '11'
        - - expr: ('0', let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: '7'
    - - - type: (Char, (Char -> Int), Maybe Char)
        - type: Int
      - - - expr: ('6', let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: ('1', fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ('6', fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: ('0', let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '48'
        - - expr: ('6', fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ('4', let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '52'
        - - expr: ('0', fromEnum, Just '8')
          - Right:
              expr: '56'
        - - expr: ('8', fromEnum, Just '5')
          - Right:
              expr: '53'
- - expr: |-
      let zero = 0
          prepend = (:)
        in prepend zero
  - - - - type: '[Int]'
        - type: '[Int]'
      - - - expr: ([(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: ([])
          - Right:
              expr: '[0]'
        - - expr: ([(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
- - expr: let compose = (.) in compose (maybe mempty unzip)
  - - - - type: ((Int -> Maybe [(Int, Int)]), Int)
        - type: ([Int], [Int])
      - - - expr: (let compose = (.) in compose mempty fromEnum, (6))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-20))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (11))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty maybe, (11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (18))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               (-20))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty maybe, (-9))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-20))
          - Right:
              expr: ([], [])
    - - - type: ((Char -> Maybe [(Int, Char)]), Char)
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '2')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '4')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '0')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '6')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '2')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '6')
          - Right:
              expr: ([], "")
    - - - type: ((Char -> Maybe [(Char, Int)]), Char)
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8')
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty fromEnum, '7')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '5')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               '4')
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty fromEnum, '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '8')
          - Right:
              expr: ("", [])
    - - - type: ((Char -> Maybe [(Int, Int)]), Char)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '0')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '1')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '1')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '8')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '5')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty fromEnum, '5')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '1')
          - Right:
              expr: ([], [])
- - expr: elem
  - - - - type: (Int, Maybe Int)
        - type: Bool
      - - - expr: ((18), Just (18))
          - Right:
              expr: 'True'
        - - expr: ((-9), Just (7))
          - Right:
              expr: 'False'
        - - expr: ((-9), Just (11))
          - Right:
              expr: 'False'
        - - expr: ((-20), Just (11))
          - Right:
              expr: 'False'
        - - expr: ((-11), Just (-11))
          - Right:
              expr: 'True'
        - - expr: ((-11), Just (18))
          - Right:
              expr: 'False'
        - - expr: ((-20), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((18), Nothing)
          - Right:
              expr: 'False'
    - - - type: (Char, Maybe Char)
        - type: Bool
      - - - expr: ('6', Just '5')
          - Right:
              expr: 'False'
        - - expr: ('1', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('2', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('6', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('5', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('1', Just '8')
          - Right:
              expr: 'False'
        - - expr: ('4', Just '8')
          - Right:
              expr: 'False'
        - - expr: ('7', Nothing)
          - Right:
              expr: 'False'
- - expr: let compose = (.) in compose elem length
  - - - - type: (Maybe Char, Maybe Int)
        - type: Bool
      - - - expr: (Just '5', Just (11))
          - Right:
              expr: 'False'
        - - expr: (Nothing, Just (11))
          - Right:
              expr: 'False'
        - - expr: (Just '8', Just (11))
          - Right:
              expr: 'False'
        - - expr: (Just '7', Just (18))
          - Right:
              expr: 'False'
        - - expr: (Nothing, Just (-11))
          - Right:
              expr: 'False'
        - - expr: (Just '5', Just (7))
          - Right:
              expr: 'False'
        - - expr: (Just '5', Just (-11))
          - Right:
              expr: 'False'
        - - expr: (Nothing, Just (18))
          - Right:
              expr: 'False'
- - expr: let compose = (.) in compose compose (compose unzip)
  - - - - type: ((Int -> [(Int, Char)]), (Char -> Int), Char)
        - type: ([Int], [Char])
      - - - expr: (let compose = (.) in compose mempty fromEnum, fromEnum, '4')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum,
               let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               fromEnum, '8')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, fromEnum, '6')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               fromEnum, '8')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: ([], "")
    - - - type: ((Char -> [(Char, Int)]), (Int -> Char), Int)
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               let compose = (.) in compose toEnum fromEnum, (-20))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               let compose = (.) in compose toEnum toEnum, (-20))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               toEnum, (-8))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose toEnum toEnum, (-9))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum,
               let compose = (.) in compose toEnum fromEnum, (-20))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               toEnum, (18))
          - Right:
              expr: ("", [])
    - - - type: ((Int -> [(Char, Int)]), (Int -> Int), Int)
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               toEnum, (-20))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               toEnum, (-11))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty fromEnum, fromEnum, (-9))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose (zip mempty) mempty, fromEnum, (7))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.) in compose toEnum fromEnum, (-11))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               fromEnum, (11))
          - Right:
              expr: ("", [])
    - - - type: ((Char -> [(Char, Char)]), (Char -> Char), Char)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: ("", "")
- - expr: |-
      let just = Just
          prepend = (:)
        in prepend (just (unzip mempty))
  - - - - type: '[Maybe ([Int], [Char])]'
        - type: '[Maybe ([Int], [Char])]'
      - - - expr: ([Nothing, Just ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[Just ([], ""), Nothing, Just ([6, 7], "65")]'
        - - expr: ([])
          - Right:
              expr: '[Just ([], "")]'
        - - expr: ([Nothing])
          - Right:
              expr: '[Just ([], ""), Nothing]'
        - - expr: ([Nothing, Just ([(6), (7)], ['6', '5']), Just ([(6)], ['6'])])
          - Right:
              expr: '[Just ([], ""), Nothing, Just ([6, 7], "65"), Just ([6], "6")]'
    - - - type: '[Maybe ([Char], [Int])]'
        - type: '[Maybe ([Char], [Int])]'
      - - - expr: ([Nothing, Just (['6', '5'], [(6), (7)]), Just (['6'], [(6)])])
          - Right:
              expr: '[Just ("", []), Nothing, Just ("65", [6, 7]), Just ("6", [6])]'
        - - expr: ([Nothing, Just (['6', '5'], [(6), (7)])])
          - Right:
              expr: '[Just ("", []), Nothing, Just ("65", [6, 7])]'
        - - expr: ([Nothing])
          - Right:
              expr: '[Just ("", []), Nothing]'
        - - expr: ([])
          - Right:
              expr: '[Just ("", [])]'
    - - - type: '[Maybe ([Char], [Char])]'
        - type: '[Maybe ([Char], [Char])]'
      - - - expr: ([Nothing, Just (['6', '5'], ['6', '5']), Just (['6'], ['6'])])
          - Right:
              expr: '[Just ("", ""), Nothing, Just ("65", "65"), Just ("6", "6")]'
        - - expr: ([Nothing])
          - Right:
              expr: '[Just ("", ""), Nothing]'
        - - expr: ([Nothing, Just (['6', '5'], ['6', '5'])])
          - Right:
              expr: '[Just ("", ""), Nothing, Just ("65", "65")]'
        - - expr: ([])
          - Right:
              expr: '[Just ("", "")]'
    - - - type: '[Maybe ([Int], [Int])]'
        - type: '[Maybe ([Int], [Int])]'
      - - - expr: ([Nothing])
          - Right:
              expr: '[Just ([], []), Nothing]'
        - - expr: ([Nothing, Just ([(6), (7)], [(6), (7)])])
          - Right:
              expr: '[Just ([], []), Nothing, Just ([6, 7], [6, 7])]'
        - - expr: ([Nothing, Just ([(6), (7)], [(6), (7)]), Just ([(6)], [(6)])])
          - Right:
              expr: '[Just ([], []), Nothing, Just ([6, 7], [6, 7]), Just ([6], [6])]'
        - - expr: ([])
          - Right:
              expr: '[Just ([], [])]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just toEnum
  - - - - type: Int
        - type: Maybe Char
      - - - expr: ((6))
          - Right:
              expr: (Just '\ACK')
        - - expr: ((-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ((7))
          - Right:
              expr: (Just '\a')
        - - expr: ((-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: ((11))
          - Right:
              expr: (Just '\v')
        - - expr: ((18))
          - Right:
              expr: (Just '\DC2')
        - - expr: ((-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ((-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend toEnum)
  - - - - type: ((Char -> Int), Char, [Char])
        - type: '[Char]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '5', ['6'])
          - Right:
              expr: '"56"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', [])
          - Right:
              expr: '"8"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', ['6', '5'])
          - Right:
              expr: '"165"'
        - - expr: (fromEnum, '8', ['6', '5'])
          - Right:
              expr: '"865"'
        - - expr: (fromEnum, '5', ['6'])
          - Right:
              expr: '"56"'
        - - expr: (fromEnum, '8', ['6'])
          - Right:
              expr: '"86"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', ['6'])
          - Right:
              expr: '"46"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', [])
          - Right:
              expr: '"2"'
    - - - type: ((Int -> Int), Int, [Char])
        - type: '[Char]'
      - - - expr: (toEnum, (6), ['6', '5'])
          - Right:
              expr: '"\ACK65"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20), ['6'])
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8), [])
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (fromEnum, (18), ['6'])
          - Right:
              expr: '"\DC26"'
        - - expr: (fromEnum, (-20), ['6'])
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (fromEnum, (-9), ['6'])
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (fromEnum, (11), ['6', '5'])
          - Right:
              expr: '"\v65"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8), ['6'])
          - Left: '"Prelude.chr: bad argument: (-8)"'
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '8', [(6)])
          - Right:
              expr: '[56, 6]'
        - - expr: (fromEnum, '1', [(6)])
          - Right:
              expr: '[49, 6]'
        - - expr: (fromEnum, '7', [(6)])
          - Right:
              expr: '[55, 6]'
        - - expr: (fromEnum, '6', [(6), (7)])
          - Right:
              expr: '[54, 6, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', [])
          - Right:
              expr: '[50]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', [(6), (7)])
          - Right:
              expr: '[53, 6, 7]'
        - - expr: (fromEnum, '6', [])
          - Right:
              expr: '[54]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', [(6)])
          - Right:
              expr: '[49, 6]'
    - - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (-20), [(6), (7)])
          - Right:
              expr: '[-20, 6, 7]'
        - - expr: (fromEnum, (18), [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
        - - expr: (toEnum, (11), [(6)])
          - Right:
              expr: '[11, 6]'
        - - expr: (fromEnum, (-8), [(6), (7)])
          - Right:
              expr: '[-8, 6, 7]'
        - - expr: (toEnum, (18), [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
        - - expr: (toEnum, (-8), [])
          - Right:
              expr: '[-8]'
        - - expr: (fromEnum, (-9), [])
          - Right:
              expr: '[-9]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8), [(6), (7)])
          - Right:
              expr: '[-8, 6, 7]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequenceA (just sequenceA))
  - - - - type: ((Int -> Maybe (Maybe Int)), Int)
        - type: Maybe (Maybe (Maybe Int))
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (-8))
          - Right:
              expr: (Just (Just (Just (-8))))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (-11))
          - Right:
              expr: (Just (Just (Just (-11))))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (-9))
          - Right:
              expr: (Just (Just (Just (-9))))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (-20))
          - Right:
              expr: (Just (Just (Just (-20))))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (11))
          - Right:
              expr: (Just (Just (Just 11)))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (18))
          - Right:
              expr: (Just (Just (Just 18)))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (7))
          - Right:
              expr: (Just (Just (Just 7)))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (6))
          - Right:
              expr: (Just (Just (Just 6)))
    - - - type: ((Char -> Maybe ([] Int)), Char)
        - type: Maybe ([] (Maybe Int))
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '1')
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '4')
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '7')
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '8')
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '7')
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2')
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '8')
          - Right:
              expr: (Just [Nothing])
    - - - type: ((Char -> [] ([] Char)), Char)
        - type: Maybe ([] ([] Char))
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '5')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '1')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '8')
          - Right:
              expr: (Just [""])
        - - expr: (let compose = (.) in compose mempty maybe, '0')
          - Right:
              expr: (Just [""])
        - - expr: (let compose = (.) in compose mempty maybe, '2')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '1')
          - Right:
              expr: (Just [""])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '6')
          - Right:
              expr: (Just [""])
    - - - type: ((Char -> [] (Maybe Int)), Char)
        - type: Maybe (Maybe ([] Int))
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '5')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '0')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '0')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '7')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '4')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '1')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '2')
          - Right:
              expr: (Just (Just []))
- - expr: |-
      let just = Just
          compose = (.)
        in compose just (zip mempty)
  - - - - type: '[Int]'
        - type: Maybe [(Int, Int)]
      - - - expr: ([])
          - Right:
              expr: (Just [])
        - - expr: ([(6)])
          - Right:
              expr: (Just [])
        - - expr: ([(6), (7)])
          - Right:
              expr: (Just [])
    - - - type: '[Char]'
        - type: Maybe [(Char, Char)]
      - - - expr: (['6'])
          - Right:
              expr: (Just [])
        - - expr: ([])
          - Right:
              expr: (Just [])
        - - expr: (['6', '5'])
          - Right:
              expr: (Just [])
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose maybe (tpl zero)
  - - - - type: (Int, (Char -> (Int, Int)), Maybe Char)
        - type: (Int, Int)
      - - - expr: |-
              ((-8),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just '0')
          - Right:
              expr: (0, 48)
        - - expr: |-
              ((6),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just '0')
          - Right:
              expr: (0, 48)
        - - expr: |-
              ((6),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just '8')
          - Right:
              expr: (0, 56)
        - - expr: |-
              ((-20),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just '0')
          - Right:
              expr: (0, 48)
        - - expr: |-
              ((-11),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Nothing)
          - Right:
              expr: (0, -11)
        - - expr: |-
              ((6),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Nothing)
          - Right:
              expr: (0, 6)
        - - expr: |-
              ((-8),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Nothing)
          - Right:
              expr: (0, -8)
        - - expr: |-
              ((11),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just '0')
          - Right:
              expr: (0, 48)
    - - - type: (Int, (Int -> (Int, Int)), Maybe Int)
        - type: (Int, Int)
      - - - expr: |-
              ((-20),
               let zero = 0
                   tpl = (,)
                 in tpl zero,
               Just (7))
          - Right:
              expr: (0, 7)
        - - expr: |-
              ((-11),
               let zero = 0
                   tpl = (,)
                 in tpl zero,
               Just (18))
          - Right:
              expr: (0, 18)
        - - expr: |-
              ((-20),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just (18))
          - Right:
              expr: (0, 18)
        - - expr: |-
              ((7),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Just (-11))
          - Right:
              expr: (0, -11)
        - - expr: |-
              ((11),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Nothing)
          - Right:
              expr: (0, 11)
        - - expr: |-
              ((-11),
               let zero = 0
                   tpl = (,)
                 in tpl zero,
               Just (-11))
          - Right:
              expr: (0, -11)
        - - expr: |-
              ((-20),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just (-11))
          - Right:
              expr: (0, -11)
        - - expr: |-
              ((7),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Nothing)
          - Right:
              expr: (0, 7)
    - - - type: (Char, (Char -> (Int, Char)), Maybe Char)
        - type: (Int, Char)
      - - - expr: |-
              ('6',
               let zero = 0
                   tpl = (,)
                 in tpl zero,
               Just '0')
          - Right:
              expr: (0, '0')
        - - expr: |-
              ('5',
               let zero = 0
                   tpl = (,)
                 in tpl zero,
               Just '7')
          - Right:
              expr: (0, '7')
        - - expr: |-
              ('6',
               let zero = 0
                   tpl = (,)
                 in tpl zero,
               Just '5')
          - Right:
              expr: (0, '5')
        - - expr: |-
              ('1',
               let zero = 0
                   tpl = (,)
                 in tpl zero,
               Just '8')
          - Right:
              expr: (0, '8')
        - - expr: |-
              ('4',
               let zero = 0
                   tpl = (,)
                 in tpl zero,
               Just '5')
          - Right:
              expr: (0, '5')
        - - expr: |-
              ('0',
               let zero = 0
                   tpl = (,)
                 in tpl zero,
               Just '7')
          - Right:
              expr: (0, '7')
        - - expr: |-
              ('8',
               let zero = 0
                   tpl = (,)
                 in tpl zero,
               Just '8')
          - Right:
              expr: (0, '8')
        - - expr: |-
              ('7',
               let zero = 0
                   tpl = (,)
                 in tpl zero,
               Nothing)
          - Right:
              expr: (0, '7')
    - - - type: (Char, (Int -> (Int, Char)), Maybe Int)
        - type: (Int, Char)
      - - - expr: |-
              ('6',
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Nothing)
          - Right:
              expr: (0, '6')
        - - expr: |-
              ('2',
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Nothing)
          - Right:
              expr: (0, '2')
        - - expr: |-
              ('0',
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Just (11))
          - Right:
              expr: (0, '\v')
        - - expr: |-
              ('7',
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Just (7))
          - Right:
              expr: (0, '\a')
        - - expr: |-
              ('4',
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Just (18))
          - Right:
              expr: (0, '\DC2')
        - - expr: |-
              ('5',
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              ('6',
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Just (11))
          - Right:
              expr: (0, '\v')
        - - expr: |-
              ('2',
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Just (18))
          - Right:
              expr: (0, '\DC2')
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero) length
  - - - - type: Maybe Char
        - type: (Int, Int)
      - - - expr: (Just '5')
          - Right:
              expr: (0, 1)
        - - expr: (Just '7')
          - Right:
              expr: (0, 1)
        - - expr: (Just '0')
          - Right:
              expr: (0, 1)
        - - expr: (Nothing)
          - Right:
              expr: (0, 0)
        - - expr: (Just '8')
          - Right:
              expr: (0, 1)
    - - - type: Maybe Int
        - type: (Int, Int)
      - - - expr: (Just (18))
          - Right:
              expr: (0, 1)
        - - expr: (Nothing)
          - Right:
              expr: (0, 0)
        - - expr: (Just (-11))
          - Right:
              expr: (0, 1)
        - - expr: (Just (11))
          - Right:
              expr: (0, 1)
        - - expr: (Just (7))
          - Right:
              expr: (0, 1)
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero) toEnum
  - - - - type: Int
        - type: (Int, Char)
      - - - expr: ((-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: ((11))
          - Right:
              expr: (0, '\v')
        - - expr: ((-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ((-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: ((7))
          - Right:
              expr: (0, '\a')
        - - expr: ((18))
          - Right:
              expr: (0, '\DC2')
        - - expr: ((-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: ((6))
          - Right:
              expr: (0, '\ACK')
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose zip) prepend
  - - - - type: (Char, [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: ('7', [], [])
          - Right:
              expr: '[]'
        - - expr: ('0', ['6'], ['6', '5'])
          - Right:
              expr: '[(''0'', ''6''), (''6'', ''5'')]'
        - - expr: ('4', ['6'], ['6', '5'])
          - Right:
              expr: '[(''4'', ''6''), (''6'', ''5'')]'
        - - expr: ('8', [], ['6'])
          - Right:
              expr: '[(''8'', ''6'')]'
        - - expr: ('4', ['6'], ['6'])
          - Right:
              expr: '[(''4'', ''6'')]'
        - - expr: ('1', [], [])
          - Right:
              expr: '[]'
        - - expr: ('5', ['6'], ['6'])
          - Right:
              expr: '[(''5'', ''6'')]'
        - - expr: ('0', ['6'], [])
          - Right:
              expr: '[]'
    - - - type: (Char, [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: ('0', ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: ('6', ['6'], [])
          - Right:
              expr: '[]'
        - - expr: ('1', [], [])
          - Right:
              expr: '[]'
        - - expr: ('4', ['6'], [(6)])
          - Right:
              expr: '[(''4'', 6)]'
        - - expr: ('6', ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: ('8', ['6'], [(6), (7)])
          - Right:
              expr: '[(''8'', 6), (''6'', 7)]'
        - - expr: ('0', ['6'], [])
          - Right:
              expr: '[]'
        - - expr: ('5', ['6', '5'], [])
          - Right:
              expr: '[]'
    - - - type: (Int, [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: ((-11), [], ['6', '5'])
          - Right:
              expr: '[(-11, ''6'')]'
        - - expr: ((7), [(6), (7)], ['6'])
          - Right:
              expr: '[(7, ''6'')]'
        - - expr: ((11), [(6)], ['6'])
          - Right:
              expr: '[(11, ''6'')]'
        - - expr: ((-20), [], [])
          - Right:
              expr: '[]'
        - - expr: ((11), [(6)], [])
          - Right:
              expr: '[]'
        - - expr: ((-20), [(6)], ['6', '5'])
          - Right:
              expr: '[(-20, ''6''), (6, ''5'')]'
        - - expr: ((-8), [(6), (7)], ['6'])
          - Right:
              expr: '[(-8, ''6'')]'
        - - expr: ((7), [(6)], [])
          - Right:
              expr: '[]'
    - - - type: (Int, [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: ((6), [(6)], [(6), (7)])
          - Right:
              expr: '[(6, 6), (6, 7)]'
        - - expr: ((18), [(6)], [])
          - Right:
              expr: '[]'
        - - expr: ((18), [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ((-11), [(6)], [(6)])
          - Right:
              expr: '[(-11, 6)]'
        - - expr: ((11), [(6), (7)], [])
          - Right:
              expr: '[]'
        - - expr: ((11), [(6)], [(6), (7)])
          - Right:
              expr: '[(11, 6), (6, 7)]'
        - - expr: ((18), [(6)], [(6), (7)])
          - Right:
              expr: '[(18, 6), (6, 7)]'
        - - expr: ((6), [], [(6), (7)])
          - Right:
              expr: '[(6, 6)]'
- - expr: let compose = (.) in compose (compose zip mempty)
  - - - - type: ((Int -> Int), Int, [Char])
        - type: '[(Char, Char)]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (-9), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (toEnum, (11), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (toEnum, (7), [])
          - Right:
              expr: '[]'
        - - expr: (fromEnum, (-9), ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (fromEnum, (11), [])
          - Right:
              expr: '[]'
        - - expr: (toEnum, (-11), ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (11), ['6'])
          - Right:
              expr: '[]'
    - - - type: ((Char -> Char), Char, [Char])
        - type: '[(Int, Char)]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '4', ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', [])
          - Right:
              expr: '[]'
    - - - type: ((Char -> Char), Char, [Char])
        - type: '[(Char, Char)]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '0', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', [])
          - Right:
              expr: '[]'
    - - - type: ((Char -> Char), Char, [Int])
        - type: '[(Char, Int)]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '0', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', [(6)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', [(6)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', [(6)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', [])
          - Right:
              expr: '[]'
- - expr: let conc = (<>) in conc (conc unzip unzip)
  - - - - type: (([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               [((6), '6')])
          - Right:
              expr: ([6, 6], "66")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [])
          - Right:
              expr: ([], "")
        - - expr: (unzip, [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7, 6, 7], "6565")
        - - expr: (let compose = (.) in compose mempty maybe, [((6), '6')])
          - Right:
              expr: ([6, 6], "66")
        - - expr: |-
              (let compose = (.) in compose unzip (sequenceA mempty),
               [((6), '6')])
          - Right:
              expr: ([6, 6], "66")
        - - expr: (let compose = (.) in compose mempty zip, [])
          - Right:
              expr: ([], "")
    - - - type: (([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [((6), (6))])
          - Right:
              expr: ([6, 6], [6, 6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7, 6, 7], [6, 7, 6, 7])
        - - expr: (let compose = (.) in compose unzip (sequenceA mempty), [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7, 6, 7], [6, 7, 6, 7])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [((6), (6))])
          - Right:
              expr: ([6, 6], [6, 6])
        - - expr: (let compose = (.) in compose mempty length, [((6), (6))])
          - Right:
              expr: ([6, 6], [6, 6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               [])
          - Right:
              expr: ([], [])
    - - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose unzip (sequence mempty),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("6565", "6565")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               [('6', '6')])
          - Right:
              expr: ("66", "66")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("656565", "656565")
        - - expr: (let compose = (.) in compose mempty length, [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty length,
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("6565", "6565")
    - - - type: (([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: (let compose = (.) in compose unzip (sequenceA mempty), [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("6565", [6, 7, 6, 7])
        - - expr: (let compose = (.) in compose mempty zip, [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("6565", [6, 7, 6, 7])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) unzip,
               [('6', (6))])
          - Right:
              expr: ("666", [6, 6, 6])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("6565", [6, 7, 6, 7])
        - - expr: |-
              (let compose = (.) in compose unzip (sequenceA mempty),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("6565", [6, 7, 6, 7])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               [])
          - Right:
              expr: ("", [])
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose sequenceA just)
  - - - - type: ((Int -> [] Char), Int)
        - type: '[] (Maybe Char)'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-8))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-11))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-9))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6))
          - Right:
              expr: '[]'
    - - - type: ((Int -> [] Int), Int)
        - type: '[] (Maybe Int)'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-9))
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-9))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               (18))
          - Right:
              expr: '[Just 0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-9))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               (-9))
          - Right:
              expr: '[Just 0]'
    - - - type: ((Int -> Maybe Int), Int)
        - type: Maybe (Maybe Int)
      - - - expr: (let just = Just in just, (-11))
          - Right:
              expr: (Just (Just (-11)))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9))
          - Right:
              expr: (Just (Just (-9)))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-9))
          - Right:
              expr: (Just (Just (-9)))
        - - expr: (let just = Just in just, (7))
          - Right:
              expr: (Just (Just 7))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7))
          - Right:
              expr: (Just (Just 7))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8))
          - Right:
              expr: (Just (Just (-8)))
        - - expr: (let just = Just in just, (11))
          - Right:
              expr: (Just (Just 11))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-8))
          - Right:
              expr: (Just (Just (-8)))
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (compose conc) zip
  - - - - type: ([Int], [Char], [(Int, Char)])
        - type: '[(Int, Char)]'
      - - - expr: ([], ['6', '5'], [((6), '6'), ((7), '5')])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: ([(6)], [], [((6), '6'), ((7), '5')])
          - Right:
              expr: '[(6, ''6''), (7, ''5'')]'
        - - expr: ([(6)], ['6'], [((6), '6')])
          - Right:
              expr: '[(6, ''6''), (6, ''6'')]'
        - - expr: ([(6), (7)], ['6', '5'], [((6), '6')])
          - Right:
              expr: '[(6, ''6''), (7, ''5''), (6, ''6'')]'
        - - expr: ([(6), (7)], ['6'], [])
          - Right:
              expr: '[(6, ''6'')]'
        - - expr: ([], ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: ([], [], [])
          - Right:
              expr: '[]'
        - - expr: ([(6)], ['6'], [((6), '6'), ((7), '5')])
          - Right:
              expr: '[(6, ''6''), (6, ''6''), (7, ''5'')]'
    - - - type: ([Int], [Int], [(Int, Int)])
        - type: '[(Int, Int)]'
      - - - expr: ([(6)], [], [((6), (6)), ((7), (7))])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: ([], [], [((6), (6)), ((7), (7))])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: ([(6)], [(6)], [((6), (6))])
          - Right:
              expr: '[(6, 6), (6, 6)]'
        - - expr: ([], [(6)], [((6), (6)), ((7), (7))])
          - Right:
              expr: '[(6, 6), (7, 7)]'
        - - expr: ([], [], [((6), (6))])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([(6)], [(6)], [])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([], [(6)], [((6), (6))])
          - Right:
              expr: '[(6, 6)]'
        - - expr: ([(6)], [(6), (7)], [((6), (6))])
          - Right:
              expr: '[(6, 6), (6, 6)]'
    - - - type: ([Char], [Int], [(Char, Int)])
        - type: '[(Char, Int)]'
      - - - expr: (['6', '5'], [], [])
          - Right:
              expr: '[]'
        - - expr: (['6'], [(6), (7)], [('6', (6)), ('5', (7))])
          - Right:
              expr: '[(''6'', 6), (''6'', 6), (''5'', 7)]'
        - - expr: ([], [], [])
          - Right:
              expr: '[]'
        - - expr: ([], [(6)], [])
          - Right:
              expr: '[]'
        - - expr: ([], [(6), (7)], [('6', (6)), ('5', (7))])
          - Right:
              expr: '[(''6'', 6), (''5'', 7)]'
        - - expr: (['6'], [(6)], [('6', (6)), ('5', (7))])
          - Right:
              expr: '[(''6'', 6), (''6'', 6), (''5'', 7)]'
        - - expr: ([], [(6), (7)], [('6', (6))])
          - Right:
              expr: '[(''6'', 6)]'
        - - expr: (['6'], [(6), (7)], [])
          - Right:
              expr: '[(''6'', 6)]'
    - - - type: ([Char], [Char], [(Char, Char)])
        - type: '[(Char, Char)]'
      - - - expr: (['6', '5'], ['6'], [('6', '6'), ('5', '5')])
          - Right:
              expr: '[(''6'', ''6''), (''6'', ''6''), (''5'', ''5'')]'
        - - expr: ([], ['6', '5'], [])
          - Right:
              expr: '[]'
        - - expr: (['6'], [], [])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'], [], [('6', '6')])
          - Right:
              expr: '[(''6'', ''6'')]'
        - - expr: (['6'], ['6'], [('6', '6')])
          - Right:
              expr: '[(''6'', ''6''), (''6'', ''6'')]'
        - - expr: ([], ['6'], [])
          - Right:
              expr: '[]'
        - - expr: ([], [], [('6', '6'), ('5', '5')])
          - Right:
              expr: '[(''6'', ''6''), (''5'', ''5'')]'
        - - expr: (['6'], ['6', '5'], [])
          - Right:
              expr: '[(''6'', ''6'')]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just sequence
  - - - - type: Maybe (Maybe Int)
        - type: Maybe (Maybe (Maybe Int))
      - - - expr: (Just (Just (-11)))
          - Right:
              expr: (Just (Just (Just (-11))))
        - - expr: (Just (Just (18)))
          - Right:
              expr: (Just (Just (Just 18)))
        - - expr: (Just (Just (7)))
          - Right:
              expr: (Just (Just (Just 7)))
        - - expr: (Nothing)
          - Right:
              expr: (Just (Just Nothing))
    - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe (Maybe Char))
      - - - expr: (Just (Just '8'))
          - Right:
              expr: (Just (Just (Just '8')))
        - - expr: (Just (Just '7'))
          - Right:
              expr: (Just (Just (Just '7')))
        - - expr: (Nothing)
          - Right:
              expr: (Just (Just Nothing))
        - - expr: (Just (Just '5'))
          - Right:
              expr: (Just (Just (Just '5')))
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose foldMap (conc unzip)
  - - - - type: (([(Int, Char)] -> ([Int], [Char])), Maybe [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) unzip,
               Just [((6), '6')])
          - Right:
              expr: ([6, 6], "66")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               Just [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7, 6, 7], "6565")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               Just [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               Nothing)
          - Right:
              expr: ([], "")
        - - expr: (unzip, Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just [((6), '6')])
          - Right:
              expr: ([6], "6")
    - - - type: (([(Char, Char)] -> ([Char], [Char])), Maybe [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: (let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing)
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               Just [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing)
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing)
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               Just [('6', '6'), ('5', '5')])
          - Right:
              expr: ("6565", "6565")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing)
          - Right:
              expr: ("", "")
- - expr: |-
      let just = Just
          compose = (.)
        in compose elem just
  - - - - type: (Char, Maybe (Maybe Char))
        - type: Bool
      - - - expr: ('0', Just (Just '8'))
          - Right:
              expr: 'False'
        - - expr: ('4', Just (Just '5'))
          - Right:
              expr: 'False'
        - - expr: ('2', Just (Just '7'))
          - Right:
              expr: 'False'
        - - expr: ('6', Just (Just '7'))
          - Right:
              expr: 'False'
        - - expr: ('8', Just (Just '5'))
          - Right:
              expr: 'False'
        - - expr: ('1', Just (Just '7'))
          - Right:
              expr: 'False'
        - - expr: ('1', Just (Just '5'))
          - Right:
              expr: 'False'
        - - expr: ('2', Nothing)
          - Right:
              expr: 'False'
    - - - type: (Int, Maybe (Maybe Int))
        - type: Bool
      - - - expr: ((-20), Just (Just (-11)))
          - Right:
              expr: 'False'
        - - expr: ((-9), Just (Just (7)))
          - Right:
              expr: 'False'
        - - expr: ((18), Just (Just (18)))
          - Right:
              expr: 'True'
        - - expr: ((-20), Just (Just (18)))
          - Right:
              expr: 'False'
        - - expr: ((6), Just (Just (7)))
          - Right:
              expr: 'False'
        - - expr: ((7), Just (Just (18)))
          - Right:
              expr: 'False'
        - - expr: ((18), Just (Just (7)))
          - Right:
              expr: 'False'
        - - expr: ((-9), Just (Just (18)))
          - Right:
              expr: 'False'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (tpl (unzip mempty))
  - - - - type: ((Char -> Int), Char)
        - type: (([Char], [Char]), Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (("", ""), 53)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (("", ""), 48)
        - - expr: (fromEnum, '4')
          - Right:
              expr: (("", ""), 52)
        - - expr: (fromEnum, '0')
          - Right:
              expr: (("", ""), 48)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (("", ""), 55)
        - - expr: (fromEnum, '2')
          - Right:
              expr: (("", ""), 50)
        - - expr: (fromEnum, '1')
          - Right:
              expr: (("", ""), 49)
        - - expr: (fromEnum, '6')
          - Right:
              expr: (("", ""), 54)
    - - - type: ((Int -> Char), Int)
        - type: (([Char], [Char]), Char)
      - - - expr: (toEnum, (18))
          - Right:
              expr: (("", ""), '\DC2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, (6))
          - Right:
              expr: (("", ""), '\ACK')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: (("", ""), '\DC2')
        - - expr: (toEnum, (11))
          - Right:
              expr: (("", ""), '\v')
        - - expr: (let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: (("", ""), '\ACK')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: (("", ""), '\ACK')
    - - - type: ((Char -> Char), Char)
        - type: (([Int], [Char]), Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (([], ""), '8')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (([], ""), '1')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (([], ""), '4')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (([], ""), '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (([], ""), '6')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (([], ""), '7')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (([], ""), '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (([], ""), '2')
    - - - type: ((Char -> Int), Char)
        - type: (([Int], [Int]), Int)
      - - - expr: (fromEnum, '8')
          - Right:
              expr: (([], []), 56)
        - - expr: (fromEnum, '6')
          - Right:
              expr: (([], []), 54)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (([], []), 54)
        - - expr: (fromEnum, '5')
          - Right:
              expr: (([], []), 53)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (([], []), 48)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (([], []), 52)
        - - expr: (fromEnum, '7')
          - Right:
              expr: (([], []), 55)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (([], []), 56)
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just) fmap
  - - - - type: ((Char -> Char), Maybe Char)
        - type: Maybe (Maybe Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: (Just (Just '0'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: (Just (Just '5'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: (Just (Just '7'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '8')
          - Right:
              expr: (Just (Just '8'))
    - - - type: ((Int -> Int), Maybe Int)
        - type: Maybe (Maybe Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, Just (18))
          - Right:
              expr: (Just (Just 18))
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (18))
          - Right:
              expr: (Just (Just 18))
        - - expr: (fromEnum, Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (toEnum, Just (7))
          - Right:
              expr: (Just (Just 7))
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (11))
          - Right:
              expr: (Just (Just 11))
        - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (-11))
          - Right:
              expr: (Just (Just (-11)))
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (-11))
          - Right:
              expr: (Just (Just (-11)))
    - - - type: ((Int -> Char), Maybe Int)
        - type: Maybe (Maybe Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, Just (7))
          - Right:
              expr: (Just (Just '\a'))
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: (Just (Just '\a'))
        - - expr: (let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (11))
          - Right:
              expr: (Just (Just '\v'))
        - - expr: (toEnum, Just (7))
          - Right:
              expr: (Just (Just '\a'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (11))
          - Right:
              expr: (Just (Just '\v'))
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
- - expr: |-
      let zero = 0
          prepend = (:)
        in maybe mempty (prepend zero)
  - - - - type: Maybe [Int]
        - type: '[Int]'
      - - - expr: (Just [(6), (7)])
          - Right:
              expr: '[0, 6, 7]'
        - - expr: (Just [(6)])
          - Right:
              expr: '[0, 6]'
        - - expr: (Nothing)
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero)
  - - - - type: ((Char -> Int), Char)
        - type: (Int, Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (0, 54)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (0, 50)
        - - expr: (fromEnum, '2')
          - Right:
              expr: (0, 50)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (0, 52)
        - - expr: (fromEnum, '7')
          - Right:
              expr: (0, 55)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (0, 48)
        - - expr: (fromEnum, '4')
          - Right:
              expr: (0, 52)
        - - expr: (fromEnum, '5')
          - Right:
              expr: (0, 53)
    - - - type: ((Int -> Int), Int)
        - type: (Int, Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (0, 11)
        - - expr: (fromEnum, (11))
          - Right:
              expr: (0, 11)
        - - expr: (toEnum, (11))
          - Right:
              expr: (0, 11)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9))
          - Right:
              expr: (0, -9)
        - - expr: (toEnum, (6))
          - Right:
              expr: (0, 6)
        - - expr: (toEnum, (-20))
          - Right:
              expr: (0, -20)
        - - expr: (fromEnum, (-11))
          - Right:
              expr: (0, -11)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8))
          - Right:
              expr: (0, -8)
    - - - type: ((Char -> Char), Char)
        - type: (Int, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (0, '6')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (0, '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (0, '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (0, '8')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (0, '1')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (0, '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (0, '4')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (0, '7')
    - - - type: ((Int -> Char), Int)
        - type: (Int, Char)
      - - - expr: (toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (toEnum, (7))
          - Right:
              expr: (0, '\a')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, (18))
          - Right:
              expr: (0, '\DC2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (0, '\v')
        - - expr: (let compose = (.) in compose toEnum toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
- - expr: |-
      let zero = 0
          tpl = (,)
        in maybe (tpl zero zero)
  - - - - type: ((Int -> (Int, Int)), Maybe Int)
        - type: (Int, Int)
      - - - expr: |-
              (let zero = 0
                   tpl = (,)
                 in tpl zero,
               Just (18))
          - Right:
              expr: (0, 18)
        - - expr: |-
              (let zero = 0
                   tpl = (,)
                 in tpl zero,
               Just (-11))
          - Right:
              expr: (0, -11)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just (7))
          - Right:
              expr: (0, 7)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Just (11))
          - Right:
              expr: (0, 11)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just (-11))
          - Right:
              expr: (0, -11)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Nothing)
          - Right:
              expr: (0, 0)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Just (18))
          - Right:
              expr: (0, 18)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) toEnum,
               Just (7))
          - Right:
              expr: (0, 7)
    - - - type: ((Char -> (Int, Int)), Maybe Char)
        - type: (Int, Int)
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just '8')
          - Right:
              expr: (0, 56)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just '5')
          - Right:
              expr: (0, 53)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Nothing)
          - Right:
              expr: (0, 0)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just '0')
          - Right:
              expr: (0, 48)
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose (tpl zero) fromEnum,
               Just '7')
          - Right:
              expr: (0, 55)
- - expr: let conc = (<>) in conc (conc mempty unzip)
  - - - - type: (([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: (let compose = (.) in compose mempty (zip mempty), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: (let compose = (.) in compose unzip mempty, [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [])
          - Right:
              expr: ([], "")
    - - - type: (([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.) in compose mempty unzip,
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: (let compose = (.) in compose mempty length, [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               [((6), (6))])
          - Right:
              expr: ([6, 6], [6, 6])
        - - expr: (let compose = (.) in compose mempty unzip, [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: |-
              (let compose = (.) in compose mempty length,
               [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
    - - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) unzip,
               [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("6565", "6565")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: (let compose = (.) in compose mempty unzip, [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty unzip,
               [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
    - - - type: (([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: (unzip, [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               [('6', (6))])
          - Right:
              expr: ("66", [6, 6])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [])
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty (zip mempty), [('6', (6))])
          - Right:
              expr: ("6", [6])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc zip mempty)
  - - - - type: ((Int -> [Char]), Int, [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (18), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-9), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6), ['6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (-11), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (18), ['6', '5'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (18), ['6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-20), [])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Int]), Char, [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '1', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '2', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '2', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '7', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7', [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '1', [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6', [(6), (7)])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Int]), Int, [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (11), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (6), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (18), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-20), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (18), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (18), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (7), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (6), [(6)])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Char]), Int, [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (11), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (18), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (11), [(6), (7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-11), [(6)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-8), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (6), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (7), [(6), (7)])
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl fromEnum)
  - - - - type: ((Char -> Int), Char, Int)
        - type: (Int, Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (6))
          - Right:
              expr: (53, 6)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', (11))
          - Right:
              expr: (54, 11)
        - - expr: (fromEnum, '1', (18))
          - Right:
              expr: (49, 18)
        - - expr: (fromEnum, '2', (-20))
          - Right:
              expr: (50, -20)
        - - expr: (fromEnum, '6', (11))
          - Right:
              expr: (54, 11)
        - - expr: (fromEnum, '6', (-11))
          - Right:
              expr: (54, -11)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (7))
          - Right:
              expr: (53, 7)
        - - expr: (fromEnum, '4', (-11))
          - Right:
              expr: (52, -11)
    - - - type: ((Char -> Char), Char, Int)
        - type: (Int, Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '0', (6))
          - Right:
              expr: (48, 6)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', (6))
          - Right:
              expr: (52, 6)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (7))
          - Right:
              expr: (53, 7)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', (-9))
          - Right:
              expr: (50, -9)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', (11))
          - Right:
              expr: (54, 11)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', (7))
          - Right:
              expr: (49, 7)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', (-9))
          - Right:
              expr: (49, -9)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', (-11))
          - Right:
              expr: (52, -11)
    - - - type: ((Char -> Int), Char, Char)
        - type: (Int, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '6', '5')
          - Right:
              expr: (54, '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1', '5')
          - Right:
              expr: (49, '5')
        - - expr: (fromEnum, '1', '2')
          - Right:
              expr: (49, '2')
        - - expr: (fromEnum, '0', '7')
          - Right:
              expr: (48, '7')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', '2')
          - Right:
              expr: (55, '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', '0')
          - Right:
              expr: (48, '0')
        - - expr: (fromEnum, '4', '6')
          - Right:
              expr: (52, '6')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', '6')
          - Right:
              expr: (55, '6')
    - - - type: ((Int -> Int), Int, Char)
        - type: (Int, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (18), '6')
          - Right:
              expr: (18, '6')
        - - expr: (let compose = (.) in compose toEnum toEnum, (18), '1')
          - Right:
              expr: (18, '1')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8), '1')
          - Right:
              expr: (-8, '1')
        - - expr: (toEnum, (-8), '5')
          - Right:
              expr: (-8, '5')
        - - expr: (toEnum, (18), '2')
          - Right:
              expr: (18, '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (18), '1')
          - Right:
              expr: (18, '1')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-8), '2')
          - Right:
              expr: (-8, '2')
        - - expr: (toEnum, (11), '7')
          - Right:
              expr: (11, '7')
- - expr: let prepend = (:) in maybe sequenceA prepend
  - - - - type: (Maybe [Char], [[Char]])
        - type: '[[Char]]'
      - - - expr: (Nothing, [[]])
          - Right:
              expr: '[]'
        - - expr: (Just ['6'], [])
          - Right:
              expr: '["6"]'
        - - expr: (Nothing, [[], ['6', '5'], ['6']])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[""]'
        - - expr: (Just ['6'], [[]])
          - Right:
              expr: '["6", ""]'
        - - expr: (Just ['6', '5'], [[], ['6', '5']])
          - Right:
              expr: '["65", "", "65"]'
        - - expr: (Just ['6', '5'], [[]])
          - Right:
              expr: '["65", ""]'
        - - expr: (Nothing, [[], ['6', '5']])
          - Right:
              expr: '[]'
    - - - type: (Maybe [Int], [[Int]])
        - type: '[[Int]]'
      - - - expr: (Nothing, [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[]'
        - - expr: (Just [(6)], [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[[6], [], [6, 7], [6]]'
        - - expr: (Just [(6)], [[], [(6), (7)]])
          - Right:
              expr: '[[6], [], [6, 7]]'
        - - expr: (Just [(6), (7)], [[], [(6), (7)], [(6)]])
          - Right:
              expr: '[[6, 7], [], [6, 7], [6]]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[[]]'
        - - expr: (Just [(6), (7)], [[]])
          - Right:
              expr: '[[6, 7], []]'
        - - expr: (Nothing, [[]])
          - Right:
              expr: '[]'
        - - expr: (Just [(6)], [[]])
          - Right:
              expr: '[[6], []]'
- - expr: let conc = (<>) in conc (maybe (unzip mempty))
  - - - - type: |-
            (((Char -> ([Int], [Char])) -> Maybe Char -> ([Int], [Char])),
             (Char -> ([Int], [Char])), Maybe Char)
        - type: ([Int], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose (maybe mempty) mempty,
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose foldMap mempty,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose (maybe mempty) mempty,
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               let compose = (.) in compose mempty maybe, Just '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              (maybe (unzip mempty),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '0')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '7')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing)
          - Right:
              expr: ([], "")
    - - - type: |-
            (((Int -> ([Int], [Int])) -> Maybe Int -> ([Int], [Int])),
             (Int -> ([Int], [Int])), Maybe Int)
        - type: ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (-11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               let compose = (.) in compose unzip mempty, Just (-11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose (maybe mempty) mempty,
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (18))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (-11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.) in compose unzip (sequence mempty), Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty (compose length),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (18))
          - Right:
              expr: ([], [])
    - - - type: |-
            (((Char -> ([Char], [Int])) -> Maybe Char -> ([Char], [Int])),
             (Char -> ([Char], [Int])), Maybe Char)
        - type: ([Char], [Int])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) foldMap,
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '0')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.) in compose mempty fromEnum, Just '5')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose (compose mempty) foldMap,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let compose = (.) in compose unzip (sequenceA mempty), Just '7')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose (compose mempty) foldMap,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing)
          - Right:
              expr: ("", [])
    - - - type: |-
            (((Int -> ([Int], [Char])) -> Maybe Int -> ([Int], [Char])),
             (Int -> ([Int], [Char])), Maybe Int)
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.) in compose mempty (compose sequence),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (18))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty (maybe mempty),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let tpl = (,) in maybe (tpl mempty mempty),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty (compose length),
               let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just (7))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) foldMap,
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose (compose mempty) fmap,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (7))
          - Right:
              expr: ([], "")
- - expr: let compose = (.) in compose compose (compose sequence)
  - - - - type: ((Char -> Maybe (Maybe Char)), (Int -> Char), Int)
        - type: Maybe (Maybe Char)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               let compose = (.) in compose toEnum fromEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               let compose = (.) in compose toEnum toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               let compose = (.) in compose toEnum fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               toEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               toEnum, (18))
          - Right:
              expr: (Just (Just '\DC2'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               toEnum, (6))
          - Right:
              expr: (Just (Just '\ACK'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               let compose = (.) in compose toEnum toEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
    - - - type: ((Char -> Maybe ([] Char)), (Int -> Char), Int)
        - type: '[] (Maybe Char)'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               toEnum, (18))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               let compose = (.) in compose toEnum fromEnum, (-9))
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty fromEnum, toEnum, (-9))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.) in compose toEnum toEnum, (-9))
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty fromEnum, toEnum, (6))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.) in compose toEnum toEnum, (18))
          - Right:
              expr: '[Nothing]'
    - - - type: ((Char -> [] ([] Char)), (Char -> Char), Char)
        - type: '[] ([] Char)'
      - - - expr: |-
              (let compose = (.) in compose mempty fromEnum,
               let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '[""]'
    - - - type: ((Int -> Maybe ([] Char)), (Char -> Int), Char)
        - type: '[] (Maybe Char)'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               fromEnum, '5')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty maybe, fromEnum, '2')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               fromEnum, '4')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '[Nothing]'
- - expr: maybe unzip
  - - - - type: |-
            ((Char -> [(Int, Int)] -> ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just '7', [((6), (6)), ((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing, [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc unzip) mempty,
               Just '0', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '8', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just '5', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Nothing, [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: (let compose = (.) in compose mempty fromEnum, Just '5', [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just '5', [((6), (6))])
          - Right:
              expr: ([], [])
    - - - type: |-
            ((Int -> [(Char, Int)] -> ([Char], [Int])), Maybe Int,
             [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.) in compose mempty maybe, Just (18),
               [('6', (6)), ('5', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (-11), [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (11), [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just (7), [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Just (11),
               [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (7), [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (18), [('6', (6))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (7), [('6', (6))])
          - Right:
              expr: ("", [])
    - - - type: |-
            ((Int -> [(Int, Char)] -> ([Int], [Char])), Maybe Int,
             [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (18), [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty, Just (11),
               [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just (-11), [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Just (11), [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just (18), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (7), [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just (18), [((6), '6')])
          - Right:
              expr: ([], "")
    - - - type: |-
            ((Char -> [(Int, Char)] -> ([Int], [Char])), Maybe Char,
             [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '7', [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc unzip) mempty,
               Just '7', [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               Just '8', [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '7', [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '8', [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just '8', [((6), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               Just '0', [((6), '6'), ((7), '5')])
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose foldMap mempty, Just '0', [])
          - Right:
              expr: ([], "")
- - expr: |-
      let zero = 0
          prepend = (:)
        in maybe (prepend zero mempty)
  - - - - type: ((Int -> [Int]), Maybe Int)
        - type: '[Int]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               Just (11))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (-11))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just (-11))
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Int]), Maybe Char)
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   prepend = (:)
                 in compose (prepend zero) mempty,
               Just '7')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing)
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Nothing)
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '7')
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose (compose sequence sequenceA)
  - - - - type: ((Char -> [] (Maybe Int)), Char)
        - type: '[] (Maybe Int)'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '8')
          - Right:
              expr: '[]'
    - - - type: ((Int -> Maybe ([] Char)), Int)
        - type: Maybe ([] Char)
      - - - expr: (let compose = (.) in compose mempty fromEnum, (-9))
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose mempty maybe, (6))
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (11))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (11))
          - Right:
              expr: Nothing
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (18))
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose mempty maybe, (18))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (7))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6))
          - Right:
              expr: Nothing
    - - - type: ((Int -> [] (Maybe Int)), Int)
        - type: '[] (Maybe Int)'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-11))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (18))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-9))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-20))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (11))
          - Right:
              expr: '[]'
    - - - type: ((Char -> [] ([] Char)), Char)
        - type: '[] ([] Char)'
      - - - expr: (let compose = (.) in compose mempty maybe, '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (prepend mempty) mempty,
               '4')
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '0')
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose (compose fmap) compose
  - - - - type: ((Int -> Int), (Int -> Int), Maybe Int)
        - type: Maybe Int
      - - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum toEnum, Just (11))
          - Right:
              expr: (Just 11)
        - - expr: (let compose = (.) in compose toEnum toEnum, fromEnum, Just (7))
          - Right:
              expr: (Just 7)
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, Just (-11))
          - Right:
              expr: (Just (-11))
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, Just (18))
          - Right:
              expr: (Just 18)
        - - expr: (fromEnum, fromEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose toEnum fromEnum, Just (18))
          - Right:
              expr: (Just 18)
        - - expr: (let compose = (.) in compose toEnum fromEnum, toEnum, Just (18))
          - Right:
              expr: (Just 18)
    - - - type: ((Char -> Int), (Int -> Char), Maybe Int)
        - type: Maybe Int
      - - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, Just (7))
          - Right:
              expr: (Just 7)
        - - expr: (fromEnum, toEnum, Just (11))
          - Right:
              expr: (Just 11)
        - - expr: (fromEnum, toEnum, Just (7))
          - Right:
              expr: (Just 7)
        - - expr: (let compose = (.) in compose toEnum fromEnum, toEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, Just (18))
          - Right:
              expr: (Just 18)
        - - expr: (fromEnum, let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, Just (11))
          - Right:
              expr: (Just 11)
- - expr: let compose = (.) in compose (compose unzip) mempty
  - - - - type: (Char, Char)
        - type: ([Int], [Int])
      - - - expr: ('6', '5')
          - Right:
              expr: ([], [])
        - - expr: ('6', '2')
          - Right:
              expr: ([], [])
        - - expr: ('1', '1')
          - Right:
              expr: ([], [])
        - - expr: ('2', '5')
          - Right:
              expr: ([], [])
        - - expr: ('0', '4')
          - Right:
              expr: ([], [])
        - - expr: ('8', '2')
          - Right:
              expr: ([], [])
        - - expr: ('2', '0')
          - Right:
              expr: ([], [])
        - - expr: ('7', '2')
          - Right:
              expr: ([], [])
    - - - type: (Char, Int)
        - type: ([Int], [Char])
      - - - expr: ('7', (6))
          - Right:
              expr: ([], "")
        - - expr: ('6', (-11))
          - Right:
              expr: ([], "")
        - - expr: ('6', (7))
          - Right:
              expr: ([], "")
        - - expr: ('8', (-20))
          - Right:
              expr: ([], "")
        - - expr: ('7', (7))
          - Right:
              expr: ([], "")
        - - expr: ('6', (6))
          - Right:
              expr: ([], "")
        - - expr: ('7', (-11))
          - Right:
              expr: ([], "")
        - - expr: ('0', (7))
          - Right:
              expr: ([], "")
    - - - type: (Int, Int)
        - type: ([Char], [Int])
      - - - expr: ((-9), (18))
          - Right:
              expr: ("", [])
        - - expr: ((-8), (-9))
          - Right:
              expr: ("", [])
        - - expr: ((-9), (-20))
          - Right:
              expr: ("", [])
        - - expr: ((7), (18))
          - Right:
              expr: ("", [])
        - - expr: ((18), (6))
          - Right:
              expr: ("", [])
        - - expr: ((18), (7))
          - Right:
              expr: ("", [])
        - - expr: ((-11), (-8))
          - Right:
              expr: ("", [])
        - - expr: ((7), (-8))
          - Right:
              expr: ("", [])
    - - - type: (Int, Int)
        - type: ([Int], [Int])
      - - - expr: ((18), (-11))
          - Right:
              expr: ([], [])
        - - expr: ((-8), (6))
          - Right:
              expr: ([], [])
        - - expr: ((11), (-8))
          - Right:
              expr: ([], [])
        - - expr: ((6), (-8))
          - Right:
              expr: ([], [])
        - - expr: ((-9), (11))
          - Right:
              expr: ([], [])
        - - expr: ((6), (7))
          - Right:
              expr: ([], [])
        - - expr: ((7), (7))
          - Right:
              expr: ([], [])
        - - expr: ((18), (18))
          - Right:
              expr: ([], [])
- - expr: let compose = (.) in compose fmap zip
  - - - - type: ([Int], Maybe [Int])
        - type: Maybe [(Int, Int)]
      - - - expr: ([(6)], Nothing)
          - Right:
              expr: Nothing
        - - expr: ([], Just [(6), (7)])
          - Right:
              expr: (Just [])
        - - expr: ([(6), (7)], Nothing)
          - Right:
              expr: Nothing
        - - expr: ([(6), (7)], Just [(6)])
          - Right:
              expr: (Just [(6, 6)])
        - - expr: ([(6)], Just [(6)])
          - Right:
              expr: (Just [(6, 6)])
        - - expr: ([(6), (7)], Just [(6), (7)])
          - Right:
              expr: (Just [(6, 6), (7, 7)])
        - - expr: ([], Just [(6)])
          - Right:
              expr: (Just [])
        - - expr: ([], Nothing)
          - Right:
              expr: Nothing
    - - - type: ([Int], Maybe [Char])
        - type: Maybe [(Int, Char)]
      - - - expr: ([], Nothing)
          - Right:
              expr: Nothing
        - - expr: ([], Just ['6', '5'])
          - Right:
              expr: (Just [])
        - - expr: ([(6)], Just ['6', '5'])
          - Right:
              expr: (Just [(6, '6')])
        - - expr: ([(6), (7)], Just ['6', '5'])
          - Right:
              expr: (Just [(6, '6'), (7, '5')])
        - - expr: ([(6), (7)], Just ['6'])
          - Right:
              expr: (Just [(6, '6')])
        - - expr: ([(6), (7)], Nothing)
          - Right:
              expr: Nothing
        - - expr: ([(6)], Nothing)
          - Right:
              expr: Nothing
        - - expr: ([], Just ['6'])
          - Right:
              expr: (Just [])
    - - - type: ([Char], Maybe [Char])
        - type: Maybe [(Char, Char)]
      - - - expr: (['6', '5'], Just ['6'])
          - Right:
              expr: (Just [('6', '6')])
        - - expr: (['6'], Just ['6', '5'])
          - Right:
              expr: (Just [('6', '6')])
        - - expr: ([], Just ['6'])
          - Right:
              expr: (Just [])
        - - expr: (['6'], Nothing)
          - Right:
              expr: Nothing
        - - expr: (['6', '5'], Nothing)
          - Right:
              expr: Nothing
        - - expr: (['6'], Just ['6'])
          - Right:
              expr: (Just [('6', '6')])
        - - expr: ([], Nothing)
          - Right:
              expr: Nothing
        - - expr: (['6', '5'], Just ['6', '5'])
          - Right:
              expr: (Just [('6', '6'), ('5', '5')])
- - expr: zip mempty
  - - - - type: '[Char]'
        - type: '[(Int, Char)]'
      - - - expr: (['6'])
          - Right:
              expr: '[]'
        - - expr: (['6', '5'])
          - Right:
              expr: '[]'
        - - expr: ([])
          - Right:
              expr: '[]'
    - - - type: '[Int]'
        - type: '[(Char, Int)]'
      - - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([(6)])
          - Right:
              expr: '[]'
        - - expr: ([(6), (7)])
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just) elem
  - - - - type: (Int, Maybe Int)
        - type: Maybe Bool
      - - - expr: ((-9), Just (18))
          - Right:
              expr: (Just False)
        - - expr: ((18), Just (7))
          - Right:
              expr: (Just False)
        - - expr: ((18), Nothing)
          - Right:
              expr: (Just False)
        - - expr: ((7), Just (7))
          - Right:
              expr: (Just True)
        - - expr: ((18), Just (11))
          - Right:
              expr: (Just False)
        - - expr: ((-8), Just (7))
          - Right:
              expr: (Just False)
        - - expr: ((-11), Just (18))
          - Right:
              expr: (Just False)
        - - expr: ((11), Just (7))
          - Right:
              expr: (Just False)
    - - - type: (Char, Maybe Char)
        - type: Maybe Bool
      - - - expr: ('8', Just '0')
          - Right:
              expr: (Just False)
        - - expr: ('8', Just '7')
          - Right:
              expr: (Just False)
        - - expr: ('5', Just '7')
          - Right:
              expr: (Just False)
        - - expr: ('2', Just '0')
          - Right:
              expr: (Just False)
        - - expr: ('2', Just '5')
          - Right:
              expr: (Just False)
        - - expr: ('0', Just '7')
          - Right:
              expr: (Just False)
        - - expr: ('0', Just '0')
          - Right:
              expr: (Just True)
        - - expr: ('1', Just '5')
          - Right:
              expr: (Just False)
- - expr: let compose = (.) in compose (compose sequenceA sequenceA)
  - - - - type: ((Int -> Maybe ([] Char)), Int)
        - type: Maybe ([] Char)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-20))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (6))
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-9))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (6))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-9))
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (7))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (18))
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (6))
          - Right:
              expr: Nothing
    - - - type: ((Char -> [] (Maybe Char)), Char)
        - type: '[] (Maybe Char)'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '1')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '6')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '0')
          - Right:
              expr: '[]'
    - - - type: ((Int -> Maybe ([] Int)), Int)
        - type: Maybe ([] Int)
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6))
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose mempty maybe, (11))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (11))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-11))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-9))
          - Right:
              expr: Nothing
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (11))
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (18))
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               (-20))
          - Right:
              expr: (Just [])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose fmap (conc unzip)
  - - - - type: (([(Char, Char)] -> ([Char], [Char])), Maybe [(Char, Char)])
        - type: Maybe ([Char], [Char])
      - - - expr: (let compose = (.) in compose unzip (sequenceA mempty), Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose mempty unzip,
               Just [('6', '6'), ('5', '5')])
          - Right:
              expr: (Just ("65", "65"))
        - - expr: (let compose = (.) in compose mempty length, Just [('6', '6')])
          - Right:
              expr: (Just ("6", "6"))
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               Just [('6', '6')])
          - Right:
              expr: (Just ("6", "6"))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just [('6', '6'), ('5', '5')])
          - Right:
              expr: (Just ("65", "65"))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               Just [('6', '6')])
          - Right:
              expr: (Just ("6", "6"))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               Nothing)
          - Right:
              expr: Nothing
    - - - type: (([(Int, Char)] -> ([Int], [Char])), Maybe [(Int, Char)])
        - type: Maybe ([Int], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose unzip (conc mempty),
               Just [((6), '6'), ((7), '5')])
          - Right:
              expr: (Just ([6, 7, 6, 7], "6565"))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               Just [((6), '6')])
          - Right:
              expr: (Just ([6], "6"))
        - - expr: (let compose = (.) in compose unzip mempty, Nothing)
          - Right:
              expr: Nothing
        - - expr: (unzip, Just [((6), '6'), ((7), '5')])
          - Right:
              expr: (Just ([6, 7, 6, 7], "6565"))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               Just [((6), '6')])
          - Right:
              expr: (Just ([6], "6"))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Just [((6), '6'), ((7), '5')])
          - Right:
              expr: (Just ([6, 7], "65"))
        - - expr: (let compose = (.) in compose mempty maybe, Just [((6), '6')])
          - Right:
              expr: (Just ([6], "6"))
    - - - type: (([(Int, Int)] -> ([Int], [Int])), Maybe [(Int, Int)])
        - type: Maybe ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               Just [((6), (6)), ((7), (7))])
          - Right:
              expr: (Just ([6, 7], [6, 7]))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               Just [((6), (6)), ((7), (7))])
          - Right:
              expr: (Just ([6, 7], [6, 7]))
        - - expr: (let compose = (.) in compose mempty length, Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just [((6), (6)), ((7), (7))])
          - Right:
              expr: (Just ([6, 7], [6, 7]))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just [((6), (6))])
          - Right:
              expr: (Just ([6], [6]))
        - - expr: (let compose = (.) in compose mempty (zip mempty), Nothing)
          - Right:
              expr: Nothing
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in maybe (conc mempty) prepend
  - - - - type: (Maybe Int, [Int])
        - type: '[Int]'
      - - - expr: (Just (7), [(6), (7)])
          - Right:
              expr: '[7, 6, 7]'
        - - expr: (Just (18), [(6)])
          - Right:
              expr: '[18, 6]'
        - - expr: (Nothing, [(6), (7)])
          - Right:
              expr: '[6, 7]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just (-11), [(6)])
          - Right:
              expr: '[-11, 6]'
        - - expr: (Just (7), [])
          - Right:
              expr: '[7]'
        - - expr: (Just (18), [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
        - - expr: (Just (-11), [])
          - Right:
              expr: '[-11]'
    - - - type: (Maybe Char, [Char])
        - type: '[Char]'
      - - - expr: (Just '0', ['6', '5'])
          - Right:
              expr: '"065"'
        - - expr: (Just '0', [])
          - Right:
              expr: '"0"'
        - - expr: (Nothing, ['6'])
          - Right:
              expr: '"6"'
        - - expr: (Just '7', [])
          - Right:
              expr: '"7"'
        - - expr: (Just '5', ['6', '5'])
          - Right:
              expr: '"565"'
        - - expr: (Just '5', ['6'])
          - Right:
              expr: '"56"'
        - - expr: (Just '7', ['6', '5'])
          - Right:
              expr: '"765"'
        - - expr: (Nothing, [])
          - Right:
              expr: '""'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose unzip mempty)
  - - - - type: ((Char -> ([Char], [Char])), Char)
        - type: ([Char], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '4')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '0')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '0')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '1')
          - Right:
              expr: ("", "")
    - - - type: ((Char -> ([Int], [Char])), Char)
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose unzip (sequence mempty), '5')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose unzip mempty, '4')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '0')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '4')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '6')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '1')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, '6')
          - Right:
              expr: ([], "")
    - - - type: ((Int -> ([Int], [Int])), Int)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (11))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty maybe, (-9))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty fromEnum, (6))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               (-9))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (tpl mempty) mempty,
               (-20))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-8))
          - Right:
              expr: ([], [])
    - - - type: ((Int -> ([Int], [Char])), Int)
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (7))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose unzip (sequence mempty), (-9))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (18))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (11))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-8))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose unzip (sequenceA mempty), (-9))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-11))
          - Right:
              expr: ([], "")
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequenceA (just toEnum))
  - - - - type: ((Int -> Int), Int)
        - type: Maybe Char
      - - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: (Just '\a')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: (Just '\v')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (11))
          - Right:
              expr: (Just '\v')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, (18))
          - Right:
              expr: (Just '\DC2')
        - - expr: (fromEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
    - - - type: ((Char -> Int), Char)
        - type: Maybe Char
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just '6')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just '8')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '1')
          - Right:
              expr: (Just '1')
        - - expr: (fromEnum, '8')
          - Right:
              expr: (Just '8')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just '0')
        - - expr: (fromEnum, '5')
          - Right:
              expr: (Just '5')
        - - expr: (fromEnum, '1')
          - Right:
              expr: (Just '1')
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc unzip) mempty
  - - - - type: (Char, [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: ('1', [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: ('0', [])
          - Right:
              expr: ([], "")
        - - expr: ('2', [((6), '6'), ((7), '5')])
          - Right:
              expr: ([6, 7], "65")
        - - expr: ('0', [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: ('7', [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: ('4', [])
          - Right:
              expr: ([], "")
        - - expr: ('8', [((6), '6')])
          - Right:
              expr: ([6], "6")
        - - expr: ('5', [])
          - Right:
              expr: ([], "")
    - - - type: (Char, [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: ('7', [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
        - - expr: ('5', [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: ('8', [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: ('0', [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: ('5', [])
          - Right:
              expr: ([], [])
        - - expr: ('2', [((6), (6))])
          - Right:
              expr: ([6], [6])
        - - expr: ('4', [])
          - Right:
              expr: ([], [])
        - - expr: ('5', [((6), (6)), ((7), (7))])
          - Right:
              expr: ([6, 7], [6, 7])
    - - - type: (Int, [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: ((6), [])
          - Right:
              expr: ("", "")
        - - expr: ((11), [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: ((-8), [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: ((6), [('6', '6'), ('5', '5')])
          - Right:
              expr: ("65", "65")
        - - expr: ((-11), [('6', '6')])
          - Right:
              expr: ("6", "6")
        - - expr: ((18), [])
          - Right:
              expr: ("", "")
        - - expr: ((-20), [])
          - Right:
              expr: ("", "")
        - - expr: ((-8), [])
          - Right:
              expr: ("", "")
    - - - type: (Char, [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: ('8', [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: ('2', [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: ('4', [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: ('7', [('6', (6))])
          - Right:
              expr: ("6", [6])
        - - expr: ('7', [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: ('0', [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: ('6', [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
        - - expr: ('2', [('6', (6)), ('5', (7))])
          - Right:
              expr: ("65", [6, 7])
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just sequence))
  - - - - type: ((Int -> [] ([] Int)), Int)
        - type: Maybe ([] ([] Int))
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-11))
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-8))
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (18))
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               (-9))
          - Right:
              expr: (Just [[]])
        - - expr: (let compose = (.) in compose mempty maybe, (18))
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               (-20))
          - Right:
              expr: (Just [[]])
        - - expr: (let compose = (.) in compose mempty fromEnum, (-8))
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (-8))
          - Right:
              expr: (Just [[]])
    - - - type: ((Int -> Maybe ([] Char)), Int)
        - type: Maybe ([] (Maybe Char))
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-11))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (-8))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (7))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-11))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-11))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-11))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (18))
          - Right:
              expr: (Just [Nothing])
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               (-9))
          - Right:
              expr: (Just [Nothing])
    - - - type: ((Char -> [] (Maybe Int)), Char)
        - type: Maybe (Maybe ([] Int))
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '1')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '0')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '1')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '2')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '8')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '4')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '0')
          - Right:
              expr: (Just (Just []))
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '2')
          - Right:
              expr: (Just (Just []))
    - - - type: ((Char -> [] ([] Int)), Char)
        - type: Maybe ([] ([] Int))
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '2')
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0')
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '1')
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '5')
          - Right:
              expr: (Just [[]])
        - - expr: (let compose = (.) in compose mempty maybe, '1')
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '7')
          - Right:
              expr: (Just [[]])
        - - expr: (let compose = (.) in compose mempty maybe, '2')
          - Right:
              expr: (Just [[]])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '0')
          - Right:
              expr: (Just [[]])
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl length)
  - - - - type: ((Int -> [] Int), Int, Char)
        - type: (Int, Char)
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-11), '4')
          - Right:
              expr: (0, '4')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (6), '7')
          - Right:
              expr: (0, '7')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (-11), '6')
          - Right:
              expr: (0, '6')
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-11), '2')
          - Right:
              expr: (0, '2')
        - - expr: (let compose = (.) in compose mempty fromEnum, (-20), '2')
          - Right:
              expr: (0, '2')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6), '1')
          - Right:
              expr: (0, '1')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (11), '7')
          - Right:
              expr: (0, '7')
        - - expr: (let compose = (.) in compose mempty fromEnum, (-8), '2')
          - Right:
              expr: (0, '2')
    - - - type: ((Int -> Maybe Char), Int, Int)
        - type: (Int, Int)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7), (18))
          - Right:
              expr: (1, 18)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18), (-20))
          - Right:
              expr: (1, -20)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (11), (-20))
          - Right:
              expr: (1, -20)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18), (-9))
          - Right:
              expr: (1, -9)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11), (-9))
          - Right:
              expr: (1, -9)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8), (18))
          - Right:
              expr: (1, 18)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8), (6))
          - Right:
              expr: (1, 6)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8), (11))
          - Right:
              expr: (1, 11)
    - - - type: ((Char -> Maybe Int), Char, Char)
        - type: (Int, Char)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5', '7')
          - Right:
              expr: (1, '7')
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8', '8')
          - Right:
              expr: (1, '8')
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '6', '1')
          - Right:
              expr: (1, '1')
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7', '7')
          - Right:
              expr: (1, '7')
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '0', '2')
          - Right:
              expr: (1, '2')
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4', '4')
          - Right:
              expr: (1, '4')
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5', '1')
          - Right:
              expr: (1, '1')
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5', '4')
          - Right:
              expr: (1, '4')
    - - - type: ((Char -> Maybe Int), Char, Int)
        - type: (Int, Int)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4', (6))
          - Right:
              expr: (1, 6)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '0', (-9))
          - Right:
              expr: (1, -9)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4', (11))
          - Right:
              expr: (1, 11)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5', (11))
          - Right:
              expr: (1, 11)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4', (18))
          - Right:
              expr: (1, 18)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5', (-8))
          - Right:
              expr: (1, -8)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5', (-20))
          - Right:
              expr: (1, -20)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8', (11))
          - Right:
              expr: (1, 11)
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in conc (compose prepend unzip)
  - - - - type: |-
            (([(Int, Int)] -> [([Int], [Int])] -> [([Int], [Int])]),
             [(Int, Int)], [([Int], [Int])])
        - type: '[([Int], [Int])]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               [((6), (6))], [([], []), ([(6), (7)], [(6), (7)]), ([(6)], [(6)])])
          - Right:
              expr: '[([6], [6]), ([], []), ([6, 7], [6, 7]), ([6], [6])]'
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               [((6), (6)), ((7), (7))], [([], [])])
          - Right:
              expr: '[([6, 7], [6, 7]), ([], [])]'
        - - expr: |-
              (let compose = (.) in compose fmap mempty,
               [((6), (6)), ((7), (7))], [([], []), ([(6), (7)], [(6), (7)])])
          - Right:
              expr: '[([6, 7], [6, 7]), ([], []), ([6, 7], [6, 7]), ([], []), ([],
                [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               [((6), (6))], [([], [])])
          - Right:
              expr: '[([6], [6]), ([], [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               [], [([], [])])
          - Right:
              expr: '[([], []), ([], [])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [((6), (6)), ((7), (7))], [])
          - Right:
              expr: '[([6, 7], [6, 7])]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [((6), (6)), ((7), (7))], [([], [])])
          - Right:
              expr: '[([6, 7], [6, 7]), ([], [])]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [((6), (6)), ((7), (7))],
               [([], []), ([(6), (7)], [(6), (7)]), ([(6)], [(6)])])
          - Right:
              expr: '[([6, 7], [6, 7]), ([], []), ([6, 7], [6, 7]), ([6], [6])]'
    - - - type: |-
            (([(Char, Int)] -> [([Char], [Int])] -> [([Char], [Int])]),
             [(Char, Int)], [([Char], [Int])])
        - type: '[([Char], [Int])]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               [('6', (6))], [([], [])])
          - Right:
              expr: '[("6", [6]), ("", [])]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty (conc mempty),
               [('6', (6))], [([], []), (['6', '5'], [(6), (7)])])
          - Right:
              expr: '[("6", [6]), ("", []), ("65", [6, 7])]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               [('6', (6))], [])
          - Right:
              expr: '[("6", [6])]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [('6', (6))], [([], []), (['6', '5'], [(6), (7)])])
          - Right:
              expr: '[("6", [6]), ("", []), ("65", [6, 7])]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               [('6', (6)), ('5', (7))],
               [([], []), (['6', '5'], [(6), (7)]), (['6'], [(6)])])
          - Right:
              expr: |-
                [("65", [6, 7]), ("", []), ("65", [6, 7]), ("6", [6]), ("", []),
                 ("65", [6, 7]), ("6", [6])]
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend mempty,
               [], [([], []), (['6', '5'], [(6), (7)])])
          - Right:
              expr: |-
                [("", []), ("", []), ("65", [6, 7]), ("", []), ("", []),
                 ("65", [6, 7])]
        - - expr: |-
              (let compose = (.) in compose mempty zip, [('6', (6)), ('5', (7))],
               [([], []), (['6', '5'], [(6), (7)]), (['6'], [(6)])])
          - Right:
              expr: '[("65", [6, 7]), ("", []), ("65", [6, 7]), ("6", [6])]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [], [([], []), (['6', '5'], [(6), (7)])])
          - Right:
              expr: '[("", []), ("", []), ("65", [6, 7])]'
    - - - type: |-
            (([(Int, Char)] -> [([Int], [Char])] -> [([Int], [Char])]),
             [(Int, Char)], [([Int], [Char])])
        - type: '[([Int], [Char])]'
      - - - expr: (let compose = (.) in compose fmap mempty, [], [([], [])])
          - Right:
              expr: '[([], ""), ([], ""), ([], "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               [], [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               [], [([], []), ([(6), (7)], ['6', '5']), ([(6)], ['6'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65"), ([6], "6")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               [((6), '6')], [])
          - Right:
              expr: '[([6], "6")]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, [],
               [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([], ""), ([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let compose = (.) in compose mempty length,
               [((6), '6'), ((7), '5')], [([], []), ([(6), (7)], ['6', '5'])])
          - Right:
              expr: '[([6, 7], "65"), ([], ""), ([6, 7], "65")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               [], [])
          - Right:
              expr: '[([], "")]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [((6), '6')], [([], []), ([(6), (7)], ['6', '5']), ([(6)], ['6'])])
          - Right:
              expr: '[([6], "6"), ([], ""), ([6, 7], "65"), ([6], "6")]'
    - - - type: |-
            (([(Char, Char)] -> [([Char], [Char])] -> [([Char], [Char])]),
             [(Char, Char)], [([Char], [Char])])
        - type: '[([Char], [Char])]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               [('6', '6')], [([], [])])
          - Right:
              expr: '[("6", "6"), ("", ""), ("", "")]'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               [('6', '6'), ('5', '5')],
               [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: '[("65", "65"), ("", ""), ("65", "65"), ("6", "6")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               [('6', '6')], [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: '[("6", "6"), ("", ""), ("65", "65"), ("6", "6")]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend mempty,
               [('6', '6')], [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: |-
                [("6", "6"), ("", ""), ("65", "65"), ("6", "6"), ("", ""),
                 ("", ""), ("65", "65"), ("6", "6")]
        - - expr: |-
              (let compose = (.) in compose mempty zip, [],
               [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: '[("", ""), ("", ""), ("65", "65"), ("6", "6")]'
        - - expr: |-
              (let compose = (.) in compose (compose mempty) zip, [],
               [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: '[("", ""), ("", ""), ("65", "65"), ("6", "6")]'
        - - expr: (let compose = (.) in compose mempty (zip mempty), [], [])
          - Right:
              expr: '[("", "")]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [('6', '6'), ('5', '5')],
               [([], []), (['6', '5'], ['6', '5']), (['6'], ['6'])])
          - Right:
              expr: '[("65", "65"), ("", ""), ("65", "65"), ("6", "6")]'
- - expr: let compose = (.) in compose (compose length)
  - - - - type: ((Char -> Char -> [] Int), Char, Char)
        - type: Int
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '0', '1')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '0', '1')
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose mempty maybe, '6', '4')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '4', '4')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '0', '7')
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '1', '2')
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '4', '1')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               '4', '7')
          - Right:
              expr: '0'
    - - - type: ((Char -> Int -> [] Int), Char, Int)
        - type: Int
      - - - expr: (let compose = (.) in compose mempty maybe, '2', (7))
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '1', (7))
          - Right:
              expr: '0'
        - - expr: |-
              (let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '7', (-20))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '6', (-8))
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose mempty fromEnum, '2', (11))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '5', (18))
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl maybe),
               '6', (-8))
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose mempty maybe, '6', (7))
          - Right:
              expr: '0'
    - - - type: ((Int -> Char -> [] Char), Int, Char)
        - type: Int
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (18), '4')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               (11), '0')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-8), '8')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl zip),
               (18), '7')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (6), '5')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (6), '7')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-9), '2')
          - Right:
              expr: '0'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (6), '0')
          - Right:
              expr: '0'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose unzip)
  - - - - type: |-
            (((Char -> [(Int, Int)]) -> Char -> ([Int], [Int])),
             (Char -> [(Int, Int)]), Char)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '4')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty (maybe mempty),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '2')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty (compose maybe),
               let conc = (<>)
                   compose = (.)
                 in compose (conc mempty) mempty,
               '6')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '2')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty mempty),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '0')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty unzip),
               let compose = (.) in compose (zip mempty) mempty, '5')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty (compose length),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               '1')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc unzip mempty),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '6')
          - Right:
              expr: ([], [])
    - - - type: |-
            (((Int -> [(Int, Int)]) -> Int -> ([Int], [Int])),
             (Int -> [(Int, Int)]), Int)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.) in compose mempty (compose zip),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (18))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               (-9))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl tpl),
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (7))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty,
               let compose = (.) in compose mempty fromEnum, (-11))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose (compose mempty zip),
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               (-8))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose (compose unzip mempty),
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               (-20))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose (compose unzip) mempty,
               let compose = (.) in compose mempty maybe, (7))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               (7))
          - Right:
              expr: ([], [])
    - - - type: |-
            (((Char -> [(Char, Int)]) -> Char -> ([Char], [Int])),
             (Char -> [(Char, Int)]), Char)
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl unzip),
               '2')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (compose tpl),
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '4')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty (compose prepend),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '8')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '7')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty (compose tpl),
               let compose = (.) in compose mempty fromEnum, '2')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose (compose mempty just),
               let compose = (.) in compose mempty fromEnum, '6')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty (compose prepend),
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '0')
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty) tpl,
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '0')
          - Right:
              expr: ("", [])
    - - - type: |-
            (((Char -> [(Char, Char)]) -> Char -> ([Char], [Char])),
             (Char -> [(Char, Char)]), Char)
        - type: ([Char], [Char])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose (conc mempty unzip),
               let compose = (.)
                   prepend = (:)
                   tpl = (,)
                 in compose mempty (tpl prepend),
               '7')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty (compose length),
               let compose = (.) in compose (zip mempty) mempty, '7')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose (compose mempty prepend),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '1')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty (maybe mempty),
               let compose = (.) in compose (zip mempty) mempty, '7')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty compose,
               let compose = (.)
                   zero = 0
                   tpl = (,)
                 in compose mempty (tpl zero),
               '0')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose (compose mempty tpl),
               let compose = (.)
                   tpl = (,)
                 in compose mempty (tpl compose),
               '1')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty,
               let just = Just
                   compose = (.)
                   tpl = (,)
                 in compose mempty (tpl just),
               '5')
          - Right:
              expr: ("", "")
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose (conc mempty) prepend
  - - - - type: (Int, [Int])
        - type: '[Int]'
      - - - expr: ((18), [(6), (7)])
          - Right:
              expr: '[18, 6, 7]'
        - - expr: ((-8), [(6)])
          - Right:
              expr: '[-8, 6]'
        - - expr: ((7), [(6)])
          - Right:
              expr: '[7, 6]'
        - - expr: ((-9), [])
          - Right:
              expr: '[-9]'
        - - expr: ((-9), [(6)])
          - Right:
              expr: '[-9, 6]'
        - - expr: ((6), [(6), (7)])
          - Right:
              expr: '[6, 6, 7]'
        - - expr: ((-20), [])
          - Right:
              expr: '[-20]'
        - - expr: ((-11), [(6)])
          - Right:
              expr: '[-11, 6]'
    - - - type: (Char, [Char])
        - type: '[Char]'
      - - - expr: ('1', ['6', '5'])
          - Right:
              expr: '"165"'
        - - expr: ('6', ['6'])
          - Right:
              expr: '"66"'
        - - expr: ('8', [])
          - Right:
              expr: '"8"'
        - - expr: ('0', ['6', '5'])
          - Right:
              expr: '"065"'
        - - expr: ('2', [])
          - Right:
              expr: '"2"'
        - - expr: ('8', ['6', '5'])
          - Right:
              expr: '"865"'
        - - expr: ('0', [])
          - Right:
              expr: '"0"'
        - - expr: ('1', [])
          - Right:
              expr: '"1"'
- - expr: |-
      let just = Just
          tpl = (,)
        in tpl (just (unzip mempty))
  - - - - type: Char
        - type: (Maybe ([Char], [Int]), Char)
      - - - expr: ('8')
          - Right:
              expr: (Just ("", []), '8')
        - - expr: ('0')
          - Right:
              expr: (Just ("", []), '0')
        - - expr: ('7')
          - Right:
              expr: (Just ("", []), '7')
        - - expr: ('2')
          - Right:
              expr: (Just ("", []), '2')
        - - expr: ('1')
          - Right:
              expr: (Just ("", []), '1')
        - - expr: ('5')
          - Right:
              expr: (Just ("", []), '5')
        - - expr: ('6')
          - Right:
              expr: (Just ("", []), '6')
        - - expr: ('4')
          - Right:
              expr: (Just ("", []), '4')
    - - - type: Int
        - type: (Maybe ([Char], [Char]), Int)
      - - - expr: ((-9))
          - Right:
              expr: (Just ("", ""), -9)
        - - expr: ((-20))
          - Right:
              expr: (Just ("", ""), -20)
        - - expr: ((18))
          - Right:
              expr: (Just ("", ""), 18)
        - - expr: ((7))
          - Right:
              expr: (Just ("", ""), 7)
        - - expr: ((-11))
          - Right:
              expr: (Just ("", ""), -11)
        - - expr: ((11))
          - Right:
              expr: (Just ("", ""), 11)
        - - expr: ((6))
          - Right:
              expr: (Just ("", ""), 6)
        - - expr: ((-8))
          - Right:
              expr: (Just ("", ""), -8)
    - - - type: Char
        - type: (Maybe ([Char], [Char]), Char)
      - - - expr: ('0')
          - Right:
              expr: (Just ("", ""), '0')
        - - expr: ('7')
          - Right:
              expr: (Just ("", ""), '7')
        - - expr: ('5')
          - Right:
              expr: (Just ("", ""), '5')
        - - expr: ('4')
          - Right:
              expr: (Just ("", ""), '4')
        - - expr: ('6')
          - Right:
              expr: (Just ("", ""), '6')
        - - expr: ('8')
          - Right:
              expr: (Just ("", ""), '8')
        - - expr: ('1')
          - Right:
              expr: (Just ("", ""), '1')
        - - expr: ('2')
          - Right:
              expr: (Just ("", ""), '2')
    - - - type: Int
        - type: (Maybe ([Char], [Int]), Int)
      - - - expr: ((11))
          - Right:
              expr: (Just ("", []), 11)
        - - expr: ((-20))
          - Right:
              expr: (Just ("", []), -20)
        - - expr: ((-11))
          - Right:
              expr: (Just ("", []), -11)
        - - expr: ((18))
          - Right:
              expr: (Just ("", []), 18)
        - - expr: ((7))
          - Right:
              expr: (Just ("", []), 7)
        - - expr: ((6))
          - Right:
              expr: (Just ("", []), 6)
        - - expr: ((-9))
          - Right:
              expr: (Just ("", []), -9)
        - - expr: ((-8))
          - Right:
              expr: (Just ("", []), -8)
- - expr: |-
      let compose = (.)
          prepend = (:)
          tpl = (,)
        in compose (compose prepend) tpl
  - - - - type: (Int, Int, [(Int, Int)])
        - type: '[(Int, Int)]'
      - - - expr: ((6), (-20), [((6), (6))])
          - Right:
              expr: '[(6, -20), (6, 6)]'
        - - expr: ((18), (-20), [((6), (6))])
          - Right:
              expr: '[(18, -20), (6, 6)]'
        - - expr: ((-9), (-9), [((6), (6))])
          - Right:
              expr: '[(-9, -9), (6, 6)]'
        - - expr: ((6), (-11), [((6), (6))])
          - Right:
              expr: '[(6, -11), (6, 6)]'
        - - expr: ((6), (11), [((6), (6))])
          - Right:
              expr: '[(6, 11), (6, 6)]'
        - - expr: ((-20), (-8), [((6), (6)), ((7), (7))])
          - Right:
              expr: '[(-20, -8), (6, 6), (7, 7)]'
        - - expr: ((18), (11), [((6), (6)), ((7), (7))])
          - Right:
              expr: '[(18, 11), (6, 6), (7, 7)]'
        - - expr: ((7), (11), [])
          - Right:
              expr: '[(7, 11)]'
    - - - type: (Char, Int, [(Char, Int)])
        - type: '[(Char, Int)]'
      - - - expr: ('4', (11), [('6', (6)), ('5', (7))])
          - Right:
              expr: '[(''4'', 11), (''6'', 6), (''5'', 7)]'
        - - expr: ('1', (-8), [('6', (6))])
          - Right:
              expr: '[(''1'', -8), (''6'', 6)]'
        - - expr: ('7', (18), [('6', (6)), ('5', (7))])
          - Right:
              expr: '[(''7'', 18), (''6'', 6), (''5'', 7)]'
        - - expr: ('0', (6), [])
          - Right:
              expr: '[(''0'', 6)]'
        - - expr: ('8', (18), [('6', (6)), ('5', (7))])
          - Right:
              expr: '[(''8'', 18), (''6'', 6), (''5'', 7)]'
        - - expr: ('8', (-20), [('6', (6))])
          - Right:
              expr: '[(''8'', -20), (''6'', 6)]'
        - - expr: ('2', (11), [('6', (6)), ('5', (7))])
          - Right:
              expr: '[(''2'', 11), (''6'', 6), (''5'', 7)]'
        - - expr: ('6', (-11), [('6', (6))])
          - Right:
              expr: '[(''6'', -11), (''6'', 6)]'
    - - - type: (Int, Char, [(Int, Char)])
        - type: '[(Int, Char)]'
      - - - expr: ((-9), '2', [])
          - Right:
              expr: '[(-9, ''2'')]'
        - - expr: ((-20), '2', [((6), '6'), ((7), '5')])
          - Right:
              expr: '[(-20, ''2''), (6, ''6''), (7, ''5'')]'
        - - expr: ((7), '7', [])
          - Right:
              expr: '[(7, ''7'')]'
        - - expr: ((-11), '8', [((6), '6')])
          - Right:
              expr: '[(-11, ''8''), (6, ''6'')]'
        - - expr: ((18), '5', [((6), '6'), ((7), '5')])
          - Right:
              expr: '[(18, ''5''), (6, ''6''), (7, ''5'')]'
        - - expr: ((-11), '5', [])
          - Right:
              expr: '[(-11, ''5'')]'
        - - expr: ((6), '1', [((6), '6'), ((7), '5')])
          - Right:
              expr: '[(6, ''1''), (6, ''6''), (7, ''5'')]'
        - - expr: ((18), '2', [((6), '6')])
          - Right:
              expr: '[(18, ''2''), (6, ''6'')]'
    - - - type: (Char, Char, [(Char, Char)])
        - type: '[(Char, Char)]'
      - - - expr: ('5', '8', [('6', '6')])
          - Right:
              expr: '[(''5'', ''8''), (''6'', ''6'')]'
        - - expr: ('1', '0', [])
          - Right:
              expr: '[(''1'', ''0'')]'
        - - expr: ('7', '6', [])
          - Right:
              expr: '[(''7'', ''6'')]'
        - - expr: ('2', '1', [])
          - Right:
              expr: '[(''2'', ''1'')]'
        - - expr: ('0', '7', [('6', '6')])
          - Right:
              expr: '[(''0'', ''7''), (''6'', ''6'')]'
        - - expr: ('5', '1', [('6', '6'), ('5', '5')])
          - Right:
              expr: '[(''5'', ''1''), (''6'', ''6''), (''5'', ''5'')]'
        - - expr: ('5', '6', [('6', '6'), ('5', '5')])
          - Right:
              expr: '[(''5'', ''6''), (''6'', ''6''), (''5'', ''5'')]'
        - - expr: ('7', '8', [('6', '6'), ('5', '5')])
          - Right:
              expr: '[(''7'', ''8''), (''6'', ''6''), (''5'', ''5'')]'
- - expr: |-
      let compose = (.)
          zero = 0
        in compose (maybe zero fromEnum)
  - - - - type: ((Char -> Maybe Char), Char)
        - type: Int
      - - - expr: (let just = Just in just, '5')
          - Right:
              expr: '53'
        - - expr: (let just = Just in just, '4')
          - Right:
              expr: '52'
        - - expr: (let just = Just in just, '0')
          - Right:
              expr: '48'
        - - expr: (let just = Just in just, '2')
          - Right:
              expr: '50'
        - - expr: (let just = Just in just, '1')
          - Right:
              expr: '49'
        - - expr: (let just = Just in just, '6')
          - Right:
              expr: '54'
        - - expr: (let just = Just in just, '8')
          - Right:
              expr: '56'
        - - expr: (let just = Just in just, '7')
          - Right:
              expr: '55'
    - - - type: ((Int -> Maybe Int), Int)
        - type: Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (6))
          - Right:
              expr: '6'
        - - expr: (let just = Just in just, (-20))
          - Right:
              expr: (-20)
        - - expr: (let just = Just in just, (-9))
          - Right:
              expr: (-9)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-20))
          - Right:
              expr: (-20)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-20))
          - Right:
              expr: (-20)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (-9))
          - Right:
              expr: (-9)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (11))
          - Right:
              expr: '11'
        - - expr: (let just = Just in just, (7))
          - Right:
              expr: '7'
    - - - type: ((Char -> Maybe Int), Char)
        - type: Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8')
          - Right:
              expr: '56'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7')
          - Right:
              expr: '55'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4')
          - Right:
              expr: '52'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2')
          - Right:
              expr: '50'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '1')
          - Right:
              expr: '49'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5')
          - Right:
              expr: '53'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '0')
          - Right:
              expr: '48'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '6')
          - Right:
              expr: '54'
    - - - type: ((Int -> Maybe Char), Int)
        - type: Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (18))
          - Right:
              expr: '18'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (6))
          - Right:
              expr: '6'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7))
          - Right:
              expr: '7'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (11))
          - Right:
              expr: '11'
- - expr: let compose = (.) in compose (compose toEnum toEnum)
  - - - - type: ((Char -> Int), Char)
        - type: Char
      - - - expr: (fromEnum, '5')
          - Right:
              expr: '''5'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '''4'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '''6'''
        - - expr: (fromEnum, '2')
          - Right:
              expr: '''2'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: '''5'''
        - - expr: (fromEnum, '0')
          - Right:
              expr: '''0'''
        - - expr: (fromEnum, '8')
          - Right:
              expr: '''8'''
        - - expr: (fromEnum, '7')
          - Right:
              expr: '''7'''
    - - - type: ((Int -> Int), Int)
        - type: Char
      - - - expr: (toEnum, (-8))
          - Left: '"Prelude.chr: bad argument: (-8)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: '''\a'''
        - - expr: (fromEnum, (11))
          - Right:
              expr: '''\v'''
        - - expr: (let compose = (.) in compose toEnum toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (6))
          - Right:
              expr: '''\ACK'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: (toEnum, (11))
          - Right:
              expr: '''\v'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-9))
          - Left: '"Prelude.chr: bad argument: (-9)"'
    - - - type: ((Char -> Int), Char)
        - type: Int
      - - - expr: (fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: (fromEnum, '8')
          - Right:
              expr: '56'
        - - expr: (fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (fromEnum, '5')
          - Right:
              expr: '53'
        - - expr: (fromEnum, '4')
          - Right:
              expr: '52'
    - - - type: ((Int -> Int), Int)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (11))
          - Right:
              expr: '11'
        - - expr: (fromEnum, (6))
          - Right:
              expr: '6'
        - - expr: (toEnum, (11))
          - Right:
              expr: '11'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-20))
          - Right:
              expr: (-20)
        - - expr: (let compose = (.) in compose toEnum toEnum, (6))
          - Right:
              expr: '6'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: '7'
        - - expr: (toEnum, (7))
          - Right:
              expr: '7'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (18))
          - Right:
              expr: '18'
generationCfg:
  numMin: -20
  seed: 521
  charMin: '0'
  crashOnError: true
  verbosity: warning
  test: 0.3
  maxInstances: 5
  maxHoles: 4
  nestLimit: 1
  charMax: '9'
  resultFolder: run-results
  numMax: 20
  training: 0.35
  maxParams: 3
  maxInstantiations: 4
  listMin: 0
  numInputs: 10
  validation: 0.35
  taskFile: datasets-4.yml
  listMax: 3
  maxDataset: 1000
variantTypes:
- type: '[a] -> [b] -> [(a, b)]'
- type: '[b] -> [(a, b)]'
- type: '[(a, b)]'
- type: a -> [a] -> [a]
- type: '[a] -> [a]'
- type: '[a]'
- type: '[(a, b)] -> ([a], [b])'
- type: ([a], [b])
- type: '  (Foldable t, Eq a) => a -> t a -> Bool'
- type: '  (Foldable t, Eq a) => t a -> Bool'
- type: Bool
- type: '  Num p => p'
- type: a -> Maybe a
- type: Maybe a
- type: '  Monoid a => a'
- type: '  Enum a => Int -> a'
- type: '  Enum a => a'
- type: '  Foldable t => t a -> Int'
- type: Int
- type: a -> b -> (a, b)
- type: b -> (a, b)
- type: (a, b)
- type: '  (Traversable t, Monad m) => t (m a) -> m (t a)'
- type: '  (Traversable t, Monad m) => m (t a)'
- type: '  (Traversable t, Applicative f) => t (f a) -> f (t a)'
- type: '  (Traversable t, Applicative f) => f (t a)'
- type: '  Enum a => a -> Int'
- type: Int
- type: '  (Foldable t, Monoid m) => (a -> m) -> t a -> m'
- type: '  (Foldable t, Monoid m) => t a -> m'
- type: 'Monoid m => m'
- type: '  Functor f => (a -> b) -> f a -> f b'
- type: '  Functor f => f a -> f b'
- type: '  Functor f => f b'
- type: '  Semigroup a => a -> a -> a'
- type: '  Semigroup a => a -> a'
- type: '  Semigroup a => a'
- type: b -> (a -> b) -> Maybe a -> b
- type: (a -> b) -> Maybe a -> b
- type: Maybe a -> b
- type: b
- type: (b -> c) -> (a -> b) -> a -> c
- type: (a -> b) -> a -> c
- type: a -> c
- type: c
ruleCharMap:
  ',': 6
  \: 30
  l: 40
  g: 38
  '7': 15
  '*': 5
  ? |2+

  : 0
  m: 41
  '-': 7
  M: 25
  =: 18
  ']': 31
  '0': 8
  p: 44
  ' ': 1
  '[': 29
  'N': 26
  '>': 19
  'n': 42
  a: 32
  q: 45
  A: 20
  '1': 9
  d: 35
  t: 48
  '4': 12
  T: 28
  o: 43
  '"': 2
  B: 21
  '2': 10
  b: 33
  r: 46
  u: 49
  E: 22
  '5': 13
  e: 36
  (: 3
  '8': 16
  c: 34
  s: 47
  '3': 11
  S: 27
  f: 37
  v: 50
  F: 23
  '6': 14
  '9': 17
  i: 39
  'y': 51
  ): 4
  I: 24
bothCharMap:
  ',': 6
  L: 33
  <: 20
  \: 43
  l: 55
  g: 51
  '''': 3
  '7': 16
  j: 54
  z: 67
  J: 31
  ':': 19
  ? |2+

  : 0
  m: 56
  '-': 7
  M: 34
  =: 21
  ']': 44
  '0': 9
  P: 37
  p: 59
  ' ': 1
  K: 32
  '[': 42
  .: 8
  'N': 35
  '>': 22
  'n': 57
  a: 45
  q: 60
  A: 23
  '1': 10
  d: 48
  t: 63
  D: 26
  '4': 13
  T: 40
  o: 58
  O: 36
  '"': 2
  B: 24
  '2': 11
  R: 38
  b: 46
  r: 61
  u: 64
  E: 27
  '5': 14
  U: 41
  e: 49
  h: 52
  (: 4
  H: 29
  '8': 17
  c: 47
  s: 62
  C: 25
  '3': 12
  S: 39
  f: 50
  v: 65
  F: 28
  '6': 15
  '9': 18
  i: 53
  'y': 66
  ): 5
  I: 30
dsl:
  length:
    expr: length
  maybe:
    expr: maybe
  foldMap:
    expr: foldMap
  fromEnum:
    expr: fromEnum
  unzip:
    expr: unzip
  just:
    expr: Just
  zip:
    expr: zip
  elem:
    expr: elem
  sequence:
    expr: sequence
  zero:
    expr: '0'
  fmap:
    expr: fmap
  toEnum:
    expr: toEnum
  mempty:
    expr: mempty
  compose:
    expr: (.)
  tpl:
    expr: (,)
  prepend:
    expr: (:)
  sequenceA:
    expr: sequenceA
  conc:
    expr: (<>)
fnTypes:
- - expr: let compose = (.) in compose unzip (zip mempty)
  - type: '[b] -> ([a], [b])'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend toEnum
  - type: '  Enum a => Int -> [a] -> [a]'
- - expr: let compose = (.) in compose zip (sequenceA mempty)
  - type: a1 -> [b] -> [(a2, b)]
- - expr: let compose = (.) in compose (compose unzip) zip
  - type: '[a] -> [b] -> ([a], [b])'
- - expr: |-
      let conc = (<>)
          just = Just
          zero = 0
          prepend = (:)
        in conc (prepend (just zero))
  - type: '  Num a => ([Maybe a] -> [Maybe a]) -> [Maybe a] -> [Maybe a]'
- - expr: let compose = (.) in compose unzip
  - type: (a1 -> [(a2, b)]) -> a1 -> ([a2], [b])
- - expr: |-
      let just = Just
          compose = (.)
          tpl = (,)
        in compose (compose tpl just)
  - type: (a1 -> a2) -> a1 -> b -> (Maybe a2, b)
- - expr: |-
      let just = Just
          compose = (.)
          tpl = (,)
        in compose (compose just) tpl
  - type: a1 -> a2 -> Maybe (a1, a2)
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose (prepend zero)
  - type: '  Num a1 => (a2 -> [a1]) -> a2 -> [a1]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl unzip
  - type: '[(a, b1)] -> b2 -> (([a], [b1]), b2)'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose compose prepend
  - type: a1 -> (a2 -> [a1]) -> a2 -> [a1]
- - expr: |-
      let zero = 0
          prepend = (:)
        in maybe (prepend zero)
  - type: '  Num a1 => (a2 -> [a1] -> [a1]) -> Maybe a2 -> [a1] -> [a1]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose fmap (compose just)
  - type: '  Functor f => (a1 -> a2) -> f a1 -> f (Maybe a2)'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequenceA (just fromEnum))
  - type: '  Enum b => (a -> b) -> a -> Maybe Int'
- - expr: |-
      let conc = (<>)
          compose = (.)
          zero = 0
          prepend = (:)
        in compose conc (prepend zero)
  - type: '  Num a => [a] -> [a] -> [a]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend sequenceA
  - type: '  (Traversable t, Applicative f) => t (f a) -> [f (t a)] -> [f (t a)]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc mempty zip)
  - type: (a1 -> [a2]) -> a1 -> [b] -> [(a2, b)]
- - expr: |-
      let just = Just
          compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl (just zero))
  - type: '  Num a1 => (a2 -> b) -> a2 -> (Maybe a1, b)'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl unzip)
  - type: (a1 -> [(a2, b1)]) -> a1 -> b2 -> (([a2], [b1]), b2)
- - expr: let compose = (.) in compose (maybe unzip mempty)
  - type: (a1 -> Maybe a2) -> a1 -> [(a3, b)] -> ([a3], [b])
- - expr: let compose = (.) in compose (compose unzip)
  - type: (a1 -> a2 -> [(a3, b)]) -> a1 -> a2 -> ([a3], [b])
- - expr: zip
  - type: '[a] -> [b] -> [(a, b)]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose foldMap zip)
  - type: |2-
        Foldable t =>
        ([a] -> t [b] -> [(a, b)]) -> [a] -> t [b] -> [(a, b)]
- - expr: let compose = (.) in compose unzip (sequenceA mempty)
  - type: a1 -> ([a2], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc mempty unzip)
  - type: (a1 -> [(a2, b)]) -> a1 -> ([a2], [b])
- - expr: |-
      let just = Just
          compose = (.)
          zero = 0
          prepend = (:)
        in compose just (prepend zero)
  - type: '  Num a => [a] -> Maybe [a]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend) prepend
  - type: a -> [a] -> [[a]] -> [[a]]
- - expr: let compose = (.) in compose elem toEnum
  - type: '  (Foldable t, Eq a, Enum a) => Int -> t a -> Bool'
- - expr: let compose = (.) in compose zip (sequence mempty)
  - type: a1 -> [b] -> [(a2, b)]
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc unzip)
  - type: (a1 -> [(a2, b)] -> ([a2], [b])) -> a1 -> [(a2, b)] -> ([a2], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc zip
  - type: '[a] -> ([b] -> [(a, b)]) -> [b] -> [(a, b)]'
- - expr: let compose = (.) in compose sequence
  - type: '  (Traversable t, Monad m) => (a1 -> t (m a2)) -> a1 -> m (t a2)'
- - expr: let conc = (<>) in conc (unzip mempty)
  - type: ([a], [b]) -> ([a], [b])
- - expr: |-
      let just = Just
          compose = (.)
        in compose just unzip
  - type: '[(a, b)] -> Maybe ([a], [b])'
- - expr: unzip
  - type: '[(a, b)] -> ([a], [b])'
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc (conc mempty prepend)
  - type: (a -> [a] -> [a]) -> a -> [a] -> [a]
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl (zip mempty)
  - type: '[b1] -> b2 -> ([(a, b1)], b2)'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc (conc unzip)
  - type: |-
      ([(a, b)] -> ([a], [b])) ->
        ([(a, b)] -> ([a], [b])) -> [(a, b)] -> ([a], [b])
- - expr: let compose = (.) in compose sequenceA
  - type: |2-
        (Traversable t, Applicative f) =>
        (a1 -> t (f a2)) -> a1 -> f (t a2)
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose unzip sequence)
  - type: ((a, [b]) -> ([a], [b])) -> (a, [b]) -> ([a], [b])
- - expr: let compose = (.) in compose toEnum
  - type: '  Enum c => (a -> Int) -> a -> c'
- - expr: let compose = (.) in compose toEnum length
  - type: '  (Enum c, Foldable t) => t a -> c'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose zip (conc mempty)
  - type: '[a] -> [b] -> [(a, b)]'
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc (conc prepend mempty)
  - type: (a -> [a] -> [a]) -> a -> [a] -> [a]
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl sequence)
  - type: |2-
        (Traversable t, Monad m) =>
        (a1 -> t (m a2)) -> a1 -> b -> (m (t a2), b)
- - expr: let compose = (.) in compose (compose elem toEnum)
  - type: '  (Foldable t, Eq a1, Enum a1) => (a2 -> Int) -> a2 -> t a1 -> Bool'
- - expr: let compose = (.) in compose (compose sequence)
  - type: |2-
        (Traversable t, Monad m) =>
        (a1 -> a2 -> t (m a3)) -> a1 -> a2 -> m (t a3)
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc unzip
  - type: '[(a, b)] -> ([a], [b]) -> ([a], [b])'
- - expr: let compose = (.) in compose compose fmap
  - type: '  Functor f => (a1 -> b) -> (a2 -> f a1) -> a2 -> f b'
- - expr: |-
      let just = Just
          zero = 0
          tpl = (,)
        in tpl (just (just zero))
  - type: '  Num a => b -> (Maybe (Maybe a), b)'
- - expr: let compose = (.) in compose (zip mempty)
  - type: (a1 -> [b]) -> a1 -> [(a2, b)]
- - expr: |-
      let zero = 0
          tpl = (,)
        in maybe (tpl zero) tpl
  - type: '  Num a => Maybe a -> b -> (a, b)'
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in conc (compose foldMap prepend)
  - type: '  Foldable t => (a -> t [a] -> [a]) -> a -> t [a] -> [a]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl toEnum
  - type: '  Enum a => Int -> b -> (a, b)'
- - expr: let compose = (.) in compose (zip mempty) mempty
  - type: a1 -> [(a2, b)]
- - expr: |-
      let just = Just
          compose = (.)
          prepend = (:)
        in compose (compose prepend just)
  - type: (a1 -> a2) -> a1 -> [Maybe a2] -> [Maybe a2]
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend unzip
  - type: '[(a, b)] -> [([a], [b])] -> [([a], [b])]'
- - expr: |-
      let compose = (.)
          zero = 0
        in compose (maybe zero length)
  - type: '  Foldable t => (a1 -> Maybe (t a2)) -> a1 -> Int'
- - expr: |-
      let conc = (<>)
          just = Just
          compose = (.)
        in conc (compose just unzip)
  - type: ([(a, b)] -> Maybe ([a], [b])) -> [(a, b)] -> Maybe ([a], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose (compose conc) prepend
  - type: a -> [a] -> [a] -> [a]
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc unzip unzip)
  - type: (a1 -> [(a2, b)]) -> a1 -> ([a2], [b])
- - expr: maybe (unzip mempty)
  - type: (a1 -> ([a2], [b])) -> Maybe a1 -> ([a2], [b])
- - expr: |-
      let just = Just
          zero = 0
          tpl = (,)
        in tpl (just zero)
  - type: '  Num a => b -> (Maybe a, b)'
- - expr: |-
      let just = Just
          compose = (.)
        in compose maybe just
  - type: a1 -> (a2 -> Maybe a1) -> Maybe a2 -> Maybe a1
- - expr: let compose = (.) in maybe (compose unzip) mempty
  - type: Maybe a1 -> (a2 -> [(a3, b)]) -> a2 -> ([a3], [b])
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose (compose (prepend zero))
  - type: '  Num a1 => (a2 -> a3 -> [a1]) -> a2 -> a3 -> [a1]'
- - expr: let conc = (<>) in conc zip
  - type: ([a] -> [b] -> [(a, b)]) -> [a] -> [b] -> [(a, b)]
- - expr: let compose = (.) in compose fmap (compose sequenceA)
  - type: |2-
        (Traversable t, Applicative f1, Functor f2) =>
        (a1 -> t (f1 a2)) -> f2 a1 -> f2 (f1 (t a2))
- - expr: let just = Just in maybe (just (unzip mempty))
  - type: (a1 -> Maybe ([a2], [b])) -> Maybe a1 -> Maybe ([a2], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc zip zip)
  - type: (a1 -> [a2]) -> a1 -> [b] -> [(a2, b)]
- - expr: let compose = (.) in compose (compose zip sequence)
  - type: '  Traversable t => (a1 -> t [a2]) -> a1 -> [b] -> [(t a2, b)]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just fromEnum))
  - type: '  Enum b => (a -> b) -> a -> Maybe Int'
- - expr: maybe zip mempty
  - type: Maybe a1 -> [a2] -> [b] -> [(a2, b)]
- - expr: let tpl = (,) in tpl (unzip mempty)
  - type: b1 -> (([a], [b2]), b1)
- - expr: let compose = (.) in compose compose elem
  - type: '  (Foldable t, Eq a1) => a1 -> (a2 -> t a1) -> a2 -> Bool'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just
  - type: (a1 -> a2) -> a1 -> Maybe a2
- - expr: maybe (sequence (unzip mempty))
  - type: (a1 -> [([a2], a3)]) -> Maybe a1 -> [([a2], a3)]
- - expr: let conc = (<>) in maybe (conc mempty unzip)
  - type: |-
      (a1 -> [(a2, b)] -> ([a2], [b])) ->
        Maybe a1 -> [(a2, b)] -> ([a2], [b])
- - expr: let zero = 0 in maybe zero
  - type: '  Num b => (a -> b) -> Maybe a -> b'
- - expr: let compose = (.) in compose zip sequenceA
  - type: '  Traversable t => t [a] -> [b] -> [(t a, b)]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just unzip)
  - type: (a1 -> [(a2, b)]) -> a1 -> Maybe ([a2], [b])
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc (conc prepend prepend)
  - type: (a -> [a] -> [a]) -> a -> [a] -> [a]
- - expr: |-
      let compose = (.)
          zero = 0
        in compose compose (maybe zero)
  - type: '  Num c => (a1 -> c) -> (a2 -> Maybe a1) -> a2 -> c'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc (zip mempty)
  - type: '[b] -> [(a, b)] -> [(a, b)]'
- - expr: let conc = (<>) in conc (maybe mempty zip)
  - type: (Maybe [a] -> [b] -> [(a, b)]) -> Maybe [a] -> [b] -> [(a, b)]
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (prepend (unzip mempty))
  - type: (a1 -> [([a2], [b])]) -> a1 -> [([a2], [b])]
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose zip mempty)
  - type: (a1 -> [b] -> [(a2, b)]) -> a1 -> [b] -> [(a2, b)]
- - expr: let compose = (.) in compose (compose zip) fmap
  - type: (a1 -> a2) -> [a1] -> [b] -> [(a2, b)]
- - expr: maybe (zip mempty) mempty
  - type: Maybe a1 -> [b] -> [(a2, b)]
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just length))
  - type: '  Foldable t => (a1 -> t a2) -> a1 -> Maybe Int'
- - expr: |-
      let just = Just
          zero = 0
          tpl = (,)
        in maybe (tpl (just zero))
  - type: |2-
        Num a1 =>
        (a2 -> b -> (Maybe a1, b)) -> Maybe a2 -> b -> (Maybe a1, b)
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose maybe (prepend zero)
  - type: '  Num a1 => [a1] -> (a2 -> [a1]) -> Maybe a2 -> [a1]'
- - expr: let compose = (.) in compose foldMap (compose unzip)
  - type: '  Foldable t => (a1 -> [(a2, b)]) -> t a1 -> ([a2], [b])'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend (zip mempty)
  - type: '[b] -> [[(a, b)]] -> [[(a, b)]]'
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero) unzip
  - type: '  Num a1 => [(a2, b)] -> (a1, ([a2], [b]))'
- - expr: let conc = (<>) in conc (zip mempty mempty)
  - type: '[(a, b)] -> [(a, b)]'
- - expr: maybe (sequenceA (unzip mempty))
  - type: (a1 -> [([a2], a3)]) -> Maybe a1 -> [([a2], a3)]
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend fromEnum)
  - type: '  Enum a1 => (a2 -> a1) -> a2 -> [Int] -> [Int]'
- - expr: let compose = (.) in compose (compose unzip mempty)
  - type: (a1 -> a2) -> a1 -> ([a3], [b])
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (maybe mempty) prepend
  - type: a -> Maybe [a] -> [a]
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose fmap prepend)
  - type: '  Functor f => (a1 -> a2) -> a1 -> f [a2] -> f [a2]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend length)
  - type: '  Foldable t => (a1 -> t a2) -> a1 -> [Int] -> [Int]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (maybe sequenceA prepend)
  - type: (a1 -> Maybe [a2]) -> a1 -> [[a2]] -> [[a2]]
- - expr: let compose = (.) in compose (compose sequence sequence)
  - type: |2-
        (Traversable t, Traversable m, Monad m, Monad t) =>
        (a1 -> m (t a2)) -> a1 -> m (t a2)
- - expr: let compose = (.) in compose (compose zip) foldMap
  - type: '  Foldable t => (a1 -> [a2]) -> t a1 -> [b] -> [(a2, b)]'
- - expr: let compose = (.) in compose fmap (compose unzip)
  - type: '  Functor f => (a1 -> [(a2, b)]) -> f a1 -> f ([a2], [b])'
- - expr: let conc = (<>) in conc (maybe mempty unzip)
  - type: (Maybe [(a, b)] -> ([a], [b])) -> Maybe [(a, b)] -> ([a], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc unzip mempty)
  - type: (a1 -> [(a2, b)]) -> a1 -> ([a2], [b])
- - expr: let compose = (.) in compose zip mempty
  - type: a1 -> [b] -> [(a2, b)]
- - expr: let compose = (.) in compose zip (zip mempty)
  - type: '[b1] -> [b2] -> [((a, b1), b2)]'
- - expr: let compose = (.) in compose (compose zip) zip
  - type: '[a] -> [b1] -> [b2] -> [((a, b1), b2)]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl fromEnum
  - type: '  Enum a => a -> b -> (Int, b)'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (maybe mempty prepend)
  - type: (a1 -> Maybe a2) -> a1 -> [a2] -> [a2]
- - expr: let just = Just in maybe (sequenceA (just unzip))
  - type: |-
      (a1 -> [(a2, b)] -> Maybe ([a2], [b])) ->
        Maybe a1 -> [(a2, b)] -> Maybe ([a2], [b])
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just fromEnum)
  - type: '  Enum a1 => (a2 -> a1) -> a2 -> Maybe Int'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (compose conc unzip)
  - type: (a1 -> [(a2, b)]) -> a1 -> ([a2], [b]) -> ([a2], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc zip) foldMap
  - type: (a -> [b] -> [(a, b)]) -> [a] -> [b] -> [(a, b)]
- - expr: let compose = (.) in compose sequence sequenceA
  - type: |2-
        (Monad m, Traversable t, Traversable m, Applicative t) =>
        m (t a) -> m (t a)
- - expr: let compose = (.) in compose fromEnum
  - type: '  Enum a1 => (a2 -> a1) -> a2 -> Int'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose (zip mempty))
  - type: ((a1 -> [b]) -> a1 -> [(a2, b)]) -> (a1 -> [b]) -> a1 -> [(a2, b)]
- - expr: |-
      let just = Just
          zero = 0
        in maybe (just zero) just
  - type: '  Num a => Maybe a -> Maybe a'
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose tpl (tpl zero)
  - type: '  Num a => b1 -> b2 -> ((a, b1), b2)'
- - expr: let compose = (.) in compose (compose toEnum fromEnum)
  - type: '  (Enum c, Enum a1) => (a2 -> a1) -> a2 -> c'
- - expr: |-
      let compose = (.)
          zero = 0
        in compose (maybe zero toEnum)
  - type: '  (Enum c, Num c) => (a -> Maybe Int) -> a -> c'
- - expr: let prepend = (:) in maybe mempty prepend
  - type: Maybe a -> [a] -> [a]
- - expr: let tpl = (,) in tpl (zip mempty mempty)
  - type: b1 -> ([(a, b2)], b1)
- - expr: let prepend = (:) in prepend
  - type: a -> [a] -> [a]
- - expr: |-
      let zero = 0
          prepend = (:)
          tpl = (,)
        in prepend (tpl zero zero)
  - type: '  Num b => [(b, b)] -> [(b, b)]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (compose zip) conc
  - type: '[a] -> [a] -> [b] -> [(a, b)]'
- - expr: |-
      let zero = 0
          tpl = (,)
        in tpl (tpl zero zero)
  - type: '  Num b1 => b2 -> ((b1, b1), b2)'
- - expr: maybe unzip mempty
  - type: Maybe a1 -> [(a2, b)] -> ([a2], [b])
- - expr: |-
      let just = Just
          zero = 0
          prepend = (:)
        in maybe (prepend (just zero))
  - type: |2-
        Num a1 =>
        (a2 -> [Maybe a1] -> [Maybe a1]) ->
          Maybe a2 -> [Maybe a1] -> [Maybe a1]
- - expr: let compose = (.) in compose (maybe (unzip mempty))
  - type: (a1 -> a2 -> ([a3], [b])) -> a1 -> Maybe a2 -> ([a3], [b])
- - expr: let compose = (.) in compose (compose elem unzip)
  - type: |2-
        (Foldable t, Eq a1, Eq b) =>
        (a2 -> [(a1, b)]) -> a2 -> t ([a1], [b]) -> Bool
- - expr: let compose = (.) in compose (maybe mempty) zip
  - type: '[a] -> Maybe [b] -> [(a, b)]'
- - expr: let zero = 0 in maybe (maybe zero) maybe
  - type: '  Num b => Maybe b -> (a -> b) -> Maybe a -> b'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose compose tpl
  - type: a1 -> (a2 -> b) -> a2 -> (a1, b)
- - expr: let compose = (.) in compose fmap (compose sequence)
  - type: |2-
        (Traversable t, Monad m, Functor f) =>
        (a1 -> t (m a2)) -> f a1 -> f (m (t a2))
- - expr: let conc = (<>) in conc (conc zip zip)
  - type: ([a] -> [b] -> [(a, b)]) -> [a] -> [b] -> [(a, b)]
- - expr: |-
      let just = Just
          compose = (.)
        in compose compose (compose just)
  - type: (b -> a1) -> (a2 -> b) -> a2 -> Maybe a1
- - expr: maybe (zip mempty mempty)
  - type: (a1 -> [(a2, b)]) -> Maybe a1 -> [(a2, b)]
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
          tpl = (,)
        in compose tpl (prepend zero)
  - type: '  Num a => [a] -> b -> ([a], b)'
- - expr: |-
      let just = Just
          compose = (.)
          zero = 0
          prepend = (:)
        in compose (prepend (just zero))
  - type: '  Num a1 => (a2 -> [Maybe a1]) -> a2 -> [Maybe a1]'
- - expr: let prepend = (:) in maybe prepend mempty
  - type: Maybe a1 -> a2 -> [a2] -> [a2]
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose zip sequenceA)
  - type: |2-
        Traversable t =>
        (t [a] -> [b] -> [(t a, b)]) -> t [a] -> [b] -> [(t a, b)]
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just sequenceA)
  - type: |2-
        (Traversable t, Applicative f) =>
        (a1 -> t (f a2)) -> a1 -> Maybe (f (t a2))
- - expr: let compose = (.) in compose (compose foldMap zip)
  - type: '  Foldable t => (a1 -> [a2]) -> a1 -> t [b] -> [(a2, b)]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose sequenceA) tpl
  - type: '  Applicative f => a1 -> f a2 -> f (a1, a2)'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just just
  - type: a -> Maybe (Maybe a)
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc (zip mempty))
  - type: (a1 -> [b] -> [(a2, b)]) -> a1 -> [b] -> [(a2, b)]
- - expr: |-
      let compose = (.)
          prepend = (:)
          tpl = (,)
        in compose (compose tpl) prepend
  - type: a -> [a] -> b -> ([a], b)
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose (conc prepend mempty)
  - type: (a1 -> a2) -> a1 -> [a2] -> [a2]
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose (conc prepend prepend)
  - type: (a1 -> a2) -> a1 -> [a2] -> [a2]
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl toEnum)
  - type: '  Enum a1 => (a2 -> Int) -> a2 -> b -> (a1, b)'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose unzip sequenceA)
  - type: ((a, [b]) -> ([a], [b])) -> (a, [b]) -> ([a], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
          zero = 0
          prepend = (:)
        in conc (compose (prepend zero))
  - type: |2-
        Num a1 =>
        ((a2 -> [a1]) -> a2 -> [a1]) -> (a2 -> [a1]) -> a2 -> [a1]
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose zip (prepend zero)
  - type: '  Num a => [a] -> [b] -> [(a, b)]'
- - expr: let conc = (<>) in conc (conc mempty zip)
  - type: ([a] -> [b] -> [(a, b)]) -> [a] -> [b] -> [(a, b)]
- - expr: let compose = (.) in compose (compose toEnum length)
  - type: '  (Enum c, Foldable t) => (a1 -> t a2) -> a1 -> c'
- - expr: let compose = (.) in compose compose zip
  - type: '[a1] -> (a2 -> [b]) -> a2 -> [(a1, b)]'
- - expr: let compose = (.) in compose (compose sequenceA)
  - type: |2-
        (Traversable t, Applicative f) =>
        (a1 -> a2 -> t (f a3)) -> a1 -> a2 -> f (t a3)
- - expr: let conc = (<>) in maybe (conc unzip mempty)
  - type: |-
      (a1 -> [(a2, b)] -> ([a2], [b])) ->
        Maybe a1 -> [(a2, b)] -> ([a2], [b])
- - expr: let compose = (.) in compose (compose (zip mempty))
  - type: (a1 -> a2 -> [b]) -> a1 -> a2 -> [(a3, b)]
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose (conc mempty prepend)
  - type: (a1 -> a2) -> a1 -> [a2] -> [a2]
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl) tpl
  - type: a1 -> a2 -> b -> ((a1, a2), b)
- - expr: |-
      let zero = 0
          prepend = (:)
        in maybe (prepend zero) prepend
  - type: '  Num a => Maybe a -> [a] -> [a]'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc unzip) foldMap
  - type: ((a, b) -> ([a], [b])) -> [(a, b)] -> ([a], [b])
- - expr: maybe (zip mempty)
  - type: (a1 -> [b] -> [(a2, b)]) -> Maybe a1 -> [b] -> [(a2, b)]
- - expr: |-
      let just = Just
          compose = (.)
        in maybe (compose just unzip)
  - type: |-
      (a1 -> [(a2, b)] -> Maybe ([a2], [b])) ->
        Maybe a1 -> [(a2, b)] -> Maybe ([a2], [b])
- - expr: let compose = (.) in compose sequenceA unzip
  - type: '[(a1, a2)] -> [([a1], a2)]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose fmap prepend
  - type: '  Functor f => a -> f [a] -> f [a]'
- - expr: let tpl = (,) in tpl
  - type: a -> b -> (a, b)
- - expr: let just = Just in maybe (sequence (just unzip))
  - type: |-
      (a1 -> [(a2, b)] -> Maybe ([a2], [b])) ->
        Maybe a1 -> [(a2, b)] -> Maybe ([a2], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in conc (compose prepend fromEnum)
  - type: '  Enum a => (a -> [Int] -> [Int]) -> a -> [Int] -> [Int]'
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc (prepend (unzip mempty))
  - type: ([([a], [b])] -> [([a], [b])]) -> [([a], [b])] -> [([a], [b])]
- - expr: |-
      let conc = (<>)
          just = Just
          compose = (.)
          prepend = (:)
        in conc (compose prepend just)
  - type: (a -> [Maybe a] -> [Maybe a]) -> a -> [Maybe a] -> [Maybe a]
- - expr: fmap
  - type: '  Functor f => (a -> b) -> f a -> f b'
- - expr: let compose = (.) in maybe (compose unzip sequence)
  - type: |-
      (a1 -> (a2, [b]) -> ([a2], [b])) ->
        Maybe a1 -> (a2, [b]) -> ([a2], [b])
- - expr: let compose = (.) in maybe (compose sequence unzip)
  - type: |-
      (a1 -> [(a2, a3)] -> [([a2], a3)]) ->
        Maybe a1 -> [(a2, a3)] -> [([a2], a3)]
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc prepend
  - type: (a -> [a] -> [a]) -> a -> [a] -> [a]
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend) zip
  - type: '[a] -> [b] -> [[(a, b)]] -> [[(a, b)]]'
- - expr: let compose = (.) in compose (compose zip sequenceA)
  - type: '  Traversable t => (a1 -> t [a2]) -> a1 -> [b] -> [(t a2, b)]'
- - expr: let compose = (.) in compose maybe unzip
  - type: '[(a1, b)] -> (a2 -> ([a1], [b])) -> Maybe a2 -> ([a1], [b])'
- - expr: let prepend = (:) in prepend (zip mempty mempty)
  - type: '[[(a, b)]] -> [[(a, b)]]'
- - expr: maybe
  - type: b -> (a -> b) -> Maybe a -> b
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just length)
  - type: '  Foldable t => (a1 -> t a2) -> a1 -> Maybe Int'
- - expr: let conc = (<>) in conc unzip
  - type: ([(a, b)] -> ([a], [b])) -> [(a, b)] -> ([a], [b])
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose prepend (prepend zero)
  - type: '  Num a => [a] -> [[a]] -> [[a]]'
- - expr: let compose = (.) in compose (compose sequenceA unzip)
  - type: (a1 -> [(a2, a3)]) -> a1 -> [([a2], a3)]
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (compose unzip) conc
  - type: '[(a, b)] -> [(a, b)] -> ([a], [b])'
- - expr: |-
      let just = Just
          zero = 0
          prepend = (:)
        in prepend (just zero)
  - type: '  Num a => [Maybe a] -> [Maybe a]'
- - expr: let conc = (<>) in maybe (conc unzip) mempty
  - type: Maybe a1 -> ([(a2, b)] -> ([a2], [b])) -> [(a2, b)] -> ([a2], [b])
- - expr: let compose = (.) in maybe (compose unzip sequenceA)
  - type: |-
      (a1 -> (a2, [b]) -> ([a2], [b])) ->
        Maybe a1 -> (a2, [b]) -> ([a2], [b])
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero) fromEnum
  - type: '  (Enum a1, Num a2) => a1 -> (a2, Int)'
- - expr: |-
      let just = Just
          compose = (.)
          tpl = (,)
        in compose tpl just
  - type: a -> b -> (Maybe a, b)
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequenceA (just just))
  - type: (a -> b) -> a -> Maybe (Maybe b)
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc (maybe mempty prepend)
  - type: (Maybe a -> [a] -> [a]) -> Maybe a -> [a] -> [a]
- - expr: let compose = (.) in compose (compose sequenceA) fmap
  - type: '  (Traversable t, Applicative f) => (a1 -> f a2) -> t a1 -> f (t a2)'
- - expr: maybe mempty zip
  - type: Maybe [a] -> [b] -> [(a, b)]
- - expr: let compose = (.) in maybe (compose unzip mempty)
  - type: (a1 -> a2 -> ([a3], [b])) -> Maybe a1 -> a2 -> ([a3], [b])
- - expr: let conc = (<>) in maybe (conc unzip unzip)
  - type: |-
      (a1 -> [(a2, b)] -> ([a2], [b])) ->
        Maybe a1 -> [(a2, b)] -> ([a2], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose (conc prepend) mempty
  - type: a1 -> a2 -> [a2] -> [a2]
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in conc (compose prepend sequenceA)
  - type: |2-
        (Traversable t, Applicative f) =>
        (t (f a) -> [f (t a)] -> [f (t a)]) ->
          t (f a) -> [f (t a)] -> [f (t a)]
- - expr: let conc = (<>) in conc (maybe unzip mempty)
  - type: |-
      (Maybe a1 -> [(a2, b)] -> ([a2], [b])) ->
        Maybe a1 -> [(a2, b)] -> ([a2], [b])
- - expr: let compose = (.) in compose maybe toEnum
  - type: '  Enum b => Int -> (a -> b) -> Maybe a -> b'
- - expr: let compose = (.) in compose length
  - type: '  Foldable t => (a1 -> t a2) -> a1 -> Int'
- - expr: let compose = (.) in compose compose (compose fromEnum)
  - type: '  Enum a1 => (b -> a1) -> (a2 -> b) -> a2 -> Int'
- - expr: let compose = (.) in compose maybe (zip mempty)
  - type: '[b] -> (a1 -> [(a2, b)]) -> Maybe a1 -> [(a2, b)]'
- - expr: maybe mempty unzip
  - type: Maybe [(a, b)] -> ([a], [b])
- - expr: let conc = (<>) in conc (conc unzip mempty)
  - type: ([(a, b)] -> ([a], [b])) -> [(a, b)] -> ([a], [b])
- - expr: let zero = 0 in maybe zero fromEnum
  - type: '  Enum a => Maybe a -> Int'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc (unzip mempty))
  - type: (a1 -> ([a2], [b])) -> a1 -> ([a2], [b])
- - expr: |-
      let just = Just
          compose = (.)
          prepend = (:)
        in compose (compose just) prepend
  - type: a -> [a] -> Maybe [a]
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl) zip
  - type: '[a] -> [b1] -> b2 -> ([(a, b1)], b2)'
- - expr: let prepend = (:) in prepend (sequenceA (unzip mempty))
  - type: '[[([a1], a2)]] -> [[([a1], a2)]]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just just))
  - type: (a -> b) -> a -> Maybe (Maybe b)
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just just)
  - type: (a1 -> a2) -> a1 -> Maybe (Maybe a2)
- - expr: |-
      let zero = 0
          tpl = (,)
        in maybe (tpl zero)
  - type: '  Num a1 => (a2 -> b -> (a1, b)) -> Maybe a2 -> b -> (a1, b)'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just fromEnum
  - type: '  Enum a => a -> Maybe Int'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc mempty) zip
  - type: '[a] -> [b] -> [(a, b)]'
- - expr: let compose = (.) in compose (compose sequenceA sequence)
  - type: |2-
        (Traversable t, Traversable f, Monad t, Applicative f) =>
        (a1 -> f (t a2)) -> a1 -> f (t a2)
- - expr: let compose = (.) in compose
  - type: (b -> c) -> (a -> b) -> a -> c
- - expr: let conc = (<>) in conc (zip mempty)
  - type: ([b] -> [(a, b)]) -> [b] -> [(a, b)]
- - expr: let prepend = (:) in maybe (prepend (unzip mempty))
  - type: |-
      (a1 -> [([a2], [b])] -> [([a2], [b])]) ->
        Maybe a1 -> [([a2], [b])] -> [([a2], [b])]
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just unzip))
  - type: (a1 -> [(a2, b)]) -> a1 -> Maybe ([a2], [b])
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl
  - type: (a1 -> a2) -> a1 -> b -> (a2, b)
- - expr: |-
      let zero = 0
          prepend = (:)
        in prepend (prepend zero mempty)
  - type: '  Num a => [[a]] -> [[a]]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose unzip) prepend
  - type: (a, b) -> [(a, b)] -> ([a], [b])
- - expr: |-
      let zero = 0
          prepend = (:)
        in zip (prepend zero mempty)
  - type: '  Num a => [b] -> [(a, b)]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose sequence just)
  - type: '  Monad m => (a1 -> m a2) -> a1 -> m (Maybe a2)'
- - expr: maybe (maybe mempty unzip)
  - type: |-
      (a1 -> Maybe [(a2, b)] -> ([a2], [b])) ->
        Maybe a1 -> Maybe [(a2, b)] -> ([a2], [b])
- - expr: |-
      let zero = 0
          tpl = (,)
        in tpl zero
  - type: '  Num a => b -> (a, b)'
- - expr: |-
      let just = Just
          compose = (.)
          zero = 0
          tpl = (,)
        in compose just (tpl zero)
  - type: '  Num a => b -> Maybe (a, b)'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequenceA (just unzip))
  - type: (a1 -> [(a2, b)]) -> a1 -> Maybe ([a2], [b])
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just) zip
  - type: '[a] -> [b] -> Maybe [(a, b)]'
- - expr: let compose = (.) in compose compose (compose sequenceA)
  - type: |2-
        (Traversable t, Applicative f) =>
        (b -> t (f a1)) -> (a2 -> b) -> a2 -> f (t a1)
- - expr: let compose = (.) in compose (maybe unzip) mempty
  - type: a1 -> Maybe a2 -> [(a3, b)] -> ([a3], [b])
- - expr: sequence
  - type: '  (Traversable t, Monad m) => t (m a) -> m (t a)'
- - expr: maybe (unzip mempty) sequenceA
  - type: Maybe [([a], b)] -> ([a], [b])
- - expr: |-
      let just = Just
          compose = (.)
          prepend = (:)
        in compose prepend just
  - type: a -> [Maybe a] -> [Maybe a]
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend unzip)
  - type: (a1 -> [(a2, b)]) -> a1 -> [([a2], [b])] -> [([a2], [b])]
- - expr: let compose = (.) in compose compose (compose toEnum)
  - type: '  Enum c => (b -> Int) -> (a -> b) -> a -> c'
- - expr: |-
      let conc = (<>)
          just = Just
        in conc (just (unzip mempty))
  - type: Maybe ([a], [b]) -> Maybe ([a], [b])
- - expr: let compose = (.) in compose (compose fmap) maybe
  - type: '  Functor f => b -> (a -> b) -> f (Maybe a) -> f b'
- - expr: let compose = (.) in compose zip
  - type: (a1 -> [a2]) -> a1 -> [b] -> [(a2, b)]
- - expr: let compose = (.) in compose compose (compose length)
  - type: '  Foldable t => (b -> t a1) -> (a2 -> b) -> a2 -> Int'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc (compose unzip)
  - type: (a1 -> [(a2, b)]) -> (a1 -> ([a2], [b])) -> a1 -> ([a2], [b])
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend fromEnum
  - type: '  Enum a => a -> [Int] -> [Int]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequenceA (just length))
  - type: '  Foldable t => (a1 -> t a2) -> a1 -> Maybe Int'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend
  - type: (a1 -> a2) -> a1 -> [a2] -> [a2]
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose foldMap (compose prepend)
  - type: '  Foldable t => (a1 -> a2) -> t a1 -> [a2] -> [a2]'
- - expr: let compose = (.) in compose (maybe mempty zip)
  - type: (a1 -> Maybe [a2]) -> a1 -> [b] -> [(a2, b)]
- - expr: let compose = (.) in compose unzip sequenceA
  - type: (a, [b]) -> ([a], [b])
- - expr: let compose = (.) in compose (compose sequence unzip)
  - type: (a1 -> [(a2, a3)]) -> a1 -> [([a2], a3)]
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc zip) mempty
  - type: a1 -> [a2] -> [b] -> [(a2, b)]
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just toEnum))
  - type: '  Enum a1 => (a2 -> Int) -> a2 -> Maybe a1'
- - expr: let compose = (.) in compose (compose fmap zip)
  - type: '  Functor f => (a1 -> [a2]) -> a1 -> f [b] -> f [(a2, b)]'
- - expr: |-
      let zero = 0
          prepend = (:)
        in maybe (prepend zero) mempty
  - type: '  Num a1 => Maybe a2 -> [a1] -> [a1]'
- - expr: |-
      let zero = 0
          prepend = (:)
          tpl = (,)
        in tpl (prepend zero mempty)
  - type: '  Num a => b -> ([a], b)'
- - expr: let compose = (.) in compose foldMap (maybe unzip)
  - type: |2-
        Foldable t =>
        (a1 -> [(a2, b)] -> ([a2], [b])) ->
          t (Maybe a1) -> [(a2, b)] -> ([a2], [b])
- - expr: |-
      let just = Just
          zero = 0
          prepend = (:)
        in prepend (just (just zero))
  - type: '  Num a => [Maybe (Maybe a)] -> [Maybe (Maybe a)]'
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose conc prepend
  - type: a -> ([a] -> [a]) -> [a] -> [a]
- - expr: let tpl = (,) in maybe (tpl (unzip mempty))
  - type: |-
      (a1 -> b1 -> (([a2], [b2]), b1)) ->
        Maybe a1 -> b1 -> (([a2], [b2]), b1)
- - expr: let compose = (.) in compose (compose zip) mempty
  - type: a1 -> a2 -> [b] -> [(a3, b)]
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just sequenceA))
  - type: |2-
        (Traversable t, Applicative f) =>
        (a1 -> t (f a2)) -> a1 -> Maybe (f (t a2))
- - expr: let compose = (.) in compose unzip mempty
  - type: a1 -> ([a2], [b])
- - expr: maybe mempty (zip mempty)
  - type: Maybe [b] -> [(a, b)]
- - expr: |-
      let conc = (<>)
          zero = 0
          prepend = (:)
        in maybe (prepend zero) conc
  - type: '  Num a => Maybe [a] -> [a] -> [a]'
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose (prepend zero) mempty
  - type: '  Num a1 => a2 -> [a1]'
- - expr: |-
      let conc = (<>)
          zero = 0
          prepend = (:)
        in conc (prepend zero)
  - type: '  Num a => ([a] -> [a]) -> [a] -> [a]'
- - expr: let conc = (<>) in maybe (conc (unzip mempty))
  - type: |-
      (a1 -> ([a2], [b]) -> ([a2], [b])) ->
        Maybe a1 -> ([a2], [b]) -> ([a2], [b])
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just toEnum)
  - type: '  Enum a1 => (a2 -> Int) -> a2 -> Maybe a1'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (maybe sequence prepend)
  - type: (a1 -> Maybe [a2]) -> a1 -> [[a2]] -> [[a2]]
- - expr: |-
      let just = Just
          compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero) just
  - type: '  Num a1 => a2 -> (a1, Maybe a2)'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just sequence)
  - type: |2-
        (Traversable t, Monad m) =>
        (a1 -> t (m a2)) -> a1 -> Maybe (m (t a2))
- - expr: maybe (unzip mempty) mempty
  - type: Maybe a1 -> ([a2], [b])
- - expr: maybe (zip mempty) zip
  - type: Maybe [a] -> [b] -> [(a, b)]
- - expr: |-
      let conc = (<>)
          compose = (.)
          zero = 0
          prepend = (:)
        in compose (conc (prepend zero))
  - type: '  Num a1 => (a2 -> [a1] -> [a1]) -> a2 -> [a1] -> [a1]'
- - expr: let prepend = (:) in prepend (unzip mempty)
  - type: '[([a], [b])] -> [([a], [b])]'
- - expr: let just = Just in just
  - type: a -> Maybe a
- - expr: let conc = (<>) in conc (conc zip mempty)
  - type: ([a] -> [b] -> [(a, b)]) -> [a] -> [b] -> [(a, b)]
- - expr: let compose = (.) in maybe (compose sequenceA unzip)
  - type: |-
      (a1 -> [(a2, a3)] -> [([a2], a3)]) ->
        Maybe a1 -> [(a2, a3)] -> [([a2], a3)]
- - expr: |-
      let just = Just
          zero = 0
        in maybe (just zero)
  - type: '  Num a1 => (a2 -> Maybe a1) -> Maybe a2 -> Maybe a1'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose compose (conc unzip)
  - type: |-
      ([(a1, b)] -> ([a1], [b])) ->
        (a2 -> [(a1, b)]) -> a2 -> ([a1], [b])
- - expr: let prepend = (:) in maybe sequence prepend
  - type: Maybe [a] -> [[a]] -> [[a]]
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose sequenceA) prepend
  - type: '  Applicative f => f a -> [f a] -> f [a]'
- - expr: let compose = (.) in compose elem unzip
  - type: '  (Foldable t, Eq a, Eq b) => [(a, b)] -> t ([a], [b]) -> Bool'
- - expr: let compose = (.) in compose toEnum fromEnum
  - type: '  (Enum c, Enum a) => a -> c'
- - expr: let compose = (.) in compose maybe fromEnum
  - type: '  Enum a1 => a1 -> (a2 -> Int) -> Maybe a2 -> Int'
- - expr: let compose = (.) in compose (maybe mempty unzip)
  - type: (a1 -> Maybe [(a2, b)]) -> a1 -> ([a2], [b])
- - expr: elem
  - type: '  (Foldable t, Eq a) => a -> t a -> Bool'
- - expr: let compose = (.) in compose elem length
  - type: '  (Foldable t1, Foldable t2) => t2 a -> t1 Int -> Bool'
- - expr: let compose = (.) in compose compose (compose unzip)
  - type: (b1 -> [(a1, b2)]) -> (a2 -> b1) -> a2 -> ([a1], [b2])
- - expr: |-
      let just = Just
          prepend = (:)
        in prepend (just (unzip mempty))
  - type: '[Maybe ([a], [b])] -> [Maybe ([a], [b])]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just toEnum
  - type: '  Enum a => Int -> Maybe a'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose prepend toEnum)
  - type: '  Enum a1 => (a2 -> Int) -> a2 -> [a1] -> [a1]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequenceA (just sequenceA))
  - type: |2-
        (Traversable t, Applicative f) =>
        (a1 -> t (f a2)) -> a1 -> Maybe (f (t a2))
- - expr: |-
      let just = Just
          compose = (.)
        in compose just (zip mempty)
  - type: '[b] -> Maybe [(a, b)]'
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose maybe (tpl zero)
  - type: '  Num a1 => b -> (a2 -> (a1, b)) -> Maybe a2 -> (a1, b)'
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero) length
  - type: '  (Foldable t, Num a1) => t a2 -> (a1, Int)'
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero) toEnum
  - type: '  (Enum b, Num a) => Int -> (a, b)'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose (compose zip) prepend
  - type: a -> [a] -> [b] -> [(a, b)]
- - expr: let compose = (.) in compose (compose zip mempty)
  - type: (a1 -> a2) -> a1 -> [b] -> [(a3, b)]
- - expr: let conc = (<>) in conc (conc unzip unzip)
  - type: ([(a, b)] -> ([a], [b])) -> [(a, b)] -> ([a], [b])
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose sequenceA just)
  - type: '  Applicative f => (a1 -> f a2) -> a1 -> f (Maybe a2)'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (compose conc) zip
  - type: '[a] -> [b] -> [(a, b)] -> [(a, b)]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just sequence
  - type: '  (Traversable t, Monad m) => t (m a) -> Maybe (m (t a))'
- - expr: |-
      let just = Just
          compose = (.)
        in compose elem just
  - type: '  (Foldable t, Eq a) => a -> t (Maybe a) -> Bool'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (tpl (unzip mempty))
  - type: (a1 -> b1) -> a1 -> (([a2], [b2]), b1)
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just) fmap
  - type: '  Functor f => (a -> b) -> f a -> Maybe (f b)'
- - expr: |-
      let zero = 0
          prepend = (:)
        in maybe mempty (prepend zero)
  - type: '  Num a => Maybe [a] -> [a]'
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero)
  - type: '  Num a1 => (a2 -> b) -> a2 -> (a1, b)'
- - expr: |-
      let zero = 0
          tpl = (,)
        in maybe (tpl zero zero)
  - type: '  Num b => (a -> (b, b)) -> Maybe a -> (b, b)'
- - expr: let conc = (<>) in conc (conc mempty unzip)
  - type: ([(a, b)] -> ([a], [b])) -> [(a, b)] -> ([a], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc zip mempty)
  - type: (a1 -> [a2]) -> a1 -> [b] -> [(a2, b)]
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl fromEnum)
  - type: '  Enum a1 => (a2 -> a1) -> a2 -> b -> (Int, b)'
- - expr: let conc = (<>) in conc (maybe (unzip mempty))
  - type: |-
      ((a1 -> ([a2], [b])) -> Maybe a1 -> ([a2], [b])) ->
        (a1 -> ([a2], [b])) -> Maybe a1 -> ([a2], [b])
- - expr: let compose = (.) in compose compose (compose sequence)
  - type: |2-
        (Traversable t, Monad m) =>
        (b -> t (m a1)) -> (a2 -> b) -> a2 -> m (t a1)
- - expr: maybe unzip
  - type: |-
      (a1 -> [(a2, b)] -> ([a2], [b])) ->
        Maybe a1 -> [(a2, b)] -> ([a2], [b])
- - expr: |-
      let zero = 0
          prepend = (:)
        in maybe (prepend zero mempty)
  - type: '  Num a1 => (a2 -> [a1]) -> Maybe a2 -> [a1]'
- - expr: let compose = (.) in compose (compose sequence sequenceA)
  - type: |2-
        (Monad m, Traversable t, Traversable m, Applicative t) =>
        (a1 -> m (t a2)) -> a1 -> m (t a2)
- - expr: let compose = (.) in compose (compose fmap) compose
  - type: '  Functor f => (b1 -> b2) -> (a -> b1) -> f a -> f b2'
- - expr: let compose = (.) in compose (compose unzip) mempty
  - type: a1 -> a2 -> ([a3], [b])
- - expr: let compose = (.) in compose fmap zip
  - type: '  Functor f => [a] -> f [b] -> f [(a, b)]'
- - expr: zip mempty
  - type: '[b] -> [(a, b)]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose (compose just) elem
  - type: '  (Foldable t, Eq a) => a -> t a -> Maybe Bool'
- - expr: let compose = (.) in compose (compose sequenceA sequenceA)
  - type: |2-
        (Traversable t, Traversable f, Applicative f, Applicative t) =>
        (a1 -> f (t a2)) -> a1 -> f (t a2)
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose fmap (conc unzip)
  - type: '  Functor f => ([(a, b)] -> ([a], [b])) -> f [(a, b)] -> f ([a], [b])'
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in maybe (conc mempty) prepend
  - type: Maybe a -> [a] -> [a]
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose unzip mempty)
  - type: (a1 -> ([a2], [b])) -> a1 -> ([a2], [b])
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequenceA (just toEnum))
  - type: '  Enum a1 => (a2 -> Int) -> a2 -> Maybe a1'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc unzip) mempty
  - type: a1 -> [(a2, b)] -> ([a2], [b])
- - expr: |-
      let just = Just
          compose = (.)
        in compose (sequence (just sequence))
  - type: |2-
        (Traversable t, Monad m) =>
        (a1 -> t (m a2)) -> a1 -> Maybe (m (t a2))
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose (compose tpl length)
  - type: '  Foldable t => (a1 -> t a2) -> a1 -> b -> (Int, b)'
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in conc (compose prepend unzip)
  - type: |-
      ([(a, b)] -> [([a], [b])] -> [([a], [b])]) ->
        [(a, b)] -> [([a], [b])] -> [([a], [b])]
- - expr: let compose = (.) in compose (compose length)
  - type: '  Foldable t => (a1 -> a2 -> t a3) -> a1 -> a2 -> Int'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose unzip)
  - type: |-
      ((a1 -> [(a2, b)]) -> a1 -> ([a2], [b])) ->
        (a1 -> [(a2, b)]) -> a1 -> ([a2], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose (conc mempty) prepend
  - type: a -> [a] -> [a]
- - expr: |-
      let just = Just
          tpl = (,)
        in tpl (just (unzip mempty))
  - type: b1 -> (Maybe ([a], [b2]), b1)
- - expr: |-
      let compose = (.)
          prepend = (:)
          tpl = (,)
        in compose (compose prepend) tpl
  - type: a1 -> a2 -> [(a1, a2)] -> [(a1, a2)]
- - expr: |-
      let compose = (.)
          zero = 0
        in compose (maybe zero fromEnum)
  - type: '  Enum a1 => (a2 -> Maybe a1) -> a2 -> Int'
- - expr: let compose = (.) in compose (compose toEnum toEnum)
  - type: '  Enum c => (a -> Int) -> a -> c'
exprCharMap:
  ',': 6
  L: 31
  <: 20
  \: 41
  l: 53
  g: 49
  '''': 3
  '7': 16
  j: 52
  z: 65
  J: 29
  ':': 19
  ? |2+

  : 0
  m: 54
  '-': 7
  M: 32
  =: 21
  ']': 42
  '0': 9
  P: 35
  p: 57
  ' ': 1
  K: 30
  '[': 40
  .: 8
  'N': 33
  '>': 22
  'n': 55
  a: 43
  q: 58
  A: 23
  '1': 10
  d: 46
  t: 61
  D: 25
  '4': 13
  T: 38
  o: 56
  O: 34
  '"': 2
  '2': 11
  R: 36
  b: 44
  r: 59
  u: 62
  E: 26
  '5': 14
  U: 39
  e: 47
  h: 50
  (: 4
  H: 28
  '8': 17
  c: 45
  s: 60
  C: 24
  '3': 12
  S: 37
  f: 48
  v: 63
  F: 27
  '6': 15
  '9': 18
  i: 51
  'y': 64
  ): 5
datasets:
- - - expr: let compose = (.) in compose unzip (zip mempty)
    - - - type: '[Int]'
        - type: ([Char], [Int])
      - - type: '[Int]'
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose zip (sequenceA mempty)
    - - - type: (Char, [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose unzip
    - - - type: ((Char -> [(Int, Char)]), Char)
        - type: ([Int], [Char])
      - - type: ((Char -> [(Int, Int)]), Char)
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
            tpl = (,)
          in compose (compose tpl just)
    - - - type: ((Int -> Int), Int, Int)
        - type: (Maybe Int, Int)
      - - type: ((Int -> Char), Int, Char)
        - type: (Maybe Char, Char)
  - - expr: |-
        let just = Just
            compose = (.)
            tpl = (,)
          in compose (compose just) tpl
    - - - type: (Int, Int)
        - type: Maybe (Int, Int)
  - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
          in compose (prepend zero)
    - - - type: ((Char -> [Int]), Char)
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl unzip
    - - - type: ([(Int, Char)], Int)
        - type: (([Int], [Char]), Int)
  - - expr: |-
        let zero = 0
            prepend = (:)
          in maybe (prepend zero)
    - - - type: ((Char -> [Int] -> [Int]), Maybe Char, [Int])
        - type: '[Int]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequenceA (just fromEnum))
    - - - type: ((Char -> Int), Char)
        - type: Maybe Int
      - - type: ((Int -> Char), Int)
        - type: Maybe Int
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend sequenceA
    - - - type: (Maybe (Maybe Char), [Maybe (Maybe Char)])
        - type: '[Maybe (Maybe Char)]'
      - - type: (Maybe (Maybe Int), [Maybe (Maybe Int)])
        - type: '[Maybe (Maybe Int)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc mempty zip)
    - - - type: ((Char -> [Char]), Char, [Int])
        - type: '[(Char, Int)]'
      - - type: ((Int -> [Char]), Int, [Int])
        - type: '[(Char, Int)]'
      - - type: ((Int -> [Int]), Int, [Char])
        - type: '[(Int, Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl (just zero))
    - - - type: ((Int -> Char), Int)
        - type: (Maybe Int, Char)
      - - type: ((Char -> Int), Char)
        - type: (Maybe Int, Int)
  - - expr: let compose = (.) in compose (maybe unzip mempty)
    - - - type: ((Char -> Maybe Int), Char, [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: let compose = (.) in compose (compose unzip)
    - - - type: ((Int -> Int -> [(Char, Char)]), Int, Int)
        - type: ([Char], [Char])
      - - type: ((Int -> Char -> [(Char, Char)]), Int, Char)
        - type: ([Char], [Char])
  - - expr: zip
    - - - type: ([Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose foldMap zip)
    - - - type: (([Char] -> Maybe [Int] -> [(Char, Int)]), [Char], Maybe [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose unzip (sequenceA mempty)
    - - - type: Int
        - type: ([Char], [Char])
      - - type: Int
        - type: ([Char], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc mempty unzip)
    - - - type: ((Char -> [(Int, Int)]), Char)
        - type: ([Int], [Int])
      - - type: ((Char -> [(Int, Char)]), Char)
        - type: ([Int], [Char])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend) prepend
    - - - type: (Int, [Int], [[Int]])
        - type: '[[Int]]'
  - - expr: let compose = (.) in compose zip (sequence mempty)
    - - - type: (Int, [Char])
        - type: '[(Int, Char)]'
      - - type: (Int, [Char])
        - type: '[(Char, Char)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip)
    - - - type: ((Char -> [(Char, Int)] -> ([Char], [Int])), Char, [(Char, Int)])
        - type: ([Char], [Int])
      - - type: ((Char -> [(Int, Char)] -> ([Int], [Char])), Char, [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose sequence
    - - - type: ((Int -> [] (Maybe Char)), Int)
        - type: Maybe ([] Char)
      - - type: ((Int -> Maybe (Maybe Int)), Int)
        - type: Maybe (Maybe Int)
  - - expr: let conc = (<>) in conc (unzip mempty)
    - - - type: ([Int], [Int])
        - type: ([Int], [Int])
      - - type: ([Char], [Char])
        - type: ([Char], [Char])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just unzip
    - - - type: '[(Int, Char)]'
        - type: Maybe ([Int], [Char])
  - - expr: unzip
    - - - type: '[(Int, Char)]'
        - type: ([Int], [Char])
      - - type: '[(Int, Int)]'
        - type: ([Int], [Int])
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc (conc mempty prepend)
    - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl (zip mempty)
    - - - type: ([Int], Char)
        - type: ([(Int, Int)], Char)
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc (conc unzip)
    - - - type: |-
            (([(Int, Int)] -> ([Int], [Int])),
             ([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
      - - type: |-
            (([(Char, Char)] -> ([Char], [Char])),
             ([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: let compose = (.) in compose sequenceA
    - - - type: ((Char -> Maybe (Maybe Char)), Char)
        - type: Maybe (Maybe Char)
      - - type: ((Char -> [] ([] Char)), Char)
        - type: '[] ([] Char)'
  - - expr: let compose = (.) in compose toEnum
    - - - type: ((Int -> Int), Int)
        - type: Char
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc (conc prepend mempty)
    - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose tpl sequence)
    - - - type: ((Char -> [] (Maybe Char)), Char, Char)
        - type: (Maybe ([] Char), Char)
  - - expr: let compose = (.) in compose (compose sequence)
    - - - type: ((Int -> Int -> Maybe ([] Int)), Int, Int)
        - type: '[] (Maybe Int)'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc unzip
    - - - type: ([(Char, Int)], ([Char], [Int]))
        - type: ([Char], [Int])
  - - expr: let compose = (.) in compose compose fmap
    - - - type: ((Char -> Char), (Int -> Maybe Char), Int)
        - type: Maybe Char
      - - type: ((Int -> Char), (Char -> [] Int), Char)
        - type: '[] Char'
  - - expr: |-
        let just = Just
            zero = 0
            tpl = (,)
          in tpl (just (just zero))
    - - - type: Int
        - type: (Maybe (Maybe Int), Int)
      - - type: Char
        - type: (Maybe (Maybe Int), Char)
  - - expr: let compose = (.) in compose (zip mempty)
    - - - type: ((Char -> [Int]), Char)
        - type: '[(Char, Int)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in conc (compose foldMap prepend)
    - - - type: ((Char -> Maybe [Char] -> [Char]), Char, Maybe [Char])
        - type: '[Char]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl toEnum
    - - - type: (Int, Int)
        - type: (Int, Int)
  - - expr: let compose = (.) in compose (zip mempty) mempty
    - - - type: Int
        - type: '[(Int, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
            prepend = (:)
          in compose (compose prepend just)
    - - - type: ((Int -> Int), Int, [Maybe Int])
        - type: '[Maybe Int]'
      - - type: ((Char -> Char), Char, [Maybe Char])
        - type: '[Maybe Char]'
      - - type: ((Int -> Char), Int, [Maybe Char])
        - type: '[Maybe Char]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend unzip
    - - - type: ([(Int, Char)], [([Int], [Char])])
        - type: '[([Int], [Char])]'
  - - expr: |-
        let compose = (.)
            zero = 0
          in compose (maybe zero length)
    - - - type: ((Int -> Maybe ([] Char)), Int)
        - type: Int
  - - expr: |-
        let conc = (<>)
            just = Just
            compose = (.)
          in conc (compose just unzip)
    - - - type: (([(Char, Int)] -> Maybe ([Char], [Int])), [(Char, Int)])
        - type: Maybe ([Char], [Int])
      - - type: (([(Char, Char)] -> Maybe ([Char], [Char])), [(Char, Char)])
        - type: Maybe ([Char], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip unzip)
    - - - type: ((Int -> [(Int, Char)]), Int)
        - type: ([Int], [Char])
  - - expr: maybe (unzip mempty)
    - - - type: ((Char -> ([Int], [Char])), Maybe Char)
        - type: ([Int], [Char])
      - - type: ((Int -> ([Char], [Char])), Maybe Int)
        - type: ([Char], [Char])
      - - type: ((Int -> ([Int], [Int])), Maybe Int)
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            zero = 0
            tpl = (,)
          in tpl (just zero)
    - - - type: Char
        - type: (Maybe Int, Char)
      - - type: Int
        - type: (Maybe Int, Int)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose maybe just
    - - - type: (Int, (Char -> Maybe Int), Maybe Char)
        - type: Maybe Int
      - - type: (Int, (Int -> Maybe Int), Maybe Int)
        - type: Maybe Int
      - - type: (Char, (Int -> Maybe Char), Maybe Int)
        - type: Maybe Char
      - - type: (Char, (Char -> Maybe Char), Maybe Char)
        - type: Maybe Char
  - - expr: let compose = (.) in maybe (compose unzip) mempty
    - - - type: (Maybe Int, (Char -> [(Int, Int)]), Char)
        - type: ([Int], [Int])
  - - expr: let conc = (<>) in conc zip
    - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
      - - type: (([Char] -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose fmap (compose sequenceA)
    - - - type: ((Int -> [] ([] Int)), Maybe Int)
        - type: Maybe ([] ([] Int))
  - - expr: let just = Just in maybe (just (unzip mempty))
    - - - type: ((Char -> Maybe ([Int], [Int])), Maybe Char)
        - type: Maybe ([Int], [Int])
      - - type: ((Char -> Maybe ([Char], [Char])), Maybe Char)
        - type: Maybe ([Char], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc zip zip)
    - - - type: ((Char -> [Int]), Char, [Int])
        - type: '[(Int, Int)]'
      - - type: ((Int -> [Char]), Int, [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose (compose zip sequence)
    - - - type: ((Int -> [] [Char]), Int, [Char])
        - type: '[([] Char, Char)]'
  - - expr: maybe zip mempty
    - - - type: (Maybe Char, [Int], [Char])
        - type: '[(Int, Char)]'
  - - expr: let tpl = (,) in tpl (unzip mempty)
    - - - type: Int
        - type: (([Int], [Int]), Int)
      - - type: Char
        - type: (([Char], [Char]), Char)
      - - type: Char
        - type: (([Char], [Int]), Char)
  - - expr: let compose = (.) in compose compose elem
    - - - type: (Char, (Char -> Maybe Char), Char)
        - type: Bool
      - - type: (Int, (Char -> [] Int), Char)
        - type: Bool
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just
    - - - type: ((Int -> Int), Int)
        - type: Maybe Int
  - - expr: maybe (sequence (unzip mempty))
    - - - type: ((Char -> [([Int], Int)]), Maybe Char)
        - type: '[([Int], Int)]'
      - - type: ((Int -> [([Int], Char)]), Maybe Int)
        - type: '[([Int], Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just unzip)
    - - - type: ((Int -> [(Int, Int)]), Int)
        - type: Maybe ([Int], [Int])
      - - type: ((Char -> [(Int, Int)]), Char)
        - type: Maybe ([Int], [Int])
  - - expr: |-
        let compose = (.)
            zero = 0
          in compose compose (maybe zero)
    - - - type: ((Int -> Int), (Int -> Maybe Int), Int)
        - type: Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc (zip mempty)
    - - - type: ([Int], [(Int, Int)])
        - type: '[(Int, Int)]'
  - - expr: let conc = (<>) in conc (maybe mempty zip)
    - - - type: ((Maybe [Char] -> [Int] -> [(Char, Int)]), Maybe [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (prepend (unzip mempty))
    - - - type: ((Int -> [([Int], [Char])]), Int)
        - type: '[([Int], [Char])]'
  - - expr: maybe (zip mempty) mempty
    - - - type: (Maybe Int, [Char])
        - type: '[(Char, Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just length))
    - - - type: ((Int -> Maybe Int), Int)
        - type: Maybe Int
  - - expr: |-
        let just = Just
            zero = 0
            tpl = (,)
          in maybe (tpl (just zero))
    - - - type: ((Int -> Int -> (Maybe Int, Int)), Maybe Int, Int)
        - type: (Maybe Int, Int)
      - - type: ((Int -> Char -> (Maybe Int, Char)), Maybe Int, Char)
        - type: (Maybe Int, Char)
  - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
          in compose maybe (prepend zero)
    - - - type: ([Int], (Int -> [Int]), Maybe Int)
        - type: '[Int]'
  - - expr: let compose = (.) in compose foldMap (compose unzip)
    - - - type: ((Int -> [(Int, Char)]), Maybe Int)
        - type: ([Int], [Char])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend (zip mempty)
    - - - type: ([Char], [[(Int, Char)]])
        - type: '[[(Int, Char)]]'
      - - type: ([Int], [[(Char, Int)]])
        - type: '[[(Char, Int)]]'
  - - expr: let conc = (<>) in conc (zip mempty mempty)
    - - - type: '[(Char, Char)]'
        - type: '[(Char, Char)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend fromEnum)
    - - - type: ((Char -> Char), Char, [Int])
        - type: '[Int]'
      - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
      - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
  - - expr: let compose = (.) in compose (compose unzip mempty)
    - - - type: ((Char -> Char), Char)
        - type: ([Int], [Int])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (maybe mempty) prepend
    - - - type: (Char, Maybe [Char])
        - type: '[Char]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose fmap prepend)
    - - - type: ((Char -> Int), Char, Maybe [Int])
        - type: Maybe [Int]
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (maybe sequenceA prepend)
    - - - type: ((Int -> Maybe [Char]), Int, [[Char]])
        - type: '[[Char]]'
      - - type: ((Char -> Maybe [Char]), Char, [[Char]])
        - type: '[[Char]]'
  - - expr: let compose = (.) in compose (compose sequence sequence)
    - - - type: ((Char -> [] ([] Int)), Char)
        - type: '[] ([] Int)'
  - - expr: let compose = (.) in compose (compose zip) foldMap
    - - - type: ((Char -> [Char]), Maybe Char, [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose fmap (compose unzip)
    - - - type: ((Char -> [(Char, Int)]), Maybe Char)
        - type: Maybe ([Char], [Int])
  - - expr: let compose = (.) in compose (compose zip) zip
    - - - type: ([Int], [Int], [Char])
        - type: '[((Int, Int), Char)]'
      - - type: ([Char], [Char], [Char])
        - type: '[((Char, Char), Char)]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl fromEnum
    - - - type: (Int, Char)
        - type: (Int, Char)
      - - type: (Int, Int)
        - type: (Int, Int)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (maybe mempty prepend)
    - - - type: ((Char -> Maybe Int), Char, [Int])
        - type: '[Int]'
  - - expr: let just = Just in maybe (sequenceA (just unzip))
    - - - type: |-
            ((Char -> [(Char, Char)] -> Maybe ([Char], [Char])), Maybe Char,
             [(Char, Char)])
        - type: Maybe ([Char], [Char])
      - - type: |-
            ((Int -> [(Char, Char)] -> Maybe ([Char], [Char])), Maybe Int,
             [(Char, Char)])
        - type: Maybe ([Char], [Char])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just fromEnum)
    - - - type: ((Int -> Int), Int)
        - type: Maybe Int
      - - type: ((Char -> Char), Char)
        - type: Maybe Int
      - - type: ((Int -> Char), Int)
        - type: Maybe Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (compose conc unzip)
    - - - type: ((Int -> [(Int, Int)]), Int, ([Int], [Int]))
        - type: ([Int], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc zip) foldMap
    - - - type: ((Char -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose sequence sequenceA
    - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
  - - expr: let compose = (.) in compose fromEnum
    - - - type: ((Char -> Char), Char)
        - type: Int
      - - type: ((Int -> Int), Int)
        - type: Int
      - - type: ((Int -> Char), Int)
        - type: Int
      - - type: ((Char -> Int), Char)
        - type: Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose (zip mempty))
    - - - type: |-
            (((Char -> [Char]) -> Char -> [(Char, Char)]), (Char -> [Char]),
             Char)
        - type: '[(Char, Char)]'
      - - type: (((Char -> [Int]) -> Char -> [(Char, Int)]), (Char -> [Int]), Char)
        - type: '[(Char, Int)]'
  - - expr: |-
        let just = Just
            zero = 0
          in maybe (just zero) just
    - - - type: Maybe Int
        - type: Maybe Int
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose tpl (tpl zero)
    - - - type: (Char, Int)
        - type: ((Int, Char), Int)
  - - expr: let compose = (.) in compose (compose toEnum fromEnum)
    - - - type: ((Int -> Char), Int)
        - type: Char
  - - expr: let prepend = (:) in maybe mempty prepend
    - - - type: (Maybe Int, [Int])
        - type: '[Int]'
  - - expr: let prepend = (:) in prepend
    - - - type: (Char, [Char])
        - type: '[Char]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (compose zip) conc
    - - - type: ([Int], [Int], [Char])
        - type: '[(Int, Char)]'
  - - expr: |-
        let zero = 0
            tpl = (,)
          in tpl (tpl zero zero)
    - - - type: Char
        - type: ((Int, Int), Char)
  - - expr: maybe unzip mempty
    - - - type: (Maybe Char, [(Char, Int)])
        - type: ([Char], [Int])
      - - type: (Maybe Int, [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: |-
        let just = Just
            zero = 0
            prepend = (:)
          in maybe (prepend (just zero))
    - - - type: ((Int -> [Maybe Int] -> [Maybe Int]), Maybe Int, [Maybe Int])
        - type: '[Maybe Int]'
  - - expr: let compose = (.) in compose (maybe (unzip mempty))
    - - - type: ((Char -> Int -> ([Char], [Char])), Char, Maybe Int)
        - type: ([Char], [Char])
  - - expr: let compose = (.) in compose (maybe mempty) zip
    - - - type: ([Int], Maybe [Char])
        - type: '[(Int, Char)]'
      - - type: ([Char], Maybe [Char])
        - type: '[(Char, Char)]'
      - - type: ([Int], Maybe [Int])
        - type: '[(Int, Int)]'
  - - expr: let zero = 0 in maybe (maybe zero) maybe
    - - - type: (Maybe Int, (Int -> Int), Maybe Int)
        - type: Int
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose compose tpl
    - - - type: (Char, (Int -> Int), Int)
        - type: (Char, Int)
      - - type: (Int, (Int -> Int), Int)
        - type: (Int, Int)
      - - type: (Int, (Int -> Char), Int)
        - type: (Int, Char)
  - - expr: let conc = (<>) in conc (conc zip zip)
    - - - type: (([Char] -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose compose (compose just)
    - - - type: ((Char -> Int), (Int -> Char), Int)
        - type: Maybe Int
  - - expr: |-
        let just = Just
            compose = (.)
            zero = 0
            prepend = (:)
          in compose (prepend (just zero))
    - - - type: ((Int -> [Maybe Int]), Int)
        - type: '[Maybe Int]'
  - - expr: let prepend = (:) in maybe prepend mempty
    - - - type: (Maybe Int, Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose zip sequenceA)
    - - - type: |-
            ((Maybe [Char] -> [Int] -> [(Maybe Char, Int)]), Maybe [Char],
             [Int])
        - type: '[(Maybe Char, Int)]'
      - - type: |-
            ((Maybe [Char] -> [Char] -> [(Maybe Char, Char)]), Maybe [Char],
             [Char])
        - type: '[(Maybe Char, Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just just
    - - - type: Char
        - type: Maybe (Maybe Char)
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc (zip mempty))
    - - - type: ((Int -> [Char] -> [(Char, Char)]), Int, [Char])
        - type: '[(Char, Char)]'
      - - type: ((Char -> [Char] -> [(Int, Char)]), Char, [Char])
        - type: '[(Int, Char)]'
      - - type: ((Int -> [Char] -> [(Int, Char)]), Int, [Char])
        - type: '[(Int, Char)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
            tpl = (,)
          in compose (compose tpl) prepend
    - - - type: (Int, [Int], Int)
        - type: ([Int], Int)
      - - type: (Char, [Char], Int)
        - type: ([Char], Int)
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (conc prepend mempty)
    - - - type: ((Char -> Char), Char, [Char])
        - type: '[Char]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose tpl toEnum)
    - - - type: ((Char -> Int), Char, Int)
        - type: (Int, Int)
      - - type: ((Char -> Int), Char, Char)
        - type: (Char, Char)
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose unzip sequenceA)
    - - - type: (((Char, [Int]) -> ([Char], [Int])), (Char, [Int]))
        - type: ([Char], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
            zero = 0
            prepend = (:)
          in conc (compose (prepend zero))
    - - - type: (((Int -> [Int]) -> Int -> [Int]), (Int -> [Int]), Int)
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
          in compose zip (prepend zero)
    - - - type: ([Int], [Char])
        - type: '[(Int, Char)]'
  - - expr: let conc = (<>) in conc (conc mempty zip)
    - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose (compose toEnum length)
    - - - type: ((Int -> [] Char), Int)
        - type: Int
      - - type: ((Int -> Maybe Int), Int)
        - type: Char
      - - type: ((Char -> Maybe Int), Char)
        - type: Char
  - - expr: let compose = (.) in compose compose zip
    - - - type: ([Int], (Char -> [Int]), Char)
        - type: '[(Int, Int)]'
  - - expr: let conc = (<>) in maybe (conc unzip mempty)
    - - - type: |-
            ((Int -> [(Char, Int)] -> ([Char], [Int])), Maybe Int,
             [(Char, Int)])
        - type: ([Char], [Int])
      - - type: |-
            ((Char -> [(Char, Char)] -> ([Char], [Char])), Maybe Char,
             [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (conc mempty prepend)
    - - - type: ((Char -> Char), Char, [Char])
        - type: '[Char]'
      - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose tpl) tpl
    - - - type: (Char, Int, Char)
        - type: ((Char, Int), Char)
      - - type: (Int, Char, Char)
        - type: ((Int, Char), Char)
      - - type: (Char, Char, Char)
        - type: ((Char, Char), Char)
      - - type: (Char, Char, Int)
        - type: ((Char, Char), Int)
  - - expr: maybe (zip mempty)
    - - - type: ((Int -> [Int] -> [(Char, Int)]), Maybe Int, [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose sequenceA unzip
    - - - type: '[(Int, Char)]'
        - type: '[([Int], Char)]'
      - - type: '[(Char, Int)]'
        - type: '[([Char], Int)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose fmap prepend
    - - - type: (Int, Maybe [Int])
        - type: Maybe [Int]
      - - type: (Char, Maybe [Char])
        - type: Maybe [Char]
  - - expr: let tpl = (,) in tpl
    - - - type: (Int, Char)
        - type: (Int, Char)
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in conc (compose prepend fromEnum)
    - - - type: ((Char -> [Int] -> [Int]), Char, [Int])
        - type: '[Int]'
  - - expr: |-
        let conc = (<>)
            just = Just
            compose = (.)
            prepend = (:)
          in conc (compose prepend just)
    - - - type: ((Int -> [Maybe Int] -> [Maybe Int]), Int, [Maybe Int])
        - type: '[Maybe Int]'
  - - expr: let compose = (.) in maybe (compose sequence unzip)
    - - - type: |-
            ((Int -> [(Int, Char)] -> [([Int], Char)]), Maybe Int,
             [(Int, Char)])
        - type: '[([Int], Char)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend) zip
    - - - type: ([Int], [Char], [[(Int, Char)]])
        - type: '[[(Int, Char)]]'
      - - type: ([Char], [Char], [[(Char, Char)]])
        - type: '[[(Char, Char)]]'
  - - expr: let compose = (.) in compose (compose zip sequenceA)
    - - - type: ((Int -> [] [Int]), Int, [Char])
        - type: '[([] Int, Char)]'
  - - expr: let compose = (.) in compose maybe unzip
    - - - type: ([(Int, Char)], (Char -> ([Int], [Char])), Maybe Char)
        - type: ([Int], [Char])
      - - type: ([(Char, Int)], (Int -> ([Char], [Int])), Maybe Int)
        - type: ([Char], [Int])
      - - type: ([(Char, Int)], (Char -> ([Char], [Int])), Maybe Char)
        - type: ([Char], [Int])
  - - expr: let prepend = (:) in prepend (zip mempty mempty)
    - - - type: '[[(Char, Char)]]'
        - type: '[[(Char, Char)]]'
      - - type: '[[(Int, Char)]]'
        - type: '[[(Int, Char)]]'
  - - expr: maybe
    - - - type: (Char, (Int -> Char), Maybe Int)
        - type: Char
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just length)
    - - - type: ((Int -> Maybe Char), Int)
        - type: Maybe Int
  - - expr: let conc = (<>) in conc unzip
    - - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: let compose = (.) in compose (compose sequenceA unzip)
    - - - type: ((Int -> [(Int, Char)]), Int)
        - type: '[([Int], Char)]'
      - - type: ((Char -> [(Int, Char)]), Char)
        - type: '[([Int], Char)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (compose unzip) conc
    - - - type: ([(Int, Char)], [(Int, Char)])
        - type: ([Int], [Char])
      - - type: ([(Int, Int)], [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            zero = 0
            prepend = (:)
          in prepend (just zero)
    - - - type: '[Maybe Int]'
        - type: '[Maybe Int]'
  - - expr: let conc = (<>) in maybe (conc unzip) mempty
    - - - type: (Maybe Char, ([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: let compose = (.) in maybe (compose unzip sequenceA)
    - - - type: |-
            ((Int -> (Char, [Int]) -> ([Char], [Int])), Maybe Int,
             (Char, [Int]))
        - type: ([Char], [Int])
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl zero) fromEnum
    - - - type: Char
        - type: (Int, Int)
  - - expr: |-
        let just = Just
            compose = (.)
            tpl = (,)
          in compose tpl just
    - - - type: (Char, Int)
        - type: (Maybe Char, Int)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequenceA (just just))
    - - - type: ((Int -> Int), Int)
        - type: Maybe (Maybe Int)
  - - expr: let compose = (.) in compose (compose sequenceA) fmap
    - - - type: ((Char -> [] Int), Maybe Char)
        - type: '[] (Maybe Int)'
  - - expr: maybe mempty zip
    - - - type: (Maybe [Char], [Int])
        - type: '[(Char, Int)]'
      - - type: (Maybe [Int], [Char])
        - type: '[(Int, Char)]'
      - - type: (Maybe [Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: let compose = (.) in maybe (compose unzip mempty)
    - - - type: ((Char -> Char -> ([Int], [Char])), Maybe Char, Char)
        - type: ([Int], [Char])
  - - expr: let conc = (<>) in maybe (conc unzip unzip)
    - - - type: |-
            ((Char -> [(Char, Char)] -> ([Char], [Char])), Maybe Char,
             [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (conc prepend) mempty
    - - - type: (Int, Char, [Char])
        - type: '[Char]'
  - - expr: let compose = (.) in compose maybe toEnum
    - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
  - - expr: let compose = (.) in compose length
    - - - type: ((Int -> Maybe Char), Int)
        - type: Int
  - - expr: let compose = (.) in compose compose (compose fromEnum)
    - - - type: ((Int -> Int), (Char -> Int), Char)
        - type: Int
  - - expr: let compose = (.) in compose maybe (zip mempty)
    - - - type: ([Int], (Int -> [(Int, Int)]), Maybe Int)
        - type: '[(Int, Int)]'
  - - expr: maybe mempty unzip
    - - - type: Maybe [(Int, Char)]
        - type: ([Int], [Char])
      - - type: Maybe [(Char, Char)]
        - type: ([Char], [Char])
  - - expr: let conc = (<>) in conc (conc unzip mempty)
    - - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: |-
        let just = Just
            compose = (.)
            prepend = (:)
          in compose (compose just) prepend
    - - - type: (Char, [Char])
        - type: Maybe [Char]
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose tpl) zip
    - - - type: ([Char], [Char], Char)
        - type: ([(Char, Char)], Char)
      - - type: ([Char], [Int], Char)
        - type: ([(Char, Int)], Char)
      - - type: ([Int], [Char], Int)
        - type: ([(Int, Char)], Int)
  - - expr: let prepend = (:) in prepend (sequenceA (unzip mempty))
    - - - type: '[[([Char], Char)]]'
        - type: '[[([Char], Char)]]'
      - - type: '[[([Int], Char)]]'
        - type: '[[([Int], Char)]]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just just))
    - - - type: ((Char -> Int), Char)
        - type: Maybe (Maybe Int)
      - - type: ((Int -> Int), Int)
        - type: Maybe (Maybe Int)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just just)
    - - - type: ((Char -> Int), Char)
        - type: Maybe (Maybe Int)
  - - expr: let conc = (<>) in conc (zip mempty)
    - - - type: (([Char] -> [(Int, Char)]), [Char])
        - type: '[(Int, Char)]'
  - - expr: let prepend = (:) in maybe (prepend (unzip mempty))
    - - - type: |-
            ((Char -> [([Int], [Int])] -> [([Int], [Int])]), Maybe Char,
             [([Int], [Int])])
        - type: '[([Int], [Int])]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl
    - - - type: ((Char -> Int), Char, Int)
        - type: (Int, Int)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose unzip) prepend
    - - - type: ((Int, Int), [(Int, Int)])
        - type: ([Int], [Int])
      - - type: ((Int, Char), [(Int, Char)])
        - type: ([Int], [Char])
      - - type: ((Char, Char), [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: |-
        let zero = 0
            prepend = (:)
          in zip (prepend zero mempty)
    - - - type: '[Char]'
        - type: '[(Int, Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose sequence just)
    - - - type: ((Int -> Maybe Char), Int)
        - type: Maybe (Maybe Char)
      - - type: ((Char -> Maybe Char), Char)
        - type: Maybe (Maybe Char)
  - - expr: maybe (maybe mempty unzip)
    - - - type: |-
            ((Char -> Maybe [(Char, Int)] -> ([Char], [Int])), Maybe Char,
             Maybe [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: |-
        let zero = 0
            tpl = (,)
          in tpl zero
    - - - type: Int
        - type: (Int, Int)
  - - expr: |-
        let just = Just
            compose = (.)
            zero = 0
            tpl = (,)
          in compose just (tpl zero)
    - - - type: Char
        - type: Maybe (Int, Char)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequenceA (just unzip))
    - - - type: ((Char -> [(Char, Char)]), Char)
        - type: Maybe ([Char], [Char])
      - - type: ((Char -> [(Int, Int)]), Char)
        - type: Maybe ([Int], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just) zip
    - - - type: ([Int], [Int])
        - type: Maybe [(Int, Int)]
  - - expr: let compose = (.) in compose compose (compose sequenceA)
    - - - type: ((Char -> [] (Maybe Char)), (Int -> Char), Int)
        - type: Maybe ([] Char)
  - - expr: let compose = (.) in compose (maybe unzip) mempty
    - - - type: (Int, Maybe Int, [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: maybe (unzip mempty) sequenceA
    - - - type: Maybe [([Char], Int)]
        - type: ([Char], [Int])
      - - type: Maybe [([Int], Char)]
        - type: ([Int], [Char])
      - - type: Maybe [([Int], Int)]
        - type: ([Int], [Int])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend unzip)
    - - - type: ((Int -> [(Char, Int)]), Int, [([Char], [Int])])
        - type: '[([Char], [Int])]'
      - - type: ((Char -> [(Int, Int)]), Char, [([Int], [Int])])
        - type: '[([Int], [Int])]'
  - - expr: let compose = (.) in compose compose (compose toEnum)
    - - - type: ((Int -> Int), (Char -> Int), Char)
        - type: Int
      - - type: ((Int -> Int), (Int -> Int), Int)
        - type: Int
  - - expr: |-
        let conc = (<>)
            just = Just
          in conc (just (unzip mempty))
    - - - type: Maybe ([Char], [Int])
        - type: Maybe ([Char], [Int])
      - - type: Maybe ([Int], [Int])
        - type: Maybe ([Int], [Int])
  - - expr: let compose = (.) in compose (compose fmap) maybe
    - - - type: (Char, (Char -> Char), Maybe (Maybe Char))
        - type: Maybe Char
  - - expr: let compose = (.) in compose zip
    - - - type: ((Int -> [Char]), Int, [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose compose (compose length)
    - - - type: ((Char -> Maybe Char), (Int -> Char), Int)
        - type: Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc (compose unzip)
    - - - type: ((Char -> [(Int, Int)]), (Char -> ([Int], [Int])), Char)
        - type: ([Int], [Int])
      - - type: ((Int -> [(Int, Char)]), (Int -> ([Int], [Char])), Int)
        - type: ([Int], [Char])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend fromEnum
    - - - type: (Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequenceA (just length))
    - - - type: ((Int -> Maybe Int), Int)
        - type: Maybe Int
      - - type: ((Char -> Maybe Int), Char)
        - type: Maybe Int
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend
    - - - type: ((Char -> Char), Char, [Char])
        - type: '[Char]'
      - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
      - - type: ((Int -> Char), Int, [Char])
        - type: '[Char]'
  - - expr: let compose = (.) in compose (maybe mempty zip)
    - - - type: ((Int -> Maybe [Int]), Int, [Char])
        - type: '[(Int, Char)]'
      - - type: ((Int -> Maybe [Int]), Int, [Int])
        - type: '[(Int, Int)]'
  - - expr: let compose = (.) in compose unzip sequenceA
    - - - type: (Char, [Char])
        - type: ([Char], [Char])
      - - type: (Int, [Char])
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose (compose fmap zip)
    - - - type: ((Char -> [Int]), Char, Maybe [Int])
        - type: Maybe [(Int, Int)]
  - - expr: |-
        let zero = 0
            prepend = (:)
          in maybe (prepend zero) mempty
    - - - type: (Maybe Int, [Int])
        - type: '[Int]'
  - - expr: let compose = (.) in compose foldMap (maybe unzip)
    - - - type: |-
            ((Char -> [(Int, Char)] -> ([Int], [Char])), Maybe (Maybe Char),
             [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose (compose zip) mempty
    - - - type: (Int, Int, [Int])
        - type: '[(Char, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just sequenceA))
    - - - type: ((Int -> [] ([] Char)), Int)
        - type: Maybe ([] ([] Char))
  - - expr: let compose = (.) in compose unzip mempty
    - - - type: Char
        - type: ([Char], [Char])
      - - type: Char
        - type: ([Char], [Int])
  - - expr: |-
        let conc = (<>)
            zero = 0
            prepend = (:)
          in maybe (prepend zero) conc
    - - - type: (Maybe [Int], [Int])
        - type: '[Int]'
  - - expr: let conc = (<>) in maybe (conc (unzip mempty))
    - - - type: |-
            ((Char -> ([Int], [Char]) -> ([Int], [Char])), Maybe Char,
             ([Int], [Char]))
        - type: ([Int], [Char])
      - - type: |-
            ((Int -> ([Char], [Int]) -> ([Char], [Int])), Maybe Int,
             ([Char], [Int]))
        - type: ([Char], [Int])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (maybe sequence prepend)
    - - - type: ((Char -> Maybe [Char]), Char, [[Char]])
        - type: '[[Char]]'
      - - type: ((Int -> Maybe [Char]), Int, [[Char]])
        - type: '[[Char]]'
      - - type: ((Int -> Maybe [Int]), Int, [[Int]])
        - type: '[[Int]]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just sequence)
    - - - type: ((Char -> [] ([] Char)), Char)
        - type: Maybe ([] ([] Char))
  - - expr: maybe (unzip mempty) mempty
    - - - type: Maybe Int
        - type: ([Char], [Int])
  - - expr: maybe (zip mempty) zip
    - - - type: (Maybe [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: let just = Just in just
    - - - type: Char
        - type: Maybe Char
  - - expr: let conc = (<>) in conc (conc zip mempty)
    - - - type: (([Char] -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in maybe (compose sequenceA unzip)
    - - - type: ((Int -> [(Int, Int)] -> [([Int], Int)]), Maybe Int, [(Int, Int)])
        - type: '[([Int], Int)]'
      - - type: |-
            ((Char -> [(Int, Int)] -> [([Int], Int)]), Maybe Char,
             [(Int, Int)])
        - type: '[([Int], Int)]'
      - - type: |-
            ((Char -> [(Char, Char)] -> [([Char], Char)]), Maybe Char,
             [(Char, Char)])
        - type: '[([Char], Char)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose compose (conc unzip)
    - - - type: (([(Char, Int)] -> ([Char], [Int])), (Int -> [(Char, Int)]), Int)
        - type: ([Char], [Int])
  - - expr: let prepend = (:) in maybe sequence prepend
    - - - type: (Maybe [Int], [[Int]])
        - type: '[[Int]]'
  - - expr: let compose = (.) in compose elem unzip
    - - - type: ([(Char, Char)], Maybe ([Char], [Char]))
        - type: Bool
  - - expr: let compose = (.) in compose toEnum fromEnum
    - - - type: Int
        - type: Int
      - - type: Char
        - type: Char
  - - expr: let compose = (.) in compose maybe fromEnum
    - - - type: (Char, (Int -> Int), Maybe Int)
        - type: Int
  - - expr: let compose = (.) in compose (maybe mempty unzip)
    - - - type: ((Int -> Maybe [(Int, Int)]), Int)
        - type: ([Int], [Int])
      - - type: ((Char -> Maybe [(Char, Int)]), Char)
        - type: ([Char], [Int])
  - - expr: elem
    - - - type: (Int, Maybe Int)
        - type: Bool
  - - expr: let compose = (.) in compose compose (compose unzip)
    - - - type: ((Int -> [(Char, Int)]), (Int -> Int), Int)
        - type: ([Char], [Int])
      - - type: ((Char -> [(Char, Int)]), (Int -> Char), Int)
        - type: ([Char], [Int])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend toEnum)
    - - - type: ((Char -> Int), Char, [Char])
        - type: '[Char]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just (zip mempty)
    - - - type: '[Char]'
        - type: Maybe [(Char, Char)]
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose maybe (tpl zero)
    - - - type: (Int, (Int -> (Int, Int)), Maybe Int)
        - type: (Int, Int)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose zip) prepend
    - - - type: (Int, [Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: let compose = (.) in compose (compose zip mempty)
    - - - type: ((Char -> Char), Char, [Char])
        - type: '[(Int, Char)]'
      - - type: ((Char -> Char), Char, [Char])
        - type: '[(Char, Char)]'
  - - expr: let conc = (<>) in conc (conc unzip unzip)
    - - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (tpl (unzip mempty))
    - - - type: ((Int -> Char), Int)
        - type: (([Char], [Char]), Char)
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl zero)
    - - - type: ((Char -> Int), Char)
        - type: (Int, Int)
      - - type: ((Int -> Int), Int)
        - type: (Int, Int)
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose tpl fromEnum)
    - - - type: ((Int -> Int), Int, Char)
        - type: (Int, Char)
  - - expr: let conc = (<>) in conc (maybe (unzip mempty))
    - - - type: |-
            (((Char -> ([Char], [Int])) -> Maybe Char -> ([Char], [Int])),
             (Char -> ([Char], [Int])), Maybe Char)
        - type: ([Char], [Int])
      - - type: |-
            (((Int -> ([Int], [Int])) -> Maybe Int -> ([Int], [Int])),
             (Int -> ([Int], [Int])), Maybe Int)
        - type: ([Int], [Int])
      - - type: |-
            (((Int -> ([Int], [Char])) -> Maybe Int -> ([Int], [Char])),
             (Int -> ([Int], [Char])), Maybe Int)
        - type: ([Int], [Char])
  - - expr: maybe unzip
    - - - type: |-
            ((Int -> [(Int, Char)] -> ([Int], [Char])), Maybe Int,
             [(Int, Char)])
        - type: ([Int], [Char])
      - - type: |-
            ((Char -> [(Int, Int)] -> ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: |-
        let zero = 0
            prepend = (:)
          in maybe (prepend zero mempty)
    - - - type: ((Char -> [Int]), Maybe Char)
        - type: '[Int]'
  - - expr: let compose = (.) in compose (compose fmap) compose
    - - - type: ((Char -> Int), (Int -> Char), Maybe Int)
        - type: Maybe Int
  - - expr: let compose = (.) in compose fmap zip
    - - - type: ([Int], Maybe [Char])
        - type: Maybe [(Int, Char)]
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just) elem
    - - - type: (Char, Maybe Char)
        - type: Maybe Bool
      - - type: (Int, Maybe Int)
        - type: Maybe Bool
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose fmap (conc unzip)
    - - - type: (([(Char, Char)] -> ([Char], [Char])), Maybe [(Char, Char)])
        - type: Maybe ([Char], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose unzip mempty)
    - - - type: ((Char -> ([Int], [Char])), Char)
        - type: ([Int], [Char])
      - - type: ((Int -> ([Int], [Char])), Int)
        - type: ([Int], [Char])
      - - type: ((Char -> ([Char], [Char])), Char)
        - type: ([Char], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip) mempty
    - - - type: (Char, [(Int, Char)])
        - type: ([Int], [Char])
      - - type: (Char, [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in conc (compose prepend unzip)
    - - - type: |-
            (([(Int, Char)] -> [([Int], [Char])] -> [([Int], [Char])]),
             [(Int, Char)], [([Int], [Char])])
        - type: '[([Int], [Char])]'
      - - type: |-
            (([(Int, Int)] -> [([Int], [Int])] -> [([Int], [Int])]),
             [(Int, Int)], [([Int], [Int])])
        - type: '[([Int], [Int])]'
  - - expr: let compose = (.) in compose (compose length)
    - - - type: ((Char -> Int -> [] Int), Char, Int)
        - type: Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose unzip)
    - - - type: |-
            (((Char -> [(Char, Char)]) -> Char -> ([Char], [Char])),
             (Char -> [(Char, Char)]), Char)
        - type: ([Char], [Char])
  - - expr: |-
        let just = Just
            tpl = (,)
          in tpl (just (unzip mempty))
    - - - type: Char
        - type: (Maybe ([Char], [Char]), Char)
  - - expr: |-
        let compose = (.)
            zero = 0
          in compose (maybe zero fromEnum)
    - - - type: ((Int -> Maybe Char), Int)
        - type: Int
  - - expr: let compose = (.) in compose (compose toEnum toEnum)
    - - - type: ((Int -> Int), Int)
        - type: Int
      - - type: ((Int -> Int), Int)
        - type: Char
- - - expr: let compose = (.) in compose unzip (zip mempty)
    - - - type: '[Char]'
        - type: ([Char], [Char])
      - - type: '[Char]'
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose zip (sequenceA mempty)
    - - - type: (Char, [Int])
        - type: '[(Int, Int)]'
  - - expr: let compose = (.) in compose (compose unzip) zip
    - - - type: ([Char], [Char])
        - type: ([Char], [Char])
      - - type: ([Int], [Int])
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose unzip
    - - - type: ((Int -> [(Int, Char)]), Int)
        - type: ([Int], [Char])
  - - expr: |-
        let just = Just
            compose = (.)
            tpl = (,)
          in compose (compose tpl just)
    - - - type: ((Char -> Char), Char, Int)
        - type: (Maybe Char, Int)
      - - type: ((Int -> Int), Int, Char)
        - type: (Maybe Int, Char)
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl unzip
    - - - type: ([(Int, Char)], Char)
        - type: (([Int], [Char]), Char)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose compose prepend
    - - - type: (Char, (Int -> [Char]), Int)
        - type: '[Char]'
      - - type: (Int, (Char -> [Int]), Char)
        - type: '[Int]'
  - - expr: |-
        let zero = 0
            prepend = (:)
          in maybe (prepend zero)
    - - - type: ((Int -> [Int] -> [Int]), Maybe Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose fmap (compose just)
    - - - type: ((Int -> Int), Maybe Int)
        - type: Maybe (Maybe Int)
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc mempty zip)
    - - - type: ((Char -> [Int]), Char, [Char])
        - type: '[(Int, Char)]'
  - - expr: let compose = (.) in compose (maybe unzip mempty)
    - - - type: ((Char -> Maybe Char), Char, [(Int, Int)])
        - type: ([Int], [Int])
      - - type: ((Char -> Maybe Char), Char, [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: let compose = (.) in compose (compose unzip)
    - - - type: ((Int -> Char -> [(Int, Char)]), Int, Char)
        - type: ([Int], [Char])
      - - type: ((Int -> Int -> [(Int, Char)]), Int, Int)
        - type: ([Int], [Char])
  - - expr: zip
    - - - type: ([Int], [Char])
        - type: '[(Int, Char)]'
      - - type: ([Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose foldMap zip)
    - - - type: (([Int] -> Maybe [Int] -> [(Int, Int)]), [Int], Maybe [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc mempty unzip)
    - - - type: ((Int -> [(Char, Char)]), Int)
        - type: ([Char], [Char])
      - - type: ((Int -> [(Int, Char)]), Int)
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose elem toEnum
    - - - type: (Int, Maybe Char)
        - type: Bool
      - - type: (Int, Maybe Int)
        - type: Bool
  - - expr: let compose = (.) in compose zip (sequence mempty)
    - - - type: (Char, [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip)
    - - - type: ((Int -> [(Int, Int)] -> ([Int], [Int])), Int, [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc zip
    - - - type: ([Char], ([Char] -> [(Char, Char)]), [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose sequence
    - - - type: ((Char -> Maybe ([] Int)), Char)
        - type: '[] (Maybe Int)'
  - - expr: let conc = (<>) in conc (unzip mempty)
    - - - type: ([Int], [Char])
        - type: ([Int], [Char])
      - - type: ([Char], [Int])
        - type: ([Char], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just unzip
    - - - type: '[(Int, Int)]'
        - type: Maybe ([Int], [Int])
  - - expr: unzip
    - - - type: '[(Char, Char)]'
        - type: ([Char], [Char])
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc (conc mempty prepend)
    - - - type: ((Char -> [Char] -> [Char]), Char, [Char])
        - type: '[Char]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl (zip mempty)
    - - - type: ([Char], Char)
        - type: ([(Char, Char)], Char)
      - - type: ([Int], Int)
        - type: ([(Char, Int)], Int)
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc (conc unzip)
    - - - type: |-
            (([(Int, Char)] -> ([Int], [Char])),
             ([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - type: |-
            (([(Char, Int)] -> ([Char], [Int])),
             ([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: let compose = (.) in compose sequenceA
    - - - type: ((Char -> Maybe ([] Char)), Char)
        - type: '[] (Maybe Char)'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose unzip sequence)
    - - - type: (((Int, [Int]) -> ([Int], [Int])), (Int, [Int]))
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose toEnum
    - - - type: ((Char -> Int), Char)
        - type: Char
  - - expr: let compose = (.) in compose toEnum length
    - - - type: Maybe Char
        - type: Int
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc (conc prepend mempty)
    - - - type: ((Char -> [Char] -> [Char]), Char, [Char])
        - type: '[Char]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose tpl sequence)
    - - - type: ((Char -> [] ([] Char)), Char, Int)
        - type: ([] ([] Char), Int)
  - - expr: let compose = (.) in compose (compose elem toEnum)
    - - - type: ((Int -> Int), Int, Maybe Int)
        - type: Bool
      - - type: ((Int -> Int), Int, Maybe Char)
        - type: Bool
      - - type: ((Char -> Int), Char, Maybe Char)
        - type: Bool
  - - expr: let compose = (.) in compose compose fmap
    - - - type: ((Char -> Char), (Int -> [] Char), Int)
        - type: '[] Char'
      - - type: ((Int -> Int), (Char -> [] Int), Char)
        - type: '[] Int'
  - - expr: let compose = (.) in compose (zip mempty)
    - - - type: ((Int -> [Char]), Int)
        - type: '[(Int, Char)]'
  - - expr: |-
        let zero = 0
            tpl = (,)
          in maybe (tpl zero) tpl
    - - - type: (Maybe Int, Char)
        - type: (Int, Char)
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl toEnum
    - - - type: (Int, Int)
        - type: (Char, Int)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend unzip
    - - - type: ([(Int, Int)], [([Int], [Int])])
        - type: '[([Int], [Int])]'
  - - expr: |-
        let conc = (<>)
            just = Just
            compose = (.)
          in conc (compose just unzip)
    - - - type: (([(Int, Int)] -> Maybe ([Int], [Int])), [(Int, Int)])
        - type: Maybe ([Int], [Int])
      - - type: (([(Int, Char)] -> Maybe ([Int], [Char])), [(Int, Char)])
        - type: Maybe ([Int], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (compose conc) prepend
    - - - type: (Int, [Int], [Int])
        - type: '[Int]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip unzip)
    - - - type: ((Char -> [(Char, Char)]), Char)
        - type: ([Char], [Char])
  - - expr: let compose = (.) in maybe (compose unzip) mempty
    - - - type: (Maybe Char, (Int -> [(Char, Int)]), Int)
        - type: ([Char], [Int])
      - - type: (Maybe Char, (Char -> [(Char, Int)]), Char)
        - type: ([Char], [Int])
  - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
          in compose (compose (prepend zero))
    - - - type: ((Char -> Int -> [Int]), Char, Int)
        - type: '[Int]'
      - - type: ((Char -> Char -> [Int]), Char, Char)
        - type: '[Int]'
  - - expr: let conc = (<>) in conc zip
    - - - type: (([Int] -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: let compose = (.) in compose fmap (compose sequenceA)
    - - - type: ((Int -> Maybe ([] Int)), Maybe Int)
        - type: Maybe ([] (Maybe Int))
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc zip zip)
    - - - type: ((Char -> [Int]), Char, [Char])
        - type: '[(Int, Char)]'
      - - type: ((Int -> [Int]), Int, [Char])
        - type: '[(Int, Char)]'
  - - expr: let compose = (.) in compose (compose zip sequence)
    - - - type: ((Char -> Maybe [Char]), Char, [Int])
        - type: '[(Maybe Char, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just fromEnum))
    - - - type: ((Int -> Char), Int)
        - type: Maybe Int
      - - type: ((Int -> Int), Int)
        - type: Maybe Int
      - - type: ((Char -> Int), Char)
        - type: Maybe Int
  - - expr: maybe zip mempty
    - - - type: (Maybe Char, [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose compose elem
    - - - type: (Int, (Int -> [] Int), Int)
        - type: Bool
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just
    - - - type: ((Char -> Int), Char)
        - type: Maybe Int
      - - type: ((Int -> Char), Int)
        - type: Maybe Char
  - - expr: maybe (sequence (unzip mempty))
    - - - type: ((Char -> [([Char], Char)]), Maybe Char)
        - type: '[([Char], Char)]'
      - - type: ((Int -> [([Char], Char)]), Maybe Int)
        - type: '[([Char], Char)]'
  - - expr: let conc = (<>) in maybe (conc mempty unzip)
    - - - type: |-
            ((Int -> [(Int, Char)] -> ([Int], [Char])), Maybe Int,
             [(Int, Char)])
        - type: ([Int], [Char])
      - - type: |-
            ((Char -> [(Int, Char)] -> ([Int], [Char])), Maybe Char,
             [(Int, Char)])
        - type: ([Int], [Char])
      - - type: |-
            ((Char -> [(Int, Int)] -> ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: ([Int], [Int])
      - - type: |-
            ((Char -> [(Char, Int)] -> ([Char], [Int])), Maybe Char,
             [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: let zero = 0 in maybe zero
    - - - type: ((Int -> Int), Maybe Int)
        - type: Int
  - - expr: let compose = (.) in compose zip sequenceA
    - - - type: (Maybe [Char], [Int])
        - type: '[(Maybe Char, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just unzip)
    - - - type: ((Int -> [(Char, Char)]), Int)
        - type: Maybe ([Char], [Char])
  - - expr: |-
        let compose = (.)
            zero = 0
          in compose compose (maybe zero)
    - - - type: ((Int -> Int), (Char -> Maybe Int), Char)
        - type: Int
      - - type: ((Char -> Int), (Int -> Maybe Char), Int)
        - type: Int
  - - expr: let conc = (<>) in conc (maybe mempty zip)
    - - - type: ((Maybe [Char] -> [Char] -> [(Char, Char)]), Maybe [Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (prepend (unzip mempty))
    - - - type: ((Char -> [([Int], [Char])]), Char)
        - type: '[([Int], [Char])]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose zip mempty)
    - - - type: ((Char -> [Int] -> [(Int, Int)]), Char, [Int])
        - type: '[(Int, Int)]'
      - - type: ((Int -> [Int] -> [(Char, Int)]), Int, [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose (compose zip) fmap
    - - - type: ((Int -> Char), [Int], [Char])
        - type: '[(Char, Char)]'
  - - expr: maybe (zip mempty) mempty
    - - - type: (Maybe Char, [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just length))
    - - - type: ((Char -> [] Char), Char)
        - type: Maybe Int
      - - type: ((Char -> [] Int), Char)
        - type: Maybe Int
  - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
          in compose maybe (prepend zero)
    - - - type: ([Int], (Char -> [Int]), Maybe Char)
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend (zip mempty)
    - - - type: ([Char], [[(Char, Char)]])
        - type: '[[(Char, Char)]]'
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl zero) unzip
    - - - type: '[(Int, Int)]'
        - type: (Int, ([Int], [Int]))
  - - expr: let conc = (<>) in conc (zip mempty mempty)
    - - - type: '[(Int, Int)]'
        - type: '[(Int, Int)]'
  - - expr: let compose = (.) in compose (compose unzip mempty)
    - - - type: ((Char -> Int), Char)
        - type: ([Char], [Char])
      - - type: ((Char -> Int), Char)
        - type: ([Int], [Char])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose fmap prepend)
    - - - type: ((Char -> Char), Char, Maybe [Char])
        - type: Maybe [Char]
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend length)
    - - - type: ((Int -> [] Char), Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (maybe sequenceA prepend)
    - - - type: ((Int -> Maybe [Int]), Int, [[Int]])
        - type: '[[Int]]'
  - - expr: let compose = (.) in compose (compose sequence sequence)
    - - - type: ((Int -> Maybe ([] Int)), Int)
        - type: Maybe ([] Int)
      - - type: ((Int -> [] (Maybe Int)), Int)
        - type: '[] (Maybe Int)'
  - - expr: let compose = (.) in compose (compose zip) foldMap
    - - - type: ((Char -> [Char]), Maybe Char, [Char])
        - type: '[(Char, Char)]'
  - - expr: let conc = (<>) in conc (maybe mempty unzip)
    - - - type: ((Maybe [(Char, Char)] -> ([Char], [Char])), Maybe [(Char, Char)])
        - type: ([Char], [Char])
      - - type: ((Maybe [(Int, Int)] -> ([Int], [Int])), Maybe [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip mempty)
    - - - type: ((Char -> [(Char, Int)]), Char)
        - type: ([Char], [Int])
      - - type: ((Char -> [(Char, Char)]), Char)
        - type: ([Char], [Char])
      - - type: ((Int -> [(Char, Char)]), Int)
        - type: ([Char], [Char])
  - - expr: let compose = (.) in compose zip mempty
    - - - type: (Int, [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose zip (zip mempty)
    - - - type: ([Int], [Char])
        - type: '[((Int, Int), Char)]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl fromEnum
    - - - type: (Char, Char)
        - type: (Int, Char)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (maybe mempty prepend)
    - - - type: ((Int -> Maybe Char), Int, [Char])
        - type: '[Char]'
      - - type: ((Char -> Maybe Char), Char, [Char])
        - type: '[Char]'
  - - expr: let just = Just in maybe (sequenceA (just unzip))
    - - - type: |-
            ((Int -> [(Int, Int)] -> Maybe ([Int], [Int])), Maybe Int,
             [(Int, Int)])
        - type: Maybe ([Int], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (compose conc unzip)
    - - - type: ((Int -> [(Char, Char)]), Int, ([Char], [Char]))
        - type: ([Char], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc zip) foldMap
    - - - type: ((Char -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose (zip mempty))
    - - - type: (((Int -> [Char]) -> Int -> [(Int, Char)]), (Int -> [Char]), Int)
        - type: '[(Int, Char)]'
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose tpl (tpl zero)
    - - - type: (Int, Char)
        - type: ((Int, Int), Char)
  - - expr: let compose = (.) in compose (compose toEnum fromEnum)
    - - - type: ((Int -> Char), Int)
        - type: Int
      - - type: ((Char -> Char), Char)
        - type: Char
      - - type: ((Char -> Int), Char)
        - type: Char
  - - expr: |-
        let compose = (.)
            zero = 0
          in compose (maybe zero toEnum)
    - - - type: ((Int -> Maybe Int), Int)
        - type: Int
  - - expr: let tpl = (,) in tpl (zip mempty mempty)
    - - - type: Char
        - type: ([(Int, Int)], Char)
  - - expr: let prepend = (:) in prepend
    - - - type: (Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (compose zip) conc
    - - - type: ([Char], [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: |-
        let zero = 0
            tpl = (,)
          in tpl (tpl zero zero)
    - - - type: Int
        - type: ((Int, Int), Int)
  - - expr: maybe unzip mempty
    - - - type: (Maybe Char, [(Char, Char)])
        - type: ([Char], [Char])
      - - type: (Maybe Char, [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            zero = 0
            prepend = (:)
          in maybe (prepend (just zero))
    - - - type: ((Char -> [Maybe Int] -> [Maybe Int]), Maybe Char, [Maybe Int])
        - type: '[Maybe Int]'
  - - expr: let compose = (.) in compose (maybe (unzip mempty))
    - - - type: ((Char -> Char -> ([Int], [Char])), Char, Maybe Char)
        - type: ([Int], [Char])
      - - type: ((Int -> Int -> ([Int], [Int])), Int, Maybe Int)
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose (compose elem unzip)
    - - - type: ((Int -> [(Int, Char)]), Int, Maybe ([Int], [Char]))
        - type: Bool
  - - expr: let zero = 0 in maybe (maybe zero) maybe
    - - - type: (Maybe Int, (Char -> Int), Maybe Char)
        - type: Int
  - - expr: let compose = (.) in compose fmap (compose sequence)
    - - - type: ((Int -> Maybe ([] Int)), Maybe Int)
        - type: Maybe ([] (Maybe Int))
      - - type: ((Int -> [] (Maybe Int)), Maybe Int)
        - type: Maybe (Maybe ([] Int))
  - - expr: let conc = (<>) in conc (conc zip zip)
    - - - type: (([Int] -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
      - - type: (([Int] -> [Char] -> [(Int, Char)]), [Int], [Char])
        - type: '[(Int, Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose compose (compose just)
    - - - type: ((Char -> Char), (Int -> Char), Int)
        - type: Maybe Char
  - - expr: maybe (zip mempty mempty)
    - - - type: ((Int -> [(Int, Char)]), Maybe Int)
        - type: '[(Int, Char)]'
      - - type: ((Char -> [(Int, Int)]), Maybe Char)
        - type: '[(Int, Int)]'
      - - type: ((Int -> [(Char, Char)]), Maybe Int)
        - type: '[(Char, Char)]'
  - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
            tpl = (,)
          in compose tpl (prepend zero)
    - - - type: ([Int], Int)
        - type: ([Int], Int)
  - - expr: let prepend = (:) in maybe prepend mempty
    - - - type: (Maybe Char, Char, [Char])
        - type: '[Char]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose sequenceA) tpl
    - - - type: (Char, Maybe Char)
        - type: Maybe (Char, Char)
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (conc prepend mempty)
    - - - type: ((Int -> Char), Int, [Char])
        - type: '[Char]'
      - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (conc prepend prepend)
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose tpl toEnum)
    - - - type: ((Int -> Int), Int, Char)
        - type: (Int, Char)
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose unzip sequenceA)
    - - - type: (((Int, [Int]) -> ([Int], [Int])), (Int, [Int]))
        - type: ([Int], [Int])
  - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
          in compose zip (prepend zero)
    - - - type: ([Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: let conc = (<>) in conc (conc mempty zip)
    - - - type: (([Int] -> [Char] -> [(Int, Char)]), [Int], [Char])
        - type: '[(Int, Char)]'
  - - expr: let compose = (.) in compose compose zip
    - - - type: ([Char], (Char -> [Int]), Char)
        - type: '[(Char, Int)]'
      - - type: ([Int], (Int -> [Int]), Int)
        - type: '[(Int, Int)]'
  - - expr: let compose = (.) in compose (compose sequenceA)
    - - - type: ((Char -> Char -> [] ([] Char)), Char, Char)
        - type: '[] ([] Char)'
      - - type: ((Int -> Char -> [] (Maybe Char)), Int, Char)
        - type: Maybe ([] Char)
  - - expr: let conc = (<>) in maybe (conc unzip mempty)
    - - - type: |-
            ((Char -> [(Char, Int)] -> ([Char], [Int])), Maybe Char,
             [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: let compose = (.) in compose (compose (zip mempty))
    - - - type: ((Int -> Int -> [Char]), Int, Int)
        - type: '[(Char, Char)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (conc mempty prepend)
    - - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let zero = 0
            prepend = (:)
          in maybe (prepend zero) prepend
    - - - type: (Maybe Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip) foldMap
    - - - type: (((Int, Char) -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: maybe (zip mempty)
    - - - type: ((Char -> [Int] -> [(Int, Int)]), Maybe Char, [Int])
        - type: '[(Int, Int)]'
      - - type: ((Int -> [Char] -> [(Char, Char)]), Maybe Int, [Char])
        - type: '[(Char, Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in maybe (compose just unzip)
    - - - type: |-
            ((Char -> [(Int, Char)] -> Maybe ([Int], [Char])), Maybe Char,
             [(Int, Char)])
        - type: Maybe ([Int], [Char])
  - - expr: let compose = (.) in compose sequenceA unzip
    - - - type: '[(Char, Char)]'
        - type: '[([Char], Char)]'
  - - expr: let tpl = (,) in tpl
    - - - type: (Char, Int)
        - type: (Char, Int)
  - - expr: let just = Just in maybe (sequence (just unzip))
    - - - type: |-
            ((Char -> [(Int, Int)] -> Maybe ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: Maybe ([Int], [Int])
      - - type: |-
            ((Char -> [(Int, Char)] -> Maybe ([Int], [Char])), Maybe Char,
             [(Int, Char)])
        - type: Maybe ([Int], [Char])
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc (prepend (unzip mempty))
    - - - type: (([([Int], [Char])] -> [([Int], [Char])]), [([Int], [Char])])
        - type: '[([Int], [Char])]'
      - - type: (([([Int], [Int])] -> [([Int], [Int])]), [([Int], [Int])])
        - type: '[([Int], [Int])]'
  - - expr: fmap
    - - - type: ((Char -> Int), Maybe Char)
        - type: Maybe Int
      - - type: ((Int -> Char), Maybe Int)
        - type: Maybe Char
  - - expr: let compose = (.) in maybe (compose unzip sequence)
    - - - type: |-
            ((Int -> (Int, [Char]) -> ([Int], [Char])), Maybe Int,
             (Int, [Char]))
        - type: ([Int], [Char])
      - - type: |-
            ((Char -> (Int, [Char]) -> ([Int], [Char])), Maybe Char,
             (Int, [Char]))
        - type: ([Int], [Char])
  - - expr: let compose = (.) in maybe (compose sequence unzip)
    - - - type: |-
            ((Int -> [(Char, Int)] -> [([Char], Int)]), Maybe Int,
             [(Char, Int)])
        - type: '[([Char], Int)]'
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc prepend
    - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend) zip
    - - - type: ([Char], [Int], [[(Char, Int)]])
        - type: '[[(Char, Int)]]'
      - - type: ([Int], [Int], [[(Int, Int)]])
        - type: '[[(Int, Int)]]'
  - - expr: let compose = (.) in compose (compose zip sequenceA)
    - - - type: ((Int -> [] [Int]), Int, [Int])
        - type: '[([] Int, Int)]'
  - - expr: let compose = (.) in compose maybe unzip
    - - - type: ([(Int, Int)], (Char -> ([Int], [Int])), Maybe Char)
        - type: ([Int], [Int])
  - - expr: maybe
    - - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
      - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just length)
    - - - type: ((Int -> [] Int), Int)
        - type: Maybe Int
      - - type: ((Char -> [] Char), Char)
        - type: Maybe Int
  - - expr: let conc = (<>) in conc unzip
    - - - type: (([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (compose unzip) conc
    - - - type: ([(Char, Char)], [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: let conc = (<>) in maybe (conc unzip) mempty
    - - - type: (Maybe Char, ([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: let compose = (.) in maybe (compose unzip sequenceA)
    - - - type: |-
            ((Char -> (Char, [Int]) -> ([Char], [Int])), Maybe Char,
             (Char, [Int]))
        - type: ([Char], [Int])
      - - type: |-
            ((Char -> (Int, [Int]) -> ([Int], [Int])), Maybe Char,
             (Int, [Int]))
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequenceA (just just))
    - - - type: ((Char -> Int), Char)
        - type: Maybe (Maybe Int)
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc (maybe mempty prepend)
    - - - type: ((Maybe Char -> [Char] -> [Char]), Maybe Char, [Char])
        - type: '[Char]'
  - - expr: let compose = (.) in compose (compose sequenceA) fmap
    - - - type: ((Int -> Maybe Int), Maybe Int)
        - type: Maybe (Maybe Int)
  - - expr: maybe mempty zip
    - - - type: (Maybe [Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in maybe (compose unzip mempty)
    - - - type: ((Char -> Int -> ([Int], [Char])), Maybe Char, Int)
        - type: ([Int], [Char])
      - - type: ((Int -> Char -> ([Int], [Char])), Maybe Int, Char)
        - type: ([Int], [Char])
  - - expr: let conc = (<>) in maybe (conc unzip unzip)
    - - - type: |-
            ((Char -> [(Char, Int)] -> ([Char], [Int])), Maybe Char,
             [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (conc prepend) mempty
    - - - type: (Char, Char, [Char])
        - type: '[Char]'
      - - type: (Int, Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in conc (compose prepend sequenceA)
    - - - type: |-
            ((Maybe (Maybe Int) -> [Maybe (Maybe Int)] -> [Maybe (Maybe Int)]),
             Maybe (Maybe Int), [Maybe (Maybe Int)])
        - type: '[Maybe (Maybe Int)]'
  - - expr: let conc = (<>) in conc (maybe unzip mempty)
    - - - type: |-
            ((Maybe Int -> [(Char, Char)] -> ([Char], [Char])), Maybe Int,
             [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: let compose = (.) in compose maybe toEnum
    - - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
  - - expr: let compose = (.) in compose length
    - - - type: ((Char -> Maybe Int), Char)
        - type: Int
      - - type: ((Int -> [] Int), Int)
        - type: Int
  - - expr: let compose = (.) in compose compose (compose fromEnum)
    - - - type: ((Int -> Char), (Int -> Int), Int)
        - type: Int
  - - expr: let compose = (.) in compose maybe (zip mempty)
    - - - type: ([Int], (Char -> [(Int, Int)]), Maybe Char)
        - type: '[(Int, Int)]'
  - - expr: maybe mempty unzip
    - - - type: Maybe [(Char, Int)]
        - type: ([Char], [Int])
  - - expr: let conc = (<>) in conc (conc unzip mempty)
    - - - type: (([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: let zero = 0 in maybe zero fromEnum
    - - - type: Maybe Int
        - type: Int
  - - expr: |-
        let just = Just
            compose = (.)
            prepend = (:)
          in compose (compose just) prepend
    - - - type: (Int, [Int])
        - type: Maybe [Int]
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just just)
    - - - type: ((Int -> Char), Int)
        - type: Maybe (Maybe Char)
      - - type: ((Char -> Char), Char)
        - type: Maybe (Maybe Char)
  - - expr: |-
        let zero = 0
            tpl = (,)
          in maybe (tpl zero)
    - - - type: ((Char -> Char -> (Int, Char)), Maybe Char, Char)
        - type: (Int, Char)
      - - type: ((Char -> Int -> (Int, Int)), Maybe Char, Int)
        - type: (Int, Int)
      - - type: ((Int -> Char -> (Int, Char)), Maybe Int, Char)
        - type: (Int, Char)
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc mempty) zip
    - - - type: ([Int], [Char])
        - type: '[(Int, Char)]'
  - - expr: let compose = (.) in compose (compose sequenceA sequence)
    - - - type: ((Char -> [] ([] Char)), Char)
        - type: '[] ([] Char)'
      - - type: ((Char -> [] ([] Int)), Char)
        - type: '[] ([] Int)'
  - - expr: let compose = (.) in compose
    - - - type: ((Int -> Char), (Int -> Int), Int)
        - type: Char
  - - expr: let conc = (<>) in conc (zip mempty)
    - - - type: (([Int] -> [(Char, Int)]), [Int])
        - type: '[(Char, Int)]'
      - - type: (([Char] -> [(Char, Char)]), [Char])
        - type: '[(Char, Char)]'
  - - expr: let prepend = (:) in maybe (prepend (unzip mempty))
    - - - type: |-
            ((Char -> [([Int], [Char])] -> [([Int], [Char])]), Maybe Char,
             [([Int], [Char])])
        - type: '[([Int], [Char])]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just unzip))
    - - - type: ((Char -> [(Char, Int)]), Char)
        - type: Maybe ([Char], [Int])
      - - type: ((Char -> [(Int, Int)]), Char)
        - type: Maybe ([Int], [Int])
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl
    - - - type: ((Char -> Char), Char, Char)
        - type: (Char, Char)
      - - type: ((Char -> Int), Char, Char)
        - type: (Int, Char)
  - - expr: |-
        let zero = 0
            prepend = (:)
          in prepend (prepend zero mempty)
    - - - type: '[[Int]]'
        - type: '[[Int]]'
  - - expr: |-
        let zero = 0
            prepend = (:)
          in zip (prepend zero mempty)
    - - - type: '[Int]'
        - type: '[(Int, Int)]'
  - - expr: maybe (maybe mempty unzip)
    - - - type: |-
            ((Char -> Maybe [(Int, Char)] -> ([Int], [Char])), Maybe Char,
             Maybe [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: |-
        let just = Just
            compose = (.)
            zero = 0
            tpl = (,)
          in compose just (tpl zero)
    - - - type: Int
        - type: Maybe (Int, Int)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just) zip
    - - - type: ([Int], [Char])
        - type: Maybe [(Int, Char)]
      - - type: ([Char], [Char])
        - type: Maybe [(Char, Char)]
      - - type: ([Char], [Int])
        - type: Maybe [(Char, Int)]
  - - expr: let compose = (.) in compose compose (compose sequenceA)
    - - - type: ((Int -> [] ([] Char)), (Char -> Int), Char)
        - type: '[] ([] Char)'
  - - expr: let compose = (.) in compose (maybe unzip) mempty
    - - - type: (Char, Maybe Char, [(Int, Char)])
        - type: ([Int], [Char])
      - - type: (Int, Maybe Char, [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
            prepend = (:)
          in compose prepend just
    - - - type: (Int, [Maybe Int])
        - type: '[Maybe Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend unzip)
    - - - type: ((Int -> [(Int, Char)]), Int, [([Int], [Char])])
        - type: '[([Int], [Char])]'
  - - expr: let compose = (.) in compose compose (compose toEnum)
    - - - type: ((Int -> Int), (Char -> Int), Char)
        - type: Char
      - - type: ((Int -> Int), (Int -> Int), Int)
        - type: Char
  - - expr: |-
        let conc = (<>)
            just = Just
          in conc (just (unzip mempty))
    - - - type: Maybe ([Char], [Char])
        - type: Maybe ([Char], [Char])
      - - type: Maybe ([Int], [Char])
        - type: Maybe ([Int], [Char])
  - - expr: let compose = (.) in compose zip
    - - - type: ((Int -> [Char]), Int, [Int])
        - type: '[(Char, Int)]'
      - - type: ((Char -> [Char]), Char, [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose compose (compose length)
    - - - type: ((Int -> [] Char), (Int -> Int), Int)
        - type: Int
      - - type: ((Char -> Maybe Int), (Int -> Char), Int)
        - type: Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc (compose unzip)
    - - - type: ((Char -> [(Char, Int)]), (Char -> ([Char], [Int])), Char)
        - type: ([Char], [Int])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend fromEnum
    - - - type: (Char, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose foldMap (compose prepend)
    - - - type: ((Int -> Int), Maybe Int, [Int])
        - type: '[Int]'
  - - expr: let compose = (.) in compose (maybe mempty zip)
    - - - type: ((Char -> Maybe [Int]), Char, [Int])
        - type: '[(Int, Int)]'
      - - type: ((Int -> Maybe [Char]), Int, [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose unzip sequenceA
    - - - type: (Int, [Int])
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose (compose sequence unzip)
    - - - type: ((Int -> [(Char, Int)]), Int)
        - type: '[([Char], Int)]'
      - - type: ((Int -> [(Int, Int)]), Int)
        - type: '[([Int], Int)]'
      - - type: ((Char -> [(Char, Int)]), Char)
        - type: '[([Char], Int)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc zip) mempty
    - - - type: (Char, [Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just toEnum))
    - - - type: ((Char -> Int), Char)
        - type: Maybe Char
      - - type: ((Int -> Int), Int)
        - type: Maybe Int
  - - expr: let compose = (.) in compose (compose fmap zip)
    - - - type: ((Char -> [Char]), Char, Maybe [Int])
        - type: Maybe [(Char, Int)]
  - - expr: |-
        let zero = 0
            prepend = (:)
          in maybe (prepend zero) mempty
    - - - type: (Maybe Char, [Int])
        - type: '[Int]'
  - - expr: |-
        let zero = 0
            prepend = (:)
            tpl = (,)
          in tpl (prepend zero mempty)
    - - - type: Char
        - type: ([Int], Char)
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose conc prepend
    - - - type: (Int, ([Int] -> [Int]), [Int])
        - type: '[Int]'
  - - expr: let tpl = (,) in maybe (tpl (unzip mempty))
    - - - type: ((Char -> Int -> (([Int], [Int]), Int)), Maybe Char, Int)
        - type: (([Int], [Int]), Int)
  - - expr: let compose = (.) in compose (compose zip) mempty
    - - - type: (Char, Char, [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just sequenceA))
    - - - type: ((Char -> [] ([] Char)), Char)
        - type: Maybe ([] ([] Char))
      - - type: ((Char -> Maybe (Maybe Char)), Char)
        - type: Maybe (Maybe (Maybe Char))
  - - expr: maybe mempty (zip mempty)
    - - - type: Maybe [Int]
        - type: '[(Int, Int)]'
  - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
          in compose (prepend zero) mempty
    - - - type: Char
        - type: '[Int]'
      - - type: Int
        - type: '[Int]'
  - - expr: |-
        let conc = (<>)
            zero = 0
            prepend = (:)
          in conc (prepend zero)
    - - - type: (([Int] -> [Int]), [Int])
        - type: '[Int]'
  - - expr: let conc = (<>) in maybe (conc (unzip mempty))
    - - - type: |-
            ((Char -> ([Char], [Char]) -> ([Char], [Char])), Maybe Char,
             ([Char], [Char]))
        - type: ([Char], [Char])
  - - expr: maybe (unzip mempty) mempty
    - - - type: Maybe Int
        - type: ([Char], [Char])
      - - type: Maybe Char
        - type: ([Int], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
            zero = 0
            prepend = (:)
          in compose (conc (prepend zero))
    - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
  - - expr: let prepend = (:) in prepend (unzip mempty)
    - - - type: '[([Int], [Char])]'
        - type: '[([Int], [Char])]'
      - - type: '[([Int], [Int])]'
        - type: '[([Int], [Int])]'
  - - expr: let just = Just in just
    - - - type: Int
        - type: Maybe Int
  - - expr: let conc = (<>) in conc (conc zip mempty)
    - - - type: (([Int] -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: let compose = (.) in maybe (compose sequenceA unzip)
    - - - type: |-
            ((Int -> [(Int, Char)] -> [([Int], Char)]), Maybe Int,
             [(Int, Char)])
        - type: '[([Int], Char)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose sequenceA) prepend
    - - - type: (Maybe Char, [Maybe Char])
        - type: Maybe [Char]
  - - expr: let compose = (.) in compose elem unzip
    - - - type: ([(Int, Char)], Maybe ([Int], [Char]))
        - type: Bool
  - - expr: let compose = (.) in compose toEnum fromEnum
    - - - type: Int
        - type: Char
  - - expr: let compose = (.) in compose maybe fromEnum
    - - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
      - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
  - - expr: let compose = (.) in compose (maybe mempty unzip)
    - - - type: ((Char -> Maybe [(Int, Int)]), Char)
        - type: ([Int], [Int])
  - - expr: elem
    - - - type: (Char, Maybe Char)
        - type: Bool
  - - expr: let compose = (.) in compose elem length
    - - - type: (Maybe Char, Maybe Int)
        - type: Bool
  - - expr: let compose = (.) in compose compose (compose unzip)
    - - - type: ((Char -> [(Char, Char)]), (Char -> Char), Char)
        - type: ([Char], [Char])
  - - expr: |-
        let just = Just
            prepend = (:)
          in prepend (just (unzip mempty))
    - - - type: '[Maybe ([Char], [Char])]'
        - type: '[Maybe ([Char], [Char])]'
      - - type: '[Maybe ([Char], [Int])]'
        - type: '[Maybe ([Char], [Int])]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just toEnum
    - - - type: Int
        - type: Maybe Char
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend toEnum)
    - - - type: ((Int -> Int), Int, [Char])
        - type: '[Char]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequenceA (just sequenceA))
    - - - type: ((Char -> [] (Maybe Int)), Char)
        - type: Maybe (Maybe ([] Int))
      - - type: ((Char -> Maybe ([] Int)), Char)
        - type: Maybe ([] (Maybe Int))
      - - type: ((Char -> [] ([] Char)), Char)
        - type: Maybe ([] ([] Char))
      - - type: ((Int -> Maybe (Maybe Int)), Int)
        - type: Maybe (Maybe (Maybe Int))
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl zero) length
    - - - type: Maybe Int
        - type: (Int, Int)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose zip) prepend
    - - - type: (Char, [Char], [Int])
        - type: '[(Char, Int)]'
      - - type: (Int, [Int], [Char])
        - type: '[(Int, Char)]'
      - - type: (Char, [Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose (compose zip mempty)
    - - - type: ((Char -> Char), Char, [Int])
        - type: '[(Char, Int)]'
  - - expr: let conc = (<>) in conc (conc unzip unzip)
    - - - type: (([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - type: (([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose sequenceA just)
    - - - type: ((Int -> [] Int), Int)
        - type: '[] (Maybe Int)'
      - - type: ((Int -> [] Char), Int)
        - type: '[] (Maybe Char)'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (compose conc) zip
    - - - type: ([Int], [Char], [(Int, Char)])
        - type: '[(Int, Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose elem just
    - - - type: (Char, Maybe (Maybe Char))
        - type: Bool
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (tpl (unzip mempty))
    - - - type: ((Char -> Int), Char)
        - type: (([Int], [Int]), Int)
      - - type: ((Char -> Int), Char)
        - type: (([Char], [Char]), Int)
      - - type: ((Char -> Char), Char)
        - type: (([Int], [Char]), Char)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just) fmap
    - - - type: ((Int -> Char), Maybe Int)
        - type: Maybe (Maybe Char)
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl zero)
    - - - type: ((Char -> Char), Char)
        - type: (Int, Char)
  - - expr: let conc = (<>) in conc (conc mempty unzip)
    - - - type: (([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: let conc = (<>) in conc (maybe (unzip mempty))
    - - - type: |-
            (((Char -> ([Int], [Char])) -> Maybe Char -> ([Int], [Char])),
             (Char -> ([Int], [Char])), Maybe Char)
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose compose (compose sequence)
    - - - type: ((Char -> Maybe (Maybe Char)), (Int -> Char), Int)
        - type: Maybe (Maybe Char)
      - - type: ((Int -> Maybe ([] Char)), (Char -> Int), Char)
        - type: '[] (Maybe Char)'
      - - type: ((Char -> Maybe ([] Char)), (Int -> Char), Int)
        - type: '[] (Maybe Char)'
      - - type: ((Char -> [] ([] Char)), (Char -> Char), Char)
        - type: '[] ([] Char)'
  - - expr: |-
        let zero = 0
            prepend = (:)
          in maybe (prepend zero mempty)
    - - - type: ((Int -> [Int]), Maybe Int)
        - type: '[Int]'
  - - expr: let compose = (.) in compose (compose sequence sequenceA)
    - - - type: ((Int -> Maybe ([] Char)), Int)
        - type: Maybe ([] Char)
      - - type: ((Char -> [] (Maybe Int)), Char)
        - type: '[] (Maybe Int)'
      - - type: ((Char -> [] ([] Char)), Char)
        - type: '[] ([] Char)'
  - - expr: let compose = (.) in compose (compose unzip) mempty
    - - - type: (Int, Int)
        - type: ([Char], [Int])
  - - expr: let compose = (.) in compose fmap zip
    - - - type: ([Char], Maybe [Char])
        - type: Maybe [(Char, Char)]
      - - type: ([Int], Maybe [Int])
        - type: Maybe [(Int, Int)]
  - - expr: zip mempty
    - - - type: '[Char]'
        - type: '[(Int, Char)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose fmap (conc unzip)
    - - - type: (([(Int, Char)] -> ([Int], [Char])), Maybe [(Int, Char)])
        - type: Maybe ([Int], [Char])
      - - type: (([(Int, Int)] -> ([Int], [Int])), Maybe [(Int, Int)])
        - type: Maybe ([Int], [Int])
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in maybe (conc mempty) prepend
    - - - type: (Maybe Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose unzip mempty)
    - - - type: ((Int -> ([Int], [Int])), Int)
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequenceA (just toEnum))
    - - - type: ((Int -> Int), Int)
        - type: Maybe Char
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip) mempty
    - - - type: (Char, [(Char, Int)])
        - type: ([Char], [Int])
      - - type: (Int, [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just sequence))
    - - - type: ((Char -> [] (Maybe Int)), Char)
        - type: Maybe (Maybe ([] Int))
      - - type: ((Int -> [] ([] Int)), Int)
        - type: Maybe ([] ([] Int))
      - - type: ((Int -> Maybe ([] Char)), Int)
        - type: Maybe ([] (Maybe Char))
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose tpl length)
    - - - type: ((Char -> Maybe Int), Char, Char)
        - type: (Int, Char)
      - - type: ((Int -> [] Int), Int, Char)
        - type: (Int, Char)
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in conc (compose prepend unzip)
    - - - type: |-
            (([(Char, Int)] -> [([Char], [Int])] -> [([Char], [Int])]),
             [(Char, Int)], [([Char], [Int])])
        - type: '[([Char], [Int])]'
      - - type: |-
            (([(Char, Char)] -> [([Char], [Char])] -> [([Char], [Char])]),
             [(Char, Char)], [([Char], [Char])])
        - type: '[([Char], [Char])]'
  - - expr: let compose = (.) in compose (compose length)
    - - - type: ((Int -> Char -> [] Char), Int, Char)
        - type: Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose unzip)
    - - - type: |-
            (((Char -> [(Char, Int)]) -> Char -> ([Char], [Int])),
             (Char -> [(Char, Int)]), Char)
        - type: ([Char], [Int])
      - - type: |-
            (((Int -> [(Int, Int)]) -> Int -> ([Int], [Int])),
             (Int -> [(Int, Int)]), Int)
        - type: ([Int], [Int])
      - - type: |-
            (((Char -> [(Int, Int)]) -> Char -> ([Int], [Int])),
             (Char -> [(Int, Int)]), Char)
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            tpl = (,)
          in tpl (just (unzip mempty))
    - - - type: Int
        - type: (Maybe ([Char], [Int]), Int)
  - - expr: |-
        let compose = (.)
            prepend = (:)
            tpl = (,)
          in compose (compose prepend) tpl
    - - - type: (Int, Char, [(Int, Char)])
        - type: '[(Int, Char)]'
      - - type: (Char, Int, [(Char, Int)])
        - type: '[(Char, Int)]'
  - - expr: |-
        let compose = (.)
            zero = 0
          in compose (maybe zero fromEnum)
    - - - type: ((Char -> Maybe Char), Char)
        - type: Int
      - - type: ((Int -> Maybe Int), Int)
        - type: Int
  - - expr: let compose = (.) in compose (compose toEnum toEnum)
    - - - type: ((Char -> Int), Char)
        - type: Int
- - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend toEnum
    - - - type: (Int, [Char])
        - type: '[Char]'
      - - type: (Int, [Int])
        - type: '[Int]'
  - - expr: let compose = (.) in compose zip (sequenceA mempty)
    - - - type: (Int, [Int])
        - type: '[(Char, Int)]'
      - - type: (Char, [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose (compose unzip) zip
    - - - type: ([Char], [Int])
        - type: ([Char], [Int])
      - - type: ([Int], [Char])
        - type: ([Int], [Char])
  - - expr: |-
        let conc = (<>)
            just = Just
            zero = 0
            prepend = (:)
          in conc (prepend (just zero))
    - - - type: (([Maybe Int] -> [Maybe Int]), [Maybe Int])
        - type: '[Maybe Int]'
  - - expr: let compose = (.) in compose unzip
    - - - type: ((Int -> [(Char, Char)]), Int)
        - type: ([Char], [Char])
  - - expr: |-
        let just = Just
            compose = (.)
            tpl = (,)
          in compose (compose just) tpl
    - - - type: (Char, Int)
        - type: Maybe (Char, Int)
      - - type: (Int, Char)
        - type: Maybe (Int, Char)
      - - type: (Char, Char)
        - type: Maybe (Char, Char)
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl unzip
    - - - type: ([(Int, Int)], Int)
        - type: (([Int], [Int]), Int)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose compose prepend
    - - - type: (Int, (Int -> [Int]), Int)
        - type: '[Int]'
      - - type: (Char, (Char -> [Char]), Char)
        - type: '[Char]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose fmap (compose just)
    - - - type: ((Int -> Char), Maybe Int)
        - type: Maybe (Maybe Char)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequenceA (just fromEnum))
    - - - type: ((Int -> Int), Int)
        - type: Maybe Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
            zero = 0
            prepend = (:)
          in compose conc (prepend zero)
    - - - type: ([Int], [Int])
        - type: '[Int]'
  - - expr: |-
        let just = Just
            compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl (just zero))
    - - - type: ((Char -> Char), Char)
        - type: (Maybe Int, Char)
      - - type: ((Int -> Int), Int)
        - type: (Maybe Int, Int)
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose tpl unzip)
    - - - type: ((Char -> [(Int, Char)]), Char, Char)
        - type: (([Int], [Char]), Char)
      - - type: ((Int -> [(Char, Int)]), Int, Char)
        - type: (([Char], [Int]), Char)
      - - type: ((Int -> [(Int, Char)]), Int, Int)
        - type: (([Int], [Char]), Int)
  - - expr: let compose = (.) in compose (maybe unzip mempty)
    - - - type: ((Int -> Maybe Char), Int, [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: zip
    - - - type: ([Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
            zero = 0
            prepend = (:)
          in compose just (prepend zero)
    - - - type: '[Int]'
        - type: Maybe [Int]
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend) prepend
    - - - type: (Char, [Char], [[Char]])
        - type: '[[Char]]'
  - - expr: let compose = (.) in compose zip (sequence mempty)
    - - - type: (Int, [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip)
    - - - type: |-
            ((Char -> [(Char, Char)] -> ([Char], [Char])), Char,
             [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc zip
    - - - type: ([Int], ([Char] -> [(Int, Char)]), [Char])
        - type: '[(Int, Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just unzip
    - - - type: '[(Char, Char)]'
        - type: Maybe ([Char], [Char])
      - - type: '[(Char, Int)]'
        - type: Maybe ([Char], [Int])
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl (zip mempty)
    - - - type: ([Char], Int)
        - type: ([(Int, Char)], Int)
  - - expr: let compose = (.) in compose sequenceA
    - - - type: ((Int -> [] ([] Int)), Int)
        - type: '[] ([] Int)'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose unzip sequence)
    - - - type: (((Char, [Char]) -> ([Char], [Char])), (Char, [Char]))
        - type: ([Char], [Char])
      - - type: (((Int, [Char]) -> ([Int], [Char])), (Int, [Char]))
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose toEnum
    - - - type: ((Int -> Int), Int)
        - type: Int
      - - type: ((Char -> Int), Char)
        - type: Int
  - - expr: let compose = (.) in compose toEnum length
    - - - type: Maybe Int
        - type: Char
      - - type: Maybe Int
        - type: Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose zip (conc mempty)
    - - - type: ([Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose (compose sequence)
    - - - type: ((Int -> Char -> [] ([] Char)), Int, Char)
        - type: '[] ([] Char)'
      - - type: ((Char -> Char -> [] ([] Char)), Char, Char)
        - type: '[] ([] Char)'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc unzip
    - - - type: ([(Int, Int)], ([Int], [Int]))
        - type: ([Int], [Int])
      - - type: ([(Int, Char)], ([Int], [Char]))
        - type: ([Int], [Char])
      - - type: ([(Char, Char)], ([Char], [Char]))
        - type: ([Char], [Char])
  - - expr: let compose = (.) in compose (zip mempty)
    - - - type: ((Int -> [Int]), Int)
        - type: '[(Int, Int)]'
  - - expr: |-
        let zero = 0
            tpl = (,)
          in maybe (tpl zero) tpl
    - - - type: (Maybe Int, Int)
        - type: (Int, Int)
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl toEnum
    - - - type: (Int, Char)
        - type: (Char, Char)
      - - type: (Int, Char)
        - type: (Int, Char)
  - - expr: |-
        let just = Just
            compose = (.)
            prepend = (:)
          in compose (compose prepend just)
    - - - type: ((Char -> Int), Char, [Maybe Int])
        - type: '[Maybe Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend unzip
    - - - type: ([(Char, Int)], [([Char], [Int])])
        - type: '[([Char], [Int])]'
  - - expr: |-
        let compose = (.)
            zero = 0
          in compose (maybe zero length)
    - - - type: ((Int -> Maybe ([] Int)), Int)
        - type: Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (compose conc) prepend
    - - - type: (Char, [Char], [Char])
        - type: '[Char]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip unzip)
    - - - type: ((Int -> [(Char, Char)]), Int)
        - type: ([Char], [Char])
      - - type: ((Char -> [(Int, Int)]), Char)
        - type: ([Int], [Int])
  - - expr: maybe (unzip mempty)
    - - - type: ((Char -> ([Char], [Char])), Maybe Char)
        - type: ([Char], [Char])
  - - expr: let compose = (.) in maybe (compose unzip) mempty
    - - - type: (Maybe Int, (Int -> [(Int, Char)]), Int)
        - type: ([Int], [Char])
  - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
          in compose (compose (prepend zero))
    - - - type: ((Int -> Char -> [Int]), Int, Char)
        - type: '[Int]'
      - - type: ((Int -> Int -> [Int]), Int, Int)
        - type: '[Int]'
  - - expr: let just = Just in maybe (just (unzip mempty))
    - - - type: ((Char -> Maybe ([Char], [Int])), Maybe Char)
        - type: Maybe ([Char], [Int])
      - - type: ((Int -> Maybe ([Int], [Int])), Maybe Int)
        - type: Maybe ([Int], [Int])
  - - expr: let compose = (.) in compose (compose zip sequence)
    - - - type: ((Char -> [] [Int]), Char, [Int])
        - type: '[([] Int, Int)]'
      - - type: ((Int -> Maybe [Char]), Int, [Char])
        - type: '[(Maybe Char, Char)]'
  - - expr: maybe zip mempty
    - - - type: (Maybe Int, [Int], [Char])
        - type: '[(Int, Char)]'
  - - expr: let tpl = (,) in tpl (unzip mempty)
    - - - type: Char
        - type: (([Int], [Char]), Char)
  - - expr: let compose = (.) in compose compose elem
    - - - type: (Int, (Int -> Maybe Int), Int)
        - type: Bool
  - - expr: let compose = (.) in compose zip sequenceA
    - - - type: (Maybe [Int], [Int])
        - type: '[(Maybe Int, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just unzip)
    - - - type: ((Char -> [(Char, Char)]), Char)
        - type: Maybe ([Char], [Char])
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc (conc prepend prepend)
    - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            zero = 0
          in compose compose (maybe zero)
    - - - type: ((Char -> Int), (Char -> Maybe Char), Char)
        - type: Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc (zip mempty)
    - - - type: ([Char], [(Char, Char)])
        - type: '[(Char, Char)]'
  - - expr: let conc = (<>) in conc (maybe mempty zip)
    - - - type: ((Maybe [Int] -> [Int] -> [(Int, Int)]), Maybe [Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (prepend (unzip mempty))
    - - - type: ((Int -> [([Int], [Int])]), Int)
        - type: '[([Int], [Int])]'
      - - type: ((Char -> [([Char], [Int])]), Char)
        - type: '[([Char], [Int])]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose zip mempty)
    - - - type: ((Int -> [Char] -> [(Char, Char)]), Int, [Char])
        - type: '[(Char, Char)]'
      - - type: ((Char -> [Char] -> [(Int, Char)]), Char, [Char])
        - type: '[(Int, Char)]'
  - - expr: let compose = (.) in compose (compose zip) fmap
    - - - type: ((Int -> Char), [Int], [Int])
        - type: '[(Char, Int)]'
  - - expr: maybe (zip mempty) mempty
    - - - type: (Maybe Char, [Char])
        - type: '[(Char, Char)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend (zip mempty)
    - - - type: ([Int], [[(Int, Int)]])
        - type: '[[(Int, Int)]]'
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl zero) unzip
    - - - type: '[(Char, Int)]'
        - type: (Int, ([Char], [Int]))
      - - type: '[(Int, Char)]'
        - type: (Int, ([Int], [Char]))
  - - expr: let conc = (<>) in conc (zip mempty mempty)
    - - - type: '[(Char, Int)]'
        - type: '[(Char, Int)]'
  - - expr: maybe (sequenceA (unzip mempty))
    - - - type: ((Int -> [([Int], Int)]), Maybe Int)
        - type: '[([Int], Int)]'
      - - type: ((Char -> [([Int], Char)]), Maybe Char)
        - type: '[([Int], Char)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend fromEnum)
    - - - type: ((Int -> Char), Int, [Int])
        - type: '[Int]'
  - - expr: let compose = (.) in compose (compose unzip mempty)
    - - - type: ((Int -> Char), Int)
        - type: ([Int], [Char])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend length)
    - - - type: ((Int -> Maybe Int), Int, [Int])
        - type: '[Int]'
      - - type: ((Int -> [] Int), Int, [Int])
        - type: '[Int]'
      - - type: ((Int -> Maybe Char), Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (maybe sequenceA prepend)
    - - - type: ((Char -> Maybe [Int]), Char, [[Int]])
        - type: '[[Int]]'
  - - expr: let compose = (.) in compose (compose sequence sequence)
    - - - type: ((Int -> [] ([] Char)), Int)
        - type: '[] ([] Char)'
  - - expr: let compose = (.) in compose (compose zip) foldMap
    - - - type: ((Int -> [Char]), Maybe Int, [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose fmap (compose unzip)
    - - - type: ((Int -> [(Int, Char)]), Maybe Int)
        - type: Maybe ([Int], [Char])
  - - expr: let conc = (<>) in conc (maybe mempty unzip)
    - - - type: ((Maybe [(Int, Char)] -> ([Int], [Char])), Maybe [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip mempty)
    - - - type: ((Int -> [(Int, Int)]), Int)
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose zip mempty
    - - - type: (Int, [Int])
        - type: '[(Int, Int)]'
      - - type: (Int, [Char])
        - type: '[(Int, Char)]'
  - - expr: let compose = (.) in compose zip (zip mempty)
    - - - type: ([Int], [Int])
        - type: '[((Char, Int), Int)]'
      - - type: ([Int], [Int])
        - type: '[((Int, Int), Int)]'
  - - expr: let compose = (.) in compose (compose zip) zip
    - - - type: ([Char], [Int], [Char])
        - type: '[((Char, Int), Char)]'
      - - type: ([Int], [Int], [Int])
        - type: '[((Int, Int), Int)]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl fromEnum
    - - - type: (Char, Int)
        - type: (Int, Int)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (maybe mempty prepend)
    - - - type: ((Int -> Maybe Int), Int, [Int])
        - type: '[Int]'
  - - expr: let just = Just in maybe (sequenceA (just unzip))
    - - - type: |-
            ((Char -> [(Int, Int)] -> Maybe ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: Maybe ([Int], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just fromEnum)
    - - - type: ((Char -> Int), Char)
        - type: Maybe Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (compose conc unzip)
    - - - type: ((Char -> [(Int, Char)]), Char, ([Int], [Char]))
        - type: ([Int], [Char])
      - - type: ((Char -> [(Int, Int)]), Char, ([Int], [Int]))
        - type: ([Int], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc zip) foldMap
    - - - type: ((Int -> [Char] -> [(Int, Char)]), [Int], [Char])
        - type: '[(Int, Char)]'
      - - type: ((Int -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose (zip mempty))
    - - - type: |-
            (((Char -> [Char]) -> Char -> [(Int, Char)]), (Char -> [Char]),
             Char)
        - type: '[(Int, Char)]'
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose tpl (tpl zero)
    - - - type: (Int, Int)
        - type: ((Int, Int), Int)
      - - type: (Char, Char)
        - type: ((Int, Char), Char)
  - - expr: let tpl = (,) in tpl (zip mempty mempty)
    - - - type: Int
        - type: ([(Int, Int)], Int)
  - - expr: |-
        let zero = 0
            prepend = (:)
            tpl = (,)
          in prepend (tpl zero zero)
    - - - type: '[(Int, Int)]'
        - type: '[(Int, Int)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (compose zip) conc
    - - - type: ([Char], [Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose (compose elem unzip)
    - - - type: ((Int -> [(Char, Int)]), Int, Maybe ([Char], [Int]))
        - type: Bool
  - - expr: let compose = (.) in compose (maybe mempty) zip
    - - - type: ([Char], Maybe [Int])
        - type: '[(Char, Int)]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose compose tpl
    - - - type: (Char, (Int -> Char), Int)
        - type: (Char, Char)
  - - expr: let conc = (<>) in conc (conc zip zip)
    - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose compose (compose just)
    - - - type: ((Char -> Int), (Char -> Char), Char)
        - type: Maybe Int
  - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
            tpl = (,)
          in compose tpl (prepend zero)
    - - - type: ([Int], Char)
        - type: ([Int], Char)
  - - expr: |-
        let just = Just
            compose = (.)
            zero = 0
            prepend = (:)
          in compose (prepend (just zero))
    - - - type: ((Char -> [Maybe Int]), Char)
        - type: '[Maybe Int]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just sequenceA)
    - - - type: ((Int -> [] ([] Char)), Int)
        - type: Maybe ([] ([] Char))
  - - expr: let compose = (.) in compose (compose foldMap zip)
    - - - type: ((Int -> [Int]), Int, Maybe [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose sequenceA) tpl
    - - - type: (Int, Maybe Char)
        - type: Maybe (Int, Char)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just just
    - - - type: Int
        - type: Maybe (Maybe Int)
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc (zip mempty))
    - - - type: ((Char -> [Int] -> [(Char, Int)]), Char, [Int])
        - type: '[(Char, Int)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
            tpl = (,)
          in compose (compose tpl) prepend
    - - - type: (Char, [Char], Char)
        - type: ([Char], Char)
      - - type: (Int, [Int], Char)
        - type: ([Int], Char)
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (conc prepend mempty)
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (conc prepend prepend)
    - - - type: ((Char -> Char), Char, [Char])
        - type: '[Char]'
      - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose tpl toEnum)
    - - - type: ((Int -> Int), Int, Char)
        - type: (Char, Char)
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose unzip sequenceA)
    - - - type: (((Char, [Char]) -> ([Char], [Char])), (Char, [Char]))
        - type: ([Char], [Char])
      - - type: (((Int, [Char]) -> ([Int], [Char])), (Int, [Char]))
        - type: ([Int], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
            zero = 0
            prepend = (:)
          in conc (compose (prepend zero))
    - - - type: (((Char -> [Int]) -> Char -> [Int]), (Char -> [Int]), Char)
        - type: '[Int]'
  - - expr: let conc = (<>) in conc (conc mempty zip)
    - - - type: (([Char] -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose (compose toEnum length)
    - - - type: ((Char -> [] Char), Char)
        - type: Int
  - - expr: let compose = (.) in compose compose zip
    - - - type: ([Int], (Int -> [Char]), Int)
        - type: '[(Int, Char)]'
  - - expr: let compose = (.) in compose (compose sequenceA)
    - - - type: ((Char -> Int -> [] (Maybe Int)), Char, Int)
        - type: Maybe ([] Int)
  - - expr: let conc = (<>) in maybe (conc unzip mempty)
    - - - type: |-
            ((Int -> [(Int, Char)] -> ([Int], [Char])), Maybe Int,
             [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose (compose (zip mempty))
    - - - type: ((Char -> Int -> [Int]), Char, Int)
        - type: '[(Char, Int)]'
      - - type: ((Int -> Char -> [Char]), Int, Char)
        - type: '[(Int, Char)]'
      - - type: ((Int -> Int -> [Int]), Int, Int)
        - type: '[(Int, Int)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (conc mempty prepend)
    - - - type: ((Int -> Char), Int, [Char])
        - type: '[Char]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip) foldMap
    - - - type: (((Int, Int) -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
      - - type: (((Char, Char) -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - type: (((Char, Int) -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
          in maybe (compose just unzip)
    - - - type: |-
            ((Char -> [(Int, Int)] -> Maybe ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: Maybe ([Int], [Int])
      - - type: |-
            ((Int -> [(Int, Int)] -> Maybe ([Int], [Int])), Maybe Int,
             [(Int, Int)])
        - type: Maybe ([Int], [Int])
  - - expr: let compose = (.) in compose sequenceA unzip
    - - - type: '[(Int, Int)]'
        - type: '[([Int], Int)]'
  - - expr: let tpl = (,) in tpl
    - - - type: (Char, Char)
        - type: (Char, Char)
      - - type: (Int, Int)
        - type: (Int, Int)
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in conc (compose prepend fromEnum)
    - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc (prepend (unzip mempty))
    - - - type: (([([Char], [Char])] -> [([Char], [Char])]), [([Char], [Char])])
        - type: '[([Char], [Char])]'
      - - type: (([([Char], [Int])] -> [([Char], [Int])]), [([Char], [Int])])
        - type: '[([Char], [Int])]'
  - - expr: |-
        let conc = (<>)
            just = Just
            compose = (.)
            prepend = (:)
          in conc (compose prepend just)
    - - - type: ((Char -> [Maybe Char] -> [Maybe Char]), Char, [Maybe Char])
        - type: '[Maybe Char]'
  - - expr: let compose = (.) in maybe (compose unzip sequence)
    - - - type: |-
            ((Char -> (Int, [Int]) -> ([Int], [Int])), Maybe Char,
             (Int, [Int]))
        - type: ([Int], [Int])
  - - expr: let compose = (.) in maybe (compose sequence unzip)
    - - - type: |-
            ((Char -> [(Int, Int)] -> [([Int], Int)]), Maybe Char,
             [(Int, Int)])
        - type: '[([Int], Int)]'
      - - type: |-
            ((Char -> [(Int, Char)] -> [([Int], Char)]), Maybe Char,
             [(Int, Char)])
        - type: '[([Int], Char)]'
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc prepend
    - - - type: ((Char -> [Char] -> [Char]), Char, [Char])
        - type: '[Char]'
  - - expr: let compose = (.) in compose (compose zip sequenceA)
    - - - type: ((Char -> [] [Int]), Char, [Int])
        - type: '[([] Int, Int)]'
  - - expr: let prepend = (:) in prepend (zip mempty mempty)
    - - - type: '[[(Int, Int)]]'
        - type: '[[(Int, Int)]]'
  - - expr: maybe
    - - - type: (Char, (Char -> Char), Maybe Char)
        - type: Char
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just length)
    - - - type: ((Int -> [] Char), Int)
        - type: Maybe Int
  - - expr: let conc = (<>) in conc unzip
    - - - type: (([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - type: (([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
          in compose prepend (prepend zero)
    - - - type: ([Int], [[Int]])
        - type: '[[Int]]'
  - - expr: let compose = (.) in compose (compose sequenceA unzip)
    - - - type: ((Char -> [(Int, Int)]), Char)
        - type: '[([Int], Int)]'
      - - type: ((Char -> [(Char, Char)]), Char)
        - type: '[([Char], Char)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (compose unzip) conc
    - - - type: ([(Char, Int)], [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: let conc = (<>) in maybe (conc unzip) mempty
    - - - type: (Maybe Int, ([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - type: (Maybe Int, ([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
            tpl = (,)
          in compose tpl just
    - - - type: (Char, Char)
        - type: (Maybe Char, Char)
      - - type: (Int, Char)
        - type: (Maybe Int, Char)
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc (maybe mempty prepend)
    - - - type: ((Maybe Int -> [Int] -> [Int]), Maybe Int, [Int])
        - type: '[Int]'
  - - expr: let compose = (.) in compose (compose sequenceA) fmap
    - - - type: ((Char -> Maybe Int), Maybe Char)
        - type: Maybe (Maybe Int)
  - - expr: let compose = (.) in maybe (compose unzip mempty)
    - - - type: ((Int -> Int -> ([Char], [Char])), Maybe Int, Int)
        - type: ([Char], [Char])
  - - expr: let conc = (<>) in maybe (conc unzip unzip)
    - - - type: ((Int -> [(Int, Int)] -> ([Int], [Int])), Maybe Int, [(Int, Int)])
        - type: ([Int], [Int])
      - - type: |-
            ((Char -> [(Int, Int)] -> ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (conc prepend) mempty
    - - - type: (Char, Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in conc (compose prepend sequenceA)
    - - - type: |-
            ((Maybe (Maybe Char) ->
                [Maybe (Maybe Char)] -> [Maybe (Maybe Char)]),
             Maybe (Maybe Char), [Maybe (Maybe Char)])
        - type: '[Maybe (Maybe Char)]'
  - - expr: let conc = (<>) in conc (maybe unzip mempty)
    - - - type: |-
            ((Maybe Int -> [(Char, Int)] -> ([Char], [Int])), Maybe Int,
             [(Char, Int)])
        - type: ([Char], [Int])
      - - type: |-
            ((Maybe Char -> [(Int, Int)] -> ([Int], [Int])), Maybe Char,
             [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose maybe toEnum
    - - - type: (Int, (Char -> Char), Maybe Char)
        - type: Char
      - - type: (Int, (Int -> Char), Maybe Int)
        - type: Char
  - - expr: let compose = (.) in compose compose (compose fromEnum)
    - - - type: ((Char -> Int), (Char -> Char), Char)
        - type: Int
  - - expr: let compose = (.) in compose maybe (zip mempty)
    - - - type: ([Int], (Char -> [(Char, Int)]), Maybe Char)
        - type: '[(Char, Int)]'
      - - type: ([Int], (Int -> [(Char, Int)]), Maybe Int)
        - type: '[(Char, Int)]'
  - - expr: maybe mempty unzip
    - - - type: Maybe [(Int, Int)]
        - type: ([Int], [Int])
  - - expr: let conc = (<>) in conc (conc unzip mempty)
    - - - type: (([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - type: (([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc (unzip mempty))
    - - - type: ((Char -> ([Int], [Char])), Char)
        - type: ([Int], [Char])
      - - type: ((Int -> ([Int], [Char])), Int)
        - type: ([Int], [Char])
  - - expr: let prepend = (:) in prepend (sequenceA (unzip mempty))
    - - - type: '[[([Int], Int)]]'
        - type: '[[([Int], Int)]]'
      - - type: '[[([Char], Int)]]'
        - type: '[[([Char], Int)]]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just just))
    - - - type: ((Int -> Char), Int)
        - type: Maybe (Maybe Char)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just fromEnum
    - - - type: Char
        - type: Maybe Int
  - - expr: let compose = (.) in compose (compose sequenceA sequence)
    - - - type: ((Int -> Maybe ([] Char)), Int)
        - type: Maybe ([] Char)
  - - expr: let compose = (.) in compose
    - - - type: ((Char -> Char), (Int -> Char), Int)
        - type: Char
      - - type: ((Int -> Int), (Char -> Int), Char)
        - type: Int
  - - expr: let conc = (<>) in conc (zip mempty)
    - - - type: (([Int] -> [(Int, Int)]), [Int])
        - type: '[(Int, Int)]'
  - - expr: let prepend = (:) in maybe (prepend (unzip mempty))
    - - - type: |-
            ((Int -> [([Int], [Char])] -> [([Int], [Char])]), Maybe Int,
             [([Int], [Char])])
        - type: '[([Int], [Char])]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just unzip))
    - - - type: ((Char -> [(Int, Char)]), Char)
        - type: Maybe ([Int], [Char])
      - - type: ((Int -> [(Char, Char)]), Int)
        - type: Maybe ([Char], [Char])
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl
    - - - type: ((Char -> Char), Char, Int)
        - type: (Char, Int)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose sequence just)
    - - - type: ((Char -> Maybe Int), Char)
        - type: Maybe (Maybe Int)
      - - type: ((Char -> [] Char), Char)
        - type: '[] (Maybe Char)'
  - - expr: maybe (maybe mempty unzip)
    - - - type: |-
            ((Int -> Maybe [(Int, Char)] -> ([Int], [Char])), Maybe Int,
             Maybe [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: |-
        let zero = 0
            tpl = (,)
          in tpl zero
    - - - type: Char
        - type: (Int, Char)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequenceA (just unzip))
    - - - type: ((Int -> [(Int, Int)]), Int)
        - type: Maybe ([Int], [Int])
      - - type: ((Char -> [(Int, Char)]), Char)
        - type: Maybe ([Int], [Char])
  - - expr: let compose = (.) in compose compose (compose sequenceA)
    - - - type: ((Int -> Maybe ([] Int)), (Int -> Int), Int)
        - type: '[] (Maybe Int)'
  - - expr: let compose = (.) in compose (maybe unzip) mempty
    - - - type: (Char, Maybe Int, [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: sequence
    - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
  - - expr: |-
        let just = Just
            compose = (.)
            prepend = (:)
          in compose prepend just
    - - - type: (Char, [Maybe Char])
        - type: '[Maybe Char]'
  - - expr: let compose = (.) in compose zip
    - - - type: ((Char -> [Int]), Char, [Char])
        - type: '[(Int, Char)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc (compose unzip)
    - - - type: ((Int -> [(Int, Int)]), (Int -> ([Int], [Int])), Int)
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequenceA (just length))
    - - - type: ((Char -> [] Char), Char)
        - type: Maybe Int
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose foldMap (compose prepend)
    - - - type: ((Char -> Char), Maybe Char, [Char])
        - type: '[Char]'
  - - expr: let compose = (.) in compose unzip sequenceA
    - - - type: (Char, [Int])
        - type: ([Char], [Int])
  - - expr: let compose = (.) in compose (compose sequence unzip)
    - - - type: ((Char -> [(Char, Char)]), Char)
        - type: '[([Char], Char)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc zip) mempty
    - - - type: (Int, [Char], [Char])
        - type: '[(Char, Char)]'
      - - type: (Int, [Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just toEnum))
    - - - type: ((Int -> Int), Int)
        - type: Maybe Char
  - - expr: let compose = (.) in compose foldMap (maybe unzip)
    - - - type: |-
            ((Char -> [(Char, Int)] -> ([Char], [Int])), Maybe (Maybe Char),
             [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: |-
        let just = Just
            zero = 0
            prepend = (:)
          in prepend (just (just zero))
    - - - type: '[Maybe (Maybe Int)]'
        - type: '[Maybe (Maybe Int)]'
  - - expr: let tpl = (,) in maybe (tpl (unzip mempty))
    - - - type: ((Char -> Int -> (([Int], [Char]), Int)), Maybe Char, Int)
        - type: (([Int], [Char]), Int)
      - - type: ((Int -> Int -> (([Int], [Int]), Int)), Maybe Int, Int)
        - type: (([Int], [Int]), Int)
      - - type: ((Int -> Char -> (([Int], [Int]), Char)), Maybe Int, Char)
        - type: (([Int], [Int]), Char)
  - - expr: let compose = (.) in compose (compose zip) mempty
    - - - type: (Int, Char, [Char])
        - type: '[(Int, Char)]'
      - - type: (Int, Int, [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequence (just sequenceA))
    - - - type: ((Char -> [] (Maybe Int)), Char)
        - type: Maybe (Maybe ([] Int))
  - - expr: let conc = (<>) in maybe (conc (unzip mempty))
    - - - type: |-
            ((Char -> ([Char], [Int]) -> ([Char], [Int])), Maybe Char,
             ([Char], [Int]))
        - type: ([Char], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just toEnum)
    - - - type: ((Int -> Int), Int)
        - type: Maybe Char
      - - type: ((Int -> Int), Int)
        - type: Maybe Int
      - - type: ((Char -> Int), Char)
        - type: Maybe Char
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (maybe sequence prepend)
    - - - type: ((Char -> Maybe [Int]), Char, [[Int]])
        - type: '[[Int]]'
  - - expr: |-
        let just = Just
            compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl zero) just
    - - - type: Int
        - type: (Int, Maybe Int)
      - - type: Char
        - type: (Int, Maybe Char)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just sequence)
    - - - type: ((Int -> [] (Maybe Char)), Int)
        - type: Maybe (Maybe ([] Char))
  - - expr: maybe (unzip mempty) mempty
    - - - type: Maybe Int
        - type: ([Int], [Int])
  - - expr: maybe (zip mempty) zip
    - - - type: (Maybe [Char], [Char])
        - type: '[(Char, Char)]'
      - - type: (Maybe [Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
            zero = 0
            prepend = (:)
          in compose (conc (prepend zero))
    - - - type: ((Char -> [Int] -> [Int]), Char, [Int])
        - type: '[Int]'
  - - expr: let prepend = (:) in prepend (unzip mempty)
    - - - type: '[([Char], [Int])]'
        - type: '[([Char], [Int])]'
      - - type: '[([Char], [Char])]'
        - type: '[([Char], [Char])]'
  - - expr: let conc = (<>) in conc (conc zip mempty)
    - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: |-
        let just = Just
            zero = 0
          in maybe (just zero)
    - - - type: ((Char -> Maybe Int), Maybe Char)
        - type: Maybe Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose compose (conc unzip)
    - - - type: |-
            (([(Char, Char)] -> ([Char], [Char])), (Char -> [(Char, Char)]),
             Char)
        - type: ([Char], [Char])
      - - type: (([(Char, Int)] -> ([Char], [Int])), (Char -> [(Char, Int)]), Char)
        - type: ([Char], [Int])
      - - type: |-
            (([(Char, Char)] -> ([Char], [Char])), (Int -> [(Char, Char)]),
             Int)
        - type: ([Char], [Char])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose sequenceA) prepend
    - - - type: (Maybe Int, [Maybe Int])
        - type: Maybe [Int]
  - - expr: let compose = (.) in compose toEnum fromEnum
    - - - type: Char
        - type: Int
  - - expr: let compose = (.) in compose maybe fromEnum
    - - - type: (Char, (Char -> Int), Maybe Char)
        - type: Int
  - - expr: let compose = (.) in compose (maybe mempty unzip)
    - - - type: ((Char -> Maybe [(Int, Char)]), Char)
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose compose (compose unzip)
    - - - type: ((Int -> [(Int, Char)]), (Char -> Int), Char)
        - type: ([Int], [Char])
  - - expr: |-
        let just = Just
            prepend = (:)
          in prepend (just (unzip mempty))
    - - - type: '[Maybe ([Int], [Char])]'
        - type: '[Maybe ([Int], [Char])]'
      - - type: '[Maybe ([Int], [Int])]'
        - type: '[Maybe ([Int], [Int])]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose (compose prepend toEnum)
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just (zip mempty)
    - - - type: '[Int]'
        - type: Maybe [(Int, Int)]
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose maybe (tpl zero)
    - - - type: (Char, (Int -> (Int, Char)), Maybe Int)
        - type: (Int, Char)
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl zero) length
    - - - type: Maybe Char
        - type: (Int, Int)
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl zero) toEnum
    - - - type: Int
        - type: (Int, Char)
  - - expr: let compose = (.) in compose (compose zip mempty)
    - - - type: ((Int -> Int), Int, [Char])
        - type: '[(Char, Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose sequenceA just)
    - - - type: ((Int -> Maybe Int), Int)
        - type: Maybe (Maybe Int)
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (compose conc) zip
    - - - type: ([Char], [Char], [(Char, Char)])
        - type: '[(Char, Char)]'
      - - type: ([Int], [Int], [(Int, Int)])
        - type: '[(Int, Int)]'
      - - type: ([Char], [Int], [(Char, Int)])
        - type: '[(Char, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just sequence
    - - - type: Maybe (Maybe Int)
        - type: Maybe (Maybe (Maybe Int))
      - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe (Maybe Char))
  - - expr: |-
        let just = Just
            compose = (.)
          in compose elem just
    - - - type: (Int, Maybe (Maybe Int))
        - type: Bool
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (compose just) fmap
    - - - type: ((Int -> Int), Maybe Int)
        - type: Maybe (Maybe Int)
      - - type: ((Char -> Char), Maybe Char)
        - type: Maybe (Maybe Char)
  - - expr: |-
        let zero = 0
            prepend = (:)
          in maybe mempty (prepend zero)
    - - - type: Maybe [Int]
        - type: '[Int]'
  - - expr: |-
        let zero = 0
            tpl = (,)
          in maybe (tpl zero zero)
    - - - type: ((Int -> (Int, Int)), Maybe Int)
        - type: (Int, Int)
      - - type: ((Char -> (Int, Int)), Maybe Char)
        - type: (Int, Int)
  - - expr: let conc = (<>) in conc (conc mempty unzip)
    - - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - type: (([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc zip mempty)
    - - - type: ((Int -> [Char]), Int, [Char])
        - type: '[(Char, Char)]'
      - - type: ((Char -> [Int]), Char, [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose tpl fromEnum)
    - - - type: ((Char -> Int), Char, Char)
        - type: (Int, Char)
      - - type: ((Char -> Int), Char, Int)
        - type: (Int, Int)
      - - type: ((Char -> Char), Char, Int)
        - type: (Int, Int)
  - - expr: let compose = (.) in compose (compose fmap) compose
    - - - type: ((Int -> Int), (Int -> Int), Maybe Int)
        - type: Maybe Int
  - - expr: let compose = (.) in compose (compose unzip) mempty
    - - - type: (Int, Int)
        - type: ([Int], [Int])
      - - type: (Char, Char)
        - type: ([Int], [Int])
  - - expr: zip mempty
    - - - type: '[Int]'
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose (compose sequenceA sequenceA)
    - - - type: ((Int -> Maybe ([] Int)), Int)
        - type: Maybe ([] Int)
      - - type: ((Char -> [] (Maybe Char)), Char)
        - type: '[] (Maybe Char)'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose (sequenceA (just toEnum))
    - - - type: ((Char -> Int), Char)
        - type: Maybe Char
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose (compose tpl length)
    - - - type: ((Char -> Maybe Int), Char, Int)
        - type: (Int, Int)
  - - expr: let compose = (.) in compose (compose length)
    - - - type: ((Char -> Char -> [] Int), Char, Char)
        - type: Int
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose (conc mempty) prepend
    - - - type: (Char, [Char])
        - type: '[Char]'
      - - type: (Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let just = Just
            tpl = (,)
          in tpl (just (unzip mempty))
    - - - type: Char
        - type: (Maybe ([Char], [Int]), Char)
      - - type: Int
        - type: (Maybe ([Char], [Char]), Int)
  - - expr: |-
        let compose = (.)
            prepend = (:)
            tpl = (,)
          in compose (compose prepend) tpl
    - - - type: (Int, Int, [(Int, Int)])
        - type: '[(Int, Int)]'
      - - type: (Char, Char, [(Char, Char)])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose (compose toEnum toEnum)
    - - - type: ((Char -> Int), Char)
        - type: Char
