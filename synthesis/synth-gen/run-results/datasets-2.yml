generatedTypes:
  '0':
  - Int
  - Char
  '1':
  - '[]'
  - Maybe
  '2':
  - (,)
  - Either
longestExprString: 76
exprBlocks:
- - zip
  - expr: zip
- - zip
  - expr: 'zip (undefined :: [a])'
- - zip
  - expr: 'zip (undefined :: [a]) (undefined :: [b])'
- - unzip
  - expr: unzip
- - unzip
  - expr: 'unzip (undefined :: [(a, b)])'
- - elem
  - expr: elem
- - elem
  - expr: 'elem (undefined :: (Foldable t, Eq a) => a)'
- - elem
  - expr: |-
      elem (undefined :: (Foldable t, Eq a) => a)
        (undefined :: (Foldable t, Eq a) => t a)
- - conc
  - expr: conc
- - conc
  - expr: 'conc (undefined :: Semigroup a => a)'
- - conc
  - expr: |-
      conc (undefined :: Semigroup a => a)
        (undefined :: Semigroup a => a)
- - just
  - expr: just
- - just
  - expr: 'just (undefined :: a)'
- - mempty
  - expr: mempty
- - toEnum
  - expr: toEnum
- - toEnum
  - expr: 'toEnum (undefined :: Enum a => Int)'
- - length
  - expr: length
- - length
  - expr: 'length (undefined :: Foldable t => t a)'
- - compose
  - expr: compose
- - compose
  - expr: 'compose (undefined :: (b -> c))'
- - compose
  - expr: 'compose (undefined :: (b -> c)) (undefined :: (a -> b))'
- - compose
  - expr: |-
      compose (undefined :: (b -> c)) (undefined :: (a -> b))
        (undefined :: a)
- - sequence
  - expr: sequence
- - sequence
  - expr: 'sequence (undefined :: (Traversable t, Monad m) => t (m a))'
- - sequenceA
  - expr: sequenceA
- - sequenceA
  - expr: 'sequenceA (undefined :: (Traversable t, Applicative f) => t (f a))'
- - fromEnum
  - expr: fromEnum
- - fromEnum
  - expr: 'fromEnum (undefined :: Enum a => a)'
- - zero
  - expr: zero
- - prepend
  - expr: prepend
- - prepend
  - expr: 'prepend (undefined :: a)'
- - prepend
  - expr: 'prepend (undefined :: a) (undefined :: [a])'
- - foldMap
  - expr: foldMap
- - foldMap
  - expr: 'foldMap (undefined :: (Foldable t, Monoid m) => (a -> m))'
- - foldMap
  - expr: |-
      foldMap (undefined :: (Foldable t, Monoid m) => (a -> m))
        (undefined :: (Foldable t, Monoid m) => t a)
- - fmap
  - expr: fmap
- - fmap
  - expr: 'fmap (undefined :: Functor f => (a -> b))'
- - fmap
  - expr: |-
      fmap (undefined :: Functor f => (a -> b))
        (undefined :: Functor f => f a)
- - maybe
  - expr: maybe
- - maybe
  - expr: 'maybe (undefined :: b)'
- - maybe
  - expr: 'maybe (undefined :: b) (undefined :: (a -> b))'
- - maybe
  - expr: |-
      maybe (undefined :: b) (undefined :: (a -> b))
        (undefined :: Maybe a)
- - tpl
  - expr: tpl
- - tpl
  - expr: 'tpl (undefined :: a)'
- - tpl
  - expr: 'tpl (undefined :: a) (undefined :: b)'
longestString: 76
fnTypeIOs:
- - expr: toEnum
  - - - - type: Int
        - type: Int
      - - - expr: ((10))
          - Right:
              expr: '10'
        - - expr: ((15))
          - Right:
              expr: '15'
        - - expr: ((-10))
          - Right:
              expr: (-10)
        - - expr: ((5))
          - Right:
              expr: '5'
        - - expr: ((-14))
          - Right:
              expr: (-14)
        - - expr: ((-11))
          - Right:
              expr: (-11)
        - - expr: ((-6))
          - Right:
              expr: (-6)
        - - expr: ((13))
          - Right:
              expr: '13'
    - - - type: Int
        - type: Char
      - - - expr: ((10))
          - Right:
              expr: '''\n'''
        - - expr: ((15))
          - Right:
              expr: '''\SI'''
        - - expr: ((-14))
          - Left: '"Prelude.chr: bad argument: (-14)"'
        - - expr: ((-6))
          - Left: '"Prelude.chr: bad argument: (-6)"'
        - - expr: ((5))
          - Right:
              expr: '''\ENQ'''
        - - expr: ((-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ((-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: ((13))
          - Right:
              expr: '''\r'''
- - expr: sequenceA
  - - - - type: '[] ([] Int)'
        - type: '[] ([] Int)'
      - - - expr: ([[(-14), (5), (10)], []])
          - Right:
              expr: '[]'
        - - expr: ([])
          - Right:
              expr: '[[]]'
        - - expr: ([[(-14), (5), (10)]])
          - Right:
              expr: '[[-14], [5], [10]]'
    - - - type: '[] (Maybe Int)'
        - type: Maybe ([] Int)
      - - - expr: ([Just (-14), Nothing])
          - Right:
              expr: Nothing
        - - expr: ([Just (-14)])
          - Right:
              expr: (Just [-14])
        - - expr: ([])
          - Right:
              expr: (Just [])
    - - - type: Maybe ([] Int)
        - type: '[] (Maybe Int)'
      - - - expr: (Nothing)
          - Right:
              expr: '[Nothing]'
        - - expr: (Just [(-14), (5), (10)])
          - Right:
              expr: '[Just (-14), Just 5, Just 10]'
        - - expr: (Just [(-14), (5)])
          - Right:
              expr: '[Just (-14), Just 5]'
    - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
      - - - expr: (Just (Just '1'))
          - Right:
              expr: (Just (Just '1'))
        - - expr: (Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (Just (Just '7'))
          - Right:
              expr: (Just (Just '7'))
- - expr: length
  - - - - type: Maybe Int
        - type: Int
      - - - expr: (Just (-6))
          - Right:
              expr: '1'
        - - expr: (Just (13))
          - Right:
              expr: '1'
        - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just (-11))
          - Right:
              expr: '1'
        - - expr: (Just (-14))
          - Right:
              expr: '1'
    - - - type: '[] Int'
        - type: Int
      - - - expr: ([(-14)])
          - Right:
              expr: '1'
        - - expr: ([(-14), (5)])
          - Right:
              expr: '2'
        - - expr: ([(-14), (5), (10)])
          - Right:
              expr: '3'
        - - expr: ([])
          - Right:
              expr: '0'
    - - - type: Maybe Char
        - type: Int
      - - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just '3')
          - Right:
              expr: '1'
        - - expr: (Just '7')
          - Right:
              expr: '1'
        - - expr: (Just '5')
          - Right:
              expr: '1'
        - - expr: (Just '1')
          - Right:
              expr: '1'
    - - - type: '[] Char'
        - type: Int
      - - - expr: (['1', '2'])
          - Right:
              expr: '2'
        - - expr: (['1'])
          - Right:
              expr: '1'
        - - expr: (['1', '2', '4'])
          - Right:
              expr: '3'
        - - expr: ([])
          - Right:
              expr: '0'
- - expr: zip
  - - - - type: ([Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: ([(-14)], ['1', '2', '4'])
          - Right:
              expr: '[(-14, ''1'')]'
        - - expr: ([], ['1', '2', '4'])
          - Right:
              expr: '[]'
        - - expr: ([(-14), (5)], ['1'])
          - Right:
              expr: '[(-14, ''1'')]'
        - - expr: ([(-14), (5), (10)], [])
          - Right:
              expr: '[]'
        - - expr: ([(-14)], [])
          - Right:
              expr: '[]'
        - - expr: ([(-14), (5)], ['1', '2'])
          - Right:
              expr: '[(-14, ''1''), (5, ''2'')]'
        - - expr: ([(-14), (5)], ['1', '2', '4'])
          - Right:
              expr: '[(-14, ''1''), (5, ''2'')]'
        - - expr: ([], ['1'])
          - Right:
              expr: '[]'
    - - - type: ([Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: ([(-14), (5), (10)], [(-14)])
          - Right:
              expr: '[(-14, -14)]'
        - - expr: ([(-14), (5)], [(-14)])
          - Right:
              expr: '[(-14, -14)]'
        - - expr: ([], [(-14), (5)])
          - Right:
              expr: '[]'
        - - expr: ([(-14), (5)], [(-14), (5), (10)])
          - Right:
              expr: '[(-14, -14), (5, 5)]'
        - - expr: ([(-14), (5), (10)], [])
          - Right:
              expr: '[]'
        - - expr: ([(-14), (5)], [])
          - Right:
              expr: '[]'
        - - expr: ([(-14), (5), (10)], [(-14), (5), (10)])
          - Right:
              expr: '[(-14, -14), (5, 5), (10, 10)]'
        - - expr: ([], [(-14), (5), (10)])
          - Right:
              expr: '[]'
    - - - type: ([Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (['1', '2'], ['1'])
          - Right:
              expr: '[(''1'', ''1'')]'
        - - expr: (['1'], ['1', '2', '4'])
          - Right:
              expr: '[(''1'', ''1'')]'
        - - expr: (['1'], ['1'])
          - Right:
              expr: '[(''1'', ''1'')]'
        - - expr: (['1', '2', '4'], ['1'])
          - Right:
              expr: '[(''1'', ''1'')]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: (['1'], ['1', '2'])
          - Right:
              expr: '[(''1'', ''1'')]'
        - - expr: (['1', '2'], [])
          - Right:
              expr: '[]'
        - - expr: (['1', '2', '4'], ['1', '2', '4'])
          - Right:
              expr: '[(''1'', ''1''), (''2'', ''2''), (''4'', ''4'')]'
    - - - type: ([Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: ([], [(-14), (5)])
          - Right:
              expr: '[]'
        - - expr: (['1', '2'], [])
          - Right:
              expr: '[]'
        - - expr: (['1'], [(-14), (5), (10)])
          - Right:
              expr: '[(''1'', -14)]'
        - - expr: ([], [(-14)])
          - Right:
              expr: '[]'
        - - expr: (['1', '2', '4'], [(-14), (5), (10)])
          - Right:
              expr: '[(''1'', -14), (''2'', 5), (''4'', 10)]'
        - - expr: (['1', '2', '4'], [(-14), (5)])
          - Right:
              expr: '[(''1'', -14), (''2'', 5)]'
        - - expr: (['1'], [(-14), (5)])
          - Right:
              expr: '[(''1'', -14)]'
        - - expr: (['1', '2', '4'], [(-14)])
          - Right:
              expr: '[(''1'', -14)]'
- - expr: unzip
  - - - - type: '[(Int, Char)]'
        - type: ([Int], [Char])
      - - - expr: ([((-14), '1'), ((5), '2')])
          - Right:
              expr: ([-14, 5], "12")
        - - expr: ([((-14), '1')])
          - Right:
              expr: ([-14], "1")
        - - expr: ([])
          - Right:
              expr: ([], "")
        - - expr: ([((-14), '1'), ((5), '2'), ((10), '4')])
          - Right:
              expr: ([-14, 5, 10], "124")
    - - - type: '[(Char, Int)]'
        - type: ([Char], [Int])
      - - - expr: ([('1', (-14)), ('2', (5)), ('4', (10))])
          - Right:
              expr: ("124", [-14, 5, 10])
        - - expr: ([('1', (-14))])
          - Right:
              expr: ("1", [-14])
        - - expr: ([('1', (-14)), ('2', (5))])
          - Right:
              expr: ("12", [-14, 5])
        - - expr: ([])
          - Right:
              expr: ("", [])
    - - - type: '[(Char, Char)]'
        - type: ([Char], [Char])
      - - - expr: ([('1', '1'), ('2', '2'), ('4', '4')])
          - Right:
              expr: ("124", "124")
        - - expr: ([('1', '1')])
          - Right:
              expr: ("1", "1")
        - - expr: ([('1', '1'), ('2', '2')])
          - Right:
              expr: ("12", "12")
        - - expr: ([])
          - Right:
              expr: ("", "")
    - - - type: '[(Int, Int)]'
        - type: ([Int], [Int])
      - - - expr: ([((-14), (-14)), ((5), (5)), ((10), (10))])
          - Right:
              expr: ([-14, 5, 10], [-14, 5, 10])
        - - expr: ([((-14), (-14)), ((5), (5))])
          - Right:
              expr: ([-14, 5], [-14, 5])
        - - expr: ([((-14), (-14))])
          - Right:
              expr: ([-14], [-14])
        - - expr: ([])
          - Right:
              expr: ([], [])
- - expr: let compose = (.) in compose toEnum
  - - - - type: ((Char -> Int), Char)
        - type: Char
      - - - expr: (fromEnum, '2')
          - Right:
              expr: '''2'''
        - - expr: (fromEnum, '4')
          - Right:
              expr: '''4'''
        - - expr: (fromEnum, '8')
          - Right:
              expr: '''8'''
        - - expr: (fromEnum, '5')
          - Right:
              expr: '''5'''
        - - expr: (fromEnum, '7')
          - Right:
              expr: '''7'''
        - - expr: (fromEnum, '0')
          - Right:
              expr: '''0'''
        - - expr: (fromEnum, '3')
          - Right:
              expr: '''3'''
        - - expr: (fromEnum, '1')
          - Right:
              expr: '''1'''
    - - - type: ((Int -> Int), Int)
        - type: Char
      - - - expr: (fromEnum, (-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (fromEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (fromEnum, (5))
          - Right:
              expr: '''\ENQ'''
        - - expr: (fromEnum, (15))
          - Right:
              expr: '''\SI'''
        - - expr: (toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, (-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (fromEnum, (10))
          - Right:
              expr: '''\n'''
        - - expr: (fromEnum, (-14))
          - Left: '"Prelude.chr: bad argument: (-14)"'
    - - - type: ((Char -> Int), Char)
        - type: Int
      - - - expr: (fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: (fromEnum, '8')
          - Right:
              expr: '56'
        - - expr: (fromEnum, '1')
          - Right:
              expr: '49'
        - - expr: (fromEnum, '4')
          - Right:
              expr: '52'
        - - expr: (fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (fromEnum, '5')
          - Right:
              expr: '53'
        - - expr: (fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: (fromEnum, '3')
          - Right:
              expr: '51'
    - - - type: ((Int -> Int), Int)
        - type: Int
      - - - expr: (toEnum, (10))
          - Right:
              expr: '10'
        - - expr: (toEnum, (5))
          - Right:
              expr: '5'
        - - expr: (fromEnum, (10))
          - Right:
              expr: '10'
        - - expr: (fromEnum, (-14))
          - Right:
              expr: (-14)
        - - expr: (fromEnum, (-11))
          - Right:
              expr: (-11)
        - - expr: (fromEnum, (15))
          - Right:
              expr: '15'
        - - expr: (toEnum, (-6))
          - Right:
              expr: (-6)
        - - expr: (toEnum, (-10))
          - Right:
              expr: (-10)
- - expr: let conc = (<>) in conc zip
  - - - - type: (([Char] -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: (zip, [], [(-14)])
          - Right:
              expr: '[]'
        - - expr: (zip, ['1'], [])
          - Right:
              expr: '[]'
        - - expr: (zip, ['1', '2', '4'], [])
          - Right:
              expr: '[]'
        - - expr: (zip, ['1', '2'], [(-14)])
          - Right:
              expr: '[(''1'', -14), (''1'', -14)]'
        - - expr: (zip, ['1', '2', '4'], [(-14)])
          - Right:
              expr: '[(''1'', -14), (''1'', -14)]'
        - - expr: (zip, [], [(-14), (5), (10)])
          - Right:
              expr: '[]'
        - - expr: (zip, ['1', '2', '4'], [(-14), (5)])
          - Right:
              expr: '[(''1'', -14), (''2'', 5), (''1'', -14), (''2'', 5)]'
        - - expr: (zip, [], [])
          - Right:
              expr: '[]'
    - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (zip, [], ['1', '2', '4'])
          - Right:
              expr: '[]'
        - - expr: (zip, ['1', '2'], ['1', '2'])
          - Right:
              expr: '[(''1'', ''1''), (''2'', ''2''), (''1'', ''1''), (''2'', ''2'')]'
        - - expr: (zip, [], ['1', '2'])
          - Right:
              expr: '[]'
        - - expr: (zip, ['1', '2', '4'], ['1'])
          - Right:
              expr: '[(''1'', ''1''), (''1'', ''1'')]'
        - - expr: (zip, ['1'], ['1'])
          - Right:
              expr: '[(''1'', ''1''), (''1'', ''1'')]'
        - - expr: (zip, [], [])
          - Right:
              expr: '[]'
        - - expr: (zip, ['1', '2', '4'], [])
          - Right:
              expr: '[]'
        - - expr: (zip, ['1'], [])
          - Right:
              expr: '[]'
    - - - type: (([Int] -> [Char] -> [(Int, Char)]), [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: (zip, [], ['1', '2', '4'])
          - Right:
              expr: '[]'
        - - expr: (zip, [(-14)], ['1', '2'])
          - Right:
              expr: '[(-14, ''1''), (-14, ''1'')]'
        - - expr: (zip, [], ['1', '2'])
          - Right:
              expr: '[]'
        - - expr: (zip, [], [])
          - Right:
              expr: '[]'
        - - expr: (zip, [(-14), (5), (10)], ['1', '2', '4'])
          - Right:
              expr: '[(-14, ''1''), (5, ''2''), (10, ''4''), (-14, ''1''), (5, ''2''),
                (10, ''4'')]'
        - - expr: (zip, [(-14)], [])
          - Right:
              expr: '[]'
        - - expr: (zip, [(-14), (5)], [])
          - Right:
              expr: '[]'
        - - expr: (zip, [(-14), (5)], ['1'])
          - Right:
              expr: '[(-14, ''1''), (-14, ''1'')]'
    - - - type: (([Int] -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: (zip, [(-14), (5)], [])
          - Right:
              expr: '[]'
        - - expr: (zip, [(-14), (5), (10)], [(-14), (5)])
          - Right:
              expr: '[(-14, -14), (5, 5), (-14, -14), (5, 5)]'
        - - expr: (zip, [], [(-14)])
          - Right:
              expr: '[]'
        - - expr: (zip, [], [(-14), (5)])
          - Right:
              expr: '[]'
        - - expr: (zip, [(-14)], [(-14), (5)])
          - Right:
              expr: '[(-14, -14), (-14, -14)]'
        - - expr: (zip, [(-14), (5)], [(-14), (5)])
          - Right:
              expr: '[(-14, -14), (5, 5), (-14, -14), (5, 5)]'
        - - expr: (zip, [(-14), (5)], [(-14)])
          - Right:
              expr: '[(-14, -14), (-14, -14)]'
        - - expr: (zip, [], [])
          - Right:
              expr: '[]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just
  - - - - type: ((Int -> Int), Int)
        - type: Maybe Int
      - - - expr: (fromEnum, (-11))
          - Right:
              expr: (Just (-11))
        - - expr: (toEnum, (5))
          - Right:
              expr: (Just 5)
        - - expr: (fromEnum, (10))
          - Right:
              expr: (Just 10)
        - - expr: (toEnum, (10))
          - Right:
              expr: (Just 10)
        - - expr: (fromEnum, (-6))
          - Right:
              expr: (Just (-6))
        - - expr: (toEnum, (-11))
          - Right:
              expr: (Just (-11))
        - - expr: (fromEnum, (13))
          - Right:
              expr: (Just 13)
        - - expr: (fromEnum, (-14))
          - Right:
              expr: (Just (-14))
    - - - type: ((Char -> Int), Char)
        - type: Maybe Int
      - - - expr: (fromEnum, '2')
          - Right:
              expr: (Just 50)
        - - expr: (fromEnum, '1')
          - Right:
              expr: (Just 49)
        - - expr: (fromEnum, '5')
          - Right:
              expr: (Just 53)
        - - expr: (fromEnum, '8')
          - Right:
              expr: (Just 56)
        - - expr: (fromEnum, '0')
          - Right:
              expr: (Just 48)
        - - expr: (fromEnum, '3')
          - Right:
              expr: (Just 51)
        - - expr: (fromEnum, '7')
          - Right:
              expr: (Just 55)
        - - expr: (fromEnum, '4')
          - Right:
              expr: (Just 52)
    - - - type: ((Int -> Char), Int)
        - type: Maybe Char
      - - - expr: (toEnum, (15))
          - Right:
              expr: (Just '\SI')
        - - expr: (toEnum, (13))
          - Right:
              expr: (Just '\r')
        - - expr: (toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, (-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (toEnum, (-6))
          - Left: '"Prelude.chr: bad argument: (-6)"'
        - - expr: (toEnum, (-14))
          - Left: '"Prelude.chr: bad argument: (-14)"'
        - - expr: (toEnum, (10))
          - Right:
              expr: (Just '\n')
        - - expr: (toEnum, (5))
          - Right:
              expr: (Just '\ENQ')
- - expr: let zero = 0 in maybe zero
  - - - - type: ((Char -> Int), Maybe Char)
        - type: Int
      - - - expr: (fromEnum, Just '3')
          - Right:
              expr: '51'
        - - expr: (fromEnum, Just '1')
          - Right:
              expr: '49'
        - - expr: (fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: (fromEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (fromEnum, Just '7')
          - Right:
              expr: '55'
    - - - type: ((Int -> Int), Maybe Int)
        - type: Int
      - - - expr: (fromEnum, Just (-14))
          - Right:
              expr: (-14)
        - - expr: (toEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (toEnum, Just (-11))
          - Right:
              expr: (-11)
        - - expr: (toEnum, Just (-6))
          - Right:
              expr: (-6)
        - - expr: (fromEnum, Just (13))
          - Right:
              expr: '13'
        - - expr: (fromEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (toEnum, Just (-14))
          - Right:
              expr: (-14)
        - - expr: (toEnum, Just (13))
          - Right:
              expr: '13'
- - expr: let compose = (.) in compose fromEnum
  - - - - type: ((Int -> Char), Int)
        - type: Int
      - - - expr: (toEnum, (15))
          - Right:
              expr: '15'
        - - expr: (toEnum, (-6))
          - Left: '"Prelude.chr: bad argument: (-6)"'
        - - expr: (toEnum, (13))
          - Right:
              expr: '13'
        - - expr: (toEnum, (-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (toEnum, (10))
          - Right:
              expr: '10'
        - - expr: (toEnum, (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, (-14))
          - Left: '"Prelude.chr: bad argument: (-14)"'
        - - expr: (toEnum, (5))
          - Right:
              expr: '5'
    - - - type: ((Char -> Int), Char)
        - type: Int
      - - - expr: (fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: (fromEnum, '4')
          - Right:
              expr: '52'
        - - expr: (fromEnum, '1')
          - Right:
              expr: '49'
        - - expr: (fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: (fromEnum, '5')
          - Right:
              expr: '53'
        - - expr: (fromEnum, '3')
          - Right:
              expr: '51'
        - - expr: (fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (fromEnum, '8')
          - Right:
              expr: '56'
    - - - type: ((Int -> Int), Int)
        - type: Int
      - - - expr: (toEnum, (-6))
          - Right:
              expr: (-6)
        - - expr: (fromEnum, (15))
          - Right:
              expr: '15'
        - - expr: (toEnum, (-10))
          - Right:
              expr: (-10)
        - - expr: (fromEnum, (-14))
          - Right:
              expr: (-14)
        - - expr: (toEnum, (-11))
          - Right:
              expr: (-11)
        - - expr: (toEnum, (-14))
          - Right:
              expr: (-14)
        - - expr: (toEnum, (5))
          - Right:
              expr: '5'
        - - expr: (fromEnum, (10))
          - Right:
              expr: '10'
- - expr: let prepend = (:) in prepend
  - - - - type: (Int, [Int])
        - type: '[Int]'
      - - - expr: ((15), [(-14)])
          - Right:
              expr: '[15, -14]'
        - - expr: ((5), [(-14)])
          - Right:
              expr: '[5, -14]'
        - - expr: ((10), [(-14), (5), (10)])
          - Right:
              expr: '[10, -14, 5, 10]'
        - - expr: ((15), [(-14), (5)])
          - Right:
              expr: '[15, -14, 5]'
        - - expr: ((-10), [(-14)])
          - Right:
              expr: '[-10, -14]'
        - - expr: ((-6), [(-14), (5)])
          - Right:
              expr: '[-6, -14, 5]'
        - - expr: ((15), [(-14), (5), (10)])
          - Right:
              expr: '[15, -14, 5, 10]'
        - - expr: ((13), [(-14)])
          - Right:
              expr: '[13, -14]'
    - - - type: (Char, [Char])
        - type: '[Char]'
      - - - expr: ('0', ['1'])
          - Right:
              expr: '"01"'
        - - expr: ('4', [])
          - Right:
              expr: '"4"'
        - - expr: ('2', ['1', '2'])
          - Right:
              expr: '"212"'
        - - expr: ('0', [])
          - Right:
              expr: '"0"'
        - - expr: ('5', ['1', '2', '4'])
          - Right:
              expr: '"5124"'
        - - expr: ('4', ['1'])
          - Right:
              expr: '"41"'
        - - expr: ('1', ['1', '2'])
          - Right:
              expr: '"112"'
        - - expr: ('5', [])
          - Right:
              expr: '"5"'
- - expr: let tpl = (,) in tpl
  - - - - type: (Int, Int)
        - type: (Int, Int)
      - - - expr: ((5), (-6))
          - Right:
              expr: (5, -6)
        - - expr: ((-10), (5))
          - Right:
              expr: (-10, 5)
        - - expr: ((-10), (-10))
          - Right:
              expr: (-10, -10)
        - - expr: ((13), (15))
          - Right:
              expr: (13, 15)
        - - expr: ((15), (13))
          - Right:
              expr: (15, 13)
        - - expr: ((-11), (-14))
          - Right:
              expr: (-11, -14)
        - - expr: ((10), (-10))
          - Right:
              expr: (10, -10)
        - - expr: ((-11), (5))
          - Right:
              expr: (-11, 5)
    - - - type: (Char, Char)
        - type: (Char, Char)
      - - - expr: ('7', '4')
          - Right:
              expr: ('7', '4')
        - - expr: ('2', '1')
          - Right:
              expr: ('2', '1')
        - - expr: ('7', '3')
          - Right:
              expr: ('7', '3')
        - - expr: ('3', '1')
          - Right:
              expr: ('3', '1')
        - - expr: ('0', '4')
          - Right:
              expr: ('0', '4')
        - - expr: ('5', '7')
          - Right:
              expr: ('5', '7')
        - - expr: ('0', '0')
          - Right:
              expr: ('0', '0')
        - - expr: ('4', '4')
          - Right:
              expr: ('4', '4')
    - - - type: (Char, Int)
        - type: (Char, Int)
      - - - expr: ('5', (-11))
          - Right:
              expr: ('5', -11)
        - - expr: ('8', (-11))
          - Right:
              expr: ('8', -11)
        - - expr: ('4', (10))
          - Right:
              expr: ('4', 10)
        - - expr: ('3', (-11))
          - Right:
              expr: ('3', -11)
        - - expr: ('0', (15))
          - Right:
              expr: ('0', 15)
        - - expr: ('5', (13))
          - Right:
              expr: ('5', 13)
        - - expr: ('0', (5))
          - Right:
              expr: ('0', 5)
        - - expr: ('0', (10))
          - Right:
              expr: ('0', 10)
    - - - type: (Int, Char)
        - type: (Int, Char)
      - - - expr: ((-10), '5')
          - Right:
              expr: (-10, '5')
        - - expr: ((-14), '7')
          - Right:
              expr: (-14, '7')
        - - expr: ((-6), '8')
          - Right:
              expr: (-6, '8')
        - - expr: ((10), '3')
          - Right:
              expr: (10, '3')
        - - expr: ((-14), '8')
          - Right:
              expr: (-14, '8')
        - - expr: ((5), '0')
          - Right:
              expr: (5, '0')
        - - expr: ((-11), '1')
          - Right:
              expr: (-11, '1')
        - - expr: ((-6), '4')
          - Right:
              expr: (-6, '4')
- - expr: fmap
  - - - - type: ((Int -> Char), [] Int)
        - type: '[] Char'
      - - - expr: (toEnum, [(-14), (5), (10)])
          - Left: '"Prelude.chr: bad argument: (-14)"'
        - - expr: (toEnum, [(-14)])
          - Left: '"Prelude.chr: bad argument: (-14)"'
        - - expr: (toEnum, [(-14), (5)])
          - Left: '"Prelude.chr: bad argument: (-14)"'
        - - expr: (toEnum, [])
          - Right:
              expr: '""'
    - - - type: ((Int -> Int), [] Int)
        - type: '[] Int'
      - - - expr: (fromEnum, [])
          - Right:
              expr: '[]'
        - - expr: (toEnum, [(-14), (5), (10)])
          - Right:
              expr: '[-14, 5, 10]'
        - - expr: (toEnum, [(-14)])
          - Right:
              expr: '[-14]'
        - - expr: (fromEnum, [(-14), (5)])
          - Right:
              expr: '[-14, 5]'
        - - expr: (toEnum, [(-14), (5)])
          - Right:
              expr: '[-14, 5]'
        - - expr: (fromEnum, [(-14)])
          - Right:
              expr: '[-14]'
        - - expr: (fromEnum, [(-14), (5), (10)])
          - Right:
              expr: '[-14, 5, 10]'
        - - expr: (toEnum, [])
          - Right:
              expr: '[]'
    - - - type: ((Int -> Char), Maybe Int)
        - type: Maybe Char
      - - - expr: (toEnum, Just (-14))
          - Left: '"Prelude.chr: bad argument: (-14)"'
        - - expr: (toEnum, Just (13))
          - Right:
              expr: (Just '\r')
        - - expr: (toEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, Just (-6))
          - Left: '"Prelude.chr: bad argument: (-6)"'
        - - expr: (toEnum, Nothing)
          - Right:
              expr: Nothing
    - - - type: ((Char -> Int), [] Char)
        - type: '[] Int'
      - - - expr: (fromEnum, ['1'])
          - Right:
              expr: '[49]'
        - - expr: (fromEnum, ['1', '2'])
          - Right:
              expr: '[49, 50]'
        - - expr: (fromEnum, ['1', '2', '4'])
          - Right:
              expr: '[49, 50, 52]'
        - - expr: (fromEnum, [])
          - Right:
              expr: '[]'
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc prepend
  - - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
      - - - expr: (let prepend = (:) in prepend, (-10), [])
          - Right:
              expr: '[-10, -10]'
        - - expr: (let prepend = (:) in prepend, (15), [(-14), (5), (10)])
          - Right:
              expr: '[15, -14, 5, 10, 15, -14, 5, 10]'
        - - expr: (let prepend = (:) in prepend, (-6), [(-14), (5)])
          - Right:
              expr: '[-6, -14, 5, -6, -14, 5]'
        - - expr: (let prepend = (:) in prepend, (15), [(-14)])
          - Right:
              expr: '[15, -14, 15, -14]'
        - - expr: (let prepend = (:) in prepend, (-14), [(-14), (5), (10)])
          - Right:
              expr: '[-14, -14, 5, 10, -14, -14, 5, 10]'
        - - expr: (let prepend = (:) in prepend, (-11), [(-14)])
          - Right:
              expr: '[-11, -14, -11, -14]'
        - - expr: (let prepend = (:) in prepend, (10), [(-14), (5)])
          - Right:
              expr: '[10, -14, 5, 10, -14, 5]'
        - - expr: (let prepend = (:) in prepend, (15), [(-14), (5)])
          - Right:
              expr: '[15, -14, 5, 15, -14, 5]'
    - - - type: ((Char -> [Char] -> [Char]), Char, [Char])
        - type: '[Char]'
      - - - expr: (let prepend = (:) in prepend, '1', [])
          - Right:
              expr: '"11"'
        - - expr: (let prepend = (:) in prepend, '1', ['1', '2'])
          - Right:
              expr: '"112112"'
        - - expr: (let prepend = (:) in prepend, '0', ['1'])
          - Right:
              expr: '"0101"'
        - - expr: (let prepend = (:) in prepend, '3', ['1'])
          - Right:
              expr: '"3131"'
        - - expr: (let prepend = (:) in prepend, '8', ['1', '2'])
          - Right:
              expr: '"812812"'
        - - expr: (let prepend = (:) in prepend, '4', ['1', '2'])
          - Right:
              expr: '"412412"'
        - - expr: (let prepend = (:) in prepend, '8', ['1'])
          - Right:
              expr: '"8181"'
        - - expr: (let prepend = (:) in prepend, '7', ['1', '2'])
          - Right:
              expr: '"712712"'
- - expr: maybe
  - - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: ((-6), fromEnum, Just (-6))
          - Right:
              expr: (-6)
        - - expr: ((13), fromEnum, Just (13))
          - Right:
              expr: '13'
        - - expr: ((-14), fromEnum, Just (-6))
          - Right:
              expr: (-6)
        - - expr: ((-6), toEnum, Just (-6))
          - Right:
              expr: (-6)
        - - expr: ((-14), toEnum, Nothing)
          - Right:
              expr: (-14)
        - - expr: ((15), toEnum, Just (-11))
          - Right:
              expr: (-11)
        - - expr: ((-11), fromEnum, Just (13))
          - Right:
              expr: '13'
        - - expr: ((-11), fromEnum, Just (-6))
          - Right:
              expr: (-6)
    - - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
      - - - expr: ((10), fromEnum, Just '1')
          - Right:
              expr: '49'
        - - expr: ((-6), fromEnum, Just '3')
          - Right:
              expr: '51'
        - - expr: ((15), fromEnum, Just '1')
          - Right:
              expr: '49'
        - - expr: ((5), fromEnum, Nothing)
          - Right:
              expr: '5'
        - - expr: ((10), fromEnum, Just '3')
          - Right:
              expr: '51'
        - - expr: ((-11), fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ((-14), fromEnum, Just '1')
          - Right:
              expr: '49'
        - - expr: ((13), fromEnum, Just '1')
          - Right:
              expr: '49'
    - - - type: (Char, (Int -> Char), Maybe Int)
        - type: Char
      - - - expr: ('7', toEnum, Just (-6))
          - Left: '"Prelude.chr: bad argument: (-6)"'
        - - expr: ('8', toEnum, Just (13))
          - Right:
              expr: '''\r'''
        - - expr: ('1', toEnum, Just (13))
          - Right:
              expr: '''\r'''
        - - expr: ('2', toEnum, Just (-6))
          - Left: '"Prelude.chr: bad argument: (-6)"'
        - - expr: ('3', toEnum, Just (13))
          - Right:
              expr: '''\r'''
        - - expr: ('5', toEnum, Nothing)
          - Right:
              expr: '''5'''
        - - expr: ('7', toEnum, Just (-11))
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: ('5', toEnum, Just (13))
          - Right:
              expr: '''\r'''
- - expr: let conc = (<>) in conc unzip
  - - - - type: (([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: (unzip, [((-14), '1')])
          - Right:
              expr: ([-14, -14], "11")
        - - expr: (unzip, [((-14), '1'), ((5), '2')])
          - Right:
              expr: ([-14, 5, -14, 5], "1212")
        - - expr: (unzip, [((-14), '1'), ((5), '2'), ((10), '4')])
          - Right:
              expr: ([-14, 5, 10, -14, 5, 10], "124124")
        - - expr: (unzip, [])
          - Right:
              expr: ([], "")
    - - - type: (([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: (unzip, [])
          - Right:
              expr: ([], [])
        - - expr: (unzip, [((-14), (-14))])
          - Right:
              expr: ([-14, -14], [-14, -14])
        - - expr: (unzip, [((-14), (-14)), ((5), (5))])
          - Right:
              expr: ([-14, 5, -14, 5], [-14, 5, -14, 5])
        - - expr: (unzip, [((-14), (-14)), ((5), (5)), ((10), (10))])
          - Right:
              expr: ([-14, 5, 10, -14, 5, 10], [-14, 5, 10, -14, 5, 10])
    - - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: (unzip, [('1', '1'), ('2', '2'), ('4', '4')])
          - Right:
              expr: ("124124", "124124")
        - - expr: (unzip, [('1', '1'), ('2', '2')])
          - Right:
              expr: ("1212", "1212")
        - - expr: (unzip, [('1', '1')])
          - Right:
              expr: ("11", "11")
        - - expr: (unzip, [])
          - Right:
              expr: ("", "")
    - - - type: (([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: (unzip, [('1', (-14)), ('2', (5)), ('4', (10))])
          - Right:
              expr: ("124124", [-14, 5, 10, -14, 5, 10])
        - - expr: (unzip, [('1', (-14)), ('2', (5))])
          - Right:
              expr: ("1212", [-14, 5, -14, 5])
        - - expr: (unzip, [('1', (-14))])
          - Right:
              expr: ("11", [-14, -14])
        - - expr: (unzip, [])
          - Right:
              expr: ("", [])
- - expr: fromEnum
  - - - - type: Char
        - type: Int
      - - - expr: ('3')
          - Right:
              expr: '51'
        - - expr: ('4')
          - Right:
              expr: '52'
        - - expr: ('0')
          - Right:
              expr: '48'
        - - expr: ('5')
          - Right:
              expr: '53'
        - - expr: ('2')
          - Right:
              expr: '50'
        - - expr: ('8')
          - Right:
              expr: '56'
        - - expr: ('7')
          - Right:
              expr: '55'
        - - expr: ('1')
          - Right:
              expr: '49'
    - - - type: Int
        - type: Int
      - - - expr: ((-10))
          - Right:
              expr: (-10)
        - - expr: ((15))
          - Right:
              expr: '15'
        - - expr: ((-11))
          - Right:
              expr: (-11)
        - - expr: ((10))
          - Right:
              expr: '10'
        - - expr: ((13))
          - Right:
              expr: '13'
        - - expr: ((5))
          - Right:
              expr: '5'
        - - expr: ((-14))
          - Right:
              expr: (-14)
        - - expr: ((-6))
          - Right:
              expr: (-6)
- - expr: |-
      let zero = 0
          tpl = (,)
        in tpl zero
  - - - - type: Char
        - type: (Int, Char)
      - - - expr: ('7')
          - Right:
              expr: (0, '7')
        - - expr: ('8')
          - Right:
              expr: (0, '8')
        - - expr: ('4')
          - Right:
              expr: (0, '4')
        - - expr: ('3')
          - Right:
              expr: (0, '3')
        - - expr: ('0')
          - Right:
              expr: (0, '0')
        - - expr: ('5')
          - Right:
              expr: (0, '5')
        - - expr: ('1')
          - Right:
              expr: (0, '1')
        - - expr: ('2')
          - Right:
              expr: (0, '2')
    - - - type: Int
        - type: (Int, Int)
      - - - expr: ((-10))
          - Right:
              expr: (0, -10)
        - - expr: ((-14))
          - Right:
              expr: (0, -14)
        - - expr: ((10))
          - Right:
              expr: (0, 10)
        - - expr: ((13))
          - Right:
              expr: (0, 13)
        - - expr: ((15))
          - Right:
              expr: (0, 15)
        - - expr: ((5))
          - Right:
              expr: (0, 5)
        - - expr: ((-6))
          - Right:
              expr: (0, -6)
        - - expr: ((-11))
          - Right:
              expr: (0, -11)
- - expr: sequence
  - - - - type: '[] (Maybe Int)'
        - type: Maybe ([] Int)
      - - - expr: ([Just (-14), Nothing])
          - Right:
              expr: Nothing
        - - expr: ([])
          - Right:
              expr: (Just [])
        - - expr: ([Just (-14)])
          - Right:
              expr: (Just [-14])
    - - - type: Maybe (Maybe Int)
        - type: Maybe (Maybe Int)
      - - - expr: (Just (Just (-14)))
          - Right:
              expr: (Just (Just (-14)))
        - - expr: (Just (Just (-6)))
          - Right:
              expr: (Just (Just (-6)))
        - - expr: (Nothing)
          - Right:
              expr: (Just Nothing)
    - - - type: Maybe ([] Int)
        - type: '[] (Maybe Int)'
      - - - expr: (Just [(-14), (5), (10)])
          - Right:
              expr: '[Just (-14), Just 5, Just 10]'
        - - expr: (Nothing)
          - Right:
              expr: '[Nothing]'
        - - expr: (Just [(-14), (5)])
          - Right:
              expr: '[Just (-14), Just 5]'
    - - - type: '[] (Maybe Char)'
        - type: Maybe ([] Char)
      - - - expr: ([Just '1'])
          - Right:
              expr: (Just "1")
        - - expr: ([Just '1', Nothing])
          - Right:
              expr: Nothing
        - - expr: ([])
          - Right:
              expr: (Just "")
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend
  - - - - type: ((Int -> Char), Int, [Char])
        - type: '[Char]'
      - - - expr: (toEnum, (15), ['1', '2'])
          - Right:
              expr: '"\SI12"'
        - - expr: (toEnum, (5), ['1'])
          - Right:
              expr: '"\ENQ1"'
        - - expr: (toEnum, (15), ['1', '2', '4'])
          - Right:
              expr: '"\SI124"'
        - - expr: (toEnum, (13), ['1', '2', '4'])
          - Right:
              expr: '"\r124"'
        - - expr: (toEnum, (5), [])
          - Right:
              expr: '"\ENQ"'
        - - expr: (toEnum, (10), ['1', '2'])
          - Right:
              expr: '"\n12"'
        - - expr: (toEnum, (10), [])
          - Right:
              expr: '"\n"'
        - - expr: (toEnum, (-11), [])
          - Left: '"Prelude.chr: bad argument: (-11)"'
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
      - - - expr: (fromEnum, '3', [(-14)])
          - Right:
              expr: '[51, -14]'
        - - expr: (fromEnum, '8', [(-14)])
          - Right:
              expr: '[56, -14]'
        - - expr: (fromEnum, '1', [(-14), (5)])
          - Right:
              expr: '[49, -14, 5]'
        - - expr: (fromEnum, '5', [(-14), (5), (10)])
          - Right:
              expr: '[53, -14, 5, 10]'
        - - expr: (fromEnum, '8', [(-14), (5)])
          - Right:
              expr: '[56, -14, 5]'
        - - expr: (fromEnum, '2', [(-14)])
          - Right:
              expr: '[50, -14]'
        - - expr: (fromEnum, '1', [(-14), (5), (10)])
          - Right:
              expr: '[49, -14, 5, 10]'
        - - expr: (fromEnum, '0', [(-14)])
          - Right:
              expr: '[48, -14]'
    - - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
      - - - expr: (toEnum, (13), [(-14)])
          - Right:
              expr: '[13, -14]'
        - - expr: (toEnum, (5), [])
          - Right:
              expr: '[5]'
        - - expr: (fromEnum, (5), [])
          - Right:
              expr: '[5]'
        - - expr: (fromEnum, (5), [(-14), (5), (10)])
          - Right:
              expr: '[5, -14, 5, 10]'
        - - expr: (fromEnum, (15), [(-14)])
          - Right:
              expr: '[15, -14]'
        - - expr: (toEnum, (5), [(-14)])
          - Right:
              expr: '[5, -14]'
        - - expr: (toEnum, (-11), [])
          - Right:
              expr: '[-11]'
        - - expr: (toEnum, (-14), [(-14), (5), (10)])
          - Right:
              expr: '[-14, -14, 5, 10]'
- - expr: let just = Just in just
  - - - - type: Char
        - type: Maybe Char
      - - - expr: ('5')
          - Right:
              expr: (Just '5')
        - - expr: ('0')
          - Right:
              expr: (Just '0')
        - - expr: ('3')
          - Right:
              expr: (Just '3')
        - - expr: ('1')
          - Right:
              expr: (Just '1')
        - - expr: ('8')
          - Right:
              expr: (Just '8')
        - - expr: ('4')
          - Right:
              expr: (Just '4')
        - - expr: ('7')
          - Right:
              expr: (Just '7')
        - - expr: ('2')
          - Right:
              expr: (Just '2')
    - - - type: Int
        - type: Maybe Int
      - - - expr: ((-14))
          - Right:
              expr: (Just (-14))
        - - expr: ((-10))
          - Right:
              expr: (Just (-10))
        - - expr: ((15))
          - Right:
              expr: (Just 15)
        - - expr: ((-6))
          - Right:
              expr: (Just (-6))
        - - expr: ((10))
          - Right:
              expr: (Just 10)
        - - expr: ((13))
          - Right:
              expr: (Just 13)
        - - expr: ((5))
          - Right:
              expr: (Just 5)
        - - expr: ((-11))
          - Right:
              expr: (Just (-11))
- - expr: |-
      let zero = 0
          prepend = (:)
        in prepend zero
  - - - - type: '[Int]'
        - type: '[Int]'
      - - - expr: ([(-14), (5)])
          - Right:
              expr: '[0, -14, 5]'
        - - expr: ([])
          - Right:
              expr: '[0]'
        - - expr: ([(-14), (5), (10)])
          - Right:
              expr: '[0, -14, 5, 10]'
        - - expr: ([(-14)])
          - Right:
              expr: '[0, -14]'
- - expr: elem
  - - - - type: (Int, [] Int)
        - type: Bool
      - - - expr: ((-11), [(-14), (5), (10)])
          - Right:
              expr: 'False'
        - - expr: ((-10), [(-14)])
          - Right:
              expr: 'False'
        - - expr: ((15), [])
          - Right:
              expr: 'False'
        - - expr: ((-11), [(-14)])
          - Right:
              expr: 'False'
        - - expr: ((-6), [(-14), (5)])
          - Right:
              expr: 'False'
        - - expr: ((-14), [])
          - Right:
              expr: 'False'
        - - expr: ((5), [(-14), (5)])
          - Right:
              expr: 'True'
        - - expr: ((13), [])
          - Right:
              expr: 'False'
    - - - type: (Int, Maybe Int)
        - type: Bool
      - - - expr: ((-14), Just (-11))
          - Right:
              expr: 'False'
        - - expr: ((-14), Just (-14))
          - Right:
              expr: 'True'
        - - expr: ((-14), Just (-6))
          - Right:
              expr: 'False'
        - - expr: ((-6), Just (-11))
          - Right:
              expr: 'False'
        - - expr: ((-11), Just (-14))
          - Right:
              expr: 'False'
        - - expr: ((15), Just (-14))
          - Right:
              expr: 'False'
        - - expr: ((15), Just (13))
          - Right:
              expr: 'False'
        - - expr: ((-6), Just (-6))
          - Right:
              expr: 'True'
    - - - type: (Char, [] Char)
        - type: Bool
      - - - expr: ('5', ['1', '2'])
          - Right:
              expr: 'False'
        - - expr: ('8', ['1', '2', '4'])
          - Right:
              expr: 'False'
        - - expr: ('0', ['1'])
          - Right:
              expr: 'False'
        - - expr: ('7', ['1'])
          - Right:
              expr: 'False'
        - - expr: ('4', ['1', '2', '4'])
          - Right:
              expr: 'True'
        - - expr: ('2', [])
          - Right:
              expr: 'False'
        - - expr: ('2', ['1'])
          - Right:
              expr: 'False'
        - - expr: ('4', [])
          - Right:
              expr: 'False'
    - - - type: (Char, Maybe Char)
        - type: Bool
      - - - expr: ('5', Just '5')
          - Right:
              expr: 'True'
        - - expr: ('1', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('1', Just '5')
          - Right:
              expr: 'False'
        - - expr: ('0', Just '5')
          - Right:
              expr: 'False'
        - - expr: ('3', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('0', Just '1')
          - Right:
              expr: 'False'
        - - expr: ('1', Just '1')
          - Right:
              expr: 'True'
        - - expr: ('7', Just '3')
          - Right:
              expr: 'False'
- - expr: zip mempty
  - - - - type: '[Char]'
        - type: '[(Int, Char)]'
      - - - expr: (['1', '2', '4'])
          - Right:
              expr: '[]'
        - - expr: (['1'])
          - Right:
              expr: '[]'
        - - expr: (['1', '2'])
          - Right:
              expr: '[]'
        - - expr: ([])
          - Right:
              expr: '[]'
    - - - type: '[Int]'
        - type: '[(Char, Int)]'
      - - - expr: ([(-14), (5), (10)])
          - Right:
              expr: '[]'
        - - expr: ([(-14), (5)])
          - Right:
              expr: '[]'
        - - expr: ([(-14)])
          - Right:
              expr: '[]'
        - - expr: ([])
          - Right:
              expr: '[]'
    - - - type: '[Int]'
        - type: '[(Int, Int)]'
      - - - expr: ([(-14)])
          - Right:
              expr: '[]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([(-14), (5), (10)])
          - Right:
              expr: '[]'
        - - expr: ([(-14), (5)])
          - Right:
              expr: '[]'
    - - - type: '[Char]'
        - type: '[(Char, Char)]'
      - - - expr: (['1'])
          - Right:
              expr: '[]'
        - - expr: (['1', '2', '4'])
          - Right:
              expr: '[]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: (['1', '2'])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose elem
  - - - - type: ((Char -> Int), Char, [] Int)
        - type: Bool
      - - - expr: (fromEnum, '8', [(-14), (5), (10)])
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '5', [(-14)])
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '2', [(-14)])
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '8', [])
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '7', [(-14), (5)])
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '2', [(-14), (5)])
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '5', [])
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '5', [(-14), (5), (10)])
          - Right:
              expr: 'False'
    - - - type: ((Int -> Int), Int, Maybe Int)
        - type: Bool
      - - - expr: (fromEnum, (-6), Just (13))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, (15), Nothing)
          - Right:
              expr: 'False'
        - - expr: (toEnum, (10), Just (-6))
          - Right:
              expr: 'False'
        - - expr: (toEnum, (13), Just (-14))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, (13), Just (-11))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, (10), Just (-14))
          - Right:
              expr: 'False'
        - - expr: (toEnum, (-11), Just (-14))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, (13), Just (-14))
          - Right:
              expr: 'False'
    - - - type: ((Char -> Int), Char, Maybe Int)
        - type: Bool
      - - - expr: (fromEnum, '1', Just (13))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '2', Just (13))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '3', Nothing)
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '8', Nothing)
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '5', Just (-11))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '2', Just (-14))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '0', Just (-14))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '0', Nothing)
          - Right:
              expr: 'False'
    - - - type: ((Int -> Char), Int, Maybe Char)
        - type: Bool
      - - - expr: (toEnum, (-10), Just '1')
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (toEnum, (5), Just '5')
          - Right:
              expr: 'False'
        - - expr: (toEnum, (10), Just '5')
          - Right:
              expr: 'False'
        - - expr: (toEnum, (-10), Just '7')
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (toEnum, (-11), Just '3')
          - Left: '"Prelude.chr: bad argument: (-11)"'
        - - expr: (toEnum, (-6), Just '5')
          - Left: '"Prelude.chr: bad argument: (-6)"'
        - - expr: (toEnum, (5), Just '3')
          - Right:
              expr: 'False'
        - - expr: (toEnum, (-14), Just '5')
          - Left: '"Prelude.chr: bad argument: (-14)"'
generationCfg:
  numMin: -20
  seed: 666
  charMin: '0'
  crashOnError: true
  jsonLinesPath: ./run-results/ios.jsonl
  verbosity: warning
  test: 0.3
  maxInstances: 5
  maxHoles: 2
  nestLimit: 1
  charMax: '9'
  numMax: 20
  taskPath: ./run-results/datasets-2.yml
  training: 0.35
  maxParams: 3
  maxInstantiations: 4
  listMin: 0
  numInputs: 10
  validation: 0.35
  listMax: 3
  maxDataset: 1000
variantTypes:
- type: '[a] -> [b] -> [(a, b)]'
- type: '[b] -> [(a, b)]'
- type: '[(a, b)]'
- type: a -> [a] -> [a]
- type: '[a] -> [a]'
- type: '[a]'
- type: '[(a, b)] -> ([a], [b])'
- type: ([a], [b])
- type: '  (Foldable t, Eq a) => a -> t a -> Bool'
- type: '  (Foldable t, Eq a) => t a -> Bool'
- type: Bool
- type: '  Num p => p'
- type: a -> Maybe a
- type: Maybe a
- type: '  Monoid a => a'
- type: '  Enum a => Int -> a'
- type: '  Enum a => a'
- type: '  Foldable t => t a -> Int'
- type: Int
- type: a -> b -> (a, b)
- type: b -> (a, b)
- type: (a, b)
- type: '  (Traversable t, Monad m) => t (m a) -> m (t a)'
- type: '  (Traversable t, Monad m) => m (t a)'
- type: '  (Traversable t, Applicative f) => t (f a) -> f (t a)'
- type: '  (Traversable t, Applicative f) => f (t a)'
- type: '  Enum a => a -> Int'
- type: Int
- type: '  (Foldable t, Monoid m) => (a -> m) -> t a -> m'
- type: '  (Foldable t, Monoid m) => t a -> m'
- type: 'Monoid m => m'
- type: '  Functor f => (a -> b) -> f a -> f b'
- type: '  Functor f => f a -> f b'
- type: '  Functor f => f b'
- type: '  Semigroup a => a -> a -> a'
- type: '  Semigroup a => a -> a'
- type: '  Semigroup a => a'
- type: b -> (a -> b) -> Maybe a -> b
- type: (a -> b) -> Maybe a -> b
- type: Maybe a -> b
- type: b
- type: (b -> c) -> (a -> b) -> a -> c
- type: (a -> b) -> a -> c
- type: a -> c
- type: c
ruleCharMap:
  ',': 6
  \: 30
  l: 40
  g: 38
  '7': 15
  '*': 5
  ? |2+

  : 0
  m: 41
  '-': 7
  M: 25
  =: 18
  ']': 31
  '0': 8
  p: 44
  ' ': 1
  '[': 29
  'N': 26
  '>': 19
  'n': 42
  a: 32
  q: 45
  A: 20
  '1': 9
  d: 35
  t: 48
  '4': 12
  T: 28
  o: 43
  '"': 2
  B: 21
  '2': 10
  b: 33
  r: 46
  u: 49
  E: 22
  '5': 13
  e: 36
  (: 3
  '8': 16
  c: 34
  s: 47
  '3': 11
  S: 27
  f: 37
  v: 50
  F: 23
  '6': 14
  '9': 17
  i: 39
  'y': 51
  ): 4
  I: 24
bothCharMap:
  ',': 5
  L: 27
  \: 36
  l: 47
  g: 44
  '''': 2
  '7': 15
  z: 57
  J: 26
  ':': 18
  m: 48
  '-': 6
  M: 28
  =: 19
  ']': 37
  '0': 8
  P: 30
  p: 51
  ' ': 0
  '[': 35
  .: 7
  'N': 29
  '>': 20
  'n': 49
  a: 38
  '1': 9
  Q: 31
  d: 41
  t: 54
  '4': 12
  T: 34
  o: 50
  '"': 1
  B: 21
  '2': 10
  R: 32
  b: 39
  r: 52
  u: 55
  E: 23
  '5': 13
  e: 42
  h: 45
  (: 3
  '8': 16
  c: 40
  s: 53
  C: 22
  '3': 11
  S: 33
  f: 43
  F: 24
  '6': 14
  '9': 17
  i: 46
  'y': 56
  ): 4
  I: 25
dsl:
  length:
    expr: length
  maybe:
    expr: maybe
  foldMap:
    expr: foldMap
  fromEnum:
    expr: fromEnum
  unzip:
    expr: unzip
  just:
    expr: Just
  zip:
    expr: zip
  elem:
    expr: elem
  sequence:
    expr: sequence
  zero:
    expr: '0'
  fmap:
    expr: fmap
  toEnum:
    expr: toEnum
  mempty:
    expr: mempty
  compose:
    expr: (.)
  tpl:
    expr: (,)
  prepend:
    expr: (:)
  sequenceA:
    expr: sequenceA
  conc:
    expr: (<>)
fnTypes:
- - expr: toEnum
  - type: '  Enum a => Int -> a'
- - expr: sequenceA
  - type: '  (Traversable t, Applicative f) => t (f a) -> f (t a)'
- - expr: length
  - type: '  Foldable t => t a -> Int'
- - expr: zip
  - type: '[a] -> [b] -> [(a, b)]'
- - expr: unzip
  - type: '[(a, b)] -> ([a], [b])'
- - expr: let compose = (.) in compose toEnum
  - type: '  Enum c => (a -> Int) -> a -> c'
- - expr: let conc = (<>) in conc zip
  - type: ([a] -> [b] -> [(a, b)]) -> [a] -> [b] -> [(a, b)]
- - expr: |-
      let just = Just
          compose = (.)
        in compose just
  - type: (a1 -> a2) -> a1 -> Maybe a2
- - expr: let zero = 0 in maybe zero
  - type: '  Num b => (a -> b) -> Maybe a -> b'
- - expr: let compose = (.) in compose fromEnum
  - type: '  Enum a1 => (a2 -> a1) -> a2 -> Int'
- - expr: let prepend = (:) in prepend
  - type: a -> [a] -> [a]
- - expr: let tpl = (,) in tpl
  - type: a -> b -> (a, b)
- - expr: fmap
  - type: '  Functor f => (a -> b) -> f a -> f b'
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc prepend
  - type: (a -> [a] -> [a]) -> a -> [a] -> [a]
- - expr: maybe
  - type: b -> (a -> b) -> Maybe a -> b
- - expr: let conc = (<>) in conc unzip
  - type: ([(a, b)] -> ([a], [b])) -> [(a, b)] -> ([a], [b])
- - expr: fromEnum
  - type: '  Enum a => a -> Int'
- - expr: |-
      let zero = 0
          tpl = (,)
        in tpl zero
  - type: '  Num a => b -> (a, b)'
- - expr: sequence
  - type: '  (Traversable t, Monad m) => t (m a) -> m (t a)'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend
  - type: (a1 -> a2) -> a1 -> [a2] -> [a2]
- - expr: let just = Just in just
  - type: a -> Maybe a
- - expr: |-
      let zero = 0
          prepend = (:)
        in prepend zero
  - type: '  Num a => [a] -> [a]'
- - expr: elem
  - type: '  (Foldable t, Eq a) => a -> t a -> Bool'
- - expr: zip mempty
  - type: '[b] -> [(a, b)]'
- - expr: let compose = (.) in compose elem
  - type: '  (Foldable t, Eq a1) => (a2 -> a1) -> a2 -> t a1 -> Bool'
exprCharMap:
  ',': 5
  L: 24
  \: 32
  l: 43
  g: 40
  '''': 2
  '7': 15
  z: 52
  J: 23
  ':': 18
  m: 44
  '-': 6
  =: 19
  ']': 33
  '0': 8
  P: 26
  p: 47
  ' ': 0
  '[': 31
  .: 7
  'N': 25
  'n': 45
  a: 34
  '1': 9
  Q: 27
  d: 37
  t: 50
  '4': 12
  T: 30
  o: 46
  '"': 1
  '2': 10
  R: 28
  b: 35
  r: 48
  u: 51
  E: 20
  '5': 13
  e: 38
  h: 41
  (: 3
  '8': 16
  c: 36
  s: 49
  '3': 11
  S: 29
  f: 39
  F: 21
  '6': 14
  '9': 17
  i: 42
  ): 4
  I: 22
datasets:
- - - expr: sequenceA
    - - - type: '[] ([] Int)'
        - type: '[] ([] Int)'
  - - expr: length
    - - - type: Maybe Int
        - type: Int
      - - type: '[] Int'
        - type: Int
  - - expr: unzip
    - - - type: '[(Char, Char)]'
        - type: ([Char], [Char])
      - - type: '[(Char, Int)]'
        - type: ([Char], [Int])
  - - expr: let compose = (.) in compose toEnum
    - - - type: ((Int -> Int), Int)
        - type: Char
      - - type: ((Int -> Int), Int)
        - type: Int
  - - expr: let conc = (<>) in conc zip
    - - - type: (([Char] -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just
    - - - type: ((Char -> Int), Char)
        - type: Maybe Int
      - - type: ((Int -> Int), Int)
        - type: Maybe Int
  - - expr: let zero = 0 in maybe zero
    - - - type: ((Char -> Int), Maybe Char)
        - type: Int
      - - type: ((Int -> Int), Maybe Int)
        - type: Int
  - - expr: let prepend = (:) in prepend
    - - - type: (Char, [Char])
        - type: '[Char]'
  - - expr: let tpl = (,) in tpl
    - - - type: (Char, Int)
        - type: (Char, Int)
  - - expr: fmap
    - - - type: ((Int -> Char), Maybe Int)
        - type: Maybe Char
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc prepend
    - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
  - - expr: maybe
    - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
      - - type: (Char, (Int -> Char), Maybe Int)
        - type: Char
  - - expr: let conc = (<>) in conc unzip
    - - - type: (([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - type: (([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: fromEnum
    - - - type: Int
        - type: Int
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend
    - - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
  - - expr: let just = Just in just
    - - - type: Int
        - type: Maybe Int
  - - expr: elem
    - - - type: (Int, [] Int)
        - type: Bool
      - - type: (Char, [] Char)
        - type: Bool
  - - expr: let compose = (.) in compose elem
    - - - type: ((Char -> Int), Char, Maybe Int)
        - type: Bool
      - - type: ((Char -> Int), Char, [] Int)
        - type: Bool
- - - expr: toEnum
    - - - type: Int
        - type: Char
  - - expr: sequenceA
    - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
      - - type: '[] (Maybe Int)'
        - type: Maybe ([] Int)
  - - expr: length
    - - - type: Maybe Char
        - type: Int
      - - type: '[] Char'
        - type: Int
  - - expr: zip
    - - - type: ([Int], [Char])
        - type: '[(Int, Char)]'
      - - type: ([Char], [Char])
        - type: '[(Char, Char)]'
      - - type: ([Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: unzip
    - - - type: '[(Int, Int)]'
        - type: ([Int], [Int])
      - - type: '[(Int, Char)]'
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose toEnum
    - - - type: ((Char -> Int), Char)
        - type: Char
  - - expr: let conc = (<>) in conc zip
    - - - type: (([Int] -> [Char] -> [(Int, Char)]), [Int], [Char])
        - type: '[(Int, Char)]'
  - - expr: let compose = (.) in compose fromEnum
    - - - type: ((Int -> Char), Int)
        - type: Int
      - - type: ((Int -> Int), Int)
        - type: Int
  - - expr: let tpl = (,) in tpl
    - - - type: (Int, Int)
        - type: (Int, Int)
  - - expr: fmap
    - - - type: ((Int -> Int), [] Int)
        - type: '[] Int'
      - - type: ((Int -> Char), [] Int)
        - type: '[] Char'
  - - expr: let conc = (<>) in conc unzip
    - - - type: (([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: fromEnum
    - - - type: Char
        - type: Int
  - - expr: sequence
    - - - type: Maybe (Maybe Int)
        - type: Maybe (Maybe Int)
      - - type: '[] (Maybe Char)'
        - type: Maybe ([] Char)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend
    - - - type: ((Int -> Char), Int, [Char])
        - type: '[Char]'
  - - expr: let just = Just in just
    - - - type: Char
        - type: Maybe Char
  - - expr: |-
        let zero = 0
            prepend = (:)
          in prepend zero
    - - - type: '[Int]'
        - type: '[Int]'
  - - expr: elem
    - - - type: (Int, Maybe Int)
        - type: Bool
  - - expr: zip mempty
    - - - type: '[Char]'
        - type: '[(Char, Char)]'
      - - type: '[Int]'
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose elem
    - - - type: ((Int -> Int), Int, Maybe Int)
        - type: Bool
- - - expr: toEnum
    - - - type: Int
        - type: Int
  - - expr: sequenceA
    - - - type: Maybe ([] Int)
        - type: '[] (Maybe Int)'
  - - expr: zip
    - - - type: ([Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose toEnum
    - - - type: ((Char -> Int), Char)
        - type: Int
  - - expr: let conc = (<>) in conc zip
    - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
      - - type: (([Int] -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just
    - - - type: ((Int -> Char), Int)
        - type: Maybe Char
  - - expr: let compose = (.) in compose fromEnum
    - - - type: ((Char -> Int), Char)
        - type: Int
  - - expr: let prepend = (:) in prepend
    - - - type: (Int, [Int])
        - type: '[Int]'
  - - expr: let tpl = (,) in tpl
    - - - type: (Int, Char)
        - type: (Int, Char)
      - - type: (Char, Char)
        - type: (Char, Char)
  - - expr: fmap
    - - - type: ((Char -> Int), [] Char)
        - type: '[] Int'
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc prepend
    - - - type: ((Char -> [Char] -> [Char]), Char, [Char])
        - type: '[Char]'
  - - expr: maybe
    - - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
  - - expr: |-
        let zero = 0
            tpl = (,)
          in tpl zero
    - - - type: Char
        - type: (Int, Char)
      - - type: Int
        - type: (Int, Int)
  - - expr: sequence
    - - - type: '[] (Maybe Int)'
        - type: Maybe ([] Int)
      - - type: Maybe ([] Int)
        - type: '[] (Maybe Int)'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
  - - expr: elem
    - - - type: (Char, Maybe Char)
        - type: Bool
  - - expr: zip mempty
    - - - type: '[Int]'
        - type: '[(Int, Int)]'
      - - type: '[Char]'
        - type: '[(Int, Char)]'
  - - expr: let compose = (.) in compose elem
    - - - type: ((Int -> Char), Int, Maybe Char)
        - type: Bool
