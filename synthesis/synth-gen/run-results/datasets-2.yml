generatedTypes:
  '0':
  - Int
  - Char
  '1':
  - '[]'
  - Maybe
  '2':
  - (,)
  - Either
longestExprString: 132
exprBlocks:
- - zip
  - expr: zip
- - zip
  - expr: 'zip (undefined :: [a])'
- - zip
  - expr: 'zip (undefined :: [a]) (undefined :: [b])'
- - unzip
  - expr: unzip
- - unzip
  - expr: 'unzip (undefined :: [(a, b)])'
- - elem
  - expr: elem
- - elem
  - expr: 'elem (undefined :: (Foldable t, Eq a) => a)'
- - elem
  - expr: |-
      elem (undefined :: (Foldable t, Eq a) => a)
        (undefined :: (Foldable t, Eq a) => t a)
- - conc
  - expr: conc
- - conc
  - expr: 'conc (undefined :: Semigroup a => a)'
- - conc
  - expr: |-
      conc (undefined :: Semigroup a => a)
        (undefined :: Semigroup a => a)
- - just
  - expr: just
- - just
  - expr: 'just (undefined :: a)'
- - mempty
  - expr: mempty
- - toEnum
  - expr: toEnum
- - toEnum
  - expr: 'toEnum (undefined :: Enum a => Int)'
- - length
  - expr: length
- - length
  - expr: 'length (undefined :: Foldable t => t a)'
- - compose
  - expr: compose
- - compose
  - expr: 'compose (undefined :: (b -> c))'
- - compose
  - expr: 'compose (undefined :: (b -> c)) (undefined :: (a -> b))'
- - compose
  - expr: |-
      compose (undefined :: (b -> c)) (undefined :: (a -> b))
        (undefined :: a)
- - sequence
  - expr: sequence
- - sequence
  - expr: 'sequence (undefined :: (Traversable t, Monad m) => t (m a))'
- - sequenceA
  - expr: sequenceA
- - sequenceA
  - expr: 'sequenceA (undefined :: (Traversable t, Applicative f) => t (f a))'
- - fromEnum
  - expr: fromEnum
- - fromEnum
  - expr: 'fromEnum (undefined :: Enum a => a)'
- - zero
  - expr: zero
- - prepend
  - expr: prepend
- - prepend
  - expr: 'prepend (undefined :: a)'
- - prepend
  - expr: 'prepend (undefined :: a) (undefined :: [a])'
- - foldMap
  - expr: foldMap
- - foldMap
  - expr: 'foldMap (undefined :: (Foldable t, Monoid m) => (a -> m))'
- - foldMap
  - expr: |-
      foldMap (undefined :: (Foldable t, Monoid m) => (a -> m))
        (undefined :: (Foldable t, Monoid m) => t a)
- - fmap
  - expr: fmap
- - fmap
  - expr: 'fmap (undefined :: Functor f => (a -> b))'
- - fmap
  - expr: |-
      fmap (undefined :: Functor f => (a -> b))
        (undefined :: Functor f => f a)
- - maybe
  - expr: maybe
- - maybe
  - expr: 'maybe (undefined :: b)'
- - maybe
  - expr: 'maybe (undefined :: b) (undefined :: (a -> b))'
- - maybe
  - expr: |-
      maybe (undefined :: b) (undefined :: (a -> b))
        (undefined :: Maybe a)
- - tpl
  - expr: tpl
- - tpl
  - expr: 'tpl (undefined :: a)'
- - tpl
  - expr: 'tpl (undefined :: a) (undefined :: b)'
longestString: 132
fnTypeIOs:
- - expr: toEnum
  - - - - type: Int
        - type: Char
      - - - expr: ((19))
          - Right:
              expr: '''\DC3'''
        - - expr: ((11))
          - Right:
              expr: '''\v'''
        - - expr: ((-12))
          - Left: '"Prelude.chr: bad argument: (-12)"'
        - - expr: ((18))
          - Right:
              expr: '''\DC2'''
        - - expr: ((-7))
          - Left: '"Prelude.chr: bad argument: (-7)"'
        - - expr: ((-5))
          - Left: '"Prelude.chr: bad argument: (-5)"'
        - - expr: ((14))
          - Right:
              expr: '''\SO'''
        - - expr: ((-20))
          - Left: '"Prelude.chr: bad argument: (-20)"'
        - - expr: ((13))
          - Right:
              expr: '''\r'''
- - expr: sequenceA
  - - - - type: '[] ([] Char)'
        - type: '[] ([] Char)'
      - - - expr: ([['5', '8', '9', '4', '7'], [], ['5', '8']])
          - Right:
              expr: '[]'
        - - expr: ([])
          - Right:
              expr: '[""]'
        - - expr: ([['5', '8', '9', '4', '7'], []])
          - Right:
              expr: '[]'
        - - expr: ([['5', '8', '9', '4', '7']])
          - Right:
              expr: '["5", "8", "9", "4", "7"]'
    - - - type: '[] (Maybe Char)'
        - type: Maybe ([] Char)
      - - - expr: ([Just '5', Nothing, Just '9', Just '7'])
          - Right:
              expr: Nothing
        - - expr: ([])
          - Right:
              expr: (Just "")
        - - expr: ([Just '5', Nothing])
          - Right:
              expr: Nothing
        - - expr: ([Just '5'])
          - Right:
              expr: (Just "5")
        - - expr: ([Just '5', Nothing, Just '9'])
          - Right:
              expr: Nothing
    - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
      - - - expr: (Just (Just '5'))
          - Right:
              expr: (Just (Just '5'))
        - - expr: (Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (Just (Just '9'))
          - Right:
              expr: (Just (Just '9'))
        - - expr: (Just (Just '0'))
          - Right:
              expr: (Just (Just '0'))
    - - - type: Maybe ([] Char)
        - type: '[] (Maybe Char)'
      - - - expr: (Just ['5', '8', '9', '4', '7'])
          - Right:
              expr: '[Just ''5'', Just ''8'', Just ''9'', Just ''4'', Just ''7'']'
        - - expr: (Nothing)
          - Right:
              expr: '[Nothing]'
        - - expr: (Just ['5', '8'])
          - Right:
              expr: '[Just ''5'', Just ''8'']'
        - - expr: (Just ['5', '8', '9', '4'])
          - Right:
              expr: '[Just ''5'', Just ''8'', Just ''9'', Just ''4'']'
- - expr: length
  - - - - type: Maybe Char
        - type: Int
      - - - expr: (Just '5')
          - Right:
              expr: '1'
        - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just '9')
          - Right:
              expr: '1'
        - - expr: (Just '7')
          - Right:
              expr: '1'
        - - expr: (Just '0')
          - Right:
              expr: '1'
    - - - type: '[] Char'
        - type: Int
      - - - expr: (['5', '8', '9', '4', '7'])
          - Right:
              expr: '5'
        - - expr: ([])
          - Right:
              expr: '0'
        - - expr: (['5', '8'])
          - Right:
              expr: '2'
        - - expr: (['5'])
          - Right:
              expr: '1'
        - - expr: (['5', '8', '9', '4'])
          - Right:
              expr: '4'
- - expr: zip
  - - - - type: ([Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (['5', '8', '9', '4', '7'], ['5', '8', '9', '4', '7'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8''), (''9'', ''9''), (''4'', ''4''),
                (''7'', ''7'')]'
        - - expr: (['5', '8', '9', '4', '7'], [])
          - Right:
              expr: '[]'
        - - expr: (['5', '8', '9', '4', '7'], ['5', '8'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8'')]'
        - - expr: (['5', '8', '9', '4', '7'], ['5'])
          - Right:
              expr: '[(''5'', ''5'')]'
        - - expr: (['5', '8', '9', '4', '7'], ['5', '8', '9', '4'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8''), (''9'', ''9''), (''4'', ''4'')]'
        - - expr: ([], ['5', '8', '9', '4', '7'])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([], ['5', '8'])
          - Right:
              expr: '[]'
        - - expr: ([], ['5'])
          - Right:
              expr: '[]'
        - - expr: ([], ['5', '8', '9', '4'])
          - Right:
              expr: '[]'
        - - expr: (['5', '8'], ['5', '8', '9', '4', '7'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8'')]'
        - - expr: (['5', '8'], [])
          - Right:
              expr: '[]'
        - - expr: (['5', '8'], ['5', '8'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8'')]'
        - - expr: (['5', '8'], ['5'])
          - Right:
              expr: '[(''5'', ''5'')]'
        - - expr: (['5', '8'], ['5', '8', '9', '4'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8'')]'
        - - expr: (['5'], ['5', '8', '9', '4', '7'])
          - Right:
              expr: '[(''5'', ''5'')]'
        - - expr: (['5'], [])
          - Right:
              expr: '[]'
        - - expr: (['5'], ['5', '8'])
          - Right:
              expr: '[(''5'', ''5'')]'
        - - expr: (['5'], ['5'])
          - Right:
              expr: '[(''5'', ''5'')]'
        - - expr: (['5'], ['5', '8', '9', '4'])
          - Right:
              expr: '[(''5'', ''5'')]'
        - - expr: (['5', '8', '9', '4'], ['5', '8', '9', '4', '7'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8''), (''9'', ''9''), (''4'', ''4'')]'
        - - expr: (['5', '8', '9', '4'], [])
          - Right:
              expr: '[]'
        - - expr: (['5', '8', '9', '4'], ['5', '8'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8'')]'
        - - expr: (['5', '8', '9', '4'], ['5'])
          - Right:
              expr: '[(''5'', ''5'')]'
        - - expr: (['5', '8', '9', '4'], ['5', '8', '9', '4'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8''), (''9'', ''9''), (''4'', ''4'')]'
- - expr: unzip
  - - - - type: '[(Char, Char)]'
        - type: ([Char], [Char])
      - - - expr: ([('5', '5'), ('8', '8'), ('9', '9'), ('4', '4'), ('7', '7')])
          - Right:
              expr: ("58947", "58947")
        - - expr: ([])
          - Right:
              expr: ("", "")
        - - expr: ([('5', '5'), ('8', '8')])
          - Right:
              expr: ("58", "58")
        - - expr: ([('5', '5')])
          - Right:
              expr: ("5", "5")
        - - expr: ([('5', '5'), ('8', '8'), ('9', '9'), ('4', '4')])
          - Right:
              expr: ("5894", "5894")
- - expr: let compose = (.) in compose toEnum
  - - - - type: ((Char -> Int), Char)
        - type: Char
      - - - expr: (fromEnum, '5')
          - Right:
              expr: '''5'''
        - - expr: (fromEnum, '8')
          - Right:
              expr: '''8'''
        - - expr: (fromEnum, '9')
          - Right:
              expr: '''9'''
        - - expr: (fromEnum, '4')
          - Right:
              expr: '''4'''
        - - expr: (fromEnum, '7')
          - Right:
              expr: '''7'''
        - - expr: (fromEnum, '0')
          - Right:
              expr: '''0'''
        - - expr: (fromEnum, '1')
          - Right:
              expr: '''1'''
        - - expr: (fromEnum, '6')
          - Right:
              expr: '''6'''
- - expr: let conc = (<>) in conc zip
  - - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (zip, ['5', '8', '9', '4', '7'], ['5', '8', '9', '4', '7'])
          - Right:
              expr: |-
                [('5', '5'), ('8', '8'), ('9', '9'), ('4', '4'), ('7', '7'),
                 ('5', '5'), ('8', '8'), ('9', '9'), ('4', '4'), ('7', '7')]
        - - expr: (zip, ['5', '8', '9', '4', '7'], [])
          - Right:
              expr: '[]'
        - - expr: (zip, ['5', '8', '9', '4', '7'], ['5', '8'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8''), (''5'', ''5''), (''8'', ''8'')]'
        - - expr: (zip, ['5', '8', '9', '4', '7'], ['5'])
          - Right:
              expr: '[(''5'', ''5''), (''5'', ''5'')]'
        - - expr: (zip, ['5', '8', '9', '4', '7'], ['5', '8', '9', '4'])
          - Right:
              expr: |-
                [('5', '5'), ('8', '8'), ('9', '9'), ('4', '4'), ('5', '5'),
                 ('8', '8'), ('9', '9'), ('4', '4')]
        - - expr: (zip, [], ['5', '8', '9', '4', '7'])
          - Right:
              expr: '[]'
        - - expr: (zip, [], [])
          - Right:
              expr: '[]'
        - - expr: (zip, [], ['5', '8'])
          - Right:
              expr: '[]'
        - - expr: (zip, [], ['5'])
          - Right:
              expr: '[]'
        - - expr: (zip, [], ['5', '8', '9', '4'])
          - Right:
              expr: '[]'
        - - expr: (zip, ['5', '8'], ['5', '8', '9', '4', '7'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8''), (''5'', ''5''), (''8'', ''8'')]'
        - - expr: (zip, ['5', '8'], [])
          - Right:
              expr: '[]'
        - - expr: (zip, ['5', '8'], ['5', '8'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8''), (''5'', ''5''), (''8'', ''8'')]'
        - - expr: (zip, ['5', '8'], ['5'])
          - Right:
              expr: '[(''5'', ''5''), (''5'', ''5'')]'
        - - expr: (zip, ['5', '8'], ['5', '8', '9', '4'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8''), (''5'', ''5''), (''8'', ''8'')]'
        - - expr: (zip, ['5'], ['5', '8', '9', '4', '7'])
          - Right:
              expr: '[(''5'', ''5''), (''5'', ''5'')]'
        - - expr: (zip, ['5'], [])
          - Right:
              expr: '[]'
        - - expr: (zip, ['5'], ['5', '8'])
          - Right:
              expr: '[(''5'', ''5''), (''5'', ''5'')]'
        - - expr: (zip, ['5'], ['5'])
          - Right:
              expr: '[(''5'', ''5''), (''5'', ''5'')]'
        - - expr: (zip, ['5'], ['5', '8', '9', '4'])
          - Right:
              expr: '[(''5'', ''5''), (''5'', ''5'')]'
        - - expr: (zip, ['5', '8', '9', '4'], ['5', '8', '9', '4', '7'])
          - Right:
              expr: |-
                [('5', '5'), ('8', '8'), ('9', '9'), ('4', '4'), ('5', '5'),
                 ('8', '8'), ('9', '9'), ('4', '4')]
        - - expr: (zip, ['5', '8', '9', '4'], [])
          - Right:
              expr: '[]'
        - - expr: (zip, ['5', '8', '9', '4'], ['5', '8'])
          - Right:
              expr: '[(''5'', ''5''), (''8'', ''8''), (''5'', ''5''), (''8'', ''8'')]'
        - - expr: (zip, ['5', '8', '9', '4'], ['5'])
          - Right:
              expr: '[(''5'', ''5''), (''5'', ''5'')]'
        - - expr: (zip, ['5', '8', '9', '4'], ['5', '8', '9', '4'])
          - Right:
              expr: |-
                [('5', '5'), ('8', '8'), ('9', '9'), ('4', '4'), ('5', '5'),
                 ('8', '8'), ('9', '9'), ('4', '4')]
- - expr: let prepend = (:) in prepend
  - - - - type: (Char, [Char])
        - type: '[Char]'
      - - - expr: ('5', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"558947"'
        - - expr: ('5', [])
          - Right:
              expr: '"5"'
        - - expr: ('5', ['5', '8'])
          - Right:
              expr: '"558"'
        - - expr: ('5', ['5'])
          - Right:
              expr: '"55"'
        - - expr: ('5', ['5', '8', '9', '4'])
          - Right:
              expr: '"55894"'
        - - expr: ('8', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"858947"'
        - - expr: ('8', [])
          - Right:
              expr: '"8"'
        - - expr: ('8', ['5', '8'])
          - Right:
              expr: '"858"'
        - - expr: ('8', ['5'])
          - Right:
              expr: '"85"'
        - - expr: ('8', ['5', '8', '9', '4'])
          - Right:
              expr: '"85894"'
        - - expr: ('9', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"958947"'
        - - expr: ('9', [])
          - Right:
              expr: '"9"'
        - - expr: ('9', ['5', '8'])
          - Right:
              expr: '"958"'
        - - expr: ('9', ['5'])
          - Right:
              expr: '"95"'
        - - expr: ('9', ['5', '8', '9', '4'])
          - Right:
              expr: '"95894"'
        - - expr: ('4', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"458947"'
        - - expr: ('4', [])
          - Right:
              expr: '"4"'
        - - expr: ('4', ['5', '8'])
          - Right:
              expr: '"458"'
        - - expr: ('4', ['5'])
          - Right:
              expr: '"45"'
        - - expr: ('4', ['5', '8', '9', '4'])
          - Right:
              expr: '"45894"'
        - - expr: ('7', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"758947"'
        - - expr: ('7', [])
          - Right:
              expr: '"7"'
        - - expr: ('7', ['5', '8'])
          - Right:
              expr: '"758"'
        - - expr: ('7', ['5'])
          - Right:
              expr: '"75"'
        - - expr: ('7', ['5', '8', '9', '4'])
          - Right:
              expr: '"75894"'
        - - expr: ('0', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"058947"'
        - - expr: ('0', [])
          - Right:
              expr: '"0"'
        - - expr: ('0', ['5', '8'])
          - Right:
              expr: '"058"'
        - - expr: ('0', ['5'])
          - Right:
              expr: '"05"'
        - - expr: ('0', ['5', '8', '9', '4'])
          - Right:
              expr: '"05894"'
        - - expr: ('1', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"158947"'
        - - expr: ('1', [])
          - Right:
              expr: '"1"'
        - - expr: ('1', ['5', '8'])
          - Right:
              expr: '"158"'
        - - expr: ('1', ['5'])
          - Right:
              expr: '"15"'
        - - expr: ('1', ['5', '8', '9', '4'])
          - Right:
              expr: '"15894"'
        - - expr: ('6', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"658947"'
        - - expr: ('6', [])
          - Right:
              expr: '"6"'
        - - expr: ('6', ['5', '8'])
          - Right:
              expr: '"658"'
        - - expr: ('6', ['5'])
          - Right:
              expr: '"65"'
        - - expr: ('6', ['5', '8', '9', '4'])
          - Right:
              expr: '"65894"'
- - expr: let tpl = (,) in tpl
  - - - - type: (Char, Char)
        - type: (Char, Char)
      - - - expr: ('5', '5')
          - Right:
              expr: ('5', '5')
        - - expr: ('5', '8')
          - Right:
              expr: ('5', '8')
        - - expr: ('5', '9')
          - Right:
              expr: ('5', '9')
        - - expr: ('5', '4')
          - Right:
              expr: ('5', '4')
        - - expr: ('5', '7')
          - Right:
              expr: ('5', '7')
        - - expr: ('5', '0')
          - Right:
              expr: ('5', '0')
        - - expr: ('5', '1')
          - Right:
              expr: ('5', '1')
        - - expr: ('5', '6')
          - Right:
              expr: ('5', '6')
        - - expr: ('8', '5')
          - Right:
              expr: ('8', '5')
        - - expr: ('8', '8')
          - Right:
              expr: ('8', '8')
        - - expr: ('8', '9')
          - Right:
              expr: ('8', '9')
        - - expr: ('8', '4')
          - Right:
              expr: ('8', '4')
        - - expr: ('8', '7')
          - Right:
              expr: ('8', '7')
        - - expr: ('8', '0')
          - Right:
              expr: ('8', '0')
        - - expr: ('8', '1')
          - Right:
              expr: ('8', '1')
        - - expr: ('8', '6')
          - Right:
              expr: ('8', '6')
        - - expr: ('9', '5')
          - Right:
              expr: ('9', '5')
        - - expr: ('9', '8')
          - Right:
              expr: ('9', '8')
        - - expr: ('9', '9')
          - Right:
              expr: ('9', '9')
        - - expr: ('9', '4')
          - Right:
              expr: ('9', '4')
        - - expr: ('9', '7')
          - Right:
              expr: ('9', '7')
        - - expr: ('9', '0')
          - Right:
              expr: ('9', '0')
        - - expr: ('9', '1')
          - Right:
              expr: ('9', '1')
        - - expr: ('9', '6')
          - Right:
              expr: ('9', '6')
        - - expr: ('4', '5')
          - Right:
              expr: ('4', '5')
        - - expr: ('4', '8')
          - Right:
              expr: ('4', '8')
        - - expr: ('4', '9')
          - Right:
              expr: ('4', '9')
        - - expr: ('4', '4')
          - Right:
              expr: ('4', '4')
        - - expr: ('4', '7')
          - Right:
              expr: ('4', '7')
        - - expr: ('4', '0')
          - Right:
              expr: ('4', '0')
        - - expr: ('4', '1')
          - Right:
              expr: ('4', '1')
        - - expr: ('4', '6')
          - Right:
              expr: ('4', '6')
        - - expr: ('7', '5')
          - Right:
              expr: ('7', '5')
        - - expr: ('7', '8')
          - Right:
              expr: ('7', '8')
        - - expr: ('7', '9')
          - Right:
              expr: ('7', '9')
        - - expr: ('7', '4')
          - Right:
              expr: ('7', '4')
        - - expr: ('7', '7')
          - Right:
              expr: ('7', '7')
        - - expr: ('7', '0')
          - Right:
              expr: ('7', '0')
        - - expr: ('7', '1')
          - Right:
              expr: ('7', '1')
        - - expr: ('7', '6')
          - Right:
              expr: ('7', '6')
        - - expr: ('0', '5')
          - Right:
              expr: ('0', '5')
        - - expr: ('0', '8')
          - Right:
              expr: ('0', '8')
        - - expr: ('0', '9')
          - Right:
              expr: ('0', '9')
        - - expr: ('0', '4')
          - Right:
              expr: ('0', '4')
        - - expr: ('0', '7')
          - Right:
              expr: ('0', '7')
        - - expr: ('0', '0')
          - Right:
              expr: ('0', '0')
        - - expr: ('0', '1')
          - Right:
              expr: ('0', '1')
        - - expr: ('0', '6')
          - Right:
              expr: ('0', '6')
        - - expr: ('1', '5')
          - Right:
              expr: ('1', '5')
        - - expr: ('1', '8')
          - Right:
              expr: ('1', '8')
        - - expr: ('1', '9')
          - Right:
              expr: ('1', '9')
        - - expr: ('1', '4')
          - Right:
              expr: ('1', '4')
        - - expr: ('1', '7')
          - Right:
              expr: ('1', '7')
        - - expr: ('1', '0')
          - Right:
              expr: ('1', '0')
        - - expr: ('1', '1')
          - Right:
              expr: ('1', '1')
        - - expr: ('1', '6')
          - Right:
              expr: ('1', '6')
        - - expr: ('6', '5')
          - Right:
              expr: ('6', '5')
        - - expr: ('6', '8')
          - Right:
              expr: ('6', '8')
        - - expr: ('6', '9')
          - Right:
              expr: ('6', '9')
        - - expr: ('6', '4')
          - Right:
              expr: ('6', '4')
        - - expr: ('6', '7')
          - Right:
              expr: ('6', '7')
        - - expr: ('6', '0')
          - Right:
              expr: ('6', '0')
        - - expr: ('6', '1')
          - Right:
              expr: ('6', '1')
        - - expr: ('6', '6')
          - Right:
              expr: ('6', '6')
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc prepend
  - - - - type: ((Char -> [Char] -> [Char]), Char, [Char])
        - type: '[Char]'
      - - - expr: (let prepend = (:) in prepend, '5', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"558947558947"'
        - - expr: (let prepend = (:) in prepend, '5', [])
          - Right:
              expr: '"55"'
        - - expr: (let prepend = (:) in prepend, '5', ['5', '8'])
          - Right:
              expr: '"558558"'
        - - expr: (let prepend = (:) in prepend, '5', ['5'])
          - Right:
              expr: '"5555"'
        - - expr: (let prepend = (:) in prepend, '5', ['5', '8', '9', '4'])
          - Right:
              expr: '"5589455894"'
        - - expr: (let prepend = (:) in prepend, '8', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"858947858947"'
        - - expr: (let prepend = (:) in prepend, '8', [])
          - Right:
              expr: '"88"'
        - - expr: (let prepend = (:) in prepend, '8', ['5', '8'])
          - Right:
              expr: '"858858"'
        - - expr: (let prepend = (:) in prepend, '8', ['5'])
          - Right:
              expr: '"8585"'
        - - expr: (let prepend = (:) in prepend, '8', ['5', '8', '9', '4'])
          - Right:
              expr: '"8589485894"'
        - - expr: (let prepend = (:) in prepend, '9', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"958947958947"'
        - - expr: (let prepend = (:) in prepend, '9', [])
          - Right:
              expr: '"99"'
        - - expr: (let prepend = (:) in prepend, '9', ['5', '8'])
          - Right:
              expr: '"958958"'
        - - expr: (let prepend = (:) in prepend, '9', ['5'])
          - Right:
              expr: '"9595"'
        - - expr: (let prepend = (:) in prepend, '9', ['5', '8', '9', '4'])
          - Right:
              expr: '"9589495894"'
        - - expr: (let prepend = (:) in prepend, '4', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"458947458947"'
        - - expr: (let prepend = (:) in prepend, '4', [])
          - Right:
              expr: '"44"'
        - - expr: (let prepend = (:) in prepend, '4', ['5', '8'])
          - Right:
              expr: '"458458"'
        - - expr: (let prepend = (:) in prepend, '4', ['5'])
          - Right:
              expr: '"4545"'
        - - expr: (let prepend = (:) in prepend, '4', ['5', '8', '9', '4'])
          - Right:
              expr: '"4589445894"'
        - - expr: (let prepend = (:) in prepend, '7', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"758947758947"'
        - - expr: (let prepend = (:) in prepend, '7', [])
          - Right:
              expr: '"77"'
        - - expr: (let prepend = (:) in prepend, '7', ['5', '8'])
          - Right:
              expr: '"758758"'
        - - expr: (let prepend = (:) in prepend, '7', ['5'])
          - Right:
              expr: '"7575"'
        - - expr: (let prepend = (:) in prepend, '7', ['5', '8', '9', '4'])
          - Right:
              expr: '"7589475894"'
        - - expr: (let prepend = (:) in prepend, '0', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"058947058947"'
        - - expr: (let prepend = (:) in prepend, '0', [])
          - Right:
              expr: '"00"'
        - - expr: (let prepend = (:) in prepend, '0', ['5', '8'])
          - Right:
              expr: '"058058"'
        - - expr: (let prepend = (:) in prepend, '0', ['5'])
          - Right:
              expr: '"0505"'
        - - expr: (let prepend = (:) in prepend, '0', ['5', '8', '9', '4'])
          - Right:
              expr: '"0589405894"'
        - - expr: (let prepend = (:) in prepend, '1', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"158947158947"'
        - - expr: (let prepend = (:) in prepend, '1', [])
          - Right:
              expr: '"11"'
        - - expr: (let prepend = (:) in prepend, '1', ['5', '8'])
          - Right:
              expr: '"158158"'
        - - expr: (let prepend = (:) in prepend, '1', ['5'])
          - Right:
              expr: '"1515"'
        - - expr: (let prepend = (:) in prepend, '1', ['5', '8', '9', '4'])
          - Right:
              expr: '"1589415894"'
        - - expr: (let prepend = (:) in prepend, '6', ['5', '8', '9', '4', '7'])
          - Right:
              expr: '"658947658947"'
        - - expr: (let prepend = (:) in prepend, '6', [])
          - Right:
              expr: '"66"'
        - - expr: (let prepend = (:) in prepend, '6', ['5', '8'])
          - Right:
              expr: '"658658"'
        - - expr: (let prepend = (:) in prepend, '6', ['5'])
          - Right:
              expr: '"6565"'
        - - expr: (let prepend = (:) in prepend, '6', ['5', '8', '9', '4'])
          - Right:
              expr: '"6589465894"'
- - expr: let conc = (<>) in conc unzip
  - - - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (unzip,
               [('5', '5'), ('8', '8'), ('9', '9'), ('4', '4'), ('7', '7')])
          - Right:
              expr: ("5894758947", "5894758947")
        - - expr: (unzip, [])
          - Right:
              expr: ("", "")
        - - expr: (unzip, [('5', '5'), ('8', '8')])
          - Right:
              expr: ("5858", "5858")
        - - expr: (unzip, [('5', '5')])
          - Right:
              expr: ("55", "55")
        - - expr: (unzip, [('5', '5'), ('8', '8'), ('9', '9'), ('4', '4')])
          - Right:
              expr: ("58945894", "58945894")
- - expr: fromEnum
  - - - - type: Char
        - type: Int
      - - - expr: ('5')
          - Right:
              expr: '53'
        - - expr: ('8')
          - Right:
              expr: '56'
        - - expr: ('9')
          - Right:
              expr: '57'
        - - expr: ('4')
          - Right:
              expr: '52'
        - - expr: ('7')
          - Right:
              expr: '55'
        - - expr: ('0')
          - Right:
              expr: '48'
        - - expr: ('1')
          - Right:
              expr: '49'
        - - expr: ('6')
          - Right:
              expr: '54'
- - expr: let just = Just in just
  - - - - type: Char
        - type: Maybe Char
      - - - expr: ('5')
          - Right:
              expr: (Just '5')
        - - expr: ('8')
          - Right:
              expr: (Just '8')
        - - expr: ('9')
          - Right:
              expr: (Just '9')
        - - expr: ('4')
          - Right:
              expr: (Just '4')
        - - expr: ('7')
          - Right:
              expr: (Just '7')
        - - expr: ('0')
          - Right:
              expr: (Just '0')
        - - expr: ('1')
          - Right:
              expr: (Just '1')
        - - expr: ('6')
          - Right:
              expr: (Just '6')
- - expr: elem
  - - - - type: (Char, [] Char)
        - type: Bool
      - - - expr: ('5', ['5', '8', '9', '4', '7'])
          - Right:
              expr: 'True'
        - - expr: ('5', [])
          - Right:
              expr: 'False'
        - - expr: ('5', ['5', '8'])
          - Right:
              expr: 'True'
        - - expr: ('5', ['5'])
          - Right:
              expr: 'True'
        - - expr: ('5', ['5', '8', '9', '4'])
          - Right:
              expr: 'True'
        - - expr: ('8', ['5', '8', '9', '4', '7'])
          - Right:
              expr: 'True'
        - - expr: ('8', [])
          - Right:
              expr: 'False'
        - - expr: ('8', ['5', '8'])
          - Right:
              expr: 'True'
        - - expr: ('8', ['5'])
          - Right:
              expr: 'False'
        - - expr: ('8', ['5', '8', '9', '4'])
          - Right:
              expr: 'True'
        - - expr: ('9', ['5', '8', '9', '4', '7'])
          - Right:
              expr: 'True'
        - - expr: ('9', [])
          - Right:
              expr: 'False'
        - - expr: ('9', ['5', '8'])
          - Right:
              expr: 'False'
        - - expr: ('9', ['5'])
          - Right:
              expr: 'False'
        - - expr: ('9', ['5', '8', '9', '4'])
          - Right:
              expr: 'True'
        - - expr: ('4', ['5', '8', '9', '4', '7'])
          - Right:
              expr: 'True'
        - - expr: ('4', [])
          - Right:
              expr: 'False'
        - - expr: ('4', ['5', '8'])
          - Right:
              expr: 'False'
        - - expr: ('4', ['5'])
          - Right:
              expr: 'False'
        - - expr: ('4', ['5', '8', '9', '4'])
          - Right:
              expr: 'True'
        - - expr: ('7', ['5', '8', '9', '4', '7'])
          - Right:
              expr: 'True'
        - - expr: ('7', [])
          - Right:
              expr: 'False'
        - - expr: ('7', ['5', '8'])
          - Right:
              expr: 'False'
        - - expr: ('7', ['5'])
          - Right:
              expr: 'False'
        - - expr: ('7', ['5', '8', '9', '4'])
          - Right:
              expr: 'False'
        - - expr: ('0', ['5', '8', '9', '4', '7'])
          - Right:
              expr: 'False'
        - - expr: ('0', [])
          - Right:
              expr: 'False'
        - - expr: ('0', ['5', '8'])
          - Right:
              expr: 'False'
        - - expr: ('0', ['5'])
          - Right:
              expr: 'False'
        - - expr: ('0', ['5', '8', '9', '4'])
          - Right:
              expr: 'False'
        - - expr: ('1', ['5', '8', '9', '4', '7'])
          - Right:
              expr: 'False'
        - - expr: ('1', [])
          - Right:
              expr: 'False'
        - - expr: ('1', ['5', '8'])
          - Right:
              expr: 'False'
        - - expr: ('1', ['5'])
          - Right:
              expr: 'False'
        - - expr: ('1', ['5', '8', '9', '4'])
          - Right:
              expr: 'False'
        - - expr: ('6', ['5', '8', '9', '4', '7'])
          - Right:
              expr: 'False'
        - - expr: ('6', [])
          - Right:
              expr: 'False'
        - - expr: ('6', ['5', '8'])
          - Right:
              expr: 'False'
        - - expr: ('6', ['5'])
          - Right:
              expr: 'False'
        - - expr: ('6', ['5', '8', '9', '4'])
          - Right:
              expr: 'False'
    - - - type: (Char, Maybe Char)
        - type: Bool
      - - - expr: ('5', Just '5')
          - Right:
              expr: 'True'
        - - expr: ('5', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('5', Just '9')
          - Right:
              expr: 'False'
        - - expr: ('5', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('5', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('8', Just '5')
          - Right:
              expr: 'False'
        - - expr: ('8', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('8', Just '9')
          - Right:
              expr: 'False'
        - - expr: ('8', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('8', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('9', Just '5')
          - Right:
              expr: 'False'
        - - expr: ('9', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('9', Just '9')
          - Right:
              expr: 'True'
        - - expr: ('9', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('9', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('4', Just '5')
          - Right:
              expr: 'False'
        - - expr: ('4', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('4', Just '9')
          - Right:
              expr: 'False'
        - - expr: ('4', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('4', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('7', Just '5')
          - Right:
              expr: 'False'
        - - expr: ('7', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('7', Just '9')
          - Right:
              expr: 'False'
        - - expr: ('7', Just '7')
          - Right:
              expr: 'True'
        - - expr: ('7', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('0', Just '5')
          - Right:
              expr: 'False'
        - - expr: ('0', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('0', Just '9')
          - Right:
              expr: 'False'
        - - expr: ('0', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('0', Just '0')
          - Right:
              expr: 'True'
        - - expr: ('1', Just '5')
          - Right:
              expr: 'False'
        - - expr: ('1', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('1', Just '9')
          - Right:
              expr: 'False'
        - - expr: ('1', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('1', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('6', Just '5')
          - Right:
              expr: 'False'
        - - expr: ('6', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('6', Just '9')
          - Right:
              expr: 'False'
        - - expr: ('6', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('6', Just '0')
          - Right:
              expr: 'False'
- - expr: zip mempty
  - - - - type: '[Char]'
        - type: '[(Char, Char)]'
      - - - expr: (['5', '8', '9', '4', '7'])
          - Right:
              expr: '[]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: (['5', '8'])
          - Right:
              expr: '[]'
        - - expr: (['5'])
          - Right:
              expr: '[]'
        - - expr: (['5', '8', '9', '4'])
          - Right:
              expr: '[]'
generationCfg:
  numMin: -20
  seed: 666
  charMin: '0'
  crashOnError: true
  jsonLinesPath: ./run-results/ios.jsonl
  verbosity: warning
  test: 0.3
  maxInstances: 5
  maxHoles: 2
  nestLimit: 1
  charMax: '9'
  numMax: 20
  taskPath: ./run-results/datasets-2.yml
  training: 0.35
  maxParams: 3
  maxInstantiations: 4
  listMin: 0
  numInputs: 10
  validation: 0.35
  listMax: 5
  maxDataset: 1000
variantTypes:
- type: '[a] -> [b] -> [(a, b)]'
- type: '[b] -> [(a, b)]'
- type: '[(a, b)]'
- type: a -> [a] -> [a]
- type: '[a] -> [a]'
- type: '[a]'
- type: '[(a, b)] -> ([a], [b])'
- type: ([a], [b])
- type: '  (Foldable t, Eq a) => a -> t a -> Bool'
- type: '  (Foldable t, Eq a) => t a -> Bool'
- type: Bool
- type: '  Num p => p'
- type: a -> Maybe a
- type: Maybe a
- type: '  Monoid a => a'
- type: '  Enum a => Int -> a'
- type: '  Enum a => a'
- type: '  Foldable t => t a -> Int'
- type: Int
- type: a -> b -> (a, b)
- type: b -> (a, b)
- type: (a, b)
- type: '  (Traversable t, Monad m) => t (m a) -> m (t a)'
- type: '  (Traversable t, Monad m) => m (t a)'
- type: '  (Traversable t, Applicative f) => t (f a) -> f (t a)'
- type: '  (Traversable t, Applicative f) => f (t a)'
- type: '  Enum a => a -> Int'
- type: Int
- type: '  (Foldable t, Monoid m) => (a -> m) -> t a -> m'
- type: '  (Foldable t, Monoid m) => t a -> m'
- type: 'Monoid m => m'
- type: '  Functor f => (a -> b) -> f a -> f b'
- type: '  Functor f => f a -> f b'
- type: '  Functor f => f b'
- type: '  Semigroup a => a -> a -> a'
- type: '  Semigroup a => a -> a'
- type: '  Semigroup a => a'
- type: b -> (a -> b) -> Maybe a -> b
- type: (a -> b) -> Maybe a -> b
- type: Maybe a -> b
- type: b
- type: (b -> c) -> (a -> b) -> a -> c
- type: (a -> b) -> a -> c
- type: a -> c
- type: c
ruleCharMap:
  ',': 5
  \: 19
  l: 29
  g: 27
  '*': 4
  m: 30
  '-': 6
  M: 14
  =: 7
  ']': 20
  p: 33
  ' ': 0
  '[': 18
  'N': 15
  '>': 8
  'n': 31
  a: 21
  q: 34
  A: 9
  d: 24
  t: 37
  T: 17
  o: 32
  '"': 1
  B: 10
  b: 22
  r: 35
  u: 38
  E: 11
  e: 25
  (: 2
  c: 23
  s: 36
  S: 16
  f: 26
  v: 39
  F: 12
  i: 28
  'y': 40
  ): 3
  I: 13
  '1': 41
  '2': 42
  '3': 43
  '4': 44
  '5': 45
  '6': 46
  '7': 47
  '8': 48
  '9': 49
  '0': 50
bothCharMap:
  ',': 6
  L: 29
  \: 38
  l: 49
  g: 46
  '''': 3
  '7': 16
  z: 60
  J: 28
  ':': 19
  ? |2+

  : 0
  m: 50
  '-': 7
  M: 30
  =: 20
  ']': 39
  '0': 9
  P: 33
  p: 53
  ' ': 1
  '[': 37
  .: 8
  'N': 31
  '>': 21
  'n': 51
  a: 40
  '1': 10
  d: 43
  t: 56
  D: 24
  '4': 13
  T: 36
  o: 52
  O: 32
  '"': 2
  B: 22
  '2': 11
  R: 34
  b: 41
  r: 54
  u: 57
  E: 25
  '5': 14
  e: 44
  h: 47
  (: 4
  '8': 17
  c: 42
  s: 55
  C: 23
  '3': 12
  S: 35
  f: 45
  v: 58
  F: 26
  '6': 15
  '9': 18
  i: 48
  'y': 59
  ): 5
  I: 27
dsl:
  length:
    expr: length
  maybe:
    expr: maybe
  foldMap:
    expr: foldMap
  fromEnum:
    expr: fromEnum
  unzip:
    expr: unzip
  just:
    expr: Just
  zip:
    expr: zip
  elem:
    expr: elem
  sequence:
    expr: sequence
  zero:
    expr: '0'
  fmap:
    expr: fmap
  toEnum:
    expr: toEnum
  mempty:
    expr: mempty
  compose:
    expr: (.)
  tpl:
    expr: (,)
  prepend:
    expr: (:)
  sequenceA:
    expr: sequenceA
  conc:
    expr: (<>)
fnTypes:
- - expr: toEnum
  - type: '  Enum a => Int -> a'
- - expr: sequenceA
  - type: '  (Traversable t, Applicative f) => t (f a) -> f (t a)'
- - expr: length
  - type: '  Foldable t => t a -> Int'
- - expr: zip
  - type: '[a] -> [b] -> [(a, b)]'
- - expr: unzip
  - type: '[(a, b)] -> ([a], [b])'
- - expr: let compose = (.) in compose toEnum
  - type: '  Enum c => (a -> Int) -> a -> c'
- - expr: let conc = (<>) in conc zip
  - type: ([a] -> [b] -> [(a, b)]) -> [a] -> [b] -> [(a, b)]
- - expr: let prepend = (:) in prepend
  - type: a -> [a] -> [a]
- - expr: let tpl = (,) in tpl
  - type: a -> b -> (a, b)
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc prepend
  - type: (a -> [a] -> [a]) -> a -> [a] -> [a]
- - expr: let conc = (<>) in conc unzip
  - type: ([(a, b)] -> ([a], [b])) -> [(a, b)] -> ([a], [b])
- - expr: fromEnum
  - type: '  Enum a => a -> Int'
- - expr: let just = Just in just
  - type: a -> Maybe a
- - expr: elem
  - type: '  (Foldable t, Eq a) => a -> t a -> Bool'
- - expr: zip mempty
  - type: '[b] -> [(a, b)]'
exprCharMap:
  ',': 6
  L: 26
  \: 34
  l: 45
  g: 42
  '''': 3
  '7': 16
  z: 55
  J: 25
  ':': 19
  ? |2+

  : 0
  m: 46
  '-': 7
  =: 20
  ']': 35
  '0': 9
  P: 29
  p: 49
  ' ': 1
  '[': 33
  .: 8
  'N': 27
  'n': 47
  a: 36
  '1': 10
  d: 39
  t: 52
  D: 22
  '4': 13
  T: 32
  o: 48
  O: 28
  '"': 2
  '2': 11
  R: 30
  b: 37
  r: 50
  u: 53
  E: 23
  '5': 14
  e: 40
  h: 43
  (: 4
  '8': 17
  c: 38
  s: 51
  C: 21
  '3': 12
  S: 31
  f: 41
  v: 54
  F: 24
  '6': 15
  '9': 18
  i: 44
  ): 5
datasets:
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc prepend
  - expr: let conc = (<>) in conc zip
  - expr: let tpl = (,) in tpl
  - expr: sequenceA
  - expr: toEnum
- - expr: unzip
  - expr: elem
  - expr: length
  - expr: let conc = (<>) in conc unzip
  - expr: let compose = (.) in compose toEnum
- - expr: fromEnum
  - expr: let prepend = (:) in prepend
  - expr: let just = Just in just
  - expr: zip mempty
