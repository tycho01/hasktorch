generatedTypes:
  '0':
  - Int
  - Char
  '1':
  - '[]'
  - Maybe
  '2':
  - (,)
  - Either
longestExprString: 137
exprBlocks:
- - zip
  - expr: zip
- - zip
  - expr: 'zip (undefined :: [a])'
- - zip
  - expr: 'zip (undefined :: [a]) (undefined :: [b])'
- - unzip
  - expr: unzip
- - unzip
  - expr: 'unzip (undefined :: [(a, b)])'
- - elem
  - expr: elem
- - elem
  - expr: 'elem (undefined :: (Foldable t, Eq a) => a)'
- - elem
  - expr: |-
      elem (undefined :: (Foldable t, Eq a) => a)
        (undefined :: (Foldable t, Eq a) => t a)
- - conc
  - expr: conc
- - conc
  - expr: 'conc (undefined :: Semigroup a => a)'
- - conc
  - expr: |-
      conc (undefined :: Semigroup a => a)
        (undefined :: Semigroup a => a)
- - just
  - expr: just
- - just
  - expr: 'just (undefined :: a)'
- - mempty
  - expr: mempty
- - toEnum
  - expr: toEnum
- - toEnum
  - expr: 'toEnum (undefined :: Enum a => Int)'
- - length
  - expr: length
- - length
  - expr: 'length (undefined :: Foldable t => t a)'
- - compose
  - expr: compose
- - compose
  - expr: 'compose (undefined :: (b -> c))'
- - compose
  - expr: 'compose (undefined :: (b -> c)) (undefined :: (a -> b))'
- - compose
  - expr: |-
      compose (undefined :: (b -> c)) (undefined :: (a -> b))
        (undefined :: a)
- - sequence
  - expr: sequence
- - sequence
  - expr: 'sequence (undefined :: (Traversable t, Monad m) => t (m a))'
- - sequenceA
  - expr: sequenceA
- - sequenceA
  - expr: 'sequenceA (undefined :: (Traversable t, Applicative f) => t (f a))'
- - fromEnum
  - expr: fromEnum
- - fromEnum
  - expr: 'fromEnum (undefined :: Enum a => a)'
- - zero
  - expr: zero
- - prepend
  - expr: prepend
- - prepend
  - expr: 'prepend (undefined :: a)'
- - prepend
  - expr: 'prepend (undefined :: a) (undefined :: [a])'
- - foldMap
  - expr: foldMap
- - foldMap
  - expr: 'foldMap (undefined :: (Foldable t, Monoid m) => (a -> m))'
- - foldMap
  - expr: |-
      foldMap (undefined :: (Foldable t, Monoid m) => (a -> m))
        (undefined :: (Foldable t, Monoid m) => t a)
- - fmap
  - expr: fmap
- - fmap
  - expr: 'fmap (undefined :: Functor f => (a -> b))'
- - fmap
  - expr: |-
      fmap (undefined :: Functor f => (a -> b))
        (undefined :: Functor f => f a)
- - maybe
  - expr: maybe
- - maybe
  - expr: 'maybe (undefined :: b)'
- - maybe
  - expr: 'maybe (undefined :: b) (undefined :: (a -> b))'
- - maybe
  - expr: |-
      maybe (undefined :: b) (undefined :: (a -> b))
        (undefined :: Maybe a)
- - tpl
  - expr: tpl
- - tpl
  - expr: 'tpl (undefined :: a)'
- - tpl
  - expr: 'tpl (undefined :: a) (undefined :: b)'
longestString: 137
fnTypeIOs:
- - expr: let compose = (.) in compose unzip
  - - - - type: ((Int -> [(Int, Char)]), Int)
        - type: ([Int], [Char])
      - - - expr: (let compose = (.) in compose mempty maybe, (0))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-10))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (20))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, (7))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (13))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (20))
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, (12))
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (0))
          - Right:
              expr: ([], "")
    - - - type: ((Int -> [(Int, Int)]), Int)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-10))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (14))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (12))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (14))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty maybe, (14))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (20))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (13))
          - Right:
              expr: ([], [])
    - - - type: ((Char -> [(Char, Char)]), Char)
        - type: ([Char], [Char])
      - - - expr: (let compose = (.) in compose mempty fromEnum, '6')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '2')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '8')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '2')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '4')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '2')
          - Right:
              expr: ("", "")
    - - - type: ((Int -> [(Char, Char)]), Int)
        - type: ([Char], [Char])
      - - - expr: (let compose = (.) in compose mempty fromEnum, (12))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, (-10))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (19))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, (14))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, (0))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-10))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, (-10))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (19))
          - Right:
              expr: ("", "")
- - expr: toEnum
  - - - - type: Int
        - type: Int
      - - - expr: ((7))
          - Right:
              expr: '7'
        - - expr: ((14))
          - Right:
              expr: '14'
        - - expr: ((0))
          - Right:
              expr: '0'
        - - expr: ((-10))
          - Right:
              expr: (-10)
        - - expr: ((20))
          - Right:
              expr: '20'
        - - expr: ((13))
          - Right:
              expr: '13'
        - - expr: ((19))
          - Right:
              expr: '19'
        - - expr: ((12))
          - Right:
              expr: '12'
    - - - type: Int
        - type: Char
      - - - expr: ((20))
          - Right:
              expr: '''\DC4'''
        - - expr: ((13))
          - Right:
              expr: '''\r'''
        - - expr: ((19))
          - Right:
              expr: '''\DC3'''
        - - expr: ((14))
          - Right:
              expr: '''\SO'''
        - - expr: ((-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: ((0))
          - Right:
              expr: '''\NUL'''
        - - expr: ((7))
          - Right:
              expr: '''\a'''
        - - expr: ((12))
          - Right:
              expr: '''\f'''
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose (prepend zero)
  - - - - type: ((Int -> [Int]), Int)
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (0))
          - Right:
              expr: '[0]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (13))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (19))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (19))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (13))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-10))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (14))
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (12))
          - Right:
              expr: '[0]'
    - - - type: ((Char -> [Int]), Char)
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7')
          - Right:
              expr: '[0]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: '[0]'
        - - expr: (let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: '[0]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '2')
          - Right:
              expr: '[0]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl unzip
  - - - - type: ([(Int, Int)], Int)
        - type: (([Int], [Int]), Int)
      - - - expr: ([((7), (7))], (0))
          - Right:
              expr: (([7], [7]), 0)
        - - expr: ([((7), (7))], (12))
          - Right:
              expr: (([7], [7]), 12)
        - - expr: ([((7), (7)), ((13), (13)), ((-10), (-10))], (19))
          - Right:
              expr: (([7, 13, -10], [7, 13, -10]), 19)
        - - expr: ([], (13))
          - Right:
              expr: (([], []), 13)
        - - expr: ([], (-10))
          - Right:
              expr: (([], []), -10)
        - - expr: ([], (12))
          - Right:
              expr: (([], []), 12)
        - - expr: ([], (7))
          - Right:
              expr: (([], []), 7)
        - - expr: ([], (0))
          - Right:
              expr: (([], []), 0)
    - - - type: ([(Char, Int)], Int)
        - type: (([Char], [Int]), Int)
      - - - expr: ([('7', (7))], (0))
          - Right:
              expr: (("7", [7]), 0)
        - - expr: ([('7', (7))], (20))
          - Right:
              expr: (("7", [7]), 20)
        - - expr: ([('7', (7)), ('4', (13))], (7))
          - Right:
              expr: (("74", [7, 13]), 7)
        - - expr: ([], (19))
          - Right:
              expr: (("", []), 19)
        - - expr: ([('7', (7)), ('4', (13))], (13))
          - Right:
              expr: (("74", [7, 13]), 13)
        - - expr: ([('7', (7)), ('4', (13))], (12))
          - Right:
              expr: (("74", [7, 13]), 12)
        - - expr: ([], (14))
          - Right:
              expr: (("", []), 14)
        - - expr: ([('7', (7)), ('4', (13))], (20))
          - Right:
              expr: (("74", [7, 13]), 20)
    - - - type: ([(Char, Char)], Int)
        - type: (([Char], [Char]), Int)
      - - - expr: ([('7', '7')], (7))
          - Right:
              expr: (("7", "7"), 7)
        - - expr: ([('7', '7')], (19))
          - Right:
              expr: (("7", "7"), 19)
        - - expr: ([('7', '7'), ('4', '4')], (12))
          - Right:
              expr: (("74", "74"), 12)
        - - expr: ([('7', '7'), ('4', '4'), ('6', '6')], (7))
          - Right:
              expr: (("746", "746"), 7)
        - - expr: ([('7', '7'), ('4', '4'), ('6', '6')], (13))
          - Right:
              expr: (("746", "746"), 13)
        - - expr: ([('7', '7'), ('4', '4')], (0))
          - Right:
              expr: (("74", "74"), 0)
        - - expr: ([('7', '7')], (13))
          - Right:
              expr: (("7", "7"), 13)
        - - expr: ([('7', '7'), ('4', '4')], (7))
          - Right:
              expr: (("74", "74"), 7)
    - - - type: ([(Int, Char)], Int)
        - type: (([Int], [Char]), Int)
      - - - expr: ([], (19))
          - Right:
              expr: (([], ""), 19)
        - - expr: ([((7), '7'), ((13), '4')], (12))
          - Right:
              expr: (([7, 13], "74"), 12)
        - - expr: ([((7), '7'), ((13), '4'), ((-10), '6')], (14))
          - Right:
              expr: (([7, 13, -10], "746"), 14)
        - - expr: ([((7), '7'), ((13), '4')], (7))
          - Right:
              expr: (([7, 13], "74"), 7)
        - - expr: ([], (14))
          - Right:
              expr: (([], ""), 14)
        - - expr: ([((7), '7')], (0))
          - Right:
              expr: (([7], "7"), 0)
        - - expr: ([((7), '7'), ((13), '4'), ((-10), '6')], (0))
          - Right:
              expr: (([7, 13, -10], "746"), 0)
        - - expr: ([((7), '7'), ((13), '4'), ((-10), '6')], (7))
          - Right:
              expr: (([7, 13, -10], "746"), 7)
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose compose prepend
  - - - - type: (Char, (Char -> [Char]), Char)
        - type: '[Char]'
      - - - expr: ('8', let compose = (.) in compose mempty fromEnum, '8')
          - Right:
              expr: '"8"'
        - - expr: |-
              ('2',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '8')
          - Right:
              expr: '"2"'
        - - expr: |-
              ('2',
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: '"2"'
        - - expr: |-
              ('0',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5')
          - Right:
              expr: '"0"'
        - - expr: |-
              ('5',
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '8')
          - Right:
              expr: '"5"'
        - - expr: |-
              ('6',
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '7')
          - Right:
              expr: '"6"'
        - - expr: |-
              ('8',
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6')
          - Right:
              expr: '"8"'
        - - expr: ('6', let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: '"6"'
    - - - type: (Int, (Int -> [Int]), Int)
        - type: '[Int]'
      - - - expr: ((13), let compose = (.) in compose mempty fromEnum, (19))
          - Right:
              expr: '[13]'
        - - expr: ((0), let compose = (.) in compose mempty fromEnum, (12))
          - Right:
              expr: '[0]'
        - - expr: |-
              ((13),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (7))
          - Right:
              expr: '[13]'
        - - expr: |-
              ((20),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (12))
          - Right:
              expr: '[20]'
        - - expr: |-
              ((12),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (14))
          - Right:
              expr: '[12]'
        - - expr: |-
              ((0),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (19))
          - Right:
              expr: '[0]'
        - - expr: |-
              ((0),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (0))
          - Right:
              expr: '[0]'
        - - expr: |-
              ((13),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (13))
          - Right:
              expr: '[13]'
    - - - type: (Char, (Int -> [Char]), Int)
        - type: '[Char]'
      - - - expr: |-
              ('4',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-10))
          - Right:
              expr: '"4"'
        - - expr: |-
              ('5',
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (19))
          - Right:
              expr: '"5"'
        - - expr: |-
              ('2',
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (12))
          - Right:
              expr: '"2"'
        - - expr: |-
              ('7',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (19))
          - Right:
              expr: '"7"'
        - - expr: |-
              ('0',
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (12))
          - Right:
              expr: '"0"'
        - - expr: |-
              ('4',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (12))
          - Right:
              expr: '"4"'
        - - expr: |-
              ('5',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7))
          - Right:
              expr: '"5"'
        - - expr: ('5', let compose = (.) in compose mempty fromEnum, (14))
          - Right:
              expr: '"5"'
    - - - type: (Int, (Char -> [Int]), Char)
        - type: '[Int]'
      - - - expr: |-
              ((7),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: '[7]'
        - - expr: |-
              ((-10),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '0')
          - Right:
              expr: '[-10]'
        - - expr: |-
              ((20),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '8')
          - Right:
              expr: '[20]'
        - - expr: ((20), let compose = (.) in compose mempty fromEnum, '5')
          - Right:
              expr: '[20]'
        - - expr: |-
              ((13),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8')
          - Right:
              expr: '[13]'
        - - expr: |-
              ((14),
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: '[14]'
        - - expr: |-
              ((13),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5')
          - Right:
              expr: '[13]'
        - - expr: ((12), let compose = (.) in compose mempty maybe, '0')
          - Right:
              expr: '[12]'
- - expr: sequenceA
  - - - - type: '[] (Maybe Int)'
        - type: Maybe ([] Int)
      - - - expr: ([Just (7), Nothing])
          - Right:
              expr: Nothing
        - - expr: ([])
          - Right:
              expr: (Just [])
        - - expr: ([Just (7)])
          - Right:
              expr: (Just [7])
    - - - type: Maybe (Maybe Int)
        - type: Maybe (Maybe Int)
      - - - expr: (Just (Just (7)))
          - Right:
              expr: (Just (Just 7))
        - - expr: (Nothing)
          - Right:
              expr: (Just Nothing)
    - - - type: '[] ([] Char)'
        - type: '[] ([] Char)'
      - - - expr: ([])
          - Right:
              expr: '[""]'
        - - expr: ([['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '[]'
        - - expr: ([['7', '4', '6']])
          - Right:
              expr: '["7", "4", "6"]'
        - - expr: ([['7', '4', '6'], []])
          - Right:
              expr: '[]'
    - - - type: '[] (Maybe Char)'
        - type: Maybe ([] Char)
      - - - expr: ([Just '7', Nothing])
          - Right:
              expr: Nothing
        - - expr: ([Just '7'])
          - Right:
              expr: (Just "7")
        - - expr: ([])
          - Right:
              expr: (Just "")
- - expr: |-
      let zero = 0
          prepend = (:)
        in maybe (prepend zero)
  - - - - type: ((Char -> [Int] -> [Int]), Maybe Char, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '7', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               Just '5', [(7)])
          - Right:
              expr: '[7]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '0', [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               Just '0', [(7), (13), (-10)])
          - Right:
              expr: '[7, 13, -10]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just '7',
               [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0', [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend fromEnum,
               Just '7', [(7), (13)])
          - Right:
              expr: '[55, 7, 13]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Nothing, [(7)])
          - Right:
              expr: '[0, 7]'
    - - - type: ((Int -> [Int] -> [Int]), Maybe Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend toEnum,
               Just (7), [])
          - Right:
              expr: '[7]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend fromEnum,
               Nothing, [(7), (13), (-10)])
          - Right:
              expr: '[0, 7, 13, -10]'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just (7),
               [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend fromEnum,
               Nothing, [(7), (13)])
          - Right:
              expr: '[0, 7, 13]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               Nothing, [(7)])
          - Right:
              expr: '[0, 7]'
        - - expr: (let compose = (.) in compose mempty maybe, Just (0), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (19), [(7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [(7), (13)])
          - Right:
              expr: '[0, 7, 13]'
- - expr: length
  - - - - type: Maybe Int
        - type: Int
      - - - expr: (Just (7))
          - Right:
              expr: '1'
        - - expr: (Just (0))
          - Right:
              expr: '1'
        - - expr: (Just (19))
          - Right:
              expr: '1'
        - - expr: (Nothing)
          - Right:
              expr: '0'
    - - - type: '[] Int'
        - type: Int
      - - - expr: ([])
          - Right:
              expr: '0'
        - - expr: ([(7)])
          - Right:
              expr: '1'
        - - expr: ([(7), (13)])
          - Right:
              expr: '2'
        - - expr: ([(7), (13), (-10)])
          - Right:
              expr: '3'
    - - - type: Maybe Char
        - type: Int
      - - - expr: (Just '0')
          - Right:
              expr: '1'
        - - expr: (Just '7')
          - Right:
              expr: '1'
        - - expr: (Just '5')
          - Right:
              expr: '1'
        - - expr: (Nothing)
          - Right:
              expr: '0'
    - - - type: '[] Char'
        - type: Int
      - - - expr: (['7', '4'])
          - Right:
              expr: '2'
        - - expr: (['7', '4', '6'])
          - Right:
              expr: '3'
        - - expr: (['7'])
          - Right:
              expr: '1'
        - - expr: ([])
          - Right:
              expr: '0'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend length
  - - - - type: (Maybe Int, [Int])
        - type: '[Int]'
      - - - expr: (Just (19), [])
          - Right:
              expr: '[1]'
        - - expr: (Just (7), [(7), (13), (-10)])
          - Right:
              expr: '[1, 7, 13, -10]'
        - - expr: (Nothing, [(7)])
          - Right:
              expr: '[0, 7]'
        - - expr: (Just (0), [(7)])
          - Right:
              expr: '[1, 7]'
        - - expr: (Just (19), [(7), (13)])
          - Right:
              expr: '[1, 7, 13]'
        - - expr: (Just (7), [(7)])
          - Right:
              expr: '[1, 7]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[0]'
        - - expr: (Nothing, [(7), (13), (-10)])
          - Right:
              expr: '[0, 7, 13, -10]'
    - - - type: ([] Int, [Int])
        - type: '[Int]'
      - - - expr: ([(7)], [(7), (13), (-10)])
          - Right:
              expr: '[1, 7, 13, -10]'
        - - expr: ([(7), (13)], [(7), (13), (-10)])
          - Right:
              expr: '[2, 7, 13, -10]'
        - - expr: ([(7)], [(7), (13)])
          - Right:
              expr: '[1, 7, 13]'
        - - expr: ([(7)], [(7)])
          - Right:
              expr: '[1, 7]'
        - - expr: ([(7), (13), (-10)], [(7)])
          - Right:
              expr: '[3, 7]'
        - - expr: ([(7), (13), (-10)], [(7), (13), (-10)])
          - Right:
              expr: '[3, 7, 13, -10]'
        - - expr: ([], [(7)])
          - Right:
              expr: '[0, 7]'
        - - expr: ([(7)], [])
          - Right:
              expr: '[1]'
    - - - type: ([] Char, [Int])
        - type: '[Int]'
      - - - expr: (['7', '4'], [])
          - Right:
              expr: '[2]'
        - - expr: (['7', '4', '6'], [(7), (13)])
          - Right:
              expr: '[3, 7, 13]'
        - - expr: (['7', '4'], [(7), (13), (-10)])
          - Right:
              expr: '[2, 7, 13, -10]'
        - - expr: (['7', '4'], [(7)])
          - Right:
              expr: '[2, 7]'
        - - expr: (['7', '4', '6'], [(7), (13), (-10)])
          - Right:
              expr: '[3, 7, 13, -10]'
        - - expr: (['7', '4', '6'], [])
          - Right:
              expr: '[3]'
        - - expr: (['7'], [(7), (13)])
          - Right:
              expr: '[1, 7, 13]'
        - - expr: ([], [(7), (13), (-10)])
          - Right:
              expr: '[0, 7, 13, -10]'
    - - - type: (Maybe Char, [Int])
        - type: '[Int]'
      - - - expr: (Just '7', [(7), (13)])
          - Right:
              expr: '[1, 7, 13]'
        - - expr: (Just '0', [(7), (13), (-10)])
          - Right:
              expr: '[1, 7, 13, -10]'
        - - expr: (Just '5', [(7), (13)])
          - Right:
              expr: '[1, 7, 13]'
        - - expr: (Nothing, [(7)])
          - Right:
              expr: '[0, 7]'
        - - expr: (Just '7', [(7), (13), (-10)])
          - Right:
              expr: '[1, 7, 13, -10]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[0]'
        - - expr: (Nothing, [(7), (13), (-10)])
          - Right:
              expr: '[0, 7, 13, -10]'
        - - expr: (Just '5', [(7), (13), (-10)])
          - Right:
              expr: '[1, 7, 13, -10]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend sequenceA
  - - - - type: ([] ([] Char), [[] ([] Char)])
        - type: '[[] ([] Char)]'
      - - - expr: ([['7', '4', '6'], []], [[['7', '4', '6'], [], ['7', '4']], []])
          - Right:
              expr: '[[], ["746", "", "74"], []]'
        - - expr: ([['7', '4', '6'], []], [[['7', '4', '6'], [], ['7', '4']]])
          - Right:
              expr: '[[], ["746", "", "74"]]'
        - - expr: ([['7', '4', '6']], [[['7', '4', '6'], [], ['7', '4']], []])
          - Right:
              expr: '[["7", "4", "6"], ["746", "", "74"], []]'
        - - expr: ([['7', '4', '6'], [], ['7', '4']], [])
          - Right:
              expr: '[[]]'
        - - expr: ([['7', '4', '6']], [])
          - Right:
              expr: '[["7", "4", "6"]]'
        - - expr: |-
              ([['7', '4', '6'], [], ['7', '4']],
               [[['7', '4', '6'], [], ['7', '4']], [], [['7', '4', '6'], []]])
          - Right:
              expr: '[[], ["746", "", "74"], [], ["746", ""]]'
        - - expr: ([['7', '4', '6'], []], [])
          - Right:
              expr: '[[]]'
        - - expr: |-
              ([['7', '4', '6'], [], ['7', '4']],
               [[['7', '4', '6'], [], ['7', '4']]])
          - Right:
              expr: '[[], ["746", "", "74"]]'
    - - - type: ([] (Maybe Int), [Maybe ([] Int)])
        - type: '[Maybe ([] Int)]'
      - - - expr: ([Just (7)], [Just [(7), (13), (-10)], Nothing])
          - Right:
              expr: '[Just [7], Just [7, 13, -10], Nothing]'
        - - expr: ([Just (7)], [Just [(7), (13), (-10)]])
          - Right:
              expr: '[Just [7], Just [7, 13, -10]]'
        - - expr: ([Just (7), Nothing], [])
          - Right:
              expr: '[Nothing]'
        - - expr: ([], [Just [(7), (13), (-10)]])
          - Right:
              expr: '[Just [], Just [7, 13, -10]]'
        - - expr: ([Just (7), Nothing], [Just [(7), (13), (-10)], Nothing])
          - Right:
              expr: '[Nothing, Just [7, 13, -10], Nothing]'
        - - expr: ([], [Just [(7), (13), (-10)], Nothing])
          - Right:
              expr: '[Just [], Just [7, 13, -10], Nothing]'
        - - expr: ([Just (7), Nothing], [Just [(7), (13), (-10)]])
          - Right:
              expr: '[Nothing, Just [7, 13, -10]]'
        - - expr: ([Just (7)], [])
          - Right:
              expr: '[Just [7]]'
    - - - type: (Maybe (Maybe Int), [Maybe (Maybe Int)])
        - type: '[Maybe (Maybe Int)]'
      - - - expr: (Just (Just (7)), [Just (Just (7))])
          - Right:
              expr: '[Just (Just 7), Just (Just 7)]'
        - - expr: (Nothing, [Just (Just (7))])
          - Right:
              expr: '[Just Nothing, Just (Just 7)]'
        - - expr: (Just (Just (7)), [Just (Just (7)), Nothing])
          - Right:
              expr: '[Just (Just 7), Just (Just 7), Nothing]'
        - - expr: (Nothing, [Just (Just (7)), Nothing])
          - Right:
              expr: '[Just Nothing, Just (Just 7), Nothing]'
        - - expr: (Just (Just (7)), [])
          - Right:
              expr: '[Just (Just 7)]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[Just Nothing]'
    - - - type: ([] ([] Int), [[] ([] Int)])
        - type: '[[] ([] Int)]'
      - - - expr: |-
              ([[(7), (13), (-10)]],
               [[[(7), (13), (-10)], [], [(7), (13)]], [],
                [[(7), (13), (-10)], []]])
          - Right:
              expr: |-
                [[[7], [13], [-10]], [[7, 13, -10], [], [7, 13]], [],
                 [[7, 13, -10], []]]
        - - expr: |-
              ([[(7), (13), (-10)], [], [(7), (13)]],
               [[[(7), (13), (-10)], [], [(7), (13)]], []])
          - Right:
              expr: '[[], [[7, 13, -10], [], [7, 13]], []]'
        - - expr: ([[(7), (13), (-10)], [], [(7), (13)]], [])
          - Right:
              expr: '[[]]'
        - - expr: |-
              ([[(7), (13), (-10)], []],
               [[[(7), (13), (-10)], [], [(7), (13)]], [],
                [[(7), (13), (-10)], []]])
          - Right:
              expr: '[[], [[7, 13, -10], [], [7, 13]], [], [[7, 13, -10], []]]'
        - - expr: ([[(7), (13), (-10)]], [])
          - Right:
              expr: '[[[7], [13], [-10]]]'
        - - expr: ([[(7), (13), (-10)]], [[[(7), (13), (-10)], [], [(7), (13)]]])
          - Right:
              expr: '[[[7], [13], [-10]], [[7, 13, -10], [], [7, 13]]]'
        - - expr: |-
              ([[(7), (13), (-10)], [], [(7), (13)]],
               [[[(7), (13), (-10)], [], [(7), (13)]]])
          - Right:
              expr: '[[], [[7, 13, -10], [], [7, 13]]]'
        - - expr: ([], [[[(7), (13), (-10)], [], [(7), (13)]]])
          - Right:
              expr: '[[[]], [[7, 13, -10], [], [7, 13]]]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just length
  - - - - type: '[] Int'
        - type: Maybe Int
      - - - expr: ([(7), (13), (-10)])
          - Right:
              expr: (Just 3)
        - - expr: ([])
          - Right:
              expr: (Just 0)
        - - expr: ([(7)])
          - Right:
              expr: (Just 1)
        - - expr: ([(7), (13)])
          - Right:
              expr: (Just 2)
    - - - type: Maybe Int
        - type: Maybe Int
      - - - expr: (Just (7))
          - Right:
              expr: (Just 1)
        - - expr: (Just (0))
          - Right:
              expr: (Just 1)
        - - expr: (Nothing)
          - Right:
              expr: (Just 0)
        - - expr: (Just (19))
          - Right:
              expr: (Just 1)
    - - - type: '[] Char'
        - type: Maybe Int
      - - - expr: ([])
          - Right:
              expr: (Just 0)
        - - expr: (['7', '4'])
          - Right:
              expr: (Just 2)
        - - expr: (['7', '4', '6'])
          - Right:
              expr: (Just 3)
        - - expr: (['7'])
          - Right:
              expr: (Just 1)
    - - - type: Maybe Char
        - type: Maybe Int
      - - - expr: (Just '0')
          - Right:
              expr: (Just 1)
        - - expr: (Nothing)
          - Right:
              expr: (Just 0)
        - - expr: (Just '7')
          - Right:
              expr: (Just 1)
        - - expr: (Just '5')
          - Right:
              expr: (Just 1)
- - expr: let compose = (.) in compose (compose unzip)
  - - - - type: ((Int -> Char -> [(Char, Char)]), Int, Char)
        - type: ([Char], [Char])
      - - - expr: (let compose = (.) in compose mempty fromEnum, (14), '2')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, (13), '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (14), '0')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (12), '7')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, (19), '0')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (20), '7')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-10), '2')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (20), '4')
          - Right:
              expr: ("", "")
    - - - type: ((Int -> Int -> [(Char, Int)]), Int, Int)
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (20), (0))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty maybe, (-10), (7))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (0), (13))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty maybe, (-10), (13))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty fromEnum, (7), (20))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (13), (13))
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty fromEnum, (19), (20))
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (7), (14))
          - Right:
              expr: ("", [])
    - - - type: ((Char -> Char -> [(Char, Char)]), Char, Char)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '6', '4')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '4', '2')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, '8', '6')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '7', '0')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2', '2')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, '6', '5')
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '6', '0')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '2', '0')
          - Right:
              expr: ("", "")
    - - - type: ((Int -> Int -> [(Char, Char)]), Int, Int)
        - type: ([Char], [Char])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (7), (14))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (19), (7))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, (14), (14))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (0), (0))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, (7), (-10))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, (14), (12))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (19), (13))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty maybe, (-10), (12))
          - Right:
              expr: ("", "")
- - expr: zip
  - - - - type: ([Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: ([(7), (13)], [])
          - Right:
              expr: '[]'
        - - expr: ([(7), (13)], ['7', '4', '6'])
          - Right:
              expr: '[(7, ''7''), (13, ''4'')]'
        - - expr: ([(7), (13), (-10)], ['7', '4'])
          - Right:
              expr: '[(7, ''7''), (13, ''4'')]'
        - - expr: ([(7)], ['7'])
          - Right:
              expr: '[(7, ''7'')]'
        - - expr: ([(7), (13), (-10)], [])
          - Right:
              expr: '[]'
        - - expr: ([(7), (13)], ['7', '4'])
          - Right:
              expr: '[(7, ''7''), (13, ''4'')]'
        - - expr: ([(7)], [])
          - Right:
              expr: '[]'
        - - expr: ([(7)], ['7', '4'])
          - Right:
              expr: '[(7, ''7'')]'
    - - - type: ([Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: ([(7)], [])
          - Right:
              expr: '[]'
        - - expr: ([(7), (13), (-10)], [(7), (13), (-10)])
          - Right:
              expr: '[(7, 7), (13, 13), (-10, -10)]'
        - - expr: ([(7), (13), (-10)], [(7), (13)])
          - Right:
              expr: '[(7, 7), (13, 13)]'
        - - expr: ([], [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: ([(7), (13), (-10)], [(7)])
          - Right:
              expr: '[(7, 7)]'
        - - expr: ([], [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([(7)], [(7), (13), (-10)])
          - Right:
              expr: '[(7, 7)]'
    - - - type: ([Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (['7', '4', '6'], ['7'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: (['7', '4'], ['7', '4'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4'')]'
        - - expr: ([], ['7'])
          - Right:
              expr: '[]'
        - - expr: (['7', '4'], ['7', '4', '6'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4'')]'
        - - expr: (['7'], ['7'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: (['7', '4', '6'], ['7', '4'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4'')]'
        - - expr: (['7'], [])
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'], ['7', '4', '6'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4''), (''6'', ''6'')]'
    - - - type: ([Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: (['7', '4', '6'], [(7), (13)])
          - Right:
              expr: '[(''7'', 7), (''4'', 13)]'
        - - expr: (['7'], [])
          - Right:
              expr: '[]'
        - - expr: (['7'], [(7)])
          - Right:
              expr: '[(''7'', 7)]'
        - - expr: ([], [(7)])
          - Right:
              expr: '[]'
        - - expr: (['7', '4'], [(7)])
          - Right:
              expr: '[(''7'', 7)]'
        - - expr: (['7', '4'], [(7), (13), (-10)])
          - Right:
              expr: '[(''7'', 7), (''4'', 13)]'
        - - expr: (['7'], [(7), (13), (-10)])
          - Right:
              expr: '[(''7'', 7)]'
        - - expr: (['7', '4', '6'], [])
          - Right:
              expr: '[]'
- - expr: let zero = 0 in maybe zero length
  - - - - type: Maybe (Maybe Char)
        - type: Int
      - - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just (Just '7'))
          - Right:
              expr: '1'
    - - - type: Maybe ([] Char)
        - type: Int
      - - - expr: (Just ['7', '4', '6'])
          - Right:
              expr: '3'
        - - expr: (Nothing)
          - Right:
              expr: '0'
    - - - type: Maybe ([] Int)
        - type: Int
      - - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just [(7), (13), (-10)])
          - Right:
              expr: '3'
    - - - type: Maybe (Maybe Int)
        - type: Int
      - - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just (Just (7)))
          - Right:
              expr: '1'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl sequence
  - - - - type: (Maybe (Maybe Int), Int)
        - type: (Maybe (Maybe Int), Int)
      - - - expr: (Nothing, (19))
          - Right:
              expr: (Just Nothing, 19)
        - - expr: (Nothing, (7))
          - Right:
              expr: (Just Nothing, 7)
        - - expr: (Just (Just (7)), (20))
          - Right:
              expr: (Just (Just 7), 20)
        - - expr: (Nothing, (13))
          - Right:
              expr: (Just Nothing, 13)
        - - expr: (Just (Just (7)), (19))
          - Right:
              expr: (Just (Just 7), 19)
        - - expr: (Just (Just (7)), (-10))
          - Right:
              expr: (Just (Just 7), -10)
        - - expr: (Nothing, (12))
          - Right:
              expr: (Just Nothing, 12)
        - - expr: (Just (Just (7)), (13))
          - Right:
              expr: (Just (Just 7), 13)
    - - - type: ([] (Maybe Char), Char)
        - type: (Maybe ([] Char), Char)
      - - - expr: ([Just '7'], '4')
          - Right:
              expr: (Just "7", '4')
        - - expr: ([Just '7', Nothing], '0')
          - Right:
              expr: (Nothing, '0')
        - - expr: ([Just '7'], '2')
          - Right:
              expr: (Just "7", '2')
        - - expr: ([Just '7'], '5')
          - Right:
              expr: (Just "7", '5')
        - - expr: ([Just '7'], '8')
          - Right:
              expr: (Just "7", '8')
        - - expr: ([Just '7'], '0')
          - Right:
              expr: (Just "7", '0')
        - - expr: ([Just '7', Nothing], '6')
          - Right:
              expr: (Nothing, '6')
        - - expr: ([], '6')
          - Right:
              expr: (Just "", '6')
    - - - type: ([] ([] Char), Int)
        - type: ([] ([] Char), Int)
      - - - expr: ([['7', '4', '6']], (13))
          - Right:
              expr: (["7", "4", "6"], 13)
        - - expr: ([['7', '4', '6'], [], ['7', '4']], (0))
          - Right:
              expr: ([], 0)
        - - expr: ([], (14))
          - Right:
              expr: ([""], 14)
        - - expr: ([], (-10))
          - Right:
              expr: ([""], -10)
        - - expr: ([], (7))
          - Right:
              expr: ([""], 7)
        - - expr: ([['7', '4', '6']], (20))
          - Right:
              expr: (["7", "4", "6"], 20)
        - - expr: ([['7', '4', '6'], []], (20))
          - Right:
              expr: ([], 20)
        - - expr: ([['7', '4', '6'], [], ['7', '4']], (14))
          - Right:
              expr: ([], 14)
    - - - type: (Maybe (Maybe Char), Int)
        - type: (Maybe (Maybe Char), Int)
      - - - expr: (Nothing, (0))
          - Right:
              expr: (Just Nothing, 0)
        - - expr: (Nothing, (14))
          - Right:
              expr: (Just Nothing, 14)
        - - expr: (Just (Just '7'), (19))
          - Right:
              expr: (Just (Just '7'), 19)
        - - expr: (Nothing, (19))
          - Right:
              expr: (Just Nothing, 19)
        - - expr: (Just (Just '7'), (14))
          - Right:
              expr: (Just (Just '7'), 14)
        - - expr: (Just (Just '7'), (12))
          - Right:
              expr: (Just (Just '7'), 12)
        - - expr: (Nothing, (12))
          - Right:
              expr: (Just Nothing, 12)
        - - expr: (Just (Just '7'), (0))
          - Right:
              expr: (Just (Just '7'), 0)
- - expr: let compose = (.) in compose elem toEnum
  - - - - type: (Int, [] Int)
        - type: Bool
      - - - expr: ((19), [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: ((7), [])
          - Right:
              expr: 'False'
        - - expr: ((20), [(7)])
          - Right:
              expr: 'False'
        - - expr: ((19), [(7)])
          - Right:
              expr: 'False'
        - - expr: ((19), [])
          - Right:
              expr: 'False'
        - - expr: ((13), [(7), (13), (-10)])
          - Right:
              expr: 'True'
        - - expr: ((20), [])
          - Right:
              expr: 'False'
        - - expr: ((0), [(7), (13), (-10)])
          - Right:
              expr: 'False'
    - - - type: (Int, Maybe Char)
        - type: Bool
      - - - expr: ((7), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((20), Just '0')
          - Right:
              expr: 'False'
        - - expr: ((13), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((20), Just '5')
          - Right:
              expr: 'False'
        - - expr: ((12), Just '7')
          - Right:
              expr: 'False'
        - - expr: ((-10), Just '0')
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: ((7), Just '5')
          - Right:
              expr: 'False'
        - - expr: ((19), Just '7')
          - Right:
              expr: 'False'
    - - - type: (Int, [] Char)
        - type: Bool
      - - - expr: ((13), ['7', '4'])
          - Right:
              expr: 'False'
        - - expr: ((19), [])
          - Right:
              expr: 'False'
        - - expr: ((-10), ['7', '4', '6'])
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: ((7), [])
          - Right:
              expr: 'False'
        - - expr: ((12), ['7'])
          - Right:
              expr: 'False'
        - - expr: ((-10), ['7', '4'])
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: ((12), [])
          - Right:
              expr: 'False'
        - - expr: ((-10), [])
          - Right:
              expr: 'False'
    - - - type: (Int, Maybe Int)
        - type: Bool
      - - - expr: ((0), Just (0))
          - Right:
              expr: 'True'
        - - expr: ((13), Just (7))
          - Right:
              expr: 'False'
        - - expr: ((12), Just (0))
          - Right:
              expr: 'False'
        - - expr: ((12), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((0), Just (19))
          - Right:
              expr: 'False'
        - - expr: ((20), Just (0))
          - Right:
              expr: 'False'
        - - expr: ((-10), Just (19))
          - Right:
              expr: 'False'
        - - expr: ((20), Just (7))
          - Right:
              expr: 'False'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc unzip)
  - - - - type: ((Char -> [(Int, Char)] -> ([Int], [Char])), Char, [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '0', [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([7, 13, -10], "746")
        - - expr: (let compose = (.) in compose mempty fromEnum, '7', [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0', [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([7, 13, -10], "746")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '2', [((7), '7')])
          - Right:
              expr: ([7], "7")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7', [((7), '7')])
          - Right:
              expr: ([7], "7")
        - - expr: (let compose = (.) in compose mempty fromEnum, '8', [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, '6',
               [((7), '7'), ((13), '4')])
          - Right:
              expr: ([7, 13], "74")
        - - expr: (let compose = (.) in compose mempty fromEnum, '7', [((7), '7')])
          - Right:
              expr: ([7], "7")
    - - - type: ((Int -> [(Char, Char)] -> ([Char], [Char])), Int, [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (20), [('7', '7')])
          - Right:
              expr: ("7", "7")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, (20),
               [('7', '7'), ('4', '4'), ('6', '6')])
          - Right:
              expr: ("746", "746")
        - - expr: (let compose = (.) in compose foldMap mempty, (20), [('7', '7')])
          - Right:
              expr: ("7", "7")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (12), [])
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (12), [('7', '7'), ('4', '4')])
          - Right:
              expr: ("74", "74")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (20), [('7', '7'), ('4', '4')])
          - Right:
              expr: ("74", "74")
        - - expr: (let compose = (.) in compose mempty fromEnum, (0), [('7', '7')])
          - Right:
              expr: ("7", "7")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-10), [('7', '7'), ('4', '4'), ('6', '6')])
          - Right:
              expr: ("746", "746")
    - - - type: ((Char -> [(Char, Int)] -> ([Char], [Int])), Char, [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: (let compose = (.) in compose mempty maybe, '5', [('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '4', [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, '5',
               [('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: ("746", [7, 13, -10])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8', [('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: ("746", [7, 13, -10])
        - - expr: (let compose = (.) in compose mempty maybe, '8', [('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: (let compose = (.) in compose mempty maybe, '2', [('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: (let compose = (.) in compose foldMap mempty, '2', [('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: (let compose = (.) in compose mempty fromEnum, '6', [('7', (7))])
          - Right:
              expr: ("7", [7])
    - - - type: ((Int -> [(Char, Int)] -> ([Char], [Int])), Int, [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-10), [])
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty fromEnum, (13), [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (12), [('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (20), [('7', (7)), ('4', (13))])
          - Right:
              expr: ("74", [7, 13])
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, (-10),
               [('7', (7)), ('4', (13))])
          - Right:
              expr: ("74", [7, 13])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (7), [('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (12), [('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (-10), [('7', (7))])
          - Right:
              expr: ("7", [7])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc zip
  - - - - type: ([Int], ([Char] -> [(Int, Char)]), [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              ([(7), (13), (-10)],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              ([(7), (13)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              ([(7)],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               ['7'])
          - Right:
              expr: '[(7, ''7'')]'
        - - expr: |-
              ([(7), (13)], let compose = (.) in compose mempty zip,
               ['7', '4', '6'])
          - Right:
              expr: '[(7, ''7''), (13, ''4'')]'
        - - expr: ([], let compose = (.) in compose mempty zip, ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: |-
              ([(7), (13)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['7', '4', '6'])
          - Right:
              expr: '[(7, ''7''), (13, ''4'')]'
        - - expr: |-
              ([(7), (13)],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               ['7'])
          - Right:
              expr: '[]'
    - - - type: ([Int], ([Int] -> [(Int, Int)]), [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              ([(7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              ([(7), (13)], let compose = (.) in compose mempty length,
               [(7), (13)])
          - Right:
              expr: '[(7, 7), (13, 13)]'
        - - expr: |-
              ([(7)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              ([(7), (13)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [(7), (13), (-10)])
          - Right:
              expr: '[(7, 7), (13, 13)]'
        - - expr: ([], let compose = (.) in compose mempty length, [(7)])
          - Right:
              expr: '[]'
        - - expr: |-
              ([(7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [(7), (13)])
          - Right:
              expr: '[(7, 7)]'
        - - expr: |-
              ([(7), (13), (-10)], let compose = (.) in compose mempty maybe,
               [(7)])
          - Right:
              expr: '[(7, 7)]'
    - - - type: ([Char], ([Char] -> [(Char, Char)]), [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              ([],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              (['7', '4'],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              (['7'],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               ['7'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: |-
              (['7', '4', '6'], let compose = (.) in compose mempty zip,
               ['7', '4', '6'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4''), (''6'', ''6'')]'
        - - expr: (['7', '4', '6'], zip mempty, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (['7', '4', '6'],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               ['7', '4', '6'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4''), (''6'', ''6'')]'
        - - expr: (['7', '4', '6'], zip mempty, ['7', '4', '6'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4''), (''6'', ''6'')]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['7'])
          - Right:
              expr: '[]'
    - - - type: ([Char], ([Int] -> [(Char, Int)]), [Int])
        - type: '[(Char, Int)]'
      - - - expr: ([], let compose = (.) in compose mempty zip, [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'], zip mempty, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (['7', '4'],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [])
          - Right:
              expr: '[]'
        - - expr: |-
              (['7', '4', '6'], let compose = (.) in compose mempty maybe,
               [(7), (13)])
          - Right:
              expr: '[(''7'', 7), (''4'', 13)]'
        - - expr: (['7', '4'], let compose = (.) in compose mempty maybe, [])
          - Right:
              expr: '[]'
        - - expr: (['7'], let compose = (.) in compose mempty maybe, [(7), (13)])
          - Right:
              expr: '[(''7'', 7)]'
        - - expr: |-
              (['7', '4'],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [(7), (13), (-10)])
          - Right:
              expr: '[(''7'', 7), (''4'', 13)]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose sequence
  - - - - type: ((Char -> Maybe (Maybe Char)), Char)
        - type: Maybe (Maybe Char)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '2')
          - Right:
              expr: (Just (Just '2'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '5')
          - Right:
              expr: (Just (Just '5'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '4')
          - Right:
              expr: (Just (Just '4'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '6')
          - Right:
              expr: (Just (Just '6'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '0')
          - Right:
              expr: (Just (Just '0'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '7')
          - Right:
              expr: (Just (Just '7'))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               '8')
          - Right:
              expr: (Just (Just '8'))
    - - - type: ((Char -> [] (Maybe Char)), Char)
        - type: Maybe ([] Char)
      - - - expr: (let compose = (.) in compose mempty maybe, '2')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '4')
          - Right:
              expr: (Just "")
        - - expr: (let compose = (.) in compose mempty maybe, '6')
          - Right:
              expr: (Just "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '2')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '8')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '8')
          - Right:
              expr: (Just "")
        - - expr: (let compose = (.) in compose mempty maybe, '0')
          - Right:
              expr: (Just "")
    - - - type: ((Char -> Maybe ([] Char)), Char)
        - type: '[] (Maybe Char)'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '2')
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '7')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '4')
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7')
          - Right:
              expr: '[Nothing]'
    - - - type: ((Int -> Maybe ([] Int)), Int)
        - type: '[] (Maybe Int)'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (13))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (7))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               (12))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (12))
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (14))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (20))
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty maybe, (13))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7))
          - Right:
              expr: '[Nothing]'
- - expr: let conc = (<>) in conc (unzip mempty)
  - - - - type: ([Char], [Char])
        - type: ([Char], [Char])
      - - - expr: ((['7'], ['7']))
          - Right:
              expr: ("7", "7")
        - - expr: ((['7', '4', '6'], ['7', '4', '6']))
          - Right:
              expr: ("746", "746")
        - - expr: (([], []))
          - Right:
              expr: ("", "")
        - - expr: ((['7', '4'], ['7', '4']))
          - Right:
              expr: ("74", "74")
    - - - type: ([Int], [Char])
        - type: ([Int], [Char])
      - - - expr: (([(7), (13)], ['7', '4']))
          - Right:
              expr: ([7, 13], "74")
        - - expr: (([], []))
          - Right:
              expr: ([], "")
        - - expr: (([(7), (13), (-10)], ['7', '4', '6']))
          - Right:
              expr: ([7, 13, -10], "746")
        - - expr: (([(7)], ['7']))
          - Right:
              expr: ([7], "7")
    - - - type: ([Char], [Int])
        - type: ([Char], [Int])
      - - - expr: ((['7'], [(7)]))
          - Right:
              expr: ("7", [7])
        - - expr: ((['7', '4', '6'], [(7), (13), (-10)]))
          - Right:
              expr: ("746", [7, 13, -10])
        - - expr: (([], []))
          - Right:
              expr: ("", [])
        - - expr: ((['7', '4'], [(7), (13)]))
          - Right:
              expr: ("74", [7, 13])
    - - - type: ([Int], [Int])
        - type: ([Int], [Int])
      - - - expr: (([(7), (13)], [(7), (13)]))
          - Right:
              expr: ([7, 13], [7, 13])
        - - expr: (([(7), (13), (-10)], [(7), (13), (-10)]))
          - Right:
              expr: ([7, 13, -10], [7, 13, -10])
        - - expr: (([], []))
          - Right:
              expr: ([], [])
        - - expr: (([(7)], [(7)]))
          - Right:
              expr: ([7], [7])
- - expr: |-
      let just = Just
          compose = (.)
        in compose just unzip
  - - - - type: '[(Char, Char)]'
        - type: Maybe ([Char], [Char])
      - - - expr: ([('7', '7'), ('4', '4'), ('6', '6')])
          - Right:
              expr: (Just ("746", "746"))
        - - expr: ([('7', '7')])
          - Right:
              expr: (Just ("7", "7"))
        - - expr: ([('7', '7'), ('4', '4')])
          - Right:
              expr: (Just ("74", "74"))
        - - expr: ([])
          - Right:
              expr: (Just ("", ""))
    - - - type: '[(Int, Char)]'
        - type: Maybe ([Int], [Char])
      - - - expr: ([((7), '7'), ((13), '4')])
          - Right:
              expr: (Just ([7, 13], "74"))
        - - expr: ([])
          - Right:
              expr: (Just ([], ""))
        - - expr: ([((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: (Just ([7, 13, -10], "746"))
        - - expr: ([((7), '7')])
          - Right:
              expr: (Just ([7], "7"))
    - - - type: '[(Int, Int)]'
        - type: Maybe ([Int], [Int])
      - - - expr: ([])
          - Right:
              expr: (Just ([], []))
        - - expr: ([((7), (7)), ((13), (13)), ((-10), (-10))])
          - Right:
              expr: (Just ([7, 13, -10], [7, 13, -10]))
        - - expr: ([((7), (7))])
          - Right:
              expr: (Just ([7], [7]))
        - - expr: ([((7), (7)), ((13), (13))])
          - Right:
              expr: (Just ([7, 13], [7, 13]))
    - - - type: '[(Char, Int)]'
        - type: Maybe ([Char], [Int])
      - - - expr: ([('7', (7)), ('4', (13))])
          - Right:
              expr: (Just ("74", [7, 13]))
        - - expr: ([])
          - Right:
              expr: (Just ("", []))
        - - expr: ([('7', (7))])
          - Right:
              expr: (Just ("7", [7]))
        - - expr: ([('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: (Just ("746", [7, 13, -10]))
- - expr: unzip
  - - - - type: '[(Int, Char)]'
        - type: ([Int], [Char])
      - - - expr: ([((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([7, 13, -10], "746")
        - - expr: ([((7), '7')])
          - Right:
              expr: ([7], "7")
        - - expr: ([])
          - Right:
              expr: ([], "")
        - - expr: ([((7), '7'), ((13), '4')])
          - Right:
              expr: ([7, 13], "74")
    - - - type: '[(Char, Int)]'
        - type: ([Char], [Int])
      - - - expr: ([('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: ([('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: ("746", [7, 13, -10])
        - - expr: ([])
          - Right:
              expr: ("", [])
        - - expr: ([('7', (7)), ('4', (13))])
          - Right:
              expr: ("74", [7, 13])
    - - - type: '[(Char, Char)]'
        - type: ([Char], [Char])
      - - - expr: ([])
          - Right:
              expr: ("", "")
        - - expr: ([('7', '7'), ('4', '4')])
          - Right:
              expr: ("74", "74")
        - - expr: ([('7', '7'), ('4', '4'), ('6', '6')])
          - Right:
              expr: ("746", "746")
        - - expr: ([('7', '7')])
          - Right:
              expr: ("7", "7")
    - - - type: '[(Int, Int)]'
        - type: ([Int], [Int])
      - - - expr: ([])
          - Right:
              expr: ([], [])
        - - expr: ([((7), (7))])
          - Right:
              expr: ([7], [7])
        - - expr: ([((7), (7)), ((13), (13)), ((-10), (-10))])
          - Right:
              expr: ([7, 13, -10], [7, 13, -10])
        - - expr: ([((7), (7)), ((13), (13))])
          - Right:
              expr: ([7, 13], [7, 13])
- - expr: let compose = (.) in compose foldMap zip
  - - - - type: ([Char], [] [Int])
        - type: '[(Char, Int)]'
      - - - expr: (['7'], [[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[(''7'', 7), (''7'', 7)]'
        - - expr: (['7', '4', '6'], [[(7), (13), (-10)]])
          - Right:
              expr: '[(''7'', 7), (''4'', 13), (''6'', -10)]'
        - - expr: (['7', '4'], [])
          - Right:
              expr: '[]'
        - - expr: ([], [[(7), (13), (-10)]])
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'], [])
          - Right:
              expr: '[]'
        - - expr: (['7'], [[(7), (13), (-10)]])
          - Right:
              expr: '[(''7'', 7)]'
        - - expr: (['7', '4', '6'], [[(7), (13), (-10)], []])
          - Right:
              expr: '[(''7'', 7), (''4'', 13), (''6'', -10)]'
        - - expr: ([], [[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[]'
    - - - type: ([Int], Maybe [Int])
        - type: '[(Int, Int)]'
      - - - expr: ([(7), (13), (-10)], Just [(7), (13), (-10)])
          - Right:
              expr: '[(7, 7), (13, 13), (-10, -10)]'
        - - expr: ([(7)], Just [(7), (13), (-10)])
          - Right:
              expr: '[(7, 7)]'
        - - expr: ([], Just [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: ([(7), (13)], Just [(7), (13), (-10)])
          - Right:
              expr: '[(7, 7), (13, 13)]'
        - - expr: ([(7), (13)], Nothing)
          - Right:
              expr: '[]'
        - - expr: ([(7), (13), (-10)], Nothing)
          - Right:
              expr: '[]'
        - - expr: ([(7)], Nothing)
          - Right:
              expr: '[]'
        - - expr: ([], Nothing)
          - Right:
              expr: '[]'
    - - - type: ([Char], Maybe [Int])
        - type: '[(Char, Int)]'
      - - - expr: (['7', '4', '6'], Nothing)
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'], Just [(7), (13), (-10)])
          - Right:
              expr: '[(''7'', 7), (''4'', 13), (''6'', -10)]'
        - - expr: (['7', '4'], Nothing)
          - Right:
              expr: '[]'
        - - expr: ([], Just [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (['7', '4'], Just [(7), (13), (-10)])
          - Right:
              expr: '[(''7'', 7), (''4'', 13)]'
        - - expr: ([], Nothing)
          - Right:
              expr: '[]'
        - - expr: (['7'], Just [(7), (13), (-10)])
          - Right:
              expr: '[(''7'', 7)]'
        - - expr: (['7'], Nothing)
          - Right:
              expr: '[]'
    - - - type: ([Char], Maybe [Char])
        - type: '[(Char, Char)]'
      - - - expr: (['7'], Just ['7', '4', '6'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: (['7', '4'], Nothing)
          - Right:
              expr: '[]'
        - - expr: (['7'], Nothing)
          - Right:
              expr: '[]'
        - - expr: ([], Nothing)
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'], Just ['7', '4', '6'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4''), (''6'', ''6'')]'
        - - expr: ([], Just ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'], Nothing)
          - Right:
              expr: '[]'
        - - expr: (['7', '4'], Just ['7', '4', '6'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4'')]'
- - expr: let compose = (.) in compose sequenceA
  - - - - type: ((Char -> [] (Maybe Char)), Char)
        - type: Maybe ([] Char)
      - - - expr: (let compose = (.) in compose mempty maybe, '0')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6')
          - Right:
              expr: (Just "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '7')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '8')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0')
          - Right:
              expr: (Just "")
        - - expr: (let compose = (.) in compose mempty maybe, '7')
          - Right:
              expr: (Just "")
    - - - type: ((Int -> Maybe ([] Int)), Int)
        - type: '[] (Maybe Int)'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               (19))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (-10))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (19))
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty maybe, (20))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (19))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (19))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just mempty,
               (7))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (13))
          - Right:
              expr: '[Nothing]'
    - - - type: ((Int -> [] ([] Char)), Int)
        - type: '[] ([] Char)'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (19))
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (20))
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-10))
          - Right:
              expr: '[""]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (14))
          - Right:
              expr: '[""]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (0))
          - Right:
              expr: '[""]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (20))
          - Right:
              expr: '[""]'
        - - expr: (let compose = (.) in compose mempty maybe, (19))
          - Right:
              expr: '[""]'
    - - - type: ((Int -> Maybe (Maybe Int)), Int)
        - type: Maybe (Maybe Int)
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (19))
          - Right:
              expr: (Just (Just 19))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (12))
          - Right:
              expr: (Just (Just 12))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (7))
          - Right:
              expr: (Just (Just 7))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (-10))
          - Right:
              expr: (Just (Just (-10)))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (14))
          - Right:
              expr: (Just (Just 14))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (13))
          - Right:
              expr: (Just (Just 13))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (20))
          - Right:
              expr: (Just (Just 20))
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just just,
               (0))
          - Right:
              expr: (Just (Just 0))
- - expr: let compose = (.) in compose maybe length
  - - - - type: (Maybe Int, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: (Just (0), let compose = (.) in compose toEnum toEnum, Just (19))
          - Right:
              expr: '19'
        - - expr: (Just (0), fromEnum, Just (19))
          - Right:
              expr: '19'
        - - expr: (Just (19), toEnum, Just (19))
          - Right:
              expr: '19'
        - - expr: (Just (7), let compose = (.) in compose toEnum fromEnum, Just (19))
          - Right:
              expr: '19'
        - - expr: (Just (7), let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: (Just (19), fromEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: (Just (7), fromEnum, Nothing)
          - Right:
              expr: '1'
        - - expr: (Nothing, let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: '0'
    - - - type: ([] Int, (Char -> Int), Maybe Char)
        - type: Int
      - - - expr: ([], fromEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: ([], let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ([(7)], fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ([(7)], let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: ([], fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ([(7)], fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: ([(7), (13)], fromEnum, Nothing)
          - Right:
              expr: '2'
        - - expr: ([], fromEnum, Just '7')
          - Right:
              expr: '55'
    - - - type: ([] Char, (Char -> Int), Maybe Char)
        - type: Int
      - - - expr: |-
              (['7', '4'], let compose = (.) in compose toEnum fromEnum,
               Just '0')
          - Right:
              expr: '48'
        - - expr: (['7'], fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: (['7'], let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ([], fromEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (['7', '4', '6'], fromEnum, Nothing)
          - Right:
              expr: '3'
        - - expr: (['7', '4'], fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: (['7', '4', '6'], fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: (['7'], fromEnum, Just '5')
          - Right:
              expr: '53'
    - - - type: (Maybe Char, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: (Nothing, fromEnum, Just (0))
          - Right:
              expr: '0'
        - - expr: (Just '5', let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '1'
        - - expr: (Just '5', let compose = (.) in compose toEnum toEnum, Just (0))
          - Right:
              expr: '0'
        - - expr: (Just '7', let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: '1'
        - - expr: (Nothing, let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (Just '5', toEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: (Just '5', toEnum, Nothing)
          - Right:
              expr: '1'
        - - expr: (Just '5', fromEnum, Just (7))
          - Right:
              expr: '7'
- - expr: let compose = (.) in compose toEnum
  - - - - type: ((Char -> Int), Char)
        - type: Char
      - - - expr: (fromEnum, '0')
          - Right:
              expr: '''0'''
        - - expr: (fromEnum, '7')
          - Right:
              expr: '''7'''
        - - expr: (fromEnum, '8')
          - Right:
              expr: '''8'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '''2'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '''8'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '''7'''
        - - expr: (fromEnum, '4')
          - Right:
              expr: '''4'''
        - - expr: (fromEnum, '2')
          - Right:
              expr: '''2'''
    - - - type: ((Int -> Int), Int)
        - type: Char
      - - - expr: (toEnum, (7))
          - Right:
              expr: '''\a'''
        - - expr: (let compose = (.) in compose toEnum toEnum, (13))
          - Right:
              expr: '''\r'''
        - - expr: (fromEnum, (14))
          - Right:
              expr: '''\SO'''
        - - expr: (let compose = (.) in compose toEnum toEnum, (19))
          - Right:
              expr: '''\DC3'''
        - - expr: (let compose = (.) in compose toEnum toEnum, (-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (toEnum, (13))
          - Right:
              expr: '''\r'''
        - - expr: (toEnum, (19))
          - Right:
              expr: '''\DC3'''
        - - expr: (toEnum, (20))
          - Right:
              expr: '''\DC4'''
    - - - type: ((Char -> Int), Char)
        - type: Int
      - - - expr: (fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '56'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '54'
        - - expr: (fromEnum, '4')
          - Right:
              expr: '52'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: (fromEnum, '2')
          - Right:
              expr: '50'
    - - - type: ((Int -> Int), Int)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (12))
          - Right:
              expr: '12'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (19))
          - Right:
              expr: '19'
        - - expr: (fromEnum, (19))
          - Right:
              expr: '19'
        - - expr: (let compose = (.) in compose toEnum toEnum, (19))
          - Right:
              expr: '19'
        - - expr: (fromEnum, (-10))
          - Right:
              expr: (-10)
        - - expr: (toEnum, (20))
          - Right:
              expr: '20'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (-10))
          - Right:
              expr: (-10)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (20))
          - Right:
              expr: '20'
- - expr: let compose = (.) in compose toEnum length
  - - - - type: Maybe Char
        - type: Char
      - - - expr: (Just '0')
          - Right:
              expr: '''\SOH'''
        - - expr: (Just '7')
          - Right:
              expr: '''\SOH'''
        - - expr: (Just '5')
          - Right:
              expr: '''\SOH'''
        - - expr: (Nothing)
          - Right:
              expr: '''\NUL'''
    - - - type: '[] Char'
        - type: Char
      - - - expr: (['7', '4'])
          - Right:
              expr: '''\STX'''
        - - expr: (['7', '4', '6'])
          - Right:
              expr: '''\ETX'''
        - - expr: ([])
          - Right:
              expr: '''\NUL'''
        - - expr: (['7'])
          - Right:
              expr: '''\SOH'''
    - - - type: '[] Int'
        - type: Char
      - - - expr: ([(7), (13)])
          - Right:
              expr: '''\STX'''
        - - expr: ([(7), (13), (-10)])
          - Right:
              expr: '''\ETX'''
        - - expr: ([(7)])
          - Right:
              expr: '''\SOH'''
        - - expr: ([])
          - Right:
              expr: '''\NUL'''
    - - - type: Maybe Char
        - type: Int
      - - - expr: (Just '7')
          - Right:
              expr: '1'
        - - expr: (Just '5')
          - Right:
              expr: '1'
        - - expr: (Just '0')
          - Right:
              expr: '1'
        - - expr: (Nothing)
          - Right:
              expr: '0'
- - expr: let compose = (.) in compose (compose sequence)
  - - - - type: ((Char -> Char -> [] ([] Int)), Char, Char)
        - type: '[] ([] Int)'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '2', '4')
          - Right:
              expr: '[[]]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '2', '5')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8', '5')
          - Right:
              expr: '[[]]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '6', '0')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '2', '5')
          - Right:
              expr: '[[]]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '5', '4')
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5', '4')
          - Right:
              expr: '[[]]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '0', '2')
          - Right:
              expr: '[[]]'
    - - - type: ((Char -> Int -> Maybe ([] Int)), Char, Int)
        - type: '[] (Maybe Int)'
      - - - expr: (let compose = (.) in compose mempty maybe, '5', (13))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2', (13))
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty maybe, '6', (7))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7', (19))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '8', (-10))
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '4', (20))
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty maybe, '2', (13))
          - Right:
              expr: '[Nothing]'
        - - expr: (let compose = (.) in compose mempty maybe, '6', (-10))
          - Right:
              expr: '[Nothing]'
    - - - type: ((Char -> Char -> [] (Maybe Char)), Char, Char)
        - type: Maybe ([] Char)
      - - - expr: (let compose = (.) in compose mempty fromEnum, '8', '4')
          - Right:
              expr: (Just "")
        - - expr: (let compose = (.) in compose mempty maybe, '8', '5')
          - Right:
              expr: (Just "")
        - - expr: (let compose = (.) in compose mempty fromEnum, '6', '8')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0', '2')
          - Right:
              expr: (Just "")
        - - expr: (let compose = (.) in compose mempty maybe, '7', '4')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '5', '7')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '6', '7')
          - Right:
              expr: (Just "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2', '2')
          - Right:
              expr: (Just "")
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc unzip
  - - - - type: ([(Char, Char)], ([Char], [Char]))
        - type: ([Char], [Char])
      - - - expr: ([], (['7', '4', '6'], ['7', '4', '6']))
          - Right:
              expr: ("746", "746")
        - - expr: ([('7', '7'), ('4', '4')], (['7', '4'], ['7', '4']))
          - Right:
              expr: ("7474", "7474")
        - - expr: ([('7', '7')], (['7', '4'], ['7', '4']))
          - Right:
              expr: ("774", "774")
        - - expr: ([], (['7', '4'], ['7', '4']))
          - Right:
              expr: ("74", "74")
        - - expr: ([('7', '7'), ('4', '4')], (['7', '4', '6'], ['7', '4', '6']))
          - Right:
              expr: ("74746", "74746")
        - - expr: ([('7', '7')], ([], []))
          - Right:
              expr: ("7", "7")
        - - expr: ([('7', '7'), ('4', '4'), ('6', '6')], (['7', '4'], ['7', '4']))
          - Right:
              expr: ("74674", "74674")
        - - expr: ([('7', '7'), ('4', '4')], (['7'], ['7']))
          - Right:
              expr: ("747", "747")
    - - - type: ([(Int, Int)], ([Int], [Int]))
        - type: ([Int], [Int])
      - - - expr: ([((7), (7))], ([(7), (13), (-10)], [(7), (13), (-10)]))
          - Right:
              expr: ([7, 7, 13, -10], [7, 7, 13, -10])
        - - expr: ([((7), (7)), ((13), (13)), ((-10), (-10))], ([(7)], [(7)]))
          - Right:
              expr: ([7, 13, -10, 7], [7, 13, -10, 7])
        - - expr: ([((7), (7)), ((13), (13))], ([(7), (13)], [(7), (13)]))
          - Right:
              expr: ([7, 13, 7, 13], [7, 13, 7, 13])
        - - expr: ([((7), (7))], ([], []))
          - Right:
              expr: ([7], [7])
        - - expr: ([((7), (7)), ((13), (13)), ((-10), (-10))], ([], []))
          - Right:
              expr: ([7, 13, -10], [7, 13, -10])
        - - expr: |-
              ([((7), (7)), ((13), (13))],
               ([(7), (13), (-10)], [(7), (13), (-10)]))
          - Right:
              expr: ([7, 13, 7, 13, -10], [7, 13, 7, 13, -10])
        - - expr: ([((7), (7))], ([(7)], [(7)]))
          - Right:
              expr: ([7, 7], [7, 7])
        - - expr: ([((7), (7)), ((13), (13))], ([(7)], [(7)]))
          - Right:
              expr: ([7, 13, 7], [7, 13, 7])
    - - - type: ([(Int, Char)], ([Int], [Char]))
        - type: ([Int], [Char])
      - - - expr: ([((7), '7'), ((13), '4'), ((-10), '6')], ([], []))
          - Right:
              expr: ([7, 13, -10], "746")
        - - expr: ([((7), '7')], ([(7), (13), (-10)], ['7', '4', '6']))
          - Right:
              expr: ([7, 7, 13, -10], "7746")
        - - expr: ([((7), '7')], ([], []))
          - Right:
              expr: ([7], "7")
        - - expr: ([((7), '7'), ((13), '4')], ([(7), (13)], ['7', '4']))
          - Right:
              expr: ([7, 13, 7, 13], "7474")
        - - expr: |-
              ([((7), '7'), ((13), '4'), ((-10), '6')],
               ([(7), (13)], ['7', '4']))
          - Right:
              expr: ([7, 13, -10, 7, 13], "74674")
        - - expr: ([((7), '7'), ((13), '4'), ((-10), '6')], ([(7)], ['7']))
          - Right:
              expr: ([7, 13, -10, 7], "7467")
        - - expr: ([((7), '7'), ((13), '4')], ([(7), (13), (-10)], ['7', '4', '6']))
          - Right:
              expr: ([7, 13, 7, 13, -10], "74746")
        - - expr: |-
              ([((7), '7'), ((13), '4'), ((-10), '6')],
               ([(7), (13), (-10)], ['7', '4', '6']))
          - Right:
              expr: ([7, 13, -10, 7, 13, -10], "746746")
    - - - type: ([(Char, Int)], ([Char], [Int]))
        - type: ([Char], [Int])
      - - - expr: |-
              ([('7', (7)), ('4', (13)), ('6', (-10))],
               (['7', '4', '6'], [(7), (13), (-10)]))
          - Right:
              expr: ("746746", [7, 13, -10, 7, 13, -10])
        - - expr: ([('7', (7)), ('4', (13)), ('6', (-10))], ([], []))
          - Right:
              expr: ("746", [7, 13, -10])
        - - expr: ([('7', (7))], ([], []))
          - Right:
              expr: ("7", [7])
        - - expr: ([], (['7', '4'], [(7), (13)]))
          - Right:
              expr: ("74", [7, 13])
        - - expr: ([('7', (7)), ('4', (13))], (['7'], [(7)]))
          - Right:
              expr: ("747", [7, 13, 7])
        - - expr: |-
              ([('7', (7)), ('4', (13)), ('6', (-10))],
               (['7', '4'], [(7), (13)]))
          - Right:
              expr: ("74674", [7, 13, -10, 7, 13])
        - - expr: ([('7', (7)), ('4', (13))], (['7', '4'], [(7), (13)]))
          - Right:
              expr: ("7474", [7, 13, 7, 13])
        - - expr: ([], ([], []))
          - Right:
              expr: ("", [])
- - expr: let compose = (.) in compose compose fmap
  - - - - type: ((Char -> Char), (Char -> Maybe Char), Char)
        - type: Maybe Char
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just in just, '7')
          - Right:
              expr: (Just '7')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just in just, '8')
          - Right:
              expr: (Just '8')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just in just, '0')
          - Right:
              expr: (Just '0')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just in just, '2')
          - Right:
              expr: (Just '2')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just in just, '5')
          - Right:
              expr: (Just '5')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just in just, '4')
          - Right:
              expr: (Just '4')
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just in just, '6')
          - Right:
              expr: (Just '6')
    - - - type: ((Int -> Char), (Char -> [] Int), Char)
        - type: '[] Char'
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '5')
          - Right:
              expr: '""'
        - - expr: (toEnum, let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '0')
          - Right:
              expr: '""'
        - - expr: |-
              (toEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5')
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '7')
          - Right:
              expr: '""'
        - - expr: (toEnum, let compose = (.) in compose mempty fromEnum, '4')
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose mempty maybe, '5')
          - Right:
              expr: '""'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5')
          - Right:
              expr: '""'
    - - - type: ((Int -> Int), (Char -> Maybe Int), Char)
        - type: Maybe Int
      - - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8')
          - Right:
              expr: (Just 56)
        - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4')
          - Right:
              expr: (Just 52)
        - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2')
          - Right:
              expr: (Just 50)
        - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '6')
          - Right:
              expr: (Just 54)
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2')
          - Right:
              expr: (Just 50)
        - - expr: |-
              (toEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8')
          - Right:
              expr: (Just 56)
        - - expr: |-
              (toEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7')
          - Right:
              expr: (Just 55)
        - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7')
          - Right:
              expr: (Just 55)
    - - - type: ((Int -> Int), (Int -> [] Int), Int)
        - type: '[] Int'
      - - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (19))
          - Right:
              expr: '[]'
        - - expr: |-
              (toEnum,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (0))
          - Right:
              expr: '[]'
        - - expr: (toEnum, let compose = (.) in compose mempty maybe, (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (-10))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose mempty fromEnum, (0))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               let compose = (.) in compose mempty fromEnum, (0))
          - Right:
              expr: '[]'
        - - expr: |-
              (fromEnum,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (19))
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl sequenceA
  - - - - type: ([] (Maybe Char), Char)
        - type: (Maybe ([] Char), Char)
      - - - expr: ([Just '7'], '7')
          - Right:
              expr: (Just "7", '7')
        - - expr: ([], '5')
          - Right:
              expr: (Just "", '5')
        - - expr: ([Just '7'], '4')
          - Right:
              expr: (Just "7", '4')
        - - expr: ([], '6')
          - Right:
              expr: (Just "", '6')
        - - expr: ([], '8')
          - Right:
              expr: (Just "", '8')
        - - expr: ([], '2')
          - Right:
              expr: (Just "", '2')
        - - expr: ([Just '7'], '6')
          - Right:
              expr: (Just "7", '6')
        - - expr: ([Just '7'], '5')
          - Right:
              expr: (Just "7", '5')
    - - - type: (Maybe ([] Char), Int)
        - type: ([] (Maybe Char), Int)
      - - - expr: (Nothing, (14))
          - Right:
              expr: ([Nothing], 14)
        - - expr: (Nothing, (13))
          - Right:
              expr: ([Nothing], 13)
        - - expr: (Nothing, (19))
          - Right:
              expr: ([Nothing], 19)
        - - expr: (Just ['7', '4', '6'], (20))
          - Right:
              expr: ([Just '7', Just '4', Just '6'], 20)
        - - expr: (Just ['7', '4', '6'], (7))
          - Right:
              expr: ([Just '7', Just '4', Just '6'], 7)
        - - expr: (Nothing, (0))
          - Right:
              expr: ([Nothing], 0)
        - - expr: (Nothing, (-10))
          - Right:
              expr: ([Nothing], -10)
        - - expr: (Nothing, (20))
          - Right:
              expr: ([Nothing], 20)
    - - - type: ([] (Maybe Int), Char)
        - type: (Maybe ([] Int), Char)
      - - - expr: ([], '8')
          - Right:
              expr: (Just [], '8')
        - - expr: ([Just (7)], '2')
          - Right:
              expr: (Just [7], '2')
        - - expr: ([Just (7)], '4')
          - Right:
              expr: (Just [7], '4')
        - - expr: ([], '4')
          - Right:
              expr: (Just [], '4')
        - - expr: ([Just (7), Nothing], '7')
          - Right:
              expr: (Nothing, '7')
        - - expr: ([Just (7)], '8')
          - Right:
              expr: (Just [7], '8')
        - - expr: ([Just (7), Nothing], '2')
          - Right:
              expr: (Nothing, '2')
        - - expr: ([Just (7), Nothing], '5')
          - Right:
              expr: (Nothing, '5')
    - - - type: ([] ([] Char), Int)
        - type: ([] ([] Char), Int)
      - - - expr: ([['7', '4', '6'], []], (13))
          - Right:
              expr: ([], 13)
        - - expr: ([['7', '4', '6'], [], ['7', '4']], (-10))
          - Right:
              expr: ([], -10)
        - - expr: ([['7', '4', '6'], []], (-10))
          - Right:
              expr: ([], -10)
        - - expr: ([['7', '4', '6']], (-10))
          - Right:
              expr: (["7", "4", "6"], -10)
        - - expr: ([], (7))
          - Right:
              expr: ([""], 7)
        - - expr: ([], (19))
          - Right:
              expr: ([""], 19)
        - - expr: ([['7', '4', '6'], [], ['7', '4']], (14))
          - Right:
              expr: ([], 14)
        - - expr: ([], (20))
          - Right:
              expr: ([""], 20)
- - expr: let compose = (.) in compose (zip mempty)
  - - - - type: ((Char -> [Char]), Char)
        - type: '[(Int, Char)]'
      - - - expr: (let compose = (.) in compose mempty fromEnum, '8')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '2')
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Int]), Int)
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (0))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (12))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (19))
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (19))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (7))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (19))
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (0))
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Int]), Char)
        - type: '[(Int, Int)]'
      - - - expr: (let compose = (.) in compose mempty fromEnum, '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '2')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '7')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5')
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Char]), Char)
        - type: '[(Char, Char)]'
      - - - expr: (let compose = (.) in compose mempty maybe, '8')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl toEnum
  - - - - type: (Int, Int)
        - type: (Int, Int)
      - - - expr: ((7), (-10))
          - Right:
              expr: (7, -10)
        - - expr: ((14), (13))
          - Right:
              expr: (14, 13)
        - - expr: ((20), (-10))
          - Right:
              expr: (20, -10)
        - - expr: ((12), (0))
          - Right:
              expr: (12, 0)
        - - expr: ((0), (12))
          - Right:
              expr: (0, 12)
        - - expr: ((-10), (14))
          - Right:
              expr: (-10, 14)
        - - expr: ((13), (20))
          - Right:
              expr: (13, 20)
        - - expr: ((14), (14))
          - Right:
              expr: (14, 14)
    - - - type: (Int, Int)
        - type: (Char, Int)
      - - - expr: ((20), (14))
          - Right:
              expr: ('\DC4', 14)
        - - expr: ((14), (-10))
          - Right:
              expr: ('\SO', -10)
        - - expr: ((20), (13))
          - Right:
              expr: ('\DC4', 13)
        - - expr: ((7), (12))
          - Right:
              expr: ('\a', 12)
        - - expr: ((19), (14))
          - Right:
              expr: ('\DC3', 14)
        - - expr: ((20), (0))
          - Right:
              expr: ('\DC4', 0)
        - - expr: ((19), (19))
          - Right:
              expr: ('\DC3', 19)
        - - expr: ((0), (0))
          - Right:
              expr: ('\NUL', 0)
    - - - type: (Int, Char)
        - type: (Int, Char)
      - - - expr: ((14), '2')
          - Right:
              expr: (14, '2')
        - - expr: ((0), '7')
          - Right:
              expr: (0, '7')
        - - expr: ((-10), '4')
          - Right:
              expr: (-10, '4')
        - - expr: ((20), '0')
          - Right:
              expr: (20, '0')
        - - expr: ((13), '7')
          - Right:
              expr: (13, '7')
        - - expr: ((7), '8')
          - Right:
              expr: (7, '8')
        - - expr: ((7), '2')
          - Right:
              expr: (7, '2')
        - - expr: ((12), '7')
          - Right:
              expr: (12, '7')
    - - - type: (Int, Char)
        - type: (Char, Char)
      - - - expr: ((0), '2')
          - Right:
              expr: ('\NUL', '2')
        - - expr: ((7), '4')
          - Right:
              expr: ('\a', '4')
        - - expr: ((19), '0')
          - Right:
              expr: ('\DC3', '0')
        - - expr: ((13), '7')
          - Right:
              expr: ('\r', '7')
        - - expr: ((7), '2')
          - Right:
              expr: ('\a', '2')
        - - expr: ((12), '6')
          - Right:
              expr: ('\f', '6')
        - - expr: ((13), '5')
          - Right:
              expr: ('\r', '5')
        - - expr: ((13), '0')
          - Right:
              expr: ('\r', '0')
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend unzip
  - - - - type: ([(Int, Char)], [([Int], [Char])])
        - type: '[([Int], [Char])]'
      - - - expr: |-
              ([((7), '7'), ((13), '4')],
               [([(7), (13), (-10)], ['7', '4', '6']), ([], [])])
          - Right:
              expr: '[([7, 13], "74"), ([7, 13, -10], "746"), ([], "")]'
        - - expr: |-
              ([],
               [([(7), (13), (-10)], ['7', '4', '6']), ([], []),
                ([(7), (13)], ['7', '4'])])
          - Right:
              expr: '[([], ""), ([7, 13, -10], "746"), ([], ""), ([7, 13], "74")]'
        - - expr: |-
              ([((7), '7')],
               [([(7), (13), (-10)], ['7', '4', '6']), ([], []),
                ([(7), (13)], ['7', '4'])])
          - Right:
              expr: '[([7], "7"), ([7, 13, -10], "746"), ([], ""), ([7, 13], "74")]'
        - - expr: |-
              ([((7), '7'), ((13), '4')],
               [([(7), (13), (-10)], ['7', '4', '6']), ([], []),
                ([(7), (13)], ['7', '4'])])
          - Right:
              expr: '[([7, 13], "74"), ([7, 13, -10], "746"), ([], ""), ([7, 13],
                "74")]'
        - - expr: ([((7), '7')], [([(7), (13), (-10)], ['7', '4', '6'])])
          - Right:
              expr: '[([7], "7"), ([7, 13, -10], "746")]'
        - - expr: ([((7), '7')], [])
          - Right:
              expr: '[([7], "7")]'
        - - expr: ([], [([(7), (13), (-10)], ['7', '4', '6']), ([], [])])
          - Right:
              expr: '[([], ""), ([7, 13, -10], "746"), ([], "")]'
        - - expr: |-
              ([((7), '7'), ((13), '4'), ((-10), '6')],
               [([(7), (13), (-10)], ['7', '4', '6']), ([], []),
                ([(7), (13)], ['7', '4'])])
          - Right:
              expr: |-
                [([7, 13, -10], "746"), ([7, 13, -10], "746"), ([], ""),
                 ([7, 13], "74")]
    - - - type: ([(Char, Char)], [([Char], [Char])])
        - type: '[([Char], [Char])]'
      - - - expr: ([('7', '7'), ('4', '4')], [])
          - Right:
              expr: '[("74", "74")]'
        - - expr: |-
              ([('7', '7'), ('4', '4'), ('6', '6')],
               [(['7', '4', '6'], ['7', '4', '6']), ([], []),
                (['7', '4'], ['7', '4'])])
          - Right:
              expr: '[("746", "746"), ("746", "746"), ("", ""), ("74", "74")]'
        - - expr: |-
              ([],
               [(['7', '4', '6'], ['7', '4', '6']), ([], []),
                (['7', '4'], ['7', '4'])])
          - Right:
              expr: '[("", ""), ("746", "746"), ("", ""), ("74", "74")]'
        - - expr: ([('7', '7')], [])
          - Right:
              expr: '[("7", "7")]'
        - - expr: |-
              ([('7', '7'), ('4', '4'), ('6', '6')],
               [(['7', '4', '6'], ['7', '4', '6']), ([], [])])
          - Right:
              expr: '[("746", "746"), ("746", "746"), ("", "")]'
        - - expr: ([('7', '7'), ('4', '4'), ('6', '6')], [])
          - Right:
              expr: '[("746", "746")]'
        - - expr: |-
              ([('7', '7'), ('4', '4')],
               [(['7', '4', '6'], ['7', '4', '6']), ([], [])])
          - Right:
              expr: '[("74", "74"), ("746", "746"), ("", "")]'
        - - expr: |-
              ([('7', '7')],
               [(['7', '4', '6'], ['7', '4', '6']), ([], []),
                (['7', '4'], ['7', '4'])])
          - Right:
              expr: '[("7", "7"), ("746", "746"), ("", ""), ("74", "74")]'
    - - - type: ([(Char, Int)], [([Char], [Int])])
        - type: '[([Char], [Int])]'
      - - - expr: |-
              ([('7', (7)), ('4', (13)), ('6', (-10))],
               [(['7', '4', '6'], [(7), (13), (-10)]), ([], [])])
          - Right:
              expr: '[("746", [7, 13, -10]), ("746", [7, 13, -10]), ("", [])]'
        - - expr: ([('7', (7))], [(['7', '4', '6'], [(7), (13), (-10)])])
          - Right:
              expr: '[("7", [7]), ("746", [7, 13, -10])]'
        - - expr: ([], [(['7', '4', '6'], [(7), (13), (-10)])])
          - Right:
              expr: '[("", []), ("746", [7, 13, -10])]'
        - - expr: ([], [])
          - Right:
              expr: '[("", [])]'
        - - expr: |-
              ([('7', (7)), ('4', (13))],
               [(['7', '4', '6'], [(7), (13), (-10)])])
          - Right:
              expr: '[("74", [7, 13]), ("746", [7, 13, -10])]'
        - - expr: |-
              ([('7', (7))],
               [(['7', '4', '6'], [(7), (13), (-10)]), ([], []),
                (['7', '4'], [(7), (13)])])
          - Right:
              expr: '[("7", [7]), ("746", [7, 13, -10]), ("", []), ("74", [7, 13])]'
        - - expr: |-
              ([('7', (7)), ('4', (13))],
               [(['7', '4', '6'], [(7), (13), (-10)]), ([], [])])
          - Right:
              expr: '[("74", [7, 13]), ("746", [7, 13, -10]), ("", [])]'
        - - expr: |-
              ([('7', (7)), ('4', (13))],
               [(['7', '4', '6'], [(7), (13), (-10)]), ([], []),
                (['7', '4'], [(7), (13)])])
          - Right:
              expr: '[("74", [7, 13]), ("746", [7, 13, -10]), ("", []), ("74", [7,
                13])]'
    - - - type: ([(Int, Int)], [([Int], [Int])])
        - type: '[([Int], [Int])]'
      - - - expr: |-
              ([((7), (7)), ((13), (13)), ((-10), (-10))],
               [([(7), (13), (-10)], [(7), (13), (-10)]), ([], []),
                ([(7), (13)], [(7), (13)])])
          - Right:
              expr: |-
                [([7, 13, -10], [7, 13, -10]), ([7, 13, -10], [7, 13, -10]),
                 ([], []), ([7, 13], [7, 13])]
        - - expr: ([((7), (7)), ((13), (13)), ((-10), (-10))], [])
          - Right:
              expr: '[([7, 13, -10], [7, 13, -10])]'
        - - expr: ([], [([(7), (13), (-10)], [(7), (13), (-10)])])
          - Right:
              expr: '[([], []), ([7, 13, -10], [7, 13, -10])]'
        - - expr: ([((7), (7))], [([(7), (13), (-10)], [(7), (13), (-10)])])
          - Right:
              expr: '[([7], [7]), ([7, 13, -10], [7, 13, -10])]'
        - - expr: ([((7), (7))], [])
          - Right:
              expr: '[([7], [7])]'
        - - expr: ([((7), (7)), ((13), (13))], [])
          - Right:
              expr: '[([7, 13], [7, 13])]'
        - - expr: |-
              ([],
               [([(7), (13), (-10)], [(7), (13), (-10)]), ([], []),
                ([(7), (13)], [(7), (13)])])
          - Right:
              expr: |-
                [([], []), ([7, 13, -10], [7, 13, -10]), ([], []),
                 ([7, 13], [7, 13])]
        - - expr: |-
              ([((7), (7)), ((13), (13))],
               [([(7), (13), (-10)], [(7), (13), (-10)])])
          - Right:
              expr: '[([7, 13], [7, 13]), ([7, 13, -10], [7, 13, -10])]'
- - expr: maybe (unzip mempty)
  - - - - type: ((Char -> ([Int], [Int])), Maybe Char)
        - type: ([Int], [Int])
      - - - expr: (let compose = (.) in compose unzip mempty, Just '5')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose unzip mempty, Just '0')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '7')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty fromEnum, Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5')
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty fromEnum, Just '5')
          - Right:
              expr: ([], [])
    - - - type: ((Char -> ([Int], [Char])), Maybe Char)
        - type: ([Int], [Char])
      - - - expr: (let compose = (.) in compose mempty fromEnum, Nothing)
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose unzip mempty, Just '0')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, Just '7')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, Just '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '5')
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing)
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0')
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose unzip mempty, Just '5')
          - Right:
              expr: ([], "")
    - - - type: ((Int -> ([Int], [Int])), Maybe Int)
        - type: ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (0))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (0))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty maybe, Just (0))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose unzip mempty, Nothing)
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose unzip mempty, Just (0))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (7))
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: ([], [])
        - - expr: (let compose = (.) in compose mempty maybe, Just (7))
          - Right:
              expr: ([], [])
    - - - type: ((Int -> ([Char], [Char])), Maybe Int)
        - type: ([Char], [Char])
      - - - expr: (let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (0))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing)
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (19))
          - Right:
              expr: ("", "")
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (19))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (19))
          - Right:
              expr: ("", "")
- - expr: |-
      let just = Just
          zero = 0
          tpl = (,)
        in tpl (just zero)
  - - - - type: Char
        - type: (Maybe Int, Char)
      - - - expr: ('2')
          - Right:
              expr: (Just 0, '2')
        - - expr: ('0')
          - Right:
              expr: (Just 0, '0')
        - - expr: ('4')
          - Right:
              expr: (Just 0, '4')
        - - expr: ('8')
          - Right:
              expr: (Just 0, '8')
        - - expr: ('7')
          - Right:
              expr: (Just 0, '7')
        - - expr: ('6')
          - Right:
              expr: (Just 0, '6')
        - - expr: ('5')
          - Right:
              expr: (Just 0, '5')
    - - - type: Int
        - type: (Maybe Int, Int)
      - - - expr: ((19))
          - Right:
              expr: (Just 0, 19)
        - - expr: ((7))
          - Right:
              expr: (Just 0, 7)
        - - expr: ((13))
          - Right:
              expr: (Just 0, 13)
        - - expr: ((0))
          - Right:
              expr: (Just 0, 0)
        - - expr: ((20))
          - Right:
              expr: (Just 0, 20)
        - - expr: ((14))
          - Right:
              expr: (Just 0, 14)
        - - expr: ((-10))
          - Right:
              expr: (Just 0, -10)
        - - expr: ((12))
          - Right:
              expr: (Just 0, 12)
- - expr: |-
      let just = Just
          compose = (.)
        in compose maybe just
  - - - - type: (Char, (Char -> Maybe Char), Maybe Char)
        - type: Maybe Char
      - - - expr: ('2', let just = Just in just, Just '5')
          - Right:
              expr: (Just '5')
        - - expr: ('2', let just = Just in just, Nothing)
          - Right:
              expr: (Just '2')
        - - expr: ('6', let just = Just in just, Nothing)
          - Right:
              expr: (Just '6')
        - - expr: ('5', let just = Just in just, Just '0')
          - Right:
              expr: (Just '0')
        - - expr: ('0', let just = Just in just, Just '0')
          - Right:
              expr: (Just '0')
        - - expr: ('7', let just = Just in just, Just '7')
          - Right:
              expr: (Just '7')
        - - expr: ('6', let just = Just in just, Just '5')
          - Right:
              expr: (Just '5')
        - - expr: ('8', let just = Just in just, Just '0')
          - Right:
              expr: (Just '0')
    - - - type: (Int, (Int -> Maybe Int), Maybe Int)
        - type: Maybe Int
      - - - expr: |-
              ((14),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just (7))
          - Right:
              expr: (Just 7)
        - - expr: |-
              ((20),
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (0))
          - Right:
              expr: (Just 0)
        - - expr: |-
              ((-10),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Nothing)
          - Right:
              expr: (Just (-10))
        - - expr: ((0), let just = Just in just, Just (7))
          - Right:
              expr: (Just 7)
        - - expr: ((12), let just = Just in just, Just (0))
          - Right:
              expr: (Just 0)
        - - expr: ((19), let just = Just in just, Just (7))
          - Right:
              expr: (Just 7)
        - - expr: ((20), let just = Just in just, Just (7))
          - Right:
              expr: (Just 7)
        - - expr: ((13), let just = Just in just, Just (0))
          - Right:
              expr: (Just 0)
    - - - type: (Int, (Char -> Maybe Int), Maybe Char)
        - type: Maybe Int
      - - - expr: |-
              ((20),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '7')
          - Right:
              expr: (Just 55)
        - - expr: |-
              ((14),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Nothing)
          - Right:
              expr: (Just 14)
        - - expr: |-
              ((-10),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Nothing)
          - Right:
              expr: (Just (-10))
        - - expr: |-
              ((13),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '5')
          - Right:
              expr: (Just 53)
        - - expr: |-
              ((20),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Nothing)
          - Right:
              expr: (Just 20)
        - - expr: |-
              ((7),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '7')
          - Right:
              expr: (Just 55)
        - - expr: |-
              ((20),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '5')
          - Right:
              expr: (Just 53)
        - - expr: |-
              ((14),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '5')
          - Right:
              expr: (Just 53)
    - - - type: (Char, (Int -> Maybe Char), Maybe Int)
        - type: Maybe Char
      - - - expr: |-
              ('8',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (0))
          - Right:
              expr: (Just '\NUL')
        - - expr: |-
              ('2',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (0))
          - Right:
              expr: (Just '\NUL')
        - - expr: |-
              ('0',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (19))
          - Right:
              expr: (Just '\DC3')
        - - expr: |-
              ('5',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (19))
          - Right:
              expr: (Just '\DC3')
        - - expr: |-
              ('2',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (19))
          - Right:
              expr: (Just '\DC3')
        - - expr: |-
              ('4',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (19))
          - Right:
              expr: (Just '\DC3')
        - - expr: |-
              ('4',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (0))
          - Right:
              expr: (Just '\NUL')
        - - expr: |-
              ('8',
               let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (19))
          - Right:
              expr: (Just '\DC3')
- - expr: let conc = (<>) in conc zip
  - - - - type: (([Char] -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['7'], [(7), (13), (-10)])
          - Right:
              expr: '[(''7'', 7)]'
        - - expr: (zip, ['7', '4', '6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [], [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['7', '4', '6'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               ['7'], [(7)])
          - Right:
              expr: '[(''7'', 7)]'
        - - expr: |-
              (let compose = (.) in compose mempty zip, ['7', '4'],
               [(7), (13), (-10)])
          - Right:
              expr: '[(''7'', 7), (''4'', 13)]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [], [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty zip, ['7'], [(7), (13)])
          - Right:
              expr: '[(''7'', 7)]'
    - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (let compose = (.) in compose zip mempty, ['7', '4'], ['7', '4'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4'')]'
        - - expr: (let compose = (.) in compose mempty maybe, ['7'], ['7', '4', '6'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               ['7'], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, ['7', '4'],
               ['7', '4'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4'')]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, ['7', '4', '6'],
               ['7', '4'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4'')]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               ['7', '4'], ['7', '4'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4'')]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               ['7', '4', '6'], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, ['7'], ['7'])
          - Right:
              expr: '[(''7'', ''7'')]'
    - - - type: (([Int] -> [Char] -> [(Int, Char)]), [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: (zip, [], [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, [(7)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [(7)], ['7'])
          - Right:
              expr: '[(7, ''7'')]'
        - - expr: (let compose = (.) in compose mempty maybe, [], ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty zip, [(7)], ['7'])
          - Right:
              expr: '[(7, ''7'')]'
        - - expr: (let compose = (.) in compose foldMap mempty, [(7), (13)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, [(7)],
               ['7', '4', '6'])
          - Right:
              expr: '[(7, ''7'')]'
        - - expr: (zip, [(7), (13)], ['7', '4', '6'])
          - Right:
              expr: '[(7, ''7''), (13, ''4''), (7, ''7''), (13, ''4'')]'
    - - - type: (([Int] -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.) in compose zip mempty, [(7), (13), (-10)],
               [(7), (13)])
          - Right:
              expr: '[(7, 7), (13, 13)]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [(7)], [(7)])
          - Right:
              expr: '[(7, 7)]'
        - - expr: (let compose = (.) in compose foldMap mempty, [(7), (13)], [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [(7), (13)], [(7)])
          - Right:
              expr: '[(7, 7)]'
        - - expr: (zip, [(7)], [(7)])
          - Right:
              expr: '[(7, 7), (7, 7)]'
        - - expr: (let compose = (.) in compose zip mempty, [], [(7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty zip, [(7), (13), (-10)],
               [(7), (13)])
          - Right:
              expr: '[(7, 7), (13, 13)]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [(7), (13), (-10)], [(7)])
          - Right:
              expr: '[(7, 7)]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose sequenceA just
  - - - - type: Maybe Int
        - type: Maybe (Maybe Int)
      - - - expr: (Just (19))
          - Right:
              expr: (Just (Just 19))
        - - expr: (Just (0))
          - Right:
              expr: (Just (Just 0))
        - - expr: (Just (7))
          - Right:
              expr: (Just (Just 7))
        - - expr: (Nothing)
          - Right:
              expr: Nothing
    - - - type: Maybe Char
        - type: Maybe (Maybe Char)
      - - - expr: (Nothing)
          - Right:
              expr: Nothing
        - - expr: (Just '0')
          - Right:
              expr: (Just (Just '0'))
        - - expr: (Just '5')
          - Right:
              expr: (Just (Just '5'))
        - - expr: (Just '7')
          - Right:
              expr: (Just (Just '7'))
    - - - type: '[] Char'
        - type: '[] (Maybe Char)'
      - - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'])
          - Right:
              expr: '[Just ''7'', Just ''4'', Just ''6'']'
        - - expr: (['7', '4'])
          - Right:
              expr: '[Just ''7'', Just ''4'']'
        - - expr: (['7'])
          - Right:
              expr: '[Just ''7'']'
    - - - type: '[] Int'
        - type: '[] (Maybe Int)'
      - - - expr: ([(7), (13), (-10)])
          - Right:
              expr: '[Just 7, Just 13, Just (-10)]'
        - - expr: ([(7), (13)])
          - Right:
              expr: '[Just 7, Just 13]'
        - - expr: ([(7)])
          - Right:
              expr: '[Just 7]'
        - - expr: ([])
          - Right:
              expr: '[]'
- - expr: maybe zip mempty
  - - - - type: (Maybe Char, [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: (Just '0', [(7), (13), (-10)], ['7'])
          - Right:
              expr: '[]'
        - - expr: (Just '0', [(7), (13)], [])
          - Right:
              expr: '[]'
        - - expr: (Just '0', [(7), (13), (-10)], ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(7), (13)], ['7'])
          - Right:
              expr: '[(7, ''7'')]'
        - - expr: (Just '7', [], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(7)], ['7', '4', '6'])
          - Right:
              expr: '[(7, ''7'')]'
        - - expr: (Nothing, [], ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: (Just '5', [(7), (13)], [])
          - Right:
              expr: '[]'
    - - - type: (Maybe Int, [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: (Just (19), ['7', '4', '6'], [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (Just (19), ['7', '4', '6'], [])
          - Right:
              expr: '[]'
        - - expr: (Just (0), ['7'], [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (Just (7), ['7', '4', '6'], [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (Just (0), ['7', '4'], [])
          - Right:
              expr: '[]'
        - - expr: (Just (7), ['7', '4'], [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (Just (7), ['7'], [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['7'], [(7), (13), (-10)])
          - Right:
              expr: '[(''7'', 7)]'
    - - - type: (Maybe Char, [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (Nothing, [], ['7'])
          - Right:
              expr: '[]'
        - - expr: (Just '5', ['7'], ['7'])
          - Right:
              expr: '[]'
        - - expr: (Just '0', ['7'], ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (Just '5', ['7'], [])
          - Right:
              expr: '[]'
        - - expr: (Just '7', ['7', '4'], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['7'], ['7'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: (Nothing, ['7'], ['7', '4', '6'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: (Just '7', ['7', '4'], ['7', '4'])
          - Right:
              expr: '[]'
    - - - type: (Maybe Int, [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (Just (0), ['7'], ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['7'], [])
          - Right:
              expr: '[]'
        - - expr: (Just (0), ['7', '4', '6'], ['7'])
          - Right:
              expr: '[]'
        - - expr: (Just (7), ['7', '4', '6'], ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (Just (7), ['7'], ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: (Just (19), ['7', '4', '6'], ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (Just (7), ['7'], [])
          - Right:
              expr: '[]'
        - - expr: (Just (7), [], ['7'])
          - Right:
              expr: '[]'
- - expr: let tpl = (,) in tpl (unzip mempty)
  - - - - type: Char
        - type: (([Int], [Char]), Char)
      - - - expr: ('4')
          - Right:
              expr: (([], ""), '4')
        - - expr: ('5')
          - Right:
              expr: (([], ""), '5')
        - - expr: ('6')
          - Right:
              expr: (([], ""), '6')
        - - expr: ('2')
          - Right:
              expr: (([], ""), '2')
        - - expr: ('0')
          - Right:
              expr: (([], ""), '0')
        - - expr: ('8')
          - Right:
              expr: (([], ""), '8')
        - - expr: ('7')
          - Right:
              expr: (([], ""), '7')
    - - - type: Char
        - type: (([Int], [Int]), Char)
      - - - expr: ('8')
          - Right:
              expr: (([], []), '8')
        - - expr: ('0')
          - Right:
              expr: (([], []), '0')
        - - expr: ('5')
          - Right:
              expr: (([], []), '5')
        - - expr: ('4')
          - Right:
              expr: (([], []), '4')
        - - expr: ('7')
          - Right:
              expr: (([], []), '7')
        - - expr: ('6')
          - Right:
              expr: (([], []), '6')
        - - expr: ('2')
          - Right:
              expr: (([], []), '2')
    - - - type: Int
        - type: (([Int], [Char]), Int)
      - - - expr: ((-10))
          - Right:
              expr: (([], ""), -10)
        - - expr: ((13))
          - Right:
              expr: (([], ""), 13)
        - - expr: ((7))
          - Right:
              expr: (([], ""), 7)
        - - expr: ((12))
          - Right:
              expr: (([], ""), 12)
        - - expr: ((0))
          - Right:
              expr: (([], ""), 0)
        - - expr: ((19))
          - Right:
              expr: (([], ""), 19)
        - - expr: ((14))
          - Right:
              expr: (([], ""), 14)
        - - expr: ((20))
          - Right:
              expr: (([], ""), 20)
    - - - type: Int
        - type: (([Int], [Int]), Int)
      - - - expr: ((13))
          - Right:
              expr: (([], []), 13)
        - - expr: ((20))
          - Right:
              expr: (([], []), 20)
        - - expr: ((-10))
          - Right:
              expr: (([], []), -10)
        - - expr: ((19))
          - Right:
              expr: (([], []), 19)
        - - expr: ((14))
          - Right:
              expr: (([], []), 14)
        - - expr: ((0))
          - Right:
              expr: (([], []), 0)
        - - expr: ((12))
          - Right:
              expr: (([], []), 12)
        - - expr: ((7))
          - Right:
              expr: (([], []), 7)
- - expr: let compose = (.) in compose compose elem
  - - - - type: (Char, (Char -> Maybe Char), Char)
        - type: Bool
      - - - expr: ('4', let just = Just in just, '7')
          - Right:
              expr: 'False'
        - - expr: ('4', let just = Just in just, '2')
          - Right:
              expr: 'False'
        - - expr: ('8', let just = Just in just, '8')
          - Right:
              expr: 'True'
        - - expr: ('5', let just = Just in just, '0')
          - Right:
              expr: 'False'
        - - expr: ('7', let just = Just in just, '8')
          - Right:
              expr: 'False'
        - - expr: ('0', let just = Just in just, '8')
          - Right:
              expr: 'False'
        - - expr: ('6', let just = Just in just, '8')
          - Right:
              expr: 'False'
        - - expr: ('8', let just = Just in just, '5')
          - Right:
              expr: 'False'
    - - - type: (Int, (Int -> [] Int), Int)
        - type: Bool
      - - - expr: ((14), let compose = (.) in compose mempty fromEnum, (20))
          - Right:
              expr: 'False'
        - - expr: |-
              ((12),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (14))
          - Right:
              expr: 'False'
        - - expr: |-
              ((12),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7))
          - Right:
              expr: 'False'
        - - expr: ((7), let compose = (.) in compose mempty fromEnum, (14))
          - Right:
              expr: 'False'
        - - expr: |-
              ((20),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (0))
          - Right:
              expr: 'False'
        - - expr: ((-10), let compose = (.) in compose mempty maybe, (20))
          - Right:
              expr: 'False'
        - - expr: ((20), let compose = (.) in compose mempty maybe, (12))
          - Right:
              expr: 'False'
        - - expr: ((13), let compose = (.) in compose mempty fromEnum, (19))
          - Right:
              expr: 'False'
    - - - type: (Int, (Char -> Maybe Int), Char)
        - type: Bool
      - - - expr: |-
              ((12),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2')
          - Right:
              expr: 'False'
        - - expr: |-
              ((14),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5')
          - Right:
              expr: 'False'
        - - expr: |-
              ((7),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7')
          - Right:
              expr: 'False'
        - - expr: |-
              ((12),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '0')
          - Right:
              expr: 'False'
        - - expr: |-
              ((20),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8')
          - Right:
              expr: 'False'
        - - expr: |-
              ((13),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7')
          - Right:
              expr: 'False'
        - - expr: |-
              ((14),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '6')
          - Right:
              expr: 'False'
        - - expr: |-
              ((7),
               let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5')
          - Right:
              expr: 'False'
    - - - type: (Char, (Char -> [] Char), Char)
        - type: Bool
      - - - expr: |-
              ('2',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: 'False'
        - - expr: ('8', let compose = (.) in compose mempty fromEnum, '7')
          - Right:
              expr: 'False'
        - - expr: |-
              ('5',
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '4')
          - Right:
              expr: 'False'
        - - expr: |-
              ('2',
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8')
          - Right:
              expr: 'False'
        - - expr: |-
              ('7',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2')
          - Right:
              expr: 'False'
        - - expr: |-
              ('5',
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '7')
          - Right:
              expr: 'False'
        - - expr: |-
              ('5',
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: 'False'
        - - expr: |-
              ('2',
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5')
          - Right:
              expr: 'False'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just
  - - - - type: ((Char -> Char), Char)
        - type: Maybe Char
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just '6')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (Just '7')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (Just '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (Just '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just '8')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just '4')
    - - - type: ((Int -> Int), Int)
        - type: Maybe Int
      - - - expr: (fromEnum, (12))
          - Right:
              expr: (Just 12)
        - - expr: (let compose = (.) in compose toEnum toEnum, (20))
          - Right:
              expr: (Just 20)
        - - expr: (toEnum, (-10))
          - Right:
              expr: (Just (-10))
        - - expr: (toEnum, (0))
          - Right:
              expr: (Just 0)
        - - expr: (fromEnum, (7))
          - Right:
              expr: (Just 7)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (0))
          - Right:
              expr: (Just 0)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: (Just 7)
        - - expr: (fromEnum, (-10))
          - Right:
              expr: (Just (-10))
    - - - type: ((Char -> Int), Char)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (Just 56)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (Just 55)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (Just 53)
        - - expr: (fromEnum, '8')
          - Right:
              expr: (Just 56)
        - - expr: (fromEnum, '2')
          - Right:
              expr: (Just 50)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (Just 54)
        - - expr: (fromEnum, '0')
          - Right:
              expr: (Just 48)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (Just 52)
    - - - type: ((Int -> Char), Int)
        - type: Maybe Char
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (14))
          - Right:
              expr: (Just '\SO')
        - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: (Just '\a')
        - - expr: (toEnum, (-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (toEnum, (20))
          - Right:
              expr: (Just '\DC4')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (12))
          - Right:
              expr: (Just '\f')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (0))
          - Right:
              expr: (Just '\NUL')
        - - expr: (let compose = (.) in compose toEnum toEnum, (12))
          - Right:
              expr: (Just '\f')
        - - expr: (let compose = (.) in compose toEnum toEnum, (-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
- - expr: let zero = 0 in maybe zero
  - - - - type: ((Char -> Int), Maybe Char)
        - type: Int
      - - - expr: (fromEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: (fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: (fromEnum, Just '7')
          - Right:
              expr: '55'
    - - - type: ((Int -> Int), Maybe Int)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (fromEnum, Just (19))
          - Right:
              expr: '19'
        - - expr: (toEnum, Just (0))
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: (toEnum, Just (19))
          - Right:
              expr: '19'
        - - expr: (toEnum, Nothing)
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (19))
          - Right:
              expr: '19'
        - - expr: (fromEnum, Just (0))
          - Right:
              expr: '0'
- - expr: let compose = (.) in compose zip sequenceA
  - - - - type: (Maybe [Int], [Int])
        - type: '[(Maybe Int, Int)]'
      - - - expr: (Nothing, [(7), (13)])
          - Right:
              expr: '[(Nothing, 7)]'
        - - expr: (Just [(7), (13), (-10)], [(7), (13)])
          - Right:
              expr: '[(Just 7, 7), (Just 13, 13)]'
        - - expr: (Just [(7), (13), (-10)], [(7), (13), (-10)])
          - Right:
              expr: '[(Just 7, 7), (Just 13, 13), (Just (-10), -10)]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just [(7), (13), (-10)], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(7)])
          - Right:
              expr: '[(Nothing, 7)]'
        - - expr: (Just [(7), (13), (-10)], [(7)])
          - Right:
              expr: '[(Just 7, 7)]'
        - - expr: (Nothing, [(7), (13), (-10)])
          - Right:
              expr: '[(Nothing, 7)]'
    - - - type: ([] [Char], [Char])
        - type: '[([] Char, Char)]'
      - - - expr: ([['7', '4', '6']], ['7'])
          - Right:
              expr: '[("7", ''7'')]'
        - - expr: ([['7', '4', '6'], []], ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([], ['7', '4', '6'])
          - Right:
              expr: '[("", ''7'')]'
        - - expr: ([['7', '4', '6'], []], [])
          - Right:
              expr: '[]'
        - - expr: ([], ['7', '4'])
          - Right:
              expr: '[("", ''7'')]'
        - - expr: ([['7', '4', '6'], [], ['7', '4']], ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: ([['7', '4', '6'], [], ['7', '4']], [])
          - Right:
              expr: '[]'
    - - - type: (Maybe [Char], [Char])
        - type: '[(Maybe Char, Char)]'
      - - - expr: (Just ['7', '4', '6'], ['7', '4'])
          - Right:
              expr: '[(Just ''7'', ''7''), (Just ''4'', ''4'')]'
        - - expr: (Just ['7', '4', '6'], ['7'])
          - Right:
              expr: '[(Just ''7'', ''7'')]'
        - - expr: (Just ['7', '4', '6'], ['7', '4', '6'])
          - Right:
              expr: '[(Just ''7'', ''7''), (Just ''4'', ''4''), (Just ''6'', ''6'')]'
        - - expr: (Nothing, ['7'])
          - Right:
              expr: '[(Nothing, ''7'')]'
        - - expr: (Nothing, ['7', '4'])
          - Right:
              expr: '[(Nothing, ''7'')]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['7', '4', '6'])
          - Right:
              expr: '[(Nothing, ''7'')]'
        - - expr: (Just ['7', '4', '6'], [])
          - Right:
              expr: '[]'
    - - - type: ([] [Char], [Int])
        - type: '[([] Char, Int)]'
      - - - expr: ([['7', '4', '6']], [(7), (13), (-10)])
          - Right:
              expr: '[("7", 7), ("4", 13), ("6", -10)]'
        - - expr: ([['7', '4', '6']], [(7)])
          - Right:
              expr: '[("7", 7)]'
        - - expr: ([['7', '4', '6']], [(7), (13)])
          - Right:
              expr: '[("7", 7), ("4", 13)]'
        - - expr: ([], [(7), (13)])
          - Right:
              expr: '[("", 7)]'
        - - expr: ([['7', '4', '6'], [], ['7', '4']], [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: ([['7', '4', '6'], [], ['7', '4']], [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: ([['7', '4', '6'], [], ['7', '4']], [(7)])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose zip mempty
  - - - - type: (Char, [Char])
        - type: '[(Char, Char)]'
      - - - expr: ('2', [])
          - Right:
              expr: '[]'
        - - expr: ('4', ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: ('5', ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: ('8', ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: ('7', ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: ('4', ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: ('0', ['7'])
          - Right:
              expr: '[]'
        - - expr: ('2', ['7', '4'])
          - Right:
              expr: '[]'
    - - - type: (Char, [Int])
        - type: '[(Char, Int)]'
      - - - expr: ('4', [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: ('7', [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: ('0', [(7)])
          - Right:
              expr: '[]'
        - - expr: ('5', [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: ('8', [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: ('6', [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: ('2', [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: ('0', [(7), (13), (-10)])
          - Right:
              expr: '[]'
    - - - type: (Int, [Int])
        - type: '[(Int, Int)]'
      - - - expr: ((13), [(7)])
          - Right:
              expr: '[]'
        - - expr: ((7), [(7)])
          - Right:
              expr: '[]'
        - - expr: ((0), [])
          - Right:
              expr: '[]'
        - - expr: ((20), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: ((13), [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: ((-10), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: ((0), [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: ((14), [(7)])
          - Right:
              expr: '[]'
    - - - type: (Int, [Int])
        - type: '[(Char, Int)]'
      - - - expr: ((20), [(7)])
          - Right:
              expr: '[]'
        - - expr: ((20), [])
          - Right:
              expr: '[]'
        - - expr: ((7), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: ((14), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: ((14), [])
          - Right:
              expr: '[]'
        - - expr: ((12), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: ((19), [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: ((7), [(7)])
          - Right:
              expr: '[]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl fromEnum
  - - - - type: (Int, Int)
        - type: (Int, Int)
      - - - expr: ((20), (19))
          - Right:
              expr: (20, 19)
        - - expr: ((7), (19))
          - Right:
              expr: (7, 19)
        - - expr: ((12), (-10))
          - Right:
              expr: (12, -10)
        - - expr: ((14), (7))
          - Right:
              expr: (14, 7)
        - - expr: ((20), (13))
          - Right:
              expr: (20, 13)
        - - expr: ((7), (14))
          - Right:
              expr: (7, 14)
        - - expr: ((12), (0))
          - Right:
              expr: (12, 0)
        - - expr: ((12), (13))
          - Right:
              expr: (12, 13)
    - - - type: (Char, Char)
        - type: (Int, Char)
      - - - expr: ('7', '4')
          - Right:
              expr: (55, '4')
        - - expr: ('2', '8')
          - Right:
              expr: (50, '8')
        - - expr: ('7', '2')
          - Right:
              expr: (55, '2')
        - - expr: ('7', '8')
          - Right:
              expr: (55, '8')
        - - expr: ('0', '7')
          - Right:
              expr: (48, '7')
        - - expr: ('4', '0')
          - Right:
              expr: (52, '0')
        - - expr: ('2', '7')
          - Right:
              expr: (50, '7')
        - - expr: ('5', '2')
          - Right:
              expr: (53, '2')
    - - - type: (Char, Int)
        - type: (Int, Int)
      - - - expr: ('5', (-10))
          - Right:
              expr: (53, -10)
        - - expr: ('2', (19))
          - Right:
              expr: (50, 19)
        - - expr: ('5', (20))
          - Right:
              expr: (53, 20)
        - - expr: ('7', (19))
          - Right:
              expr: (55, 19)
        - - expr: ('5', (12))
          - Right:
              expr: (53, 12)
        - - expr: ('8', (12))
          - Right:
              expr: (56, 12)
        - - expr: ('0', (13))
          - Right:
              expr: (48, 13)
        - - expr: ('0', (0))
          - Right:
              expr: (48, 0)
    - - - type: (Int, Char)
        - type: (Int, Char)
      - - - expr: ((12), '4')
          - Right:
              expr: (12, '4')
        - - expr: ((-10), '4')
          - Right:
              expr: (-10, '4')
        - - expr: ((7), '6')
          - Right:
              expr: (7, '6')
        - - expr: ((20), '2')
          - Right:
              expr: (20, '2')
        - - expr: ((0), '8')
          - Right:
              expr: (0, '8')
        - - expr: ((7), '8')
          - Right:
              expr: (7, '8')
        - - expr: ((13), '7')
          - Right:
              expr: (13, '7')
        - - expr: ((20), '6')
          - Right:
              expr: (20, '6')
- - expr: let compose = (.) in compose sequence sequenceA
  - - - - type: '[] ([] Int)'
        - type: '[] ([] Int)'
      - - - expr: ([[(7), (13), (-10)]])
          - Right:
              expr: '[[7, 13, -10]]'
        - - expr: ([[(7), (13), (-10)], []])
          - Right:
              expr: '[[]]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[[]]'
    - - - type: Maybe ([] Int)
        - type: Maybe ([] Int)
      - - - expr: (Just [(7), (13), (-10)])
          - Right:
              expr: (Just [7, 13, -10])
        - - expr: (Nothing)
          - Right:
              expr: Nothing
    - - - type: '[] ([] Char)'
        - type: '[] ([] Char)'
      - - - expr: ([['7', '4', '6'], []])
          - Right:
              expr: '[""]'
        - - expr: ([['7', '4', '6']])
          - Right:
              expr: '["746"]'
        - - expr: ([['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '[""]'
        - - expr: ([])
          - Right:
              expr: '[]'
    - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
      - - - expr: (Nothing)
          - Right:
              expr: Nothing
        - - expr: (Just (Just '7'))
          - Right:
              expr: (Just (Just '7'))
- - expr: let compose = (.) in compose fromEnum
  - - - - type: ((Int -> Char), Int)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum toEnum, (-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (toEnum, (13))
          - Right:
              expr: '13'
        - - expr: (let compose = (.) in compose toEnum toEnum, (13))
          - Right:
              expr: '13'
        - - expr: (let compose = (.) in compose toEnum toEnum, (0))
          - Right:
              expr: '0'
        - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: '7'
        - - expr: (toEnum, (19))
          - Right:
              expr: '19'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (13))
          - Right:
              expr: '13'
        - - expr: (let compose = (.) in compose toEnum toEnum, (14))
          - Right:
              expr: '14'
    - - - type: ((Char -> Char), Char)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '52'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '54'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '56'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: '53'
    - - - type: ((Char -> Int), Char)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: '53'
        - - expr: (fromEnum, '2')
          - Right:
              expr: '50'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: '54'
        - - expr: (fromEnum, '6')
          - Right:
              expr: '54'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '56'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '52'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '55'
    - - - type: ((Int -> Int), Int)
        - type: Int
      - - - expr: (let compose = (.) in compose toEnum toEnum, (19))
          - Right:
              expr: '19'
        - - expr: (fromEnum, (-10))
          - Right:
              expr: (-10)
        - - expr: (fromEnum, (19))
          - Right:
              expr: '19'
        - - expr: (toEnum, (20))
          - Right:
              expr: '20'
        - - expr: (toEnum, (13))
          - Right:
              expr: '13'
        - - expr: (let compose = (.) in compose toEnum toEnum, (12))
          - Right:
              expr: '12'
        - - expr: (let compose = (.) in compose toEnum toEnum, (20))
          - Right:
              expr: '20'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: '7'
- - expr: let prepend = (:) in maybe mempty prepend
  - - - - type: (Maybe Int, [Int])
        - type: '[Int]'
      - - - expr: (Just (0), [(7)])
          - Right:
              expr: '[0, 7]'
        - - expr: (Nothing, [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (Just (7), [(7)])
          - Right:
              expr: '[7, 7]'
        - - expr: (Just (19), [(7), (13)])
          - Right:
              expr: '[19, 7, 13]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just (19), [])
          - Right:
              expr: '[19]'
        - - expr: (Just (0), [])
          - Right:
              expr: '[0]'
        - - expr: (Just (0), [(7), (13), (-10)])
          - Right:
              expr: '[0, 7, 13, -10]'
    - - - type: (Maybe Char, [Char])
        - type: '[Char]'
      - - - expr: (Nothing, [])
          - Right:
              expr: '""'
        - - expr: (Just '5', [])
          - Right:
              expr: '"5"'
        - - expr: (Just '0', [])
          - Right:
              expr: '"0"'
        - - expr: (Just '7', ['7', '4', '6'])
          - Right:
              expr: '"7746"'
        - - expr: (Nothing, ['7', '4', '6'])
          - Right:
              expr: '""'
        - - expr: (Just '7', ['7', '4'])
          - Right:
              expr: '"774"'
        - - expr: (Nothing, ['7', '4'])
          - Right:
              expr: '""'
        - - expr: (Just '5', ['7', '4', '6'])
          - Right:
              expr: '"5746"'
- - expr: let prepend = (:) in prepend
  - - - - type: (Int, [Int])
        - type: '[Int]'
      - - - expr: ((19), [(7), (13), (-10)])
          - Right:
              expr: '[19, 7, 13, -10]'
        - - expr: ((0), [])
          - Right:
              expr: '[0]'
        - - expr: ((13), [(7), (13)])
          - Right:
              expr: '[13, 7, 13]'
        - - expr: ((-10), [(7), (13)])
          - Right:
              expr: '[-10, 7, 13]'
        - - expr: ((7), [])
          - Right:
              expr: '[7]'
        - - expr: ((12), [(7), (13)])
          - Right:
              expr: '[12, 7, 13]'
        - - expr: ((14), [])
          - Right:
              expr: '[14]'
        - - expr: ((14), [(7), (13), (-10)])
          - Right:
              expr: '[14, 7, 13, -10]'
    - - - type: (Char, [Char])
        - type: '[Char]'
      - - - expr: ('4', ['7', '4'])
          - Right:
              expr: '"474"'
        - - expr: ('7', [])
          - Right:
              expr: '"7"'
        - - expr: ('6', ['7'])
          - Right:
              expr: '"67"'
        - - expr: ('2', ['7', '4'])
          - Right:
              expr: '"274"'
        - - expr: ('5', [])
          - Right:
              expr: '"5"'
        - - expr: ('7', ['7', '4', '6'])
          - Right:
              expr: '"7746"'
        - - expr: ('4', [])
          - Right:
              expr: '"4"'
        - - expr: ('8', ['7', '4'])
          - Right:
              expr: '"874"'
- - expr: maybe unzip mempty
  - - - - type: (Maybe Int, [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: (Just (19), [])
          - Right:
              expr: ("", "")
        - - expr: (Just (0), [('7', '7'), ('4', '4'), ('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: (Just (7), [('7', '7'), ('4', '4'), ('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: (Nothing, [])
          - Right:
              expr: ("", "")
        - - expr: (Just (0), [])
          - Right:
              expr: ("", "")
        - - expr: (Just (19), [('7', '7'), ('4', '4'), ('6', '6')])
          - Right:
              expr: ("", "")
        - - expr: (Nothing, [('7', '7'), ('4', '4')])
          - Right:
              expr: ("74", "74")
        - - expr: (Just (0), [('7', '7')])
          - Right:
              expr: ("", "")
    - - - type: (Maybe Int, [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: (Just (7), [])
          - Right:
              expr: ("", [])
        - - expr: (Nothing, [('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: ("746", [7, 13, -10])
        - - expr: (Nothing, [('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: (Just (7), [('7', (7))])
          - Right:
              expr: ("", [])
        - - expr: (Just (19), [('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: ("", [])
        - - expr: (Just (7), [('7', (7)), ('4', (13))])
          - Right:
              expr: ("", [])
        - - expr: (Just (0), [('7', (7)), ('4', (13))])
          - Right:
              expr: ("", [])
        - - expr: (Just (7), [('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: ("", [])
    - - - type: (Maybe Char, [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: (Just '5', [])
          - Right:
              expr: ([], "")
        - - expr: (Just '5', [((7), '7')])
          - Right:
              expr: ([], "")
        - - expr: (Just '7', [((7), '7')])
          - Right:
              expr: ([], "")
        - - expr: (Nothing, [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([7, 13, -10], "746")
        - - expr: (Just '0', [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([], "")
        - - expr: (Just '7', [((7), '7'), ((13), '4')])
          - Right:
              expr: ([], "")
        - - expr: (Just '5', [((7), '7'), ((13), '4')])
          - Right:
              expr: ([], "")
        - - expr: (Just '7', [])
          - Right:
              expr: ([], "")
    - - - type: (Maybe Int, [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: (Just (0), [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([], "")
        - - expr: (Nothing, [((7), '7')])
          - Right:
              expr: ([7], "7")
        - - expr: (Just (7), [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([], "")
        - - expr: (Just (0), [((7), '7')])
          - Right:
              expr: ([], "")
        - - expr: (Just (7), [])
          - Right:
              expr: ([], "")
        - - expr: (Just (7), [((7), '7'), ((13), '4')])
          - Right:
              expr: ([], "")
        - - expr: (Just (0), [])
          - Right:
              expr: ([], "")
        - - expr: (Just (19), [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([], "")
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose compose tpl
  - - - - type: (Int, (Int -> Int), Int)
        - type: (Int, Int)
      - - - expr: ((14), let compose = (.) in compose toEnum fromEnum, (7))
          - Right:
              expr: (14, 7)
        - - expr: ((-10), fromEnum, (12))
          - Right:
              expr: (-10, 12)
        - - expr: ((7), toEnum, (20))
          - Right:
              expr: (7, 20)
        - - expr: ((7), fromEnum, (7))
          - Right:
              expr: (7, 7)
        - - expr: ((19), toEnum, (13))
          - Right:
              expr: (19, 13)
        - - expr: ((12), let compose = (.) in compose toEnum toEnum, (-10))
          - Right:
              expr: (12, -10)
        - - expr: ((14), let compose = (.) in compose toEnum toEnum, (19))
          - Right:
              expr: (14, 19)
        - - expr: ((-10), toEnum, (20))
          - Right:
              expr: (-10, 20)
    - - - type: (Int, (Int -> Char), Int)
        - type: (Int, Char)
      - - - expr: ((0), toEnum, (7))
          - Right:
              expr: (0, '\a')
        - - expr: ((7), let compose = (.) in compose toEnum fromEnum, (20))
          - Right:
              expr: (7, '\DC4')
        - - expr: ((20), let compose = (.) in compose toEnum toEnum, (-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: ((19), toEnum, (-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: ((14), toEnum, (19))
          - Right:
              expr: (14, '\DC3')
        - - expr: ((7), let compose = (.) in compose toEnum fromEnum, (13))
          - Right:
              expr: (7, '\r')
        - - expr: ((20), let compose = (.) in compose toEnum toEnum, (13))
          - Right:
              expr: (20, '\r')
        - - expr: ((-10), let compose = (.) in compose toEnum fromEnum, (19))
          - Right:
              expr: (-10, '\DC3')
    - - - type: (Int, (Char -> Int), Char)
        - type: (Int, Int)
      - - - expr: ((12), fromEnum, '4')
          - Right:
              expr: (12, 52)
        - - expr: ((19), let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (19, 52)
        - - expr: ((0), fromEnum, '2')
          - Right:
              expr: (0, 50)
        - - expr: ((14), fromEnum, '8')
          - Right:
              expr: (14, 56)
        - - expr: ((7), let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (7, 48)
        - - expr: ((20), let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (20, 54)
        - - expr: ((14), fromEnum, '5')
          - Right:
              expr: (14, 53)
        - - expr: ((20), fromEnum, '2')
          - Right:
              expr: (20, 50)
    - - - type: (Char, (Int -> Int), Int)
        - type: (Char, Int)
      - - - expr: ('0', fromEnum, (7))
          - Right:
              expr: ('0', 7)
        - - expr: ('6', let compose = (.) in compose toEnum toEnum, (19))
          - Right:
              expr: ('6', 19)
        - - expr: ('0', let compose = (.) in compose toEnum toEnum, (20))
          - Right:
              expr: ('0', 20)
        - - expr: ('0', toEnum, (20))
          - Right:
              expr: ('0', 20)
        - - expr: ('4', let compose = (.) in compose toEnum fromEnum, (20))
          - Right:
              expr: ('4', 20)
        - - expr: ('4', let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: ('4', 7)
        - - expr: ('2', toEnum, (7))
          - Right:
              expr: ('2', 7)
        - - expr: ('0', toEnum, (-10))
          - Right:
              expr: ('0', -10)
- - expr: let compose = (.) in compose elem fromEnum
  - - - - type: (Int, [] Int)
        - type: Bool
      - - - expr: ((0), [])
          - Right:
              expr: 'False'
        - - expr: ((-10), [(7), (13), (-10)])
          - Right:
              expr: 'True'
        - - expr: ((20), [])
          - Right:
              expr: 'False'
        - - expr: ((20), [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: ((19), [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: ((19), [])
          - Right:
              expr: 'False'
        - - expr: ((12), [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: ((20), [(7), (13)])
          - Right:
              expr: 'False'
    - - - type: (Int, Maybe Int)
        - type: Bool
      - - - expr: ((7), Just (0))
          - Right:
              expr: 'False'
        - - expr: ((20), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((19), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((-10), Just (7))
          - Right:
              expr: 'False'
        - - expr: ((13), Just (0))
          - Right:
              expr: 'False'
        - - expr: ((7), Just (19))
          - Right:
              expr: 'False'
        - - expr: ((0), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((20), Just (0))
          - Right:
              expr: 'False'
    - - - type: (Char, Maybe Int)
        - type: Bool
      - - - expr: ('8', Just (0))
          - Right:
              expr: 'False'
        - - expr: ('5', Just (0))
          - Right:
              expr: 'False'
        - - expr: ('8', Just (19))
          - Right:
              expr: 'False'
        - - expr: ('0', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('4', Just (7))
          - Right:
              expr: 'False'
        - - expr: ('0', Just (7))
          - Right:
              expr: 'False'
        - - expr: ('4', Just (19))
          - Right:
              expr: 'False'
        - - expr: ('6', Just (19))
          - Right:
              expr: 'False'
    - - - type: (Char, [] Int)
        - type: Bool
      - - - expr: ('6', [(7), (13)])
          - Right:
              expr: 'False'
        - - expr: ('7', [])
          - Right:
              expr: 'False'
        - - expr: ('6', [])
          - Right:
              expr: 'False'
        - - expr: ('8', [(7), (13)])
          - Right:
              expr: 'False'
        - - expr: ('0', [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: ('7', [(7)])
          - Right:
              expr: 'False'
        - - expr: ('2', [(7), (13)])
          - Right:
              expr: 'False'
        - - expr: ('4', [(7), (13)])
          - Right:
              expr: 'False'
- - expr: let compose = (.) in compose zip sequence
  - - - - type: (Maybe [Int], [Int])
        - type: '[(Maybe Int, Int)]'
      - - - expr: (Nothing, [(7)])
          - Right:
              expr: '[(Nothing, 7)]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just [(7), (13), (-10)], [(7), (13), (-10)])
          - Right:
              expr: '[(Just 7, 7), (Just 13, 13), (Just (-10), -10)]'
        - - expr: (Just [(7), (13), (-10)], [(7)])
          - Right:
              expr: '[(Just 7, 7)]'
        - - expr: (Nothing, [(7), (13)])
          - Right:
              expr: '[(Nothing, 7)]'
        - - expr: (Just [(7), (13), (-10)], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(7), (13), (-10)])
          - Right:
              expr: '[(Nothing, 7)]'
        - - expr: (Just [(7), (13), (-10)], [(7), (13)])
          - Right:
              expr: '[(Just 7, 7), (Just 13, 13)]'
    - - - type: (Maybe [Char], [Char])
        - type: '[(Maybe Char, Char)]'
      - - - expr: (Just ['7', '4', '6'], ['7', '4'])
          - Right:
              expr: '[(Just ''7'', ''7''), (Just ''4'', ''4'')]'
        - - expr: (Just ['7', '4', '6'], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['7', '4', '6'])
          - Right:
              expr: '[(Nothing, ''7'')]'
        - - expr: (Nothing, ['7'])
          - Right:
              expr: '[(Nothing, ''7'')]'
        - - expr: (Just ['7', '4', '6'], ['7', '4', '6'])
          - Right:
              expr: '[(Just ''7'', ''7''), (Just ''4'', ''4''), (Just ''6'', ''6'')]'
        - - expr: (Just ['7', '4', '6'], ['7'])
          - Right:
              expr: '[(Just ''7'', ''7'')]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['7', '4'])
          - Right:
              expr: '[(Nothing, ''7'')]'
    - - - type: (Maybe [Int], [Char])
        - type: '[(Maybe Int, Char)]'
      - - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['7', '4'])
          - Right:
              expr: '[(Nothing, ''7'')]'
        - - expr: (Nothing, ['7'])
          - Right:
              expr: '[(Nothing, ''7'')]'
        - - expr: (Just [(7), (13), (-10)], ['7', '4', '6'])
          - Right:
              expr: '[(Just 7, ''7''), (Just 13, ''4''), (Just (-10), ''6'')]'
        - - expr: (Just [(7), (13), (-10)], ['7'])
          - Right:
              expr: '[(Just 7, ''7'')]'
        - - expr: (Just [(7), (13), (-10)], ['7', '4'])
          - Right:
              expr: '[(Just 7, ''7''), (Just 13, ''4'')]'
        - - expr: (Just [(7), (13), (-10)], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['7', '4', '6'])
          - Right:
              expr: '[(Nothing, ''7'')]'
    - - - type: ([] [Int], [Char])
        - type: '[([] Int, Char)]'
      - - - expr: ([[(7), (13), (-10)]], [])
          - Right:
              expr: '[]'
        - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([[(7), (13), (-10)]], ['7', '4'])
          - Right:
              expr: '[([7], ''7''), ([13], ''4'')]'
        - - expr: ([[(7), (13), (-10)], [], [(7), (13)]], ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: ([], ['7', '4'])
          - Right:
              expr: '[([], ''7'')]'
        - - expr: ([[(7), (13), (-10)], [], [(7), (13)]], [])
          - Right:
              expr: '[]'
        - - expr: ([[(7), (13), (-10)], []], ['7'])
          - Right:
              expr: '[]'
        - - expr: ([[(7), (13), (-10)], []], ['7', '4', '6'])
          - Right:
              expr: '[]'
- - expr: let prepend = (:) in maybe prepend mempty
  - - - - type: (Maybe Int, Char, [Char])
        - type: '[Char]'
      - - - expr: (Just (7), '5', ['7'])
          - Right:
              expr: '""'
        - - expr: (Just (0), '5', [])
          - Right:
              expr: '""'
        - - expr: (Nothing, '2', ['7', '4', '6'])
          - Right:
              expr: '"2746"'
        - - expr: (Just (0), '7', ['7', '4', '6'])
          - Right:
              expr: '""'
        - - expr: (Just (7), '0', ['7'])
          - Right:
              expr: '""'
        - - expr: (Just (0), '8', ['7', '4', '6'])
          - Right:
              expr: '""'
        - - expr: (Just (7), '8', ['7', '4', '6'])
          - Right:
              expr: '""'
        - - expr: (Nothing, '2', ['7', '4'])
          - Right:
              expr: '"274"'
    - - - type: (Maybe Char, Int, [Int])
        - type: '[Int]'
      - - - expr: (Just '0', (19), [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (Nothing, (12), [(7), (13)])
          - Right:
              expr: '[12, 7, 13]'
        - - expr: (Nothing, (0), [(7)])
          - Right:
              expr: '[0, 7]'
        - - expr: (Just '0', (14), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (Just '7', (13), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (Just '7', (-10), [(7)])
          - Right:
              expr: '[]'
        - - expr: (Just '5', (-10), [])
          - Right:
              expr: '[]'
        - - expr: (Just '5', (14), [(7), (13)])
          - Right:
              expr: '[]'
    - - - type: (Maybe Int, Int, [Int])
        - type: '[Int]'
      - - - expr: (Just (7), (14), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (Just (0), (14), [(7)])
          - Right:
              expr: '[]'
        - - expr: (Just (19), (-10), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (Just (7), (14), [])
          - Right:
              expr: '[]'
        - - expr: (Just (7), (-10), [])
          - Right:
              expr: '[]'
        - - expr: (Just (0), (13), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (Just (19), (13), [])
          - Right:
              expr: '[]'
        - - expr: (Just (0), (0), [])
          - Right:
              expr: '[]'
    - - - type: (Maybe Char, Char, [Char])
        - type: '[Char]'
      - - - expr: (Just '5', '6', [])
          - Right:
              expr: '""'
        - - expr: (Just '0', '4', ['7', '4', '6'])
          - Right:
              expr: '""'
        - - expr: (Just '7', '8', ['7', '4', '6'])
          - Right:
              expr: '""'
        - - expr: (Just '5', '4', ['7', '4'])
          - Right:
              expr: '""'
        - - expr: (Nothing, '4', [])
          - Right:
              expr: '"4"'
        - - expr: (Just '0', '2', ['7', '4', '6'])
          - Right:
              expr: '""'
        - - expr: (Just '0', '5', ['7'])
          - Right:
              expr: '""'
        - - expr: (Nothing, '4', ['7', '4', '6'])
          - Right:
              expr: '"4746"'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just just
  - - - - type: Char
        - type: Maybe (Maybe Char)
      - - - expr: ('8')
          - Right:
              expr: (Just (Just '8'))
        - - expr: ('2')
          - Right:
              expr: (Just (Just '2'))
        - - expr: ('0')
          - Right:
              expr: (Just (Just '0'))
        - - expr: ('5')
          - Right:
              expr: (Just (Just '5'))
        - - expr: ('7')
          - Right:
              expr: (Just (Just '7'))
        - - expr: ('4')
          - Right:
              expr: (Just (Just '4'))
        - - expr: ('6')
          - Right:
              expr: (Just (Just '6'))
    - - - type: Int
        - type: Maybe (Maybe Int)
      - - - expr: ((-10))
          - Right:
              expr: (Just (Just (-10)))
        - - expr: ((0))
          - Right:
              expr: (Just (Just 0))
        - - expr: ((7))
          - Right:
              expr: (Just (Just 7))
        - - expr: ((13))
          - Right:
              expr: (Just (Just 13))
        - - expr: ((20))
          - Right:
              expr: (Just (Just 20))
        - - expr: ((12))
          - Right:
              expr: (Just (Just 12))
        - - expr: ((14))
          - Right:
              expr: (Just (Just 14))
        - - expr: ((19))
          - Right:
              expr: (Just (Just 19))
- - expr: maybe sequence
  - - - - type: ((Char -> [] ([] Int) -> [] ([] Int)), Maybe Char, [] ([] Int))
        - type: '[] ([] Int)'
      - - - expr: (let compose = (.) in compose mempty fromEnum, Just '7', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               Just '5', [[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[[7, 13, -10], [], [7, 13]]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               Just '5', [[(7), (13), (-10)]])
          - Right:
              expr: '[[7, 13, -10]]'
        - - expr: |-
              (let compose = (.) in compose fmap mempty, Just '0',
               [[(7), (13), (-10)]])
          - Right:
              expr: '[[]]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '0', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Nothing,
               [[(7), (13), (-10)], []])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '0', [[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just '5',
               [[(7), (13), (-10)], []])
          - Right:
              expr: '[]'
    - - - type: |-
            ((Char -> Maybe ([] Int) -> [] (Maybe Int)), Maybe Char,
             Maybe ([] Int))
        - type: '[] (Maybe Int)'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5', Nothing)
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, Just '0', Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just '0',
               Just [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Nothing,
               Just [(7), (13), (-10)])
          - Right:
              expr: '[Just 7, Just 13, Just (-10)]'
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just '5',
               Just [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Nothing,
               Just [(7), (13), (-10)])
          - Right:
              expr: '[Just 7, Just 13, Just (-10)]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '0', Just [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '0', Nothing)
          - Right:
              expr: '[]'
    - - - type: |-
            ((Int -> Maybe ([] Char) -> [] (Maybe Char)), Maybe Int,
             Maybe ([] Char))
        - type: '[] (Maybe Char)'
      - - - expr: (let compose = (.) in compose mempty fromEnum, Just (7), Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just (19),
               Just ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7), Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (0), Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (19), Just ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (7), Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (0), Just ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, Just (0), Nothing)
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose compose zip
  - - - - type: ([Int], (Char -> [Char]), Char)
        - type: '[(Int, Char)]'
      - - - expr: |-
              ([(7)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: '[]'
        - - expr: ([(7)], let compose = (.) in compose mempty maybe, '2')
          - Right:
              expr: '[]'
        - - expr: ([(7), (13)], let compose = (.) in compose mempty maybe, '7')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(7), (13)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5')
          - Right:
              expr: '[]'
        - - expr: ([(7), (13)], let compose = (.) in compose mempty maybe, '2')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(7), (13)],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '0')
          - Right:
              expr: '[]'
        - - expr: ([(7), (13)], let compose = (.) in compose mempty maybe, '0')
          - Right:
              expr: '[]'
        - - expr: |-
              ([(7), (13)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '2')
          - Right:
              expr: '[]'
    - - - type: ([Char], (Int -> [Char]), Int)
        - type: '[(Char, Char)]'
      - - - expr: |-
              (['7'],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (0))
          - Right:
              expr: '[]'
        - - expr: |-
              (['7', '4'],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (13))
          - Right:
              expr: '[]'
        - - expr: |-
              (['7', '4', '6'],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (19))
          - Right:
              expr: '[]'
        - - expr: (['7', '4'], let compose = (.) in compose mempty maybe, (20))
          - Right:
              expr: '[]'
        - - expr: |-
              (['7'],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (20))
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (-10))
          - Right:
              expr: '[]'
        - - expr: |-
              (['7', '4'],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (14))
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'], let compose = (.) in compose mempty maybe, (19))
          - Right:
              expr: '[]'
    - - - type: ([Int], (Int -> [Int]), Int)
        - type: '[(Int, Int)]'
      - - - expr: ([(7)], let compose = (.) in compose mempty fromEnum, (20))
          - Right:
              expr: '[]'
        - - expr: ([(7), (13)], let compose = (.) in compose mempty maybe, (7))
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (20))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(7), (13)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (0))
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7))
          - Right:
              expr: '[]'
        - - expr: ([], let compose = (.) in compose mempty fromEnum, (12))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(7), (13)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (19))
          - Right:
              expr: '[]'
        - - expr: |-
              ([(7)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (14))
          - Right:
              expr: '[]'
    - - - type: ([Char], (Int -> [Int]), Int)
        - type: '[(Char, Int)]'
      - - - expr: |-
              ([],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (12))
          - Right:
              expr: '[]'
        - - expr: ([], let compose = (.) in compose mempty maybe, (14))
          - Right:
              expr: '[]'
        - - expr: |-
              (['7', '4'],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (-10))
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'], let compose = (.) in compose mempty maybe, (7))
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (0))
          - Right:
              expr: '[]'
        - - expr: |-
              (['7', '4', '6'],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (0))
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'], let compose = (.) in compose mempty maybe, (-10))
          - Right:
              expr: '[]'
        - - expr: |-
              (['7', '4'],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (0))
          - Right:
              expr: '[]'
- - expr: maybe (zip mempty)
  - - - - type: ((Char -> [Int] -> [(Int, Int)]), Maybe Char, [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '5', [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, Just '7', [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0', [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, Nothing, [(7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip mempty, Nothing, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '0', [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '5', [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, Nothing, [])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Int] -> [(Char, Int)]), Maybe Char, [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '5', [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7', [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '7', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7', [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '5', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just '5',
               [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5', [(7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Nothing,
               [(7), (13), (-10)])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Char] -> [(Char, Char)]), Maybe Int, [Char])
        - type: '[(Char, Char)]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7), ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip mempty, Just (0), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (7), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Just (7), ['7'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (19), ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just (7),
               ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just (0),
               ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose zip mempty, Nothing, ['7', '4', '6'])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Char] -> [(Int, Char)]), Maybe Char, [Char])
        - type: '[(Int, Char)]'
      - - - expr: (let compose = (.) in compose zip mempty, Just '5', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose foldMap mempty, Just '7', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Just '5', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5', ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose zip mempty, Just '0',
               ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7', ['7'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, Just '7', ['7'])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose sequenceA unzip
  - - - - type: '[(Char, Int)]'
        - type: '[([Char], Int)]'
      - - - expr: ([('7', (7))])
          - Right:
              expr: '[("7", 7)]'
        - - expr: ([('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: '[("746", 7), ("746", 13), ("746", -10)]'
        - - expr: ([('7', (7)), ('4', (13))])
          - Right:
              expr: '[("74", 7), ("74", 13)]'
        - - expr: ([])
          - Right:
              expr: '[]'
    - - - type: '[(Int, Char)]'
        - type: '[([Int], Char)]'
      - - - expr: ([((7), '7'), ((13), '4')])
          - Right:
              expr: '[([7, 13], ''7''), ([7, 13], ''4'')]'
        - - expr: ([((7), '7')])
          - Right:
              expr: '[([7], ''7'')]'
        - - expr: ([((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: '[([7, 13, -10], ''7''), ([7, 13, -10], ''4''), ([7, 13, -10],
                ''6'')]'
        - - expr: ([])
          - Right:
              expr: '[]'
    - - - type: '[(Int, Int)]'
        - type: '[([Int], Int)]'
      - - - expr: ([((7), (7)), ((13), (13)), ((-10), (-10))])
          - Right:
              expr: '[([7, 13, -10], 7), ([7, 13, -10], 13), ([7, 13, -10], -10)]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([((7), (7)), ((13), (13))])
          - Right:
              expr: '[([7, 13], 7), ([7, 13], 13)]'
        - - expr: ([((7), (7))])
          - Right:
              expr: '[([7], 7)]'
    - - - type: '[(Char, Char)]'
        - type: '[([Char], Char)]'
      - - - expr: ([('7', '7'), ('4', '4')])
          - Right:
              expr: '[("74", ''7''), ("74", ''4'')]'
        - - expr: ([('7', '7')])
          - Right:
              expr: '[("7", ''7'')]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([('7', '7'), ('4', '4'), ('6', '6')])
          - Right:
              expr: '[("746", ''7''), ("746", ''4''), ("746", ''6'')]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose fmap prepend
  - - - - type: (Int, [] [Int])
        - type: '[] [Int]'
      - - - expr: ((13), [[(7), (13), (-10)]])
          - Right:
              expr: '[[13, 7, 13, -10]]'
        - - expr: ((0), [[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[[0, 7, 13, -10], [0], [0, 7, 13]]'
        - - expr: ((12), [[(7), (13), (-10)]])
          - Right:
              expr: '[[12, 7, 13, -10]]'
        - - expr: ((0), [])
          - Right:
              expr: '[]'
        - - expr: ((13), [])
          - Right:
              expr: '[]'
        - - expr: ((14), [[(7), (13), (-10)], []])
          - Right:
              expr: '[[14, 7, 13, -10], [14]]'
        - - expr: ((13), [[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[[13, 7, 13, -10], [13], [13, 7, 13]]'
        - - expr: ((14), [[(7), (13), (-10)]])
          - Right:
              expr: '[[14, 7, 13, -10]]'
    - - - type: (Char, Maybe [Char])
        - type: Maybe [Char]
      - - - expr: ('7', Just ['7', '4', '6'])
          - Right:
              expr: (Just "7746")
        - - expr: ('5', Just ['7', '4', '6'])
          - Right:
              expr: (Just "5746")
        - - expr: ('8', Just ['7', '4', '6'])
          - Right:
              expr: (Just "8746")
        - - expr: ('4', Just ['7', '4', '6'])
          - Right:
              expr: (Just "4746")
        - - expr: ('2', Nothing)
          - Right:
              expr: Nothing
        - - expr: ('0', Just ['7', '4', '6'])
          - Right:
              expr: (Just "0746")
        - - expr: ('6', Just ['7', '4', '6'])
          - Right:
              expr: (Just "6746")
        - - expr: ('5', Nothing)
          - Right:
              expr: Nothing
    - - - type: (Int, Maybe [Int])
        - type: Maybe [Int]
      - - - expr: ((14), Just [(7), (13), (-10)])
          - Right:
              expr: (Just [14, 7, 13, -10])
        - - expr: ((-10), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((19), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((7), Just [(7), (13), (-10)])
          - Right:
              expr: (Just [7, 7, 13, -10])
        - - expr: ((12), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((0), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((13), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((12), Just [(7), (13), (-10)])
          - Right:
              expr: (Just [12, 7, 13, -10])
    - - - type: (Char, [] [Char])
        - type: '[] [Char]'
      - - - expr: ('0', [['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '["0746", "0", "074"]'
        - - expr: ('2', [])
          - Right:
              expr: '[]'
        - - expr: ('6', [['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '["6746", "6", "674"]'
        - - expr: ('6', [])
          - Right:
              expr: '[]'
        - - expr: ('0', [['7', '4', '6']])
          - Right:
              expr: '["0746"]'
        - - expr: ('8', [['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '["8746", "8", "874"]'
        - - expr: ('2', [['7', '4', '6']])
          - Right:
              expr: '["2746"]'
        - - expr: ('4', [])
          - Right:
              expr: '[]'
- - expr: let tpl = (,) in tpl
  - - - - type: (Int, Int)
        - type: (Int, Int)
      - - - expr: ((0), (7))
          - Right:
              expr: (0, 7)
        - - expr: ((7), (20))
          - Right:
              expr: (7, 20)
        - - expr: ((13), (14))
          - Right:
              expr: (13, 14)
        - - expr: ((-10), (13))
          - Right:
              expr: (-10, 13)
        - - expr: ((14), (14))
          - Right:
              expr: (14, 14)
        - - expr: ((14), (12))
          - Right:
              expr: (14, 12)
        - - expr: ((19), (19))
          - Right:
              expr: (19, 19)
        - - expr: ((20), (13))
          - Right:
              expr: (20, 13)
    - - - type: (Char, Char)
        - type: (Char, Char)
      - - - expr: ('2', '5')
          - Right:
              expr: ('2', '5')
        - - expr: ('6', '8')
          - Right:
              expr: ('6', '8')
        - - expr: ('5', '7')
          - Right:
              expr: ('5', '7')
        - - expr: ('4', '8')
          - Right:
              expr: ('4', '8')
        - - expr: ('0', '7')
          - Right:
              expr: ('0', '7')
        - - expr: ('0', '4')
          - Right:
              expr: ('0', '4')
        - - expr: ('5', '5')
          - Right:
              expr: ('5', '5')
        - - expr: ('7', '0')
          - Right:
              expr: ('7', '0')
    - - - type: (Char, Int)
        - type: (Char, Int)
      - - - expr: ('4', (12))
          - Right:
              expr: ('4', 12)
        - - expr: ('2', (14))
          - Right:
              expr: ('2', 14)
        - - expr: ('2', (20))
          - Right:
              expr: ('2', 20)
        - - expr: ('8', (20))
          - Right:
              expr: ('8', 20)
        - - expr: ('4', (0))
          - Right:
              expr: ('4', 0)
        - - expr: ('7', (13))
          - Right:
              expr: ('7', 13)
        - - expr: ('6', (13))
          - Right:
              expr: ('6', 13)
        - - expr: ('2', (-10))
          - Right:
              expr: ('2', -10)
    - - - type: (Int, Char)
        - type: (Int, Char)
      - - - expr: ((13), '6')
          - Right:
              expr: (13, '6')
        - - expr: ((7), '8')
          - Right:
              expr: (7, '8')
        - - expr: ((20), '4')
          - Right:
              expr: (20, '4')
        - - expr: ((13), '0')
          - Right:
              expr: (13, '0')
        - - expr: ((13), '5')
          - Right:
              expr: (13, '5')
        - - expr: ((-10), '8')
          - Right:
              expr: (-10, '8')
        - - expr: ((12), '6')
          - Right:
              expr: (12, '6')
        - - expr: ((-10), '2')
          - Right:
              expr: (-10, '2')
- - expr: fmap
  - - - - type: ((Int -> Int), Maybe Int)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (toEnum, Just (19))
          - Right:
              expr: (Just 19)
        - - expr: (fromEnum, Just (19))
          - Right:
              expr: (Just 19)
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (7))
          - Right:
              expr: (Just 7)
        - - expr: (toEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (19))
          - Right:
              expr: (Just 19)
        - - expr: (fromEnum, Just (0))
          - Right:
              expr: (Just 0)
    - - - type: ((Int -> Char), Maybe Int)
        - type: Maybe Char
      - - - expr: (toEnum, Just (0))
          - Right:
              expr: (Just '\NUL')
        - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (19))
          - Right:
              expr: (Just '\DC3')
        - - expr: (let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: (Just '\a')
        - - expr: (toEnum, Just (19))
          - Right:
              expr: (Just '\DC3')
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just (7))
          - Right:
              expr: (Just '\a')
        - - expr: (toEnum, Just (7))
          - Right:
              expr: (Just '\a')
    - - - type: ((Char -> Int), [] Char)
        - type: '[] Int'
      - - - expr: (fromEnum, [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, ['7'])
          - Right:
              expr: '[55]'
        - - expr: (fromEnum, ['7', '4'])
          - Right:
              expr: '[55, 52]'
        - - expr: (fromEnum, ['7'])
          - Right:
              expr: '[55]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, [])
          - Right:
              expr: '[]'
        - - expr: (fromEnum, ['7', '4', '6'])
          - Right:
              expr: '[55, 52, 54]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, ['7', '4'])
          - Right:
              expr: '[55, 52]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, ['7', '4', '6'])
          - Right:
              expr: '[55, 52, 54]'
    - - - type: ((Char -> Int), Maybe Char)
        - type: Maybe Int
      - - - expr: (let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: (Just 55)
        - - expr: (fromEnum, Just '7')
          - Right:
              expr: (Just 55)
        - - expr: (fromEnum, Just '0')
          - Right:
              expr: (Just 48)
        - - expr: (fromEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (fromEnum, Just '5')
          - Right:
              expr: (Just 53)
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: (Just 48)
        - - expr: (let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: (Just 53)
- - expr: |-
      let just = Just
          compose = (.)
        in compose sequence just
  - - - - type: Maybe Int
        - type: Maybe (Maybe Int)
      - - - expr: (Just (7))
          - Right:
              expr: (Just (Just 7))
        - - expr: (Nothing)
          - Right:
              expr: Nothing
        - - expr: (Just (19))
          - Right:
              expr: (Just (Just 19))
        - - expr: (Just (0))
          - Right:
              expr: (Just (Just 0))
    - - - type: Maybe Char
        - type: Maybe (Maybe Char)
      - - - expr: (Nothing)
          - Right:
              expr: Nothing
        - - expr: (Just '0')
          - Right:
              expr: (Just (Just '0'))
        - - expr: (Just '5')
          - Right:
              expr: (Just (Just '5'))
        - - expr: (Just '7')
          - Right:
              expr: (Just (Just '7'))
    - - - type: '[] Char'
        - type: '[] (Maybe Char)'
      - - - expr: (['7'])
          - Right:
              expr: '[Just ''7'']'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'])
          - Right:
              expr: '[Just ''7'', Just ''4'', Just ''6'']'
        - - expr: (['7', '4'])
          - Right:
              expr: '[Just ''7'', Just ''4'']'
    - - - type: '[] Int'
        - type: '[] (Maybe Int)'
      - - - expr: ([(7), (13), (-10)])
          - Right:
              expr: '[Just 7, Just 13, Just (-10)]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([(7), (13)])
          - Right:
              expr: '[Just 7, Just 13]'
        - - expr: ([(7)])
          - Right:
              expr: '[Just 7]'
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc prepend
  - - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.) in compose mempty maybe, (20),
               [(7), (13), (-10)])
          - Right:
              expr: '[20, 7, 13, -10]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (20), [(7), (13)])
          - Right:
              expr: '[20, 7, 13]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (13), [])
          - Right:
              expr: '[13]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose prepend toEnum,
               (-10), [])
          - Right:
              expr: '[-10, -10]'
        - - expr: (let compose = (.) in compose foldMap mempty, (7), [])
          - Right:
              expr: '[7]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (14), [(7), (13)])
          - Right:
              expr: '[14, 7, 13]'
        - - expr: (let compose = (.) in compose mempty fromEnum, (-10), [(7)])
          - Right:
              expr: '[-10, 7]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (12), [(7), (13)])
          - Right:
              expr: '[12, 7, 13]'
    - - - type: ((Char -> [Char] -> [Char]), Char, [Char])
        - type: '[Char]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               '7', ['7'])
          - Right:
              expr: '"777"'
        - - expr: (let compose = (.) in compose mempty maybe, '5', ['7'])
          - Right:
              expr: '"57"'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               '6', ['7', '4'])
          - Right:
              expr: '"67474"'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6', [])
          - Right:
              expr: '"6"'
        - - expr: (let prepend = (:) in prepend, '8', [])
          - Right:
              expr: '"88"'
        - - expr: (let compose = (.) in compose mempty maybe, '8', ['7'])
          - Right:
              expr: '"87"'
        - - expr: (let compose = (.) in compose foldMap mempty, '2', ['7'])
          - Right:
              expr: '"27"'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose conc mempty,
               '2', ['7', '4'])
          - Right:
              expr: '"27474"'
- - expr: let compose = (.) in compose maybe unzip
  - - - - type: ([(Int, Int)], (Int -> ([Int], [Int])), Maybe Int)
        - type: ([Int], [Int])
      - - - expr: |-
              ([((7), (7))],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (0))
          - Right:
              expr: ([], [])
        - - expr: |-
              ([((7), (7))],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing)
          - Right:
              expr: ([7], [7])
        - - expr: |-
              ([((7), (7)), ((13), (13))],
               let compose = (.) in compose unzip mempty, Just (0))
          - Right:
              expr: ([], [])
        - - expr: |-
              ([((7), (7)), ((13), (13))],
               let compose = (.) in compose mempty fromEnum, Just (7))
          - Right:
              expr: ([], [])
        - - expr: |-
              ([((7), (7)), ((13), (13)), ((-10), (-10))],
               let compose = (.) in compose unzip mempty, Just (0))
          - Right:
              expr: ([], [])
        - - expr: |-
              ([((7), (7)), ((13), (13))],
               let compose = (.) in compose mempty maybe, Just (0))
          - Right:
              expr: ([], [])
        - - expr: |-
              ([((7), (7))], let compose = (.) in compose mempty fromEnum,
               Just (0))
          - Right:
              expr: ([], [])
        - - expr: |-
              ([((7), (7)), ((13), (13))],
               let compose = (.) in compose unzip mempty, Just (7))
          - Right:
              expr: ([], [])
    - - - type: ([(Int, Int)], (Char -> ([Int], [Int])), Maybe Char)
        - type: ([Int], [Int])
      - - - expr: |-
              ([],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing)
          - Right:
              expr: ([], [])
        - - expr: ([], let compose = (.) in compose unzip mempty, Nothing)
          - Right:
              expr: ([], [])
        - - expr: ([], let compose = (.) in compose mempty fromEnum, Just '7')
          - Right:
              expr: ([], [])
        - - expr: |-
              ([((7), (7)), ((13), (13)), ((-10), (-10))],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5')
          - Right:
              expr: ([], [])
        - - expr: ([], let compose = (.) in compose mempty fromEnum, Nothing)
          - Right:
              expr: ([], [])
        - - expr: |-
              ([((7), (7)), ((13), (13)), ((-10), (-10))],
               let compose = (.) in compose mempty maybe, Just '7')
          - Right:
              expr: ([], [])
        - - expr: ([((7), (7))], let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: ([7], [7])
        - - expr: |-
              ([((7), (7)), ((13), (13))],
               let compose = (.) in compose mempty maybe, Just '5')
          - Right:
              expr: ([], [])
    - - - type: ([(Char, Char)], (Int -> ([Char], [Char])), Maybe Int)
        - type: ([Char], [Char])
      - - - expr: ([('7', '7')], let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: ("7", "7")
        - - expr: |-
              ([('7', '7')], let compose = (.) in compose mempty fromEnum,
               Just (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              ([('7', '7')],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (0))
          - Right:
              expr: ("", "")
        - - expr: |-
              ([('7', '7'), ('4', '4'), ('6', '6')],
               let compose = (.) in compose unzip mempty, Just (0))
          - Right:
              expr: ("", "")
        - - expr: ([], let compose = (.) in compose unzip mempty, Just (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              ([('7', '7')],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (0))
          - Right:
              expr: ("", "")
        - - expr: |-
              ([('7', '7')],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (19))
          - Right:
              expr: ("", "")
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing)
          - Right:
              expr: ("", "")
    - - - type: ([(Char, Int)], (Int -> ([Char], [Int])), Maybe Int)
        - type: ([Char], [Int])
      - - - expr: |-
              ([('7', (7)), ('4', (13))],
               let compose = (.) in compose mempty maybe, Just (19))
          - Right:
              expr: ("", [])
        - - expr: ([], let compose = (.) in compose mempty fromEnum, Just (7))
          - Right:
              expr: ("", [])
        - - expr: |-
              ([('7', (7)), ('4', (13)), ('6', (-10))],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (19))
          - Right:
              expr: ("", [])
        - - expr: |-
              ([('7', (7)), ('4', (13))],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (19))
          - Right:
              expr: ("", [])
        - - expr: ([('7', (7))], let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: ("7", [7])
        - - expr: |-
              ([('7', (7))], let compose = (.) in compose mempty fromEnum,
               Just (0))
          - Right:
              expr: ("", [])
        - - expr: |-
              ([],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing)
          - Right:
              expr: ("", [])
        - - expr: |-
              ([('7', (7))], let compose = (.) in compose mempty maybe,
               Just (19))
          - Right:
              expr: ("", [])
- - expr: maybe
  - - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: ((13), toEnum, Just (0))
          - Right:
              expr: '0'
        - - expr: ((19), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '19'
        - - expr: ((19), let compose = (.) in compose toEnum fromEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((13), toEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((19), let compose = (.) in compose toEnum fromEnum, Just (19))
          - Right:
              expr: '19'
        - - expr: ((7), let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((-10), let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: (-10)
        - - expr: ((-10), fromEnum, Just (7))
          - Right:
              expr: '7'
    - - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
      - - - expr: ((7), let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ((20), let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((-10), let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((12), fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: ((-10), fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ((0), fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((14), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '14'
        - - expr: ((20), fromEnum, Just '0')
          - Right:
              expr: '48'
    - - - type: (Char, (Int -> Char), Maybe Int)
        - type: Char
      - - - expr: ('4', toEnum, Just (19))
          - Right:
              expr: '''\DC3'''
        - - expr: ('5', let compose = (.) in compose toEnum fromEnum, Just (0))
          - Right:
              expr: '''\NUL'''
        - - expr: ('2', toEnum, Nothing)
          - Right:
              expr: '''2'''
        - - expr: ('2', let compose = (.) in compose toEnum toEnum, Just (19))
          - Right:
              expr: '''\DC3'''
        - - expr: ('5', let compose = (.) in compose toEnum toEnum, Just (19))
          - Right:
              expr: '''\DC3'''
        - - expr: ('5', toEnum, Just (0))
          - Right:
              expr: '''\NUL'''
        - - expr: ('0', toEnum, Nothing)
          - Right:
              expr: '''0'''
        - - expr: ('4', toEnum, Just (7))
          - Right:
              expr: '''\a'''
    - - - type: (Char, (Char -> Char), Maybe Char)
        - type: Char
      - - - expr: ('2', let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '''7'''
        - - expr: ('6', let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '''0'''
        - - expr: ('0', let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '''0'''
        - - expr: ('8', let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '''7'''
        - - expr: ('5', let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '''0'''
        - - expr: ('2', let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '''5'''
        - - expr: ('4', let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '''0'''
        - - expr: ('7', let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '''7'''
- - expr: let conc = (<>) in conc unzip
  - - - - type: (([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [((7), '7'), ((13), '4')])
          - Right:
              expr: ([7, 13], "74")
        - - expr: (unzip, [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty unzip,
               [((7), '7'), ((13), '4')])
          - Right:
              expr: ([7, 13], "74")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([7, 13, -10], "746")
        - - expr: (let compose = (.) in compose mempty unzip, [((7), '7')])
          - Right:
              expr: ([7], "7")
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               [((7), '7'), ((13), '4')])
          - Right:
              expr: ([7, 13], "74")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([7, 13, -10], "746")
    - - - type: (([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.) in compose unzip mempty,
               [((7), (7)), ((13), (13))])
          - Right:
              expr: ([7, 13], [7, 13])
        - - expr: |-
              (let compose = (.) in compose mempty length,
               [((7), (7)), ((13), (13)), ((-10), (-10))])
          - Right:
              expr: ([7, 13, -10], [7, 13, -10])
        - - expr: |-
              (let compose = (.) in compose mempty unzip,
               [((7), (7)), ((13), (13)), ((-10), (-10))])
          - Right:
              expr: ([7, 13, -10], [7, 13, -10])
        - - expr: |-
              (let compose = (.) in compose mempty unzip,
               [((7), (7)), ((13), (13))])
          - Right:
              expr: ([7, 13], [7, 13])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [((7), (7)), ((13), (13))])
          - Right:
              expr: ([7, 13], [7, 13])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [((7), (7))])
          - Right:
              expr: ([7], [7])
        - - expr: |-
              (let compose = (.) in compose mempty zip,
               [((7), (7)), ((13), (13)), ((-10), (-10))])
          - Right:
              expr: ([7, 13, -10], [7, 13, -10])
    - - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.) in compose unzip mempty,
               [('7', '7'), ('4', '4')])
          - Right:
              expr: ("74", "74")
        - - expr: (let compose = (.) in compose mempty unzip, [('7', '7')])
          - Right:
              expr: ("7", "7")
        - - expr: (let compose = (.) in compose unzip mempty, [('7', '7')])
          - Right:
              expr: ("7", "7")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [('7', '7'), ('4', '4')])
          - Right:
              expr: ("74", "74")
        - - expr: |-
              (let compose = (.) in compose unzip mempty,
               [('7', '7'), ('4', '4'), ('6', '6')])
          - Right:
              expr: ("746", "746")
        - - expr: |-
              (let compose = (.) in compose mempty unzip,
               [('7', '7'), ('4', '4')])
          - Right:
              expr: ("74", "74")
        - - expr: |-
              (let compose = (.) in compose mempty unzip,
               [('7', '7'), ('4', '4'), ('6', '6')])
          - Right:
              expr: ("746", "746")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [('7', '7'), ('4', '4')])
          - Right:
              expr: ("74", "74")
    - - - type: (([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: ("746", [7, 13, -10])
        - - expr: (let compose = (.) in compose mempty unzip, [])
          - Right:
              expr: ("", [])
        - - expr: (let compose = (.) in compose mempty length, [('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty unzip,
               [('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: ("746", [7, 13, -10])
        - - expr: (let compose = (.) in compose mempty zip, [('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: |-
              (let compose = (.) in compose mempty zip,
               [('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: ("746", [7, 13, -10])
- - expr: |-
      let just = Just
          zero = 0
          prepend = (:)
        in prepend (just zero)
  - - - - type: '[Maybe Int]'
        - type: '[Maybe Int]'
      - - - expr: ([Just (7), Nothing])
          - Right:
              expr: '[Just 0, Just 7, Nothing]'
        - - expr: ([])
          - Right:
              expr: '[Just 0]'
        - - expr: ([Just (7)])
          - Right:
              expr: '[Just 0, Just 7]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose foldMap prepend
  - - - - type: (Int, [] [Int])
        - type: '[Int]'
      - - - expr: ((19), [])
          - Right:
              expr: '[]'
        - - expr: ((14), [[(7), (13), (-10)], []])
          - Right:
              expr: '[14, 7, 13, -10, 14]'
        - - expr: ((0), [[(7), (13), (-10)], []])
          - Right:
              expr: '[0, 7, 13, -10, 0]'
        - - expr: ((7), [[(7), (13), (-10)], []])
          - Right:
              expr: '[7, 7, 13, -10, 7]'
        - - expr: ((-10), [[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[-10, 7, 13, -10, -10, -10, 7, 13]'
        - - expr: ((7), [[(7), (13), (-10)]])
          - Right:
              expr: '[7, 7, 13, -10]'
        - - expr: ((7), [])
          - Right:
              expr: '[]'
        - - expr: ((0), [])
          - Right:
              expr: '[]'
    - - - type: (Int, Maybe [Int])
        - type: '[Int]'
      - - - expr: ((14), Just [(7), (13), (-10)])
          - Right:
              expr: '[14, 7, 13, -10]'
        - - expr: ((14), Nothing)
          - Right:
              expr: '[]'
        - - expr: ((7), Nothing)
          - Right:
              expr: '[]'
        - - expr: ((12), Nothing)
          - Right:
              expr: '[]'
        - - expr: ((7), Just [(7), (13), (-10)])
          - Right:
              expr: '[7, 7, 13, -10]'
        - - expr: ((0), Just [(7), (13), (-10)])
          - Right:
              expr: '[0, 7, 13, -10]'
        - - expr: ((13), Just [(7), (13), (-10)])
          - Right:
              expr: '[13, 7, 13, -10]'
        - - expr: ((-10), Nothing)
          - Right:
              expr: '[]'
    - - - type: (Char, Maybe [Char])
        - type: '[Char]'
      - - - expr: ('0', Nothing)
          - Right:
              expr: '""'
        - - expr: ('4', Nothing)
          - Right:
              expr: '""'
        - - expr: ('2', Nothing)
          - Right:
              expr: '""'
        - - expr: ('4', Just ['7', '4', '6'])
          - Right:
              expr: '"4746"'
        - - expr: ('6', Just ['7', '4', '6'])
          - Right:
              expr: '"6746"'
        - - expr: ('2', Just ['7', '4', '6'])
          - Right:
              expr: '"2746"'
        - - expr: ('0', Just ['7', '4', '6'])
          - Right:
              expr: '"0746"'
        - - expr: ('5', Just ['7', '4', '6'])
          - Right:
              expr: '"5746"'
    - - - type: (Char, [] [Char])
        - type: '[Char]'
      - - - expr: ('5', [['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '"57465574"'
        - - expr: ('8', [['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '"87468874"'
        - - expr: ('4', [])
          - Right:
              expr: '""'
        - - expr: ('4', [['7', '4', '6'], []])
          - Right:
              expr: '"47464"'
        - - expr: ('2', [['7', '4', '6']])
          - Right:
              expr: '"2746"'
        - - expr: ('0', [['7', '4', '6']])
          - Right:
              expr: '"0746"'
        - - expr: ('6', [['7', '4', '6']])
          - Right:
              expr: '"6746"'
        - - expr: ('4', [['7', '4', '6']])
          - Right:
              expr: '"4746"'
- - expr: |-
      let just = Just
          compose = (.)
          tpl = (,)
        in compose tpl just
  - - - - type: (Char, Int)
        - type: (Maybe Char, Int)
      - - - expr: ('4', (7))
          - Right:
              expr: (Just '4', 7)
        - - expr: ('7', (7))
          - Right:
              expr: (Just '7', 7)
        - - expr: ('5', (7))
          - Right:
              expr: (Just '5', 7)
        - - expr: ('8', (19))
          - Right:
              expr: (Just '8', 19)
        - - expr: ('0', (20))
          - Right:
              expr: (Just '0', 20)
        - - expr: ('8', (0))
          - Right:
              expr: (Just '8', 0)
        - - expr: ('5', (19))
          - Right:
              expr: (Just '5', 19)
        - - expr: ('7', (19))
          - Right:
              expr: (Just '7', 19)
    - - - type: (Int, Int)
        - type: (Maybe Int, Int)
      - - - expr: ((-10), (13))
          - Right:
              expr: (Just (-10), 13)
        - - expr: ((0), (20))
          - Right:
              expr: (Just 0, 20)
        - - expr: ((19), (19))
          - Right:
              expr: (Just 19, 19)
        - - expr: ((14), (0))
          - Right:
              expr: (Just 14, 0)
        - - expr: ((0), (-10))
          - Right:
              expr: (Just 0, -10)
        - - expr: ((13), (-10))
          - Right:
              expr: (Just 13, -10)
        - - expr: ((13), (19))
          - Right:
              expr: (Just 13, 19)
        - - expr: ((12), (12))
          - Right:
              expr: (Just 12, 12)
    - - - type: (Char, Char)
        - type: (Maybe Char, Char)
      - - - expr: ('8', '6')
          - Right:
              expr: (Just '8', '6')
        - - expr: ('6', '5')
          - Right:
              expr: (Just '6', '5')
        - - expr: ('6', '4')
          - Right:
              expr: (Just '6', '4')
        - - expr: ('2', '8')
          - Right:
              expr: (Just '2', '8')
        - - expr: ('5', '7')
          - Right:
              expr: (Just '5', '7')
        - - expr: ('2', '6')
          - Right:
              expr: (Just '2', '6')
        - - expr: ('4', '4')
          - Right:
              expr: (Just '4', '4')
        - - expr: ('7', '7')
          - Right:
              expr: (Just '7', '7')
    - - - type: (Int, Char)
        - type: (Maybe Int, Char)
      - - - expr: ((14), '5')
          - Right:
              expr: (Just 14, '5')
        - - expr: ((14), '0')
          - Right:
              expr: (Just 14, '0')
        - - expr: ((19), '7')
          - Right:
              expr: (Just 19, '7')
        - - expr: ((12), '2')
          - Right:
              expr: (Just 12, '2')
        - - expr: ((13), '8')
          - Right:
              expr: (Just 13, '8')
        - - expr: ((19), '8')
          - Right:
              expr: (Just 19, '8')
        - - expr: ((19), '5')
          - Right:
              expr: (Just 19, '5')
        - - expr: ((13), '6')
          - Right:
              expr: (Just 13, '6')
- - expr: let compose = (.) in compose sequenceA sequence
  - - - - type: Maybe ([] Int)
        - type: Maybe ([] Int)
      - - - expr: (Nothing)
          - Right:
              expr: Nothing
        - - expr: (Just [(7), (13), (-10)])
          - Right:
              expr: (Just [7, 13, -10])
    - - - type: '[] ([] Char)'
        - type: '[] ([] Char)'
      - - - expr: ([['7', '4', '6']])
          - Right:
              expr: '["746"]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([['7', '4', '6'], []])
          - Right:
              expr: '[""]'
        - - expr: ([['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '[""]'
    - - - type: Maybe ([] Char)
        - type: Maybe ([] Char)
      - - - expr: (Just ['7', '4', '6'])
          - Right:
              expr: (Just "746")
        - - expr: (Nothing)
          - Right:
              expr: Nothing
    - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
      - - - expr: (Just (Just '7'))
          - Right:
              expr: (Just (Just '7'))
        - - expr: (Nothing)
          - Right:
              expr: Nothing
- - expr: maybe mempty zip
  - - - - type: (Maybe [Char], [Int])
        - type: '[(Char, Int)]'
      - - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Just ['7', '4', '6'], [(7), (13)])
          - Right:
              expr: '[(''7'', 7), (''4'', 13)]'
        - - expr: (Just ['7', '4', '6'], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (Just ['7', '4', '6'], [(7), (13), (-10)])
          - Right:
              expr: '[(''7'', 7), (''4'', 13), (''6'', -10)]'
        - - expr: (Nothing, [(7)])
          - Right:
              expr: '[]'
        - - expr: (Just ['7', '4', '6'], [(7)])
          - Right:
              expr: '[(''7'', 7)]'
        - - expr: (Nothing, [(7), (13)])
          - Right:
              expr: '[]'
    - - - type: (Maybe [Int], [Char])
        - type: '[(Int, Char)]'
      - - - expr: (Just [(7), (13), (-10)], ['7', '4'])
          - Right:
              expr: '[(7, ''7''), (13, ''4'')]'
        - - expr: (Nothing, ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: (Just [(7), (13), (-10)], ['7', '4', '6'])
          - Right:
              expr: '[(7, ''7''), (13, ''4''), (-10, ''6'')]'
        - - expr: (Nothing, ['7'])
          - Right:
              expr: '[]'
        - - expr: (Just [(7), (13), (-10)], ['7'])
          - Right:
              expr: '[(7, ''7'')]'
        - - expr: (Just [(7), (13), (-10)], [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['7', '4', '6'])
          - Right:
              expr: '[]'
    - - - type: (Maybe [Int], [Int])
        - type: '[(Int, Int)]'
      - - - expr: (Nothing, [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (Just [(7), (13), (-10)], [(7), (13)])
          - Right:
              expr: '[(7, 7), (13, 13)]'
        - - expr: (Just [(7), (13), (-10)], [(7), (13), (-10)])
          - Right:
              expr: '[(7, 7), (13, 13), (-10, -10)]'
        - - expr: (Just [(7), (13), (-10)], [])
          - Right:
              expr: '[]'
        - - expr: (Just [(7), (13), (-10)], [(7)])
          - Right:
              expr: '[(7, 7)]'
        - - expr: (Nothing, [(7)])
          - Right:
              expr: '[]'
    - - - type: (Maybe [Char], [Char])
        - type: '[(Char, Char)]'
      - - - expr: (Nothing, ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: (Just ['7', '4', '6'], [])
          - Right:
              expr: '[]'
        - - expr: (Just ['7', '4', '6'], ['7'])
          - Right:
              expr: '[(''7'', ''7'')]'
        - - expr: (Just ['7', '4', '6'], ['7', '4'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4'')]'
        - - expr: (Just ['7', '4', '6'], ['7', '4', '6'])
          - Right:
              expr: '[(''7'', ''7''), (''4'', ''4''), (''6'', ''6'')]'
        - - expr: (Nothing, ['7'])
          - Right:
              expr: '[]'
        - - expr: (Nothing, ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose maybe sequence
  - - - - type: ([] ([] Int), (Char -> [] ([] Int)), Maybe Char)
        - type: '[] ([] Int)'
      - - - expr: |-
              ([[(7), (13), (-10)], [], [(7), (13)]],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              ([[(7), (13), (-10)], []],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              ([[(7), (13), (-10)], [], [(7), (13)]],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              ([[(7), (13), (-10)]],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing)
          - Right:
              expr: '[[7], [13], [-10]]'
        - - expr: ([], let compose = (.) in compose mempty fromEnum, Just '5')
          - Right:
              expr: '[]'
        - - expr: ([], let compose = (.) in compose mempty maybe, Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              ([[(7), (13), (-10)]],
               let compose = (.) in compose mempty fromEnum, Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '7')
          - Right:
              expr: '[]'
    - - - type: (Maybe ([] Int), (Char -> [] (Maybe Int)), Maybe Char)
        - type: '[] (Maybe Int)'
      - - - expr: (Nothing, let compose = (.) in compose mempty maybe, Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (Just [(7), (13), (-10)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (Just [(7), (13), (-10)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (Nothing,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (Just [(7), (13), (-10)],
               let compose = (.) in compose mempty fromEnum, Nothing)
          - Right:
              expr: '[Just 7, Just 13, Just (-10)]'
        - - expr: |-
              (Just [(7), (13), (-10)],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing)
          - Right:
              expr: '[Just 7, Just 13, Just (-10)]'
        - - expr: |-
              (Nothing,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (Just [(7), (13), (-10)],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '0')
          - Right:
              expr: '[]'
    - - - type: (Maybe ([] Int), (Int -> [] (Maybe Int)), Maybe Int)
        - type: '[] (Maybe Int)'
      - - - expr: |-
              (Just [(7), (13), (-10)],
               let compose = (.) in compose mempty maybe, Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (Nothing,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (0))
          - Right:
              expr: '[]'
        - - expr: |-
              (Just [(7), (13), (-10)],
               let compose = (.) in compose mempty fromEnum, Just (7))
          - Right:
              expr: '[]'
        - - expr: |-
              (Just [(7), (13), (-10)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing)
          - Right:
              expr: '[Just 7, Just 13, Just (-10)]'
        - - expr: |-
              (Just [(7), (13), (-10)],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (19))
          - Right:
              expr: '[]'
        - - expr: |-
              (Just [(7), (13), (-10)],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (0))
          - Right:
              expr: '[]'
        - - expr: |-
              (Nothing,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (19))
          - Right:
              expr: '[]'
        - - expr: |-
              (Nothing,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing)
          - Right:
              expr: '[Nothing]'
- - expr: let compose = (.) in compose maybe toEnum
  - - - - type: (Int, (Int -> Char), Maybe Int)
        - type: Char
      - - - expr: ((14), let compose = (.) in compose toEnum toEnum, Just (19))
          - Right:
              expr: '''\DC3'''
        - - expr: ((13), toEnum, Just (7))
          - Right:
              expr: '''\a'''
        - - expr: ((20), toEnum, Just (7))
          - Right:
              expr: '''\a'''
        - - expr: ((12), toEnum, Just (0))
          - Right:
              expr: '''\NUL'''
        - - expr: ((13), let compose = (.) in compose toEnum fromEnum, Just (0))
          - Right:
              expr: '''\NUL'''
        - - expr: ((14), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '''\SO'''
        - - expr: ((-10), toEnum, Just (0))
          - Right:
              expr: '''\NUL'''
        - - expr: ((13), let compose = (.) in compose toEnum fromEnum, Just (19))
          - Right:
              expr: '''\DC3'''
    - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: ((7), let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((19), let compose = (.) in compose toEnum fromEnum, Just (19))
          - Right:
              expr: '19'
        - - expr: ((14), let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: '14'
        - - expr: ((12), fromEnum, Just (0))
          - Right:
              expr: '0'
        - - expr: ((7), fromEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((19), fromEnum, Nothing)
          - Right:
              expr: '19'
        - - expr: ((14), toEnum, Just (19))
          - Right:
              expr: '19'
        - - expr: ((-10), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: (-10)
    - - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
      - - - expr: ((-10), fromEnum, Nothing)
          - Right:
              expr: (-10)
        - - expr: ((-10), let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ((0), fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ((19), fromEnum, Nothing)
          - Right:
              expr: '19'
        - - expr: ((14), fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ((19), fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: ((0), fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: ((14), let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
    - - - type: (Int, (Char -> Char), Maybe Char)
        - type: Char
      - - - expr: ((0), let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '''5'''
        - - expr: ((-10), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: ((0), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '''\NUL'''
        - - expr: ((13), let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '''5'''
        - - expr: ((20), let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '''5'''
        - - expr: ((14), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '''\SO'''
        - - expr: ((7), let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '''5'''
        - - expr: ((14), let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '''7'''
- - expr: let compose = (.) in compose toEnum toEnum
  - - - - type: Int
        - type: Int
      - - - expr: ((13))
          - Right:
              expr: '13'
        - - expr: ((-10))
          - Right:
              expr: (-10)
        - - expr: ((7))
          - Right:
              expr: '7'
        - - expr: ((19))
          - Right:
              expr: '19'
        - - expr: ((14))
          - Right:
              expr: '14'
        - - expr: ((20))
          - Right:
              expr: '20'
        - - expr: ((12))
          - Right:
              expr: '12'
        - - expr: ((0))
          - Right:
              expr: '0'
    - - - type: Int
        - type: Char
      - - - expr: ((20))
          - Right:
              expr: '''\DC4'''
        - - expr: ((19))
          - Right:
              expr: '''\DC3'''
        - - expr: ((-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: ((12))
          - Right:
              expr: '''\f'''
        - - expr: ((7))
          - Right:
              expr: '''\a'''
        - - expr: ((14))
          - Right:
              expr: '''\SO'''
        - - expr: ((0))
          - Right:
              expr: '''\NUL'''
        - - expr: ((13))
          - Right:
              expr: '''\r'''
- - expr: let compose = (.) in compose length
  - - - - type: ((Char -> Maybe Char), Char)
        - type: Int
      - - - expr: (let just = Just in just, '2')
          - Right:
              expr: '1'
        - - expr: (let just = Just in just, '4')
          - Right:
              expr: '1'
        - - expr: (let just = Just in just, '7')
          - Right:
              expr: '1'
        - - expr: (let just = Just in just, '8')
          - Right:
              expr: '1'
        - - expr: (let just = Just in just, '5')
          - Right:
              expr: '1'
        - - expr: (let just = Just in just, '0')
          - Right:
              expr: '1'
        - - expr: (let just = Just in just, '6')
          - Right:
              expr: '1'
    - - - type: ((Int -> Maybe Int), Int)
        - type: Int
      - - - expr: (let just = Just in just, (19))
          - Right:
              expr: '1'
        - - expr: (let just = Just in just, (14))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (19))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (0))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (0))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               (19))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (12))
          - Right:
              expr: '1'
    - - - type: ((Char -> Maybe Int), Char)
        - type: Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '0')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '8')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '5')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '2')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '4')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '6')
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               '7')
          - Right:
              expr: '1'
    - - - type: ((Int -> Maybe Char), Int)
        - type: Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (14))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (19))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (7))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (20))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (0))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (12))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (13))
          - Right:
              expr: '1'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               (-10))
          - Right:
              expr: '1'
- - expr: maybe mempty unzip
  - - - - type: Maybe [(Char, Char)]
        - type: ([Char], [Char])
      - - - expr: (Nothing)
          - Right:
              expr: ("", "")
        - - expr: (Just [('7', '7'), ('4', '4'), ('6', '6')])
          - Right:
              expr: ("746", "746")
    - - - type: Maybe [(Char, Int)]
        - type: ([Char], [Int])
      - - - expr: (Nothing)
          - Right:
              expr: ("", [])
        - - expr: (Just [('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: ("746", [7, 13, -10])
    - - - type: Maybe [(Int, Int)]
        - type: ([Int], [Int])
      - - - expr: (Just [((7), (7)), ((13), (13)), ((-10), (-10))])
          - Right:
              expr: ([7, 13, -10], [7, 13, -10])
        - - expr: (Nothing)
          - Right:
              expr: ([], [])
    - - - type: Maybe [(Int, Char)]
        - type: ([Int], [Char])
      - - - expr: (Nothing)
          - Right:
              expr: ([], "")
        - - expr: (Just [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([7, 13, -10], "746")
- - expr: let compose = (.) in compose sequenceA sequenceA
  - - - - type: '[] ([] Int)'
        - type: '[] ([] Int)'
      - - - expr: ([[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[[]]'
        - - expr: ([[(7), (13), (-10)], []])
          - Right:
              expr: '[[]]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([[(7), (13), (-10)]])
          - Right:
              expr: '[[7, 13, -10]]'
    - - - type: Maybe (Maybe Int)
        - type: Maybe (Maybe Int)
      - - - expr: (Nothing)
          - Right:
              expr: Nothing
        - - expr: (Just (Just (7)))
          - Right:
              expr: (Just (Just 7))
    - - - type: '[] ([] Char)'
        - type: '[] ([] Char)'
      - - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '[""]'
        - - expr: ([['7', '4', '6'], []])
          - Right:
              expr: '[""]'
        - - expr: ([['7', '4', '6']])
          - Right:
              expr: '["746"]'
    - - - type: '[] (Maybe Char)'
        - type: '[] (Maybe Char)'
      - - - expr: ([Just '7'])
          - Right:
              expr: '[Just ''7'']'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([Just '7', Nothing])
          - Right:
              expr: '[Nothing]'
- - expr: let zero = 0 in maybe zero fromEnum
  - - - - type: Maybe Int
        - type: Int
      - - - expr: (Just (19))
          - Right:
              expr: '19'
        - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just (7))
          - Right:
              expr: '7'
        - - expr: (Just (0))
          - Right:
              expr: '0'
    - - - type: Maybe Char
        - type: Int
      - - - expr: (Just '5')
          - Right:
              expr: '53'
        - - expr: (Just '7')
          - Right:
              expr: '55'
        - - expr: (Nothing)
          - Right:
              expr: '0'
        - - expr: (Just '0')
          - Right:
              expr: '48'
- - expr: |-
      let zero = 0
          tpl = (,)
        in maybe (tpl zero)
  - - - - type: ((Int -> Char -> (Int, Char)), Maybe Int, Char)
        - type: (Int, Char)
      - - - expr: (let tpl = (,) in tpl, Just (7), '8')
          - Right:
              expr: (7, '8')
        - - expr: (let tpl = (,) in tpl, Nothing, '6')
          - Right:
              expr: (0, '6')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just (19), '2')
          - Right:
              expr: (19, '2')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Nothing, '0')
          - Right:
              expr: (0, '0')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Nothing, '2')
          - Right:
              expr: (0, '2')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Just (7), '6')
          - Right:
              expr: (7, '6')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just (7), '0')
          - Right:
              expr: (7, '0')
        - - expr: (let tpl = (,) in tpl, Just (0), '2')
          - Right:
              expr: (0, '2')
    - - - type: ((Int -> Int -> (Int, Int)), Maybe Int, Int)
        - type: (Int, Int)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Just (19), (13))
          - Right:
              expr: (19, 13)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Just (7), (14))
          - Right:
              expr: (7, 14)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just (19), (19))
          - Right:
              expr: (19, 19)
        - - expr: (let tpl = (,) in tpl, Nothing, (0))
          - Right:
              expr: (0, 0)
        - - expr: (let tpl = (,) in tpl, Nothing, (12))
          - Right:
              expr: (0, 12)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Just (7), (20))
          - Right:
              expr: (7, 20)
        - - expr: (let tpl = (,) in tpl, Just (7), (7))
          - Right:
              expr: (7, 7)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl toEnum,
               Just (7), (12))
          - Right:
              expr: (7, 12)
    - - - type: ((Char -> Int -> (Int, Int)), Maybe Char, Int)
        - type: (Int, Int)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Nothing, (19))
          - Right:
              expr: (0, 19)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Nothing, (12))
          - Right:
              expr: (0, 12)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '5', (12))
          - Right:
              expr: (53, 12)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '7', (0))
          - Right:
              expr: (55, 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Nothing, (0))
          - Right:
              expr: (0, 0)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '7', (14))
          - Right:
              expr: (55, 14)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '7', (19))
          - Right:
              expr: (55, 19)
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '5', (7))
          - Right:
              expr: (53, 7)
    - - - type: ((Char -> Char -> (Int, Char)), Maybe Char, Char)
        - type: (Int, Char)
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Nothing, '0')
          - Right:
              expr: (0, '0')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '0', '5')
          - Right:
              expr: (48, '5')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '7', '7')
          - Right:
              expr: (55, '7')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '5', '2')
          - Right:
              expr: (53, '2')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Nothing, '8')
          - Right:
              expr: (0, '8')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '5', '8')
          - Right:
              expr: (53, '8')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '0', '7')
          - Right:
              expr: (48, '7')
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose tpl fromEnum,
               Just '7', '6')
          - Right:
              expr: (55, '6')
- - expr: |-
      let just = Just
          compose = (.)
        in compose just fromEnum
  - - - - type: Int
        - type: Maybe Int
      - - - expr: ((13))
          - Right:
              expr: (Just 13)
        - - expr: ((14))
          - Right:
              expr: (Just 14)
        - - expr: ((12))
          - Right:
              expr: (Just 12)
        - - expr: ((20))
          - Right:
              expr: (Just 20)
        - - expr: ((0))
          - Right:
              expr: (Just 0)
        - - expr: ((19))
          - Right:
              expr: (Just 19)
        - - expr: ((7))
          - Right:
              expr: (Just 7)
        - - expr: ((-10))
          - Right:
              expr: (Just (-10))
    - - - type: Char
        - type: Maybe Int
      - - - expr: ('5')
          - Right:
              expr: (Just 53)
        - - expr: ('0')
          - Right:
              expr: (Just 48)
        - - expr: ('2')
          - Right:
              expr: (Just 50)
        - - expr: ('4')
          - Right:
              expr: (Just 52)
        - - expr: ('8')
          - Right:
              expr: (Just 56)
        - - expr: ('6')
          - Right:
              expr: (Just 54)
        - - expr: ('7')
          - Right:
              expr: (Just 55)
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl length
  - - - - type: (Maybe Int, Char)
        - type: (Int, Char)
      - - - expr: (Nothing, '0')
          - Right:
              expr: (0, '0')
        - - expr: (Just (0), '2')
          - Right:
              expr: (1, '2')
        - - expr: (Just (7), '2')
          - Right:
              expr: (1, '2')
        - - expr: (Just (19), '2')
          - Right:
              expr: (1, '2')
        - - expr: (Just (0), '6')
          - Right:
              expr: (1, '6')
        - - expr: (Nothing, '8')
          - Right:
              expr: (0, '8')
        - - expr: (Just (7), '7')
          - Right:
              expr: (1, '7')
        - - expr: (Just (19), '4')
          - Right:
              expr: (1, '4')
    - - - type: ([] Int, Char)
        - type: (Int, Char)
      - - - expr: ([(7), (13)], '2')
          - Right:
              expr: (2, '2')
        - - expr: ([(7)], '0')
          - Right:
              expr: (1, '0')
        - - expr: ([(7), (13)], '0')
          - Right:
              expr: (2, '0')
        - - expr: ([(7)], '5')
          - Right:
              expr: (1, '5')
        - - expr: ([(7), (13), (-10)], '4')
          - Right:
              expr: (3, '4')
        - - expr: ([(7)], '6')
          - Right:
              expr: (1, '6')
        - - expr: ([(7), (13), (-10)], '0')
          - Right:
              expr: (3, '0')
        - - expr: ([(7), (13), (-10)], '2')
          - Right:
              expr: (3, '2')
    - - - type: (Maybe Int, Int)
        - type: (Int, Int)
      - - - expr: (Nothing, (-10))
          - Right:
              expr: (0, -10)
        - - expr: (Just (19), (7))
          - Right:
              expr: (1, 7)
        - - expr: (Just (7), (13))
          - Right:
              expr: (1, 13)
        - - expr: (Nothing, (7))
          - Right:
              expr: (0, 7)
        - - expr: (Just (0), (0))
          - Right:
              expr: (1, 0)
        - - expr: (Just (19), (12))
          - Right:
              expr: (1, 12)
        - - expr: (Just (0), (20))
          - Right:
              expr: (1, 20)
        - - expr: (Just (7), (-10))
          - Right:
              expr: (1, -10)
    - - - type: ([] Char, Int)
        - type: (Int, Int)
      - - - expr: (['7'], (19))
          - Right:
              expr: (1, 19)
        - - expr: (['7', '4', '6'], (20))
          - Right:
              expr: (3, 20)
        - - expr: (['7', '4'], (7))
          - Right:
              expr: (2, 7)
        - - expr: (['7'], (7))
          - Right:
              expr: (1, 7)
        - - expr: (['7', '4'], (-10))
          - Right:
              expr: (2, -10)
        - - expr: (['7', '4', '6'], (-10))
          - Right:
              expr: (3, -10)
        - - expr: (['7'], (13))
          - Right:
              expr: (1, 13)
        - - expr: (['7', '4'], (12))
          - Right:
              expr: (2, 12)
- - expr: let compose = (.) in compose fmap fmap
  - - - - type: ((Int -> Int), Maybe ([] Int))
        - type: Maybe ([] Int)
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               Just [(7), (13), (-10)])
          - Right:
              expr: (Just [7, 13, -10])
        - - expr: (fromEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (toEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum,
               Just [(7), (13), (-10)])
          - Right:
              expr: (Just [7, 13, -10])
        - - expr: (fromEnum, Just [(7), (13), (-10)])
          - Right:
              expr: (Just [7, 13, -10])
        - - expr: (let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: Nothing
        - - expr: (toEnum, Just [(7), (13), (-10)])
          - Right:
              expr: (Just [7, 13, -10])
    - - - type: ((Char -> Char), [] ([] Char))
        - type: '[] ([] Char)'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, [['7', '4', '6']])
          - Right:
              expr: '["746"]'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               [['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '["746", "", "74"]'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               [['7', '4', '6'], []])
          - Right:
              expr: '["746", ""]'
    - - - type: ((Char -> Int), [] (Maybe Char))
        - type: '[] (Maybe Int)'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, [Just '7'])
          - Right:
              expr: '[Just 55]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, [Just '7', Nothing])
          - Right:
              expr: '[Just 55, Nothing]'
        - - expr: (fromEnum, [])
          - Right:
              expr: '[]'
        - - expr: (fromEnum, [Just '7', Nothing])
          - Right:
              expr: '[Just 55, Nothing]'
        - - expr: (fromEnum, [Just '7'])
          - Right:
              expr: '[Just 55]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, [])
          - Right:
              expr: '[]'
    - - - type: ((Char -> Char), [] (Maybe Char))
        - type: '[] (Maybe Char)'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, [Just '7'])
          - Right:
              expr: '[Just ''7'']'
        - - expr: (let compose = (.) in compose toEnum fromEnum, [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, [Just '7', Nothing])
          - Right:
              expr: '[Just ''7'', Nothing]'
- - expr: let compose = (.) in compose
  - - - - type: ((Int -> Char), (Char -> Int), Char)
        - type: Char
      - - - expr: (let compose = (.) in compose toEnum toEnum, fromEnum, '5')
          - Right:
              expr: '''5'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, fromEnum, '0')
          - Right:
              expr: '''0'''
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '''8'''
        - - expr: (toEnum, fromEnum, '8')
          - Right:
              expr: '''8'''
        - - expr: (toEnum, fromEnum, '2')
          - Right:
              expr: '''2'''
        - - expr: (let compose = (.) in compose toEnum toEnum, fromEnum, '0')
          - Right:
              expr: '''0'''
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '''4'''
        - - expr: (let compose = (.) in compose toEnum toEnum, fromEnum, '4')
          - Right:
              expr: '''4'''
    - - - type: ((Int -> Char), (Int -> Int), Int)
        - type: Char
      - - - expr: (let compose = (.) in compose toEnum toEnum, toEnum, (19))
          - Right:
              expr: '''\DC3'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, toEnum, (19))
          - Right:
              expr: '''\DC3'''
        - - expr: (let compose = (.) in compose toEnum toEnum, fromEnum, (7))
          - Right:
              expr: '''\a'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, toEnum, (12))
          - Right:
              expr: '''\f'''
        - - expr: (let compose = (.) in compose toEnum toEnum, fromEnum, (14))
          - Right:
              expr: '''\SO'''
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (0))
          - Right:
              expr: '''\NUL'''
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (19))
          - Right:
              expr: '''\DC3'''
        - - expr: (let compose = (.) in compose toEnum fromEnum, fromEnum, (20))
          - Right:
              expr: '''\DC4'''
    - - - type: ((Char -> Int), (Int -> Char), Int)
        - type: Int
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (19))
          - Right:
              expr: '19'
        - - expr: (fromEnum, let compose = (.) in compose toEnum toEnum, (12))
          - Right:
              expr: '12'
        - - expr: (fromEnum, toEnum, (-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (19))
          - Right:
              expr: '19'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (20))
          - Right:
              expr: '20'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (20))
          - Right:
              expr: '20'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum toEnum, (13))
          - Right:
              expr: '13'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, (13))
          - Right:
              expr: '13'
    - - - type: ((Char -> Int), (Char -> Char), Char)
        - type: Int
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: '48'
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: '56'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: '52'
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: '53'
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum,
               let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: '55'
        - - expr: (fromEnum, let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: '50'
- - expr: let conc = (<>) in conc (zip mempty)
  - - - - type: (([Int] -> [(Int, Int)]), [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty length, [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty zip, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [(7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [(7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty length, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [(7)])
          - Right:
              expr: '[]'
    - - - type: (([Char] -> [(Int, Char)]), [Char])
        - type: '[(Int, Char)]'
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: (zip mempty, ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               ['7'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty zip, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [])
          - Right:
              expr: '[]'
    - - - type: (([Char] -> [(Char, Char)]), [Char])
        - type: '[(Char, Char)]'
      - - - expr: (zip mempty, ['7'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty zip, ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               ['7', '4'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (zip mempty, ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty zip, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               ['7'])
          - Right:
              expr: '[]'
    - - - type: (([Int] -> [(Char, Int)]), [Int])
        - type: '[(Char, Int)]'
      - - - expr: (zip mempty, [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty zip, [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [(7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty length, [(7), (13)])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose maybe sequenceA
  - - - - type: ([] (Maybe Char), (Char -> Maybe ([] Char)), Maybe Char)
        - type: Maybe ([] Char)
      - - - expr: |-
              ([Just '7'],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '7')
          - Right:
              expr: Nothing
        - - expr: |-
              ([Just '7', Nothing], let compose = (.) in compose mempty maybe,
               Just '0')
          - Right:
              expr: Nothing
        - - expr: |-
              ([Just '7', Nothing], let compose = (.) in compose mempty fromEnum,
               Just '7')
          - Right:
              expr: Nothing
        - - expr: ([Just '7'], let compose = (.) in compose mempty maybe, Just '5')
          - Right:
              expr: Nothing
        - - expr: ([], let compose = (.) in compose mempty maybe, Just '7')
          - Right:
              expr: Nothing
        - - expr: ([Just '7'], let compose = (.) in compose mempty maybe, Nothing)
          - Right:
              expr: (Just "7")
        - - expr: |-
              ([Just '7'],
               let just = Just
                   compose = (.)
                 in compose just mempty,
               Nothing)
          - Right:
              expr: (Just "7")
        - - expr: |-
              ([Just '7', Nothing], let compose = (.) in compose mempty fromEnum,
               Just '5')
          - Right:
              expr: Nothing
    - - - type: ([] ([] Int), (Char -> [] ([] Int)), Maybe Char)
        - type: '[] ([] Int)'
      - - - expr: |-
              ([[(7), (13), (-10)]],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              ([[(7), (13), (-10)], [], [(7), (13)]],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing)
          - Right:
              expr: '[]'
        - - expr: |-
              ([[(7), (13), (-10)]],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Nothing)
          - Right:
              expr: '[[7], [13], [-10]]'
        - - expr: |-
              ([[(7), (13), (-10)], [], [(7), (13)]],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              ([[(7), (13), (-10)]],
               let compose = (.) in compose mempty fromEnum, Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              ([],
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              ([[(7), (13), (-10)]],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing)
          - Right:
              expr: '[[7], [13], [-10]]'
        - - expr: |-
              ([[(7), (13), (-10)], [], [(7), (13)]],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '7')
          - Right:
              expr: '[]'
    - - - type: (Maybe ([] Char), (Char -> [] (Maybe Char)), Maybe Char)
        - type: '[] (Maybe Char)'
      - - - expr: (Nothing, let compose = (.) in compose mempty fromEnum, Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (Nothing,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (Nothing,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '5')
          - Right:
              expr: '[]'
        - - expr: |-
              (Just ['7', '4', '6'],
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (Nothing,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing)
          - Right:
              expr: '[Nothing]'
        - - expr: |-
              (Nothing,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '0')
          - Right:
              expr: '[]'
        - - expr: |-
              (Just ['7', '4', '6'], let compose = (.) in compose mempty maybe,
               Just '7')
          - Right:
              expr: '[]'
        - - expr: |-
              (Just ['7', '4', '6'],
               let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing)
          - Right:
              expr: '[Just ''7'', Just ''4'', Just ''6'']'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl
  - - - - type: ((Char -> Int), Char, Int)
        - type: (Int, Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '0', (14))
          - Right:
              expr: (48, 14)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (13))
          - Right:
              expr: (53, 13)
        - - expr: (fromEnum, '4', (0))
          - Right:
              expr: (52, 0)
        - - expr: (fromEnum, '7', (-10))
          - Right:
              expr: (55, -10)
        - - expr: (fromEnum, '2', (-10))
          - Right:
              expr: (50, -10)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (19))
          - Right:
              expr: (53, 19)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (0))
          - Right:
              expr: (53, 0)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', (20))
          - Right:
              expr: (56, 20)
    - - - type: ((Int -> Char), Int, Char)
        - type: (Char, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (19), '0')
          - Right:
              expr: ('\DC3', '0')
        - - expr: (let compose = (.) in compose toEnum toEnum, (13), '4')
          - Right:
              expr: ('\r', '4')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (13), '0')
          - Right:
              expr: ('\r', '0')
        - - expr: (let compose = (.) in compose toEnum toEnum, (-10), '8')
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (toEnum, (12), '5')
          - Right:
              expr: ('\f', '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (0), '8')
          - Right:
              expr: ('\NUL', '8')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (14), '0')
          - Right:
              expr: ('\SO', '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7), '5')
          - Right:
              expr: ('\a', '5')
    - - - type: ((Char -> Char), Char, Char)
        - type: (Char, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '6', '0')
          - Right:
              expr: ('6', '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', '5')
          - Right:
              expr: ('6', '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', '6')
          - Right:
              expr: ('7', '6')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', '4')
          - Right:
              expr: ('6', '4')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', '7')
          - Right:
              expr: ('0', '7')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', '5')
          - Right:
              expr: ('7', '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2', '5')
          - Right:
              expr: ('2', '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', '4')
          - Right:
              expr: ('0', '4')
    - - - type: ((Char -> Char), Char, Int)
        - type: (Char, Int)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (14))
          - Right:
              expr: ('5', 14)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', (0))
          - Right:
              expr: ('4', 0)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', (19))
          - Right:
              expr: ('8', 19)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (0))
          - Right:
              expr: ('5', 0)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', (0))
          - Right:
              expr: ('7', 0)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', (7))
          - Right:
              expr: ('4', 7)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', (13))
          - Right:
              expr: ('5', 13)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', (13))
          - Right:
              expr: ('0', 13)
- - expr: fromEnum
  - - - - type: Char
        - type: Int
      - - - expr: ('0')
          - Right:
              expr: '48'
        - - expr: ('5')
          - Right:
              expr: '53'
        - - expr: ('2')
          - Right:
              expr: '50'
        - - expr: ('4')
          - Right:
              expr: '52'
        - - expr: ('6')
          - Right:
              expr: '54'
        - - expr: ('8')
          - Right:
              expr: '56'
        - - expr: ('7')
          - Right:
              expr: '55'
    - - - type: Int
        - type: Int
      - - - expr: ((13))
          - Right:
              expr: '13'
        - - expr: ((0))
          - Right:
              expr: '0'
        - - expr: ((20))
          - Right:
              expr: '20'
        - - expr: ((7))
          - Right:
              expr: '7'
        - - expr: ((14))
          - Right:
              expr: '14'
        - - expr: ((-10))
          - Right:
              expr: (-10)
        - - expr: ((19))
          - Right:
              expr: '19'
        - - expr: ((12))
          - Right:
              expr: '12'
- - expr: |-
      let zero = 0
          tpl = (,)
        in tpl zero
  - - - - type: Char
        - type: (Int, Char)
      - - - expr: ('2')
          - Right:
              expr: (0, '2')
        - - expr: ('6')
          - Right:
              expr: (0, '6')
        - - expr: ('8')
          - Right:
              expr: (0, '8')
        - - expr: ('0')
          - Right:
              expr: (0, '0')
        - - expr: ('7')
          - Right:
              expr: (0, '7')
        - - expr: ('5')
          - Right:
              expr: (0, '5')
        - - expr: ('4')
          - Right:
              expr: (0, '4')
    - - - type: Int
        - type: (Int, Int)
      - - - expr: ((0))
          - Right:
              expr: (0, 0)
        - - expr: ((13))
          - Right:
              expr: (0, 13)
        - - expr: ((7))
          - Right:
              expr: (0, 7)
        - - expr: ((12))
          - Right:
              expr: (0, 12)
        - - expr: ((19))
          - Right:
              expr: (0, 19)
        - - expr: ((-10))
          - Right:
              expr: (0, -10)
        - - expr: ((20))
          - Right:
              expr: (0, 20)
        - - expr: ((14))
          - Right:
              expr: (0, 14)
- - expr: sequence
  - - - - type: '[] ([] Int)'
        - type: '[] ([] Int)'
      - - - expr: ([[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[]'
        - - expr: ([[(7), (13), (-10)], []])
          - Right:
              expr: '[]'
        - - expr: ([])
          - Right:
              expr: '[[]]'
        - - expr: ([[(7), (13), (-10)]])
          - Right:
              expr: '[[7], [13], [-10]]'
    - - - type: Maybe (Maybe Int)
        - type: Maybe (Maybe Int)
      - - - expr: (Nothing)
          - Right:
              expr: (Just Nothing)
        - - expr: (Just (Just (7)))
          - Right:
              expr: (Just (Just 7))
    - - - type: '[] (Maybe Char)'
        - type: Maybe ([] Char)
      - - - expr: ([])
          - Right:
              expr: (Just "")
        - - expr: ([Just '7', Nothing])
          - Right:
              expr: Nothing
        - - expr: ([Just '7'])
          - Right:
              expr: (Just "7")
    - - - type: Maybe ([] Char)
        - type: '[] (Maybe Char)'
      - - - expr: (Nothing)
          - Right:
              expr: '[Nothing]'
        - - expr: (Just ['7', '4', '6'])
          - Right:
              expr: '[Just ''7'', Just ''4'', Just ''6'']'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just sequenceA
  - - - - type: '[] ([] Int)'
        - type: Maybe ([] ([] Int))
      - - - expr: ([[(7), (13), (-10)]])
          - Right:
              expr: (Just [[7], [13], [-10]])
        - - expr: ([[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: (Just [])
        - - expr: ([[(7), (13), (-10)], []])
          - Right:
              expr: (Just [])
        - - expr: ([])
          - Right:
              expr: (Just [[]])
    - - - type: '[] (Maybe Char)'
        - type: Maybe (Maybe ([] Char))
      - - - expr: ([])
          - Right:
              expr: (Just (Just ""))
        - - expr: ([Just '7'])
          - Right:
              expr: (Just (Just "7"))
        - - expr: ([Just '7', Nothing])
          - Right:
              expr: (Just Nothing)
    - - - type: Maybe ([] Char)
        - type: Maybe ([] (Maybe Char))
      - - - expr: (Just ['7', '4', '6'])
          - Right:
              expr: (Just [Just '7', Just '4', Just '6'])
        - - expr: (Nothing)
          - Right:
              expr: (Just [Nothing])
    - - - type: '[] ([] Char)'
        - type: Maybe ([] ([] Char))
      - - - expr: ([['7', '4', '6'], []])
          - Right:
              expr: (Just [])
        - - expr: ([['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: (Just [])
        - - expr: ([])
          - Right:
              expr: (Just [""])
        - - expr: ([['7', '4', '6']])
          - Right:
              expr: (Just ["7", "4", "6"])
- - expr: |-
      let just = Just
          compose = (.)
          prepend = (:)
        in compose prepend just
  - - - - type: (Char, [Maybe Char])
        - type: '[Maybe Char]'
      - - - expr: ('7', [Just '7', Nothing])
          - Right:
              expr: '[Just ''7'', Just ''7'', Nothing]'
        - - expr: ('2', [Just '7', Nothing])
          - Right:
              expr: '[Just ''2'', Just ''7'', Nothing]'
        - - expr: ('8', [Just '7'])
          - Right:
              expr: '[Just ''8'', Just ''7'']'
        - - expr: ('0', [])
          - Right:
              expr: '[Just ''0'']'
        - - expr: ('5', [])
          - Right:
              expr: '[Just ''5'']'
        - - expr: ('2', [Just '7'])
          - Right:
              expr: '[Just ''2'', Just ''7'']'
        - - expr: ('4', [Just '7'])
          - Right:
              expr: '[Just ''4'', Just ''7'']'
        - - expr: ('7', [])
          - Right:
              expr: '[Just ''7'']'
    - - - type: (Int, [Maybe Int])
        - type: '[Maybe Int]'
      - - - expr: ((12), [Just (7), Nothing])
          - Right:
              expr: '[Just 12, Just 7, Nothing]'
        - - expr: ((19), [])
          - Right:
              expr: '[Just 19]'
        - - expr: ((19), [Just (7), Nothing])
          - Right:
              expr: '[Just 19, Just 7, Nothing]'
        - - expr: ((7), [Just (7), Nothing])
          - Right:
              expr: '[Just 7, Just 7, Nothing]'
        - - expr: ((14), [Just (7)])
          - Right:
              expr: '[Just 14, Just 7]'
        - - expr: ((13), [Just (7), Nothing])
          - Right:
              expr: '[Just 13, Just 7, Nothing]'
        - - expr: ((20), [Just (7)])
          - Right:
              expr: '[Just 20, Just 7]'
        - - expr: ((13), [Just (7)])
          - Right:
              expr: '[Just 13, Just 7]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend sequence
  - - - - type: (Maybe (Maybe Char), [Maybe (Maybe Char)])
        - type: '[Maybe (Maybe Char)]'
      - - - expr: (Nothing, [Just (Just '7'), Nothing])
          - Right:
              expr: '[Just Nothing, Just (Just ''7''), Nothing]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[Just Nothing]'
        - - expr: (Just (Just '7'), [Just (Just '7'), Nothing])
          - Right:
              expr: '[Just (Just ''7''), Just (Just ''7''), Nothing]'
        - - expr: (Nothing, [Just (Just '7')])
          - Right:
              expr: '[Just Nothing, Just (Just ''7'')]'
        - - expr: (Just (Just '7'), [])
          - Right:
              expr: '[Just (Just ''7'')]'
        - - expr: (Just (Just '7'), [Just (Just '7')])
          - Right:
              expr: '[Just (Just ''7''), Just (Just ''7'')]'
    - - - type: (Maybe (Maybe Int), [Maybe (Maybe Int)])
        - type: '[Maybe (Maybe Int)]'
      - - - expr: (Nothing, [])
          - Right:
              expr: '[Just Nothing]'
        - - expr: (Just (Just (7)), [Just (Just (7)), Nothing])
          - Right:
              expr: '[Just (Just 7), Just (Just 7), Nothing]'
        - - expr: (Just (Just (7)), [])
          - Right:
              expr: '[Just (Just 7)]'
        - - expr: (Nothing, [Just (Just (7)), Nothing])
          - Right:
              expr: '[Just Nothing, Just (Just 7), Nothing]'
        - - expr: (Nothing, [Just (Just (7))])
          - Right:
              expr: '[Just Nothing, Just (Just 7)]'
        - - expr: (Just (Just (7)), [Just (Just (7))])
          - Right:
              expr: '[Just (Just 7), Just (Just 7)]'
    - - - type: (Maybe ([] Char), [[] (Maybe Char)])
        - type: '[[] (Maybe Char)]'
      - - - expr: (Just ['7', '4', '6'], [[Just '7', Nothing], []])
          - Right:
              expr: '[[Just ''7'', Just ''4'', Just ''6''], [Just ''7'', Nothing],
                []]'
        - - expr: (Nothing, [[Just '7', Nothing], []])
          - Right:
              expr: '[[Nothing], [Just ''7'', Nothing], []]'
        - - expr: (Just ['7', '4', '6'], [[Just '7', Nothing]])
          - Right:
              expr: '[[Just ''7'', Just ''4'', Just ''6''], [Just ''7'', Nothing]]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[[Nothing]]'
        - - expr: (Nothing, [[Just '7', Nothing]])
          - Right:
              expr: '[[Nothing], [Just ''7'', Nothing]]'
        - - expr: (Just ['7', '4', '6'], [])
          - Right:
              expr: '[[Just ''7'', Just ''4'', Just ''6'']]'
    - - - type: (Maybe ([] Int), [[] (Maybe Int)])
        - type: '[[] (Maybe Int)]'
      - - - expr: (Just [(7), (13), (-10)], [])
          - Right:
              expr: '[[Just 7, Just 13, Just (-10)]]'
        - - expr: (Just [(7), (13), (-10)], [[Just (7), Nothing]])
          - Right:
              expr: '[[Just 7, Just 13, Just (-10)], [Just 7, Nothing]]'
        - - expr: (Nothing, [[Just (7), Nothing]])
          - Right:
              expr: '[[Nothing], [Just 7, Nothing]]'
        - - expr: (Just [(7), (13), (-10)], [[Just (7), Nothing], []])
          - Right:
              expr: '[[Just 7, Just 13, Just (-10)], [Just 7, Nothing], []]'
        - - expr: (Nothing, [[Just (7), Nothing], []])
          - Right:
              expr: '[[Nothing], [Just 7, Nothing], []]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[[Nothing]]'
- - expr: let compose = (.) in compose zip
  - - - - type: ((Char -> [Char]), Char, [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7', [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5', [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '2', [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '5', [(7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty maybe, '5',
               [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, '6',
               [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty fromEnum, '8', [(7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '5', [])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Int]), Int, [Int])
        - type: '[(Int, Int)]'
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (19), [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (7), [(7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (0), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               (-10), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (7), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (19), [(7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (13), [(7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (0), [])
          - Right:
              expr: '[]'
    - - - type: ((Int -> [Char]), Int, [Int])
        - type: '[(Char, Int)]'
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7), [(7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.) in compose mempty maybe, (7),
               [(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (0), [(7)])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (19), [])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (7), [(7), (13)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (19), [(7)])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (13), [])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, (19), [(7), (13)])
          - Right:
              expr: '[]'
    - - - type: ((Char -> [Char]), Char, [Char])
        - type: '[(Char, Char)]'
      - - - expr: (let compose = (.) in compose mempty maybe, '8', ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '0', ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (let compose = (.) in compose mempty maybe, '7', ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '6', ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '0', ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '6', ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '6', ['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               '8', ['7', '4', '6'])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose fmap elem
  - - - - type: (Int, [] (Maybe Int))
        - type: '[] Bool'
      - - - expr: ((7), [Just (7)])
          - Right:
              expr: '[True]'
        - - expr: ((19), [Just (7)])
          - Right:
              expr: '[False]'
        - - expr: ((12), [Just (7), Nothing])
          - Right:
              expr: '[False, False]'
        - - expr: ((19), [Just (7), Nothing])
          - Right:
              expr: '[False, False]'
        - - expr: ((13), [])
          - Right:
              expr: '[]'
        - - expr: ((14), [Just (7)])
          - Right:
              expr: '[False]'
        - - expr: ((14), [Just (7), Nothing])
          - Right:
              expr: '[False, False]'
        - - expr: ((0), [Just (7)])
          - Right:
              expr: '[False]'
    - - - type: (Char, [] (Maybe Char))
        - type: '[] Bool'
      - - - expr: ('6', [Just '7', Nothing])
          - Right:
              expr: '[False, False]'
        - - expr: ('7', [])
          - Right:
              expr: '[]'
        - - expr: ('7', [Just '7', Nothing])
          - Right:
              expr: '[True, False]'
        - - expr: ('2', [Just '7', Nothing])
          - Right:
              expr: '[False, False]'
        - - expr: ('5', [Just '7', Nothing])
          - Right:
              expr: '[False, False]'
        - - expr: ('2', [Just '7'])
          - Right:
              expr: '[False]'
        - - expr: ('0', [Just '7', Nothing])
          - Right:
              expr: '[False, False]'
        - - expr: ('5', [])
          - Right:
              expr: '[]'
    - - - type: (Int, Maybe (Maybe Int))
        - type: Maybe Bool
      - - - expr: ((13), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((12), Just (Just (7)))
          - Right:
              expr: (Just False)
        - - expr: ((7), Just (Just (7)))
          - Right:
              expr: (Just True)
        - - expr: ((14), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((14), Just (Just (7)))
          - Right:
              expr: (Just False)
        - - expr: ((0), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((13), Just (Just (7)))
          - Right:
              expr: (Just False)
        - - expr: ((19), Just (Just (7)))
          - Right:
              expr: (Just False)
    - - - type: (Char, Maybe ([] Char))
        - type: Maybe Bool
      - - - expr: ('7', Nothing)
          - Right:
              expr: Nothing
        - - expr: ('6', Just ['7', '4', '6'])
          - Right:
              expr: (Just True)
        - - expr: ('0', Nothing)
          - Right:
              expr: Nothing
        - - expr: ('8', Just ['7', '4', '6'])
          - Right:
              expr: (Just False)
        - - expr: ('5', Nothing)
          - Right:
              expr: Nothing
        - - expr: ('8', Nothing)
          - Right:
              expr: Nothing
        - - expr: ('2', Nothing)
          - Right:
              expr: Nothing
        - - expr: ('0', Just ['7', '4', '6'])
          - Right:
              expr: (Just False)
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend fromEnum
  - - - - type: (Int, [Int])
        - type: '[Int]'
      - - - expr: ((7), [(7), (13)])
          - Right:
              expr: '[7, 7, 13]'
        - - expr: ((-10), [(7), (13)])
          - Right:
              expr: '[-10, 7, 13]'
        - - expr: ((14), [(7), (13)])
          - Right:
              expr: '[14, 7, 13]'
        - - expr: ((13), [])
          - Right:
              expr: '[13]'
        - - expr: ((-10), [])
          - Right:
              expr: '[-10]'
        - - expr: ((7), [(7)])
          - Right:
              expr: '[7, 7]'
        - - expr: ((14), [])
          - Right:
              expr: '[14]'
        - - expr: ((20), [(7)])
          - Right:
              expr: '[20, 7]'
    - - - type: (Char, [Int])
        - type: '[Int]'
      - - - expr: ('5', [(7), (13), (-10)])
          - Right:
              expr: '[53, 7, 13, -10]'
        - - expr: ('0', [(7)])
          - Right:
              expr: '[48, 7]'
        - - expr: ('2', [(7)])
          - Right:
              expr: '[50, 7]'
        - - expr: ('8', [(7), (13), (-10)])
          - Right:
              expr: '[56, 7, 13, -10]'
        - - expr: ('7', [(7), (13)])
          - Right:
              expr: '[55, 7, 13]'
        - - expr: ('5', [(7)])
          - Right:
              expr: '[53, 7]'
        - - expr: ('7', [(7), (13), (-10)])
          - Right:
              expr: '[55, 7, 13, -10]'
        - - expr: ('7', [(7)])
          - Right:
              expr: '[55, 7]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend
  - - - - type: ((Char -> Char), Char, [Char])
        - type: '[Char]'
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '5', ['7'])
          - Right:
              expr: '"57"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', ['7', '4'])
          - Right:
              expr: '"574"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', ['7', '4'])
          - Right:
              expr: '"874"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', [])
          - Right:
              expr: '"7"'
        - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, '4',
               ['7', '4', '6'])
          - Right:
              expr: '"4746"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', ['7'])
          - Right:
              expr: '"07"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', ['7', '4'])
          - Right:
              expr: '"674"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', [])
          - Right:
              expr: '"5"'
    - - - type: ((Int -> Char), Int, [Char])
        - type: '[Char]'
      - - - expr: (toEnum, (0), ['7', '4'])
          - Right:
              expr: '"\NUL74"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (13), ['7', '4'])
          - Right:
              expr: '"\r74"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (19), ['7', '4', '6'])
          - Right:
              expr: '"\DC3746"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (7), ['7', '4'])
          - Right:
              expr: '"\a74"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (12), ['7'])
          - Right:
              expr: '"\f7"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (14), ['7', '4'])
          - Right:
              expr: '"\SO74"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (19), ['7'])
          - Right:
              expr: '"\DC37"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (7), ['7'])
          - Right:
              expr: '"\a7"'
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
      - - - expr: |-
              (let compose = (.) in compose toEnum fromEnum, '8',
               [(7), (13), (-10)])
          - Right:
              expr: '[56, 7, 13, -10]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', [])
          - Right:
              expr: '[54]'
        - - expr: (fromEnum, '6', [])
          - Right:
              expr: '[54]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', [(7), (13)])
          - Right:
              expr: '[56, 7, 13]'
        - - expr: (fromEnum, '8', [(7), (13), (-10)])
          - Right:
              expr: '[56, 7, 13, -10]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', [(7), (13)])
          - Right:
              expr: '[54, 7, 13]'
        - - expr: (fromEnum, '5', [(7), (13)])
          - Right:
              expr: '[53, 7, 13]'
        - - expr: (fromEnum, '7', [(7), (13)])
          - Right:
              expr: '[55, 7, 13]'
    - - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
      - - - expr: (let compose = (.) in compose toEnum toEnum, (20), [(7), (13)])
          - Right:
              expr: '[20, 7, 13]'
        - - expr: (fromEnum, (14), [(7), (13), (-10)])
          - Right:
              expr: '[14, 7, 13, -10]'
        - - expr: (let compose = (.) in compose toEnum toEnum, (0), [(7)])
          - Right:
              expr: '[0, 7]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (20), [])
          - Right:
              expr: '[20]'
        - - expr: (toEnum, (12), [(7), (13), (-10)])
          - Right:
              expr: '[12, 7, 13, -10]'
        - - expr: (fromEnum, (19), [(7), (13)])
          - Right:
              expr: '[19, 7, 13]'
        - - expr: (fromEnum, (12), [(7), (13), (-10)])
          - Right:
              expr: '[12, 7, 13, -10]'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (12), [])
          - Right:
              expr: '[12]'
- - expr: let compose = (.) in compose unzip sequenceA
  - - - - type: (Char, [Int])
        - type: ([Char], [Int])
      - - - expr: (('6', [(7), (13)]))
          - Right:
              expr: ("66", [7, 13])
        - - expr: (('7', [(7), (13), (-10)]))
          - Right:
              expr: ("777", [7, 13, -10])
        - - expr: (('4', []))
          - Right:
              expr: ("", [])
        - - expr: (('8', [(7)]))
          - Right:
              expr: ("8", [7])
    - - - type: (Int, [Int])
        - type: ([Int], [Int])
      - - - expr: (((7), [(7), (13), (-10)]))
          - Right:
              expr: ([7, 7, 7], [7, 13, -10])
        - - expr: (((13), []))
          - Right:
              expr: ([], [])
        - - expr: (((14), [(7)]))
          - Right:
              expr: ([14], [7])
        - - expr: (((-10), [(7), (13)]))
          - Right:
              expr: ([-10, -10], [7, 13])
    - - - type: (Int, [Char])
        - type: ([Int], [Char])
      - - - expr: (((-10), ['7', '4']))
          - Right:
              expr: ([-10, -10], "74")
        - - expr: (((14), ['7']))
          - Right:
              expr: ([14], "7")
        - - expr: (((7), ['7', '4', '6']))
          - Right:
              expr: ([7, 7, 7], "746")
        - - expr: (((13), []))
          - Right:
              expr: ([], "")
    - - - type: (Char, [Char])
        - type: ([Char], [Char])
      - - - expr: (('6', ['7', '4']))
          - Right:
              expr: ("66", "74")
        - - expr: (('8', ['7']))
          - Right:
              expr: ("8", "7")
        - - expr: (('7', ['7', '4', '6']))
          - Right:
              expr: ("777", "746")
        - - expr: (('4', []))
          - Right:
              expr: ("", "")
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose conc prepend
  - - - - type: (Int, ([Int] -> [Int]), [Int])
        - type: '[Int]'
      - - - expr: |-
              ((12),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [(7)])
          - Right:
              expr: '[12, 7]'
        - - expr: ((0), let compose = (.) in compose mempty zip, [(7)])
          - Right:
              expr: '[0, 7]'
        - - expr: |-
              ((-10),
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               [])
          - Right:
              expr: '[-10]'
        - - expr: |-
              ((20),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [(7)])
          - Right:
              expr: '[20, 7]'
        - - expr: |-
              ((0),
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [(7), (13)])
          - Right:
              expr: '[0, 7, 13]'
        - - expr: |-
              ((12),
               let zero = 0
                   prepend = (:)
                 in prepend zero,
               [(7), (13), (-10)])
          - Right:
              expr: '[12, 7, 13, -10, 0, 7, 13, -10]'
        - - expr: ((13), let compose = (.) in compose mempty length, [(7), (13)])
          - Right:
              expr: '[13, 7, 13]'
        - - expr: ((14), let conc = (<>) in conc mempty, [(7), (13)])
          - Right:
              expr: '[14, 7, 13, 7, 13]'
    - - - type: (Char, ([Char] -> [Char]), [Char])
        - type: '[Char]'
      - - - expr: ('8', let compose = (.) in compose mempty length, ['7', '4'])
          - Right:
              expr: '"874"'
        - - expr: ('2', let conc = (<>) in conc mempty, [])
          - Right:
              expr: '"2"'
        - - expr: ('4', let conc = (<>) in conc mempty, ['7', '4'])
          - Right:
              expr: '"47474"'
        - - expr: |-
              ('7',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['7'])
          - Right:
              expr: '"77"'
        - - expr: ('5', let conc = (<>) in conc mempty, ['7'])
          - Right:
              expr: '"577"'
        - - expr: ('7', let conc = (<>) in conc mempty, ['7', '4'])
          - Right:
              expr: '"77474"'
        - - expr: |-
              ('5',
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               ['7', '4'])
          - Right:
              expr: '"574"'
        - - expr: |-
              ('6',
               let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [])
          - Right:
              expr: '"6"'
- - expr: let compose = (.) in compose sequence sequence
  - - - - type: Maybe ([] Int)
        - type: Maybe ([] Int)
      - - - expr: (Nothing)
          - Right:
              expr: Nothing
        - - expr: (Just [(7), (13), (-10)])
          - Right:
              expr: (Just [7, 13, -10])
    - - - type: '[] ([] Char)'
        - type: '[] ([] Char)'
      - - - expr: ([['7', '4', '6'], []])
          - Right:
              expr: '[""]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([['7', '4', '6']])
          - Right:
              expr: '["746"]'
        - - expr: ([['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '[""]'
    - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
      - - - expr: (Nothing)
          - Right:
              expr: Nothing
        - - expr: (Just (Just '7'))
          - Right:
              expr: (Just (Just '7'))
    - - - type: '[] (Maybe Char)'
        - type: '[] (Maybe Char)'
      - - - expr: ([Just '7', Nothing])
          - Right:
              expr: '[Nothing]'
        - - expr: ([Just '7'])
          - Right:
              expr: '[Just ''7'']'
        - - expr: ([])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose unzip mempty
  - - - - type: Int
        - type: ([Char], [Char])
      - - - expr: ((19))
          - Right:
              expr: ("", "")
        - - expr: ((20))
          - Right:
              expr: ("", "")
        - - expr: ((13))
          - Right:
              expr: ("", "")
        - - expr: ((12))
          - Right:
              expr: ("", "")
        - - expr: ((7))
          - Right:
              expr: ("", "")
        - - expr: ((-10))
          - Right:
              expr: ("", "")
        - - expr: ((14))
          - Right:
              expr: ("", "")
        - - expr: ((0))
          - Right:
              expr: ("", "")
    - - - type: Char
        - type: ([Char], [Int])
      - - - expr: ('5')
          - Right:
              expr: ("", [])
        - - expr: ('8')
          - Right:
              expr: ("", [])
        - - expr: ('7')
          - Right:
              expr: ("", [])
        - - expr: ('4')
          - Right:
              expr: ("", [])
        - - expr: ('6')
          - Right:
              expr: ("", [])
        - - expr: ('2')
          - Right:
              expr: ("", [])
        - - expr: ('0')
          - Right:
              expr: ("", [])
    - - - type: Char
        - type: ([Int], [Int])
      - - - expr: ('0')
          - Right:
              expr: ([], [])
        - - expr: ('7')
          - Right:
              expr: ([], [])
        - - expr: ('6')
          - Right:
              expr: ([], [])
        - - expr: ('2')
          - Right:
              expr: ([], [])
        - - expr: ('5')
          - Right:
              expr: ([], [])
        - - expr: ('4')
          - Right:
              expr: ([], [])
        - - expr: ('8')
          - Right:
              expr: ([], [])
    - - - type: Int
        - type: ([Int], [Char])
      - - - expr: ((12))
          - Right:
              expr: ([], "")
        - - expr: ((20))
          - Right:
              expr: ([], "")
        - - expr: ((14))
          - Right:
              expr: ([], "")
        - - expr: ((13))
          - Right:
              expr: ([], "")
        - - expr: ((19))
          - Right:
              expr: ([], "")
        - - expr: ((-10))
          - Right:
              expr: ([], "")
        - - expr: ((0))
          - Right:
              expr: ([], "")
        - - expr: ((7))
          - Right:
              expr: ([], "")
- - expr: |-
      let conc = (<>)
          zero = 0
          prepend = (:)
        in conc (prepend zero)
  - - - - type: (([Int] -> [Int]), [Int])
        - type: '[Int]'
      - - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [(7), (13)])
          - Right:
              expr: '[0, 7, 13]'
        - - expr: (let compose = (.) in compose mempty maybe, [(7)])
          - Right:
              expr: '[0, 7]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [])
          - Right:
              expr: '[0]'
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               [])
          - Right:
              expr: '[0]'
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               [])
          - Right:
              expr: '[0]'
        - - expr: (let conc = (<>) in conc mempty, [(7), (13), (-10)])
          - Right:
              expr: '[0, 7, 13, -10, 7, 13, -10]'
        - - expr: (let compose = (.) in compose mempty zip, [(7), (13), (-10)])
          - Right:
              expr: '[0, 7, 13, -10]'
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               [(7), (13), (-10)])
          - Right:
              expr: '[0, 7, 13, -10]'
- - expr: let prepend = (:) in prepend (unzip mempty)
  - - - - type: '[([Char], [Char])]'
        - type: '[([Char], [Char])]'
      - - - expr: ([(['7', '4', '6'], ['7', '4', '6']), ([], [])])
          - Right:
              expr: '[("", ""), ("746", "746"), ("", "")]'
        - - expr: ([(['7', '4', '6'], ['7', '4', '6'])])
          - Right:
              expr: '[("", ""), ("746", "746")]'
        - - expr: |-
              ([(['7', '4', '6'], ['7', '4', '6']), ([], []),
                (['7', '4'], ['7', '4'])])
          - Right:
              expr: '[("", ""), ("746", "746"), ("", ""), ("74", "74")]'
        - - expr: ([])
          - Right:
              expr: '[("", "")]'
    - - - type: '[([Int], [Int])]'
        - type: '[([Int], [Int])]'
      - - - expr: ([([(7), (13), (-10)], [(7), (13), (-10)])])
          - Right:
              expr: '[([], []), ([7, 13, -10], [7, 13, -10])]'
        - - expr: ([([(7), (13), (-10)], [(7), (13), (-10)]), ([], [])])
          - Right:
              expr: '[([], []), ([7, 13, -10], [7, 13, -10]), ([], [])]'
        - - expr: |-
              ([([(7), (13), (-10)], [(7), (13), (-10)]), ([], []),
                ([(7), (13)], [(7), (13)])])
          - Right:
              expr: |-
                [([], []), ([7, 13, -10], [7, 13, -10]), ([], []),
                 ([7, 13], [7, 13])]
        - - expr: ([])
          - Right:
              expr: '[([], [])]'
    - - - type: '[([Char], [Int])]'
        - type: '[([Char], [Int])]'
      - - - expr: ([(['7', '4', '6'], [(7), (13), (-10)]), ([], [])])
          - Right:
              expr: '[("", []), ("746", [7, 13, -10]), ("", [])]'
        - - expr: |-
              ([(['7', '4', '6'], [(7), (13), (-10)]), ([], []),
                (['7', '4'], [(7), (13)])])
          - Right:
              expr: '[("", []), ("746", [7, 13, -10]), ("", []), ("74", [7, 13])]'
        - - expr: ([(['7', '4', '6'], [(7), (13), (-10)])])
          - Right:
              expr: '[("", []), ("746", [7, 13, -10])]'
        - - expr: ([])
          - Right:
              expr: '[("", [])]'
    - - - type: '[([Int], [Char])]'
        - type: '[([Int], [Char])]'
      - - - expr: |-
              ([([(7), (13), (-10)], ['7', '4', '6']), ([], []),
                ([(7), (13)], ['7', '4'])])
          - Right:
              expr: '[([], ""), ([7, 13, -10], "746"), ([], ""), ([7, 13], "74")]'
        - - expr: ([([(7), (13), (-10)], ['7', '4', '6'])])
          - Right:
              expr: '[([], ""), ([7, 13, -10], "746")]'
        - - expr: ([])
          - Right:
              expr: '[([], "")]'
        - - expr: ([([(7), (13), (-10)], ['7', '4', '6']), ([], [])])
          - Right:
              expr: '[([], ""), ([7, 13, -10], "746"), ([], "")]'
- - expr: let just = Just in just
  - - - - type: Char
        - type: Maybe Char
      - - - expr: ('7')
          - Right:
              expr: (Just '7')
        - - expr: ('4')
          - Right:
              expr: (Just '4')
        - - expr: ('6')
          - Right:
              expr: (Just '6')
        - - expr: ('0')
          - Right:
              expr: (Just '0')
        - - expr: ('2')
          - Right:
              expr: (Just '2')
        - - expr: ('5')
          - Right:
              expr: (Just '5')
        - - expr: ('8')
          - Right:
              expr: (Just '8')
    - - - type: Int
        - type: Maybe Int
      - - - expr: ((13))
          - Right:
              expr: (Just 13)
        - - expr: ((-10))
          - Right:
              expr: (Just (-10))
        - - expr: ((0))
          - Right:
              expr: (Just 0)
        - - expr: ((12))
          - Right:
              expr: (Just 12)
        - - expr: ((7))
          - Right:
              expr: (Just 7)
        - - expr: ((20))
          - Right:
              expr: (Just 20)
        - - expr: ((14))
          - Right:
              expr: (Just 14)
        - - expr: ((19))
          - Right:
              expr: (Just 19)
- - expr: |-
      let just = Just
          zero = 0
        in maybe (just zero)
  - - - - type: ((Int -> Maybe Int), Maybe Int)
        - type: Maybe Int
      - - - expr: (let just = Just in just, Just (7))
          - Right:
              expr: (Just 7)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (0))
          - Right:
              expr: (Just 0)
        - - expr: (let just = Just in just, Just (0))
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (19))
          - Right:
              expr: (Just 19)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               Nothing)
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just (19))
          - Right:
              expr: (Just 19)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just toEnum,
               Just (7))
          - Right:
              expr: (Just 7)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just (7))
          - Right:
              expr: (Just 7)
    - - - type: ((Char -> Maybe Int), Maybe Char)
        - type: Maybe Int
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '0')
          - Right:
              expr: (Just 48)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Nothing)
          - Right:
              expr: (Just 0)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '7')
          - Right:
              expr: (Just 55)
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose just fromEnum,
               Just '5')
          - Right:
              expr: (Just 53)
- - expr: let prepend = (:) in maybe sequence prepend
  - - - - type: (Maybe [Char], [[Char]])
        - type: '[[Char]]'
      - - - expr: (Just ['7', '4', '6'], [['7', '4', '6']])
          - Right:
              expr: '["746", "746"]'
        - - expr: (Nothing, [['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '[]'
        - - expr: (Just ['7', '4', '6'], [['7', '4', '6'], []])
          - Right:
              expr: '["746", "746", ""]'
        - - expr: (Just ['7', '4', '6'], [])
          - Right:
              expr: '["746"]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[""]'
        - - expr: (Nothing, [['7', '4', '6']])
          - Right:
              expr: '["7", "4", "6"]'
        - - expr: (Nothing, [['7', '4', '6'], []])
          - Right:
              expr: '[]'
        - - expr: (Just ['7', '4', '6'], [['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '["746", "746", "", "74"]'
    - - - type: (Maybe [Int], [[Int]])
        - type: '[[Int]]'
      - - - expr: (Just [(7), (13), (-10)], [[(7), (13), (-10)]])
          - Right:
              expr: '[[7, 13, -10], [7, 13, -10]]'
        - - expr: (Nothing, [[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [[(7), (13), (-10)]])
          - Right:
              expr: '[[7], [13], [-10]]'
        - - expr: (Nothing, [[(7), (13), (-10)], []])
          - Right:
              expr: '[]'
        - - expr: (Just [(7), (13), (-10)], [[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[[7, 13, -10], [7, 13, -10], [], [7, 13]]'
        - - expr: (Just [(7), (13), (-10)], [])
          - Right:
              expr: '[[7, 13, -10]]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[[]]'
        - - expr: (Just [(7), (13), (-10)], [[(7), (13), (-10)], []])
          - Right:
              expr: '[[7, 13, -10], [7, 13, -10], []]'
- - expr: let compose = (.) in compose elem unzip
  - - - - type: ([(Int, Int)], [] ([Int], [Int]))
        - type: Bool
      - - - expr: ([((7), (7)), ((13), (13)), ((-10), (-10))], [])
          - Right:
              expr: 'False'
        - - expr: ([((7), (7))], [([(7), (13), (-10)], [(7), (13), (-10)])])
          - Right:
              expr: 'False'
        - - expr: |-
              ([((7), (7)), ((13), (13))],
               [([(7), (13), (-10)], [(7), (13), (-10)]), ([], []),
                ([(7), (13)], [(7), (13)])])
          - Right:
              expr: 'True'
        - - expr: |-
              ([((7), (7)), ((13), (13)), ((-10), (-10))],
               [([(7), (13), (-10)], [(7), (13), (-10)]), ([], [])])
          - Right:
              expr: 'True'
        - - expr: |-
              ([((7), (7)), ((13), (13)), ((-10), (-10))],
               [([(7), (13), (-10)], [(7), (13), (-10)]), ([], []),
                ([(7), (13)], [(7), (13)])])
          - Right:
              expr: 'True'
        - - expr: |-
              ([((7), (7)), ((13), (13))],
               [([(7), (13), (-10)], [(7), (13), (-10)])])
          - Right:
              expr: 'False'
        - - expr: |-
              ([((7), (7)), ((13), (13)), ((-10), (-10))],
               [([(7), (13), (-10)], [(7), (13), (-10)])])
          - Right:
              expr: 'True'
        - - expr: ([((7), (7))], [])
          - Right:
              expr: 'False'
    - - - type: ([(Int, Char)], Maybe ([Int], [Char]))
        - type: Bool
      - - - expr: |-
              ([((7), '7'), ((13), '4'), ((-10), '6')],
               Just ([(7), (13), (-10)], ['7', '4', '6']))
          - Right:
              expr: 'True'
        - - expr: ([((7), '7'), ((13), '4')], Nothing)
          - Right:
              expr: 'False'
        - - expr: |-
              ([((7), '7'), ((13), '4')],
               Just ([(7), (13), (-10)], ['7', '4', '6']))
          - Right:
              expr: 'False'
        - - expr: ([], Just ([(7), (13), (-10)], ['7', '4', '6']))
          - Right:
              expr: 'False'
        - - expr: ([((7), '7')], Nothing)
          - Right:
              expr: 'False'
        - - expr: ([((7), '7')], Just ([(7), (13), (-10)], ['7', '4', '6']))
          - Right:
              expr: 'False'
        - - expr: ([], Nothing)
          - Right:
              expr: 'False'
        - - expr: ([((7), '7'), ((13), '4'), ((-10), '6')], Nothing)
          - Right:
              expr: 'False'
    - - - type: ([(Int, Int)], Maybe ([Int], [Int]))
        - type: Bool
      - - - expr: |-
              ([((7), (7)), ((13), (13)), ((-10), (-10))],
               Just ([(7), (13), (-10)], [(7), (13), (-10)]))
          - Right:
              expr: 'True'
        - - expr: ([((7), (7))], Nothing)
          - Right:
              expr: 'False'
        - - expr: |-
              ([((7), (7)), ((13), (13))],
               Just ([(7), (13), (-10)], [(7), (13), (-10)]))
          - Right:
              expr: 'False'
        - - expr: ([((7), (7))], Just ([(7), (13), (-10)], [(7), (13), (-10)]))
          - Right:
              expr: 'False'
        - - expr: ([((7), (7)), ((13), (13)), ((-10), (-10))], Nothing)
          - Right:
              expr: 'False'
        - - expr: ([], Just ([(7), (13), (-10)], [(7), (13), (-10)]))
          - Right:
              expr: 'False'
        - - expr: ([], Nothing)
          - Right:
              expr: 'False'
        - - expr: ([((7), (7)), ((13), (13))], Nothing)
          - Right:
              expr: 'False'
    - - - type: ([(Char, Char)], Maybe ([Char], [Char]))
        - type: Bool
      - - - expr: ([('7', '7')], Nothing)
          - Right:
              expr: 'False'
        - - expr: ([('7', '7'), ('4', '4')], Just (['7', '4', '6'], ['7', '4', '6']))
          - Right:
              expr: 'False'
        - - expr: ([('7', '7'), ('4', '4'), ('6', '6')], Nothing)
          - Right:
              expr: 'False'
        - - expr: |-
              ([('7', '7'), ('4', '4'), ('6', '6')],
               Just (['7', '4', '6'], ['7', '4', '6']))
          - Right:
              expr: 'True'
        - - expr: ([], Just (['7', '4', '6'], ['7', '4', '6']))
          - Right:
              expr: 'False'
        - - expr: ([('7', '7')], Just (['7', '4', '6'], ['7', '4', '6']))
          - Right:
              expr: 'False'
        - - expr: ([('7', '7'), ('4', '4')], Nothing)
          - Right:
              expr: 'False'
        - - expr: ([], Nothing)
          - Right:
              expr: 'False'
- - expr: let compose = (.) in compose toEnum fromEnum
  - - - - type: Char
        - type: Int
      - - - expr: ('4')
          - Right:
              expr: '52'
        - - expr: ('7')
          - Right:
              expr: '55'
        - - expr: ('0')
          - Right:
              expr: '48'
        - - expr: ('6')
          - Right:
              expr: '54'
        - - expr: ('5')
          - Right:
              expr: '53'
        - - expr: ('8')
          - Right:
              expr: '56'
        - - expr: ('2')
          - Right:
              expr: '50'
    - - - type: Int
        - type: Int
      - - - expr: ((20))
          - Right:
              expr: '20'
        - - expr: ((13))
          - Right:
              expr: '13'
        - - expr: ((-10))
          - Right:
              expr: (-10)
        - - expr: ((19))
          - Right:
              expr: '19'
        - - expr: ((14))
          - Right:
              expr: '14'
        - - expr: ((7))
          - Right:
              expr: '7'
        - - expr: ((0))
          - Right:
              expr: '0'
        - - expr: ((12))
          - Right:
              expr: '12'
    - - - type: Char
        - type: Char
      - - - expr: ('0')
          - Right:
              expr: '''0'''
        - - expr: ('7')
          - Right:
              expr: '''7'''
        - - expr: ('4')
          - Right:
              expr: '''4'''
        - - expr: ('8')
          - Right:
              expr: '''8'''
        - - expr: ('2')
          - Right:
              expr: '''2'''
        - - expr: ('5')
          - Right:
              expr: '''5'''
        - - expr: ('6')
          - Right:
              expr: '''6'''
    - - - type: Int
        - type: Char
      - - - expr: ((20))
          - Right:
              expr: '''\DC4'''
        - - expr: ((7))
          - Right:
              expr: '''\a'''
        - - expr: ((12))
          - Right:
              expr: '''\f'''
        - - expr: ((0))
          - Right:
              expr: '''\NUL'''
        - - expr: ((-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: ((14))
          - Right:
              expr: '''\SO'''
        - - expr: ((19))
          - Right:
              expr: '''\DC3'''
        - - expr: ((13))
          - Right:
              expr: '''\r'''
- - expr: let compose = (.) in compose maybe fromEnum
  - - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: ((19), toEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((12), fromEnum, Just (0))
          - Right:
              expr: '0'
        - - expr: ((19), let compose = (.) in compose toEnum toEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((20), let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: '20'
        - - expr: ((19), fromEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ((13), let compose = (.) in compose toEnum toEnum, Just (0))
          - Right:
              expr: '0'
        - - expr: ((19), let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '19'
        - - expr: ((-10), toEnum, Nothing)
          - Right:
              expr: (-10)
    - - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
      - - - expr: ((20), let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ((-10), let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: ((14), let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ((7), let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((14), let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((7), fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ((12), fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ((12), let compose = (.) in compose toEnum fromEnum, Just '5')
          - Right:
              expr: '53'
    - - - type: (Char, (Int -> Int), Maybe Int)
        - type: Int
      - - - expr: ('0', toEnum, Just (0))
          - Right:
              expr: '0'
        - - expr: ('7', fromEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ('7', let compose = (.) in compose toEnum fromEnum, Just (0))
          - Right:
              expr: '0'
        - - expr: ('5', let compose = (.) in compose toEnum fromEnum, Nothing)
          - Right:
              expr: '53'
        - - expr: ('0', let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: '48'
        - - expr: ('4', let compose = (.) in compose toEnum toEnum, Nothing)
          - Right:
              expr: '52'
        - - expr: ('5', let compose = (.) in compose toEnum fromEnum, Just (7))
          - Right:
              expr: '7'
        - - expr: ('2', fromEnum, Just (19))
          - Right:
              expr: '19'
    - - - type: (Char, (Char -> Int), Maybe Char)
        - type: Int
      - - - expr: ('4', fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ('7', let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ('7', fromEnum, Just '5')
          - Right:
              expr: '53'
        - - expr: ('5', fromEnum, Nothing)
          - Right:
              expr: '53'
        - - expr: ('0', let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ('8', fromEnum, Just '0')
          - Right:
              expr: '48'
        - - expr: ('4', let compose = (.) in compose toEnum fromEnum, Just '7')
          - Right:
              expr: '55'
        - - expr: ('8', let compose = (.) in compose toEnum fromEnum, Just '0')
          - Right:
              expr: '48'
- - expr: |-
      let zero = 0
          prepend = (:)
        in prepend zero
  - - - - type: '[Int]'
        - type: '[Int]'
      - - - expr: ([(7), (13), (-10)])
          - Right:
              expr: '[0, 7, 13, -10]'
        - - expr: ([(7)])
          - Right:
              expr: '[0, 7]'
        - - expr: ([(7), (13)])
          - Right:
              expr: '[0, 7, 13]'
        - - expr: ([])
          - Right:
              expr: '[0]'
- - expr: elem
  - - - - type: (Int, [] Int)
        - type: Bool
      - - - expr: ((12), [(7)])
          - Right:
              expr: 'False'
        - - expr: ((19), [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: ((7), [(7)])
          - Right:
              expr: 'True'
        - - expr: ((7), [(7), (13)])
          - Right:
              expr: 'True'
        - - expr: ((14), [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: ((7), [(7), (13), (-10)])
          - Right:
              expr: 'True'
        - - expr: ((19), [(7), (13)])
          - Right:
              expr: 'False'
        - - expr: ((7), [])
          - Right:
              expr: 'False'
    - - - type: (Int, Maybe Int)
        - type: Bool
      - - - expr: ((13), Just (0))
          - Right:
              expr: 'False'
        - - expr: ((0), Just (19))
          - Right:
              expr: 'False'
        - - expr: ((12), Just (0))
          - Right:
              expr: 'False'
        - - expr: ((0), Just (0))
          - Right:
              expr: 'True'
        - - expr: ((12), Just (19))
          - Right:
              expr: 'False'
        - - expr: ((0), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((14), Just (7))
          - Right:
              expr: 'False'
        - - expr: ((0), Just (7))
          - Right:
              expr: 'False'
    - - - type: (Char, [] Char)
        - type: Bool
      - - - expr: ('4', [])
          - Right:
              expr: 'False'
        - - expr: ('4', ['7', '4'])
          - Right:
              expr: 'True'
        - - expr: ('2', ['7', '4'])
          - Right:
              expr: 'False'
        - - expr: ('5', ['7'])
          - Right:
              expr: 'False'
        - - expr: ('6', [])
          - Right:
              expr: 'False'
        - - expr: ('4', ['7', '4', '6'])
          - Right:
              expr: 'True'
        - - expr: ('8', ['7'])
          - Right:
              expr: 'False'
        - - expr: ('0', ['7'])
          - Right:
              expr: 'False'
    - - - type: (Char, Maybe Char)
        - type: Bool
      - - - expr: ('2', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('2', Just '5')
          - Right:
              expr: 'False'
        - - expr: ('4', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('5', Just '7')
          - Right:
              expr: 'False'
        - - expr: ('7', Just '5')
          - Right:
              expr: 'False'
        - - expr: ('2', Just '0')
          - Right:
              expr: 'False'
        - - expr: ('6', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('4', Just '5')
          - Right:
              expr: 'False'
- - expr: let compose = (.) in compose elem length
  - - - - type: ([] Int, Maybe Int)
        - type: Bool
      - - - expr: ([(7), (13), (-10)], Just (19))
          - Right:
              expr: 'False'
        - - expr: ([(7)], Just (19))
          - Right:
              expr: 'False'
        - - expr: ([(7), (13)], Just (7))
          - Right:
              expr: 'False'
        - - expr: ([(7)], Just (0))
          - Right:
              expr: 'False'
        - - expr: ([(7), (13), (-10)], Just (7))
          - Right:
              expr: 'False'
        - - expr: ([(7), (13)], Just (19))
          - Right:
              expr: 'False'
        - - expr: ([(7), (13)], Just (0))
          - Right:
              expr: 'False'
        - - expr: ([], Nothing)
          - Right:
              expr: 'False'
    - - - type: ([] Char, Maybe Int)
        - type: Bool
      - - - expr: (['7'], Just (19))
          - Right:
              expr: 'False'
        - - expr: (['7', '4'], Just (0))
          - Right:
              expr: 'False'
        - - expr: (['7', '4', '6'], Just (7))
          - Right:
              expr: 'False'
        - - expr: ([], Just (7))
          - Right:
              expr: 'False'
        - - expr: ([], Nothing)
          - Right:
              expr: 'False'
        - - expr: (['7', '4', '6'], Just (0))
          - Right:
              expr: 'False'
        - - expr: (['7'], Just (7))
          - Right:
              expr: 'False'
        - - expr: (['7', '4'], Nothing)
          - Right:
              expr: 'False'
    - - - type: (Maybe Int, [] Int)
        - type: Bool
      - - - expr: (Just (0), [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: (Nothing, [])
          - Right:
              expr: 'False'
        - - expr: (Just (19), [(7), (13)])
          - Right:
              expr: 'False'
        - - expr: (Just (0), [(7)])
          - Right:
              expr: 'False'
        - - expr: (Just (19), [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: (Nothing, [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: (Nothing, [(7), (13)])
          - Right:
              expr: 'False'
        - - expr: (Just (7), [])
          - Right:
              expr: 'False'
    - - - type: ([] Int, [] Int)
        - type: Bool
      - - - expr: ([(7), (13), (-10)], [(7)])
          - Right:
              expr: 'False'
        - - expr: ([], [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: ([(7)], [(7), (13)])
          - Right:
              expr: 'False'
        - - expr: ([(7), (13), (-10)], [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: ([(7)], [])
          - Right:
              expr: 'False'
        - - expr: ([(7)], [(7), (13), (-10)])
          - Right:
              expr: 'False'
        - - expr: ([(7), (13)], [(7)])
          - Right:
              expr: 'False'
        - - expr: ([(7)], [(7)])
          - Right:
              expr: 'False'
- - expr: let zero = 0 in maybe zero toEnum
  - - - - type: Maybe Int
        - type: Int
      - - - expr: (Just (7))
          - Right:
              expr: '7'
        - - expr: (Just (19))
          - Right:
              expr: '19'
        - - expr: (Just (0))
          - Right:
              expr: '0'
        - - expr: (Nothing)
          - Right:
              expr: '0'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just toEnum
  - - - - type: Int
        - type: Maybe Char
      - - - expr: ((7))
          - Right:
              expr: (Just '\a')
        - - expr: ((0))
          - Right:
              expr: (Just '\NUL')
        - - expr: ((14))
          - Right:
              expr: (Just '\SO')
        - - expr: ((19))
          - Right:
              expr: (Just '\DC3')
        - - expr: ((13))
          - Right:
              expr: (Just '\r')
        - - expr: ((20))
          - Right:
              expr: (Just '\DC4')
        - - expr: ((12))
          - Right:
              expr: (Just '\f')
        - - expr: ((-10))
          - Left: '"Prelude.chr: bad argument: (-10)"'
    - - - type: Int
        - type: Maybe Int
      - - - expr: ((7))
          - Right:
              expr: (Just 7)
        - - expr: ((14))
          - Right:
              expr: (Just 14)
        - - expr: ((13))
          - Right:
              expr: (Just 13)
        - - expr: ((19))
          - Right:
              expr: (Just 19)
        - - expr: ((12))
          - Right:
              expr: (Just 12)
        - - expr: ((20))
          - Right:
              expr: (Just 20)
        - - expr: ((0))
          - Right:
              expr: (Just 0)
        - - expr: ((-10))
          - Right:
              expr: (Just (-10))
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose fmap tpl
  - - - - type: (Int, [] Int)
        - type: '[] (Int, Int)'
      - - - expr: ((20), [(7), (13), (-10)])
          - Right:
              expr: '[(20, 7), (20, 13), (20, -10)]'
        - - expr: ((20), [(7)])
          - Right:
              expr: '[(20, 7)]'
        - - expr: ((20), [(7), (13)])
          - Right:
              expr: '[(20, 7), (20, 13)]'
        - - expr: ((12), [(7)])
          - Right:
              expr: '[(12, 7)]'
        - - expr: ((-10), [(7), (13)])
          - Right:
              expr: '[(-10, 7), (-10, 13)]'
        - - expr: ((0), [(7), (13), (-10)])
          - Right:
              expr: '[(0, 7), (0, 13), (0, -10)]'
        - - expr: ((7), [(7), (13)])
          - Right:
              expr: '[(7, 7), (7, 13)]'
        - - expr: ((0), [(7)])
          - Right:
              expr: '[(0, 7)]'
    - - - type: (Char, Maybe Char)
        - type: Maybe (Char, Char)
      - - - expr: ('4', Nothing)
          - Right:
              expr: Nothing
        - - expr: ('6', Nothing)
          - Right:
              expr: Nothing
        - - expr: ('6', Just '5')
          - Right:
              expr: (Just ('6', '5'))
        - - expr: ('7', Nothing)
          - Right:
              expr: Nothing
        - - expr: ('7', Just '5')
          - Right:
              expr: (Just ('7', '5'))
        - - expr: ('2', Just '0')
          - Right:
              expr: (Just ('2', '0'))
        - - expr: ('7', Just '7')
          - Right:
              expr: (Just ('7', '7'))
        - - expr: ('8', Just '7')
          - Right:
              expr: (Just ('8', '7'))
    - - - type: (Int, Maybe Int)
        - type: Maybe (Int, Int)
      - - - expr: ((20), Just (0))
          - Right:
              expr: (Just (20, 0))
        - - expr: ((12), Just (0))
          - Right:
              expr: (Just (12, 0))
        - - expr: ((0), Just (7))
          - Right:
              expr: (Just (0, 7))
        - - expr: ((-10), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((12), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((19), Just (19))
          - Right:
              expr: (Just (19, 19))
        - - expr: ((7), Just (0))
          - Right:
              expr: (Just (7, 0))
        - - expr: ((0), Just (19))
          - Right:
              expr: (Just (0, 19))
    - - - type: (Int, Maybe Char)
        - type: Maybe (Int, Char)
      - - - expr: ((7), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((20), Just '7')
          - Right:
              expr: (Just (20, '7'))
        - - expr: ((0), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((-10), Nothing)
          - Right:
              expr: Nothing
        - - expr: ((13), Just '5')
          - Right:
              expr: (Just (13, '5'))
        - - expr: ((20), Just '5')
          - Right:
              expr: (Just (20, '5'))
        - - expr: ((19), Just '7')
          - Right:
              expr: (Just (19, '7'))
        - - expr: ((-10), Just '5')
          - Right:
              expr: (Just (-10, '5'))
- - expr: |-
      let just = Just
          compose = (.)
        in compose just sequence
  - - - - type: '[] (Maybe Char)'
        - type: Maybe (Maybe ([] Char))
      - - - expr: ([Just '7', Nothing])
          - Right:
              expr: (Just Nothing)
        - - expr: ([Just '7'])
          - Right:
              expr: (Just (Just "7"))
        - - expr: ([])
          - Right:
              expr: (Just (Just ""))
    - - - type: '[] (Maybe Int)'
        - type: Maybe (Maybe ([] Int))
      - - - expr: ([])
          - Right:
              expr: (Just (Just []))
        - - expr: ([Just (7)])
          - Right:
              expr: (Just (Just [7]))
        - - expr: ([Just (7), Nothing])
          - Right:
              expr: (Just Nothing)
    - - - type: Maybe ([] Int)
        - type: Maybe ([] (Maybe Int))
      - - - expr: (Just [(7), (13), (-10)])
          - Right:
              expr: (Just [Just 7, Just 13, Just (-10)])
        - - expr: (Nothing)
          - Right:
              expr: (Just [Nothing])
    - - - type: '[] ([] Char)'
        - type: Maybe ([] ([] Char))
      - - - expr: ([['7', '4', '6']])
          - Right:
              expr: (Just ["7", "4", "6"])
        - - expr: ([])
          - Right:
              expr: (Just [""])
        - - expr: ([['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: (Just [])
        - - expr: ([['7', '4', '6'], []])
          - Right:
              expr: (Just [])
- - expr: |-
      let just = Just
          compose = (.)
        in compose elem just
  - - - - type: (Int, [] (Maybe Int))
        - type: Bool
      - - - expr: ((0), [Just (7)])
          - Right:
              expr: 'False'
        - - expr: ((20), [Just (7), Nothing])
          - Right:
              expr: 'False'
        - - expr: ((14), [Just (7), Nothing])
          - Right:
              expr: 'False'
        - - expr: ((-10), [Just (7)])
          - Right:
              expr: 'False'
        - - expr: ((-10), [])
          - Right:
              expr: 'False'
        - - expr: ((12), [])
          - Right:
              expr: 'False'
        - - expr: ((12), [Just (7), Nothing])
          - Right:
              expr: 'False'
        - - expr: ((7), [])
          - Right:
              expr: 'False'
    - - - type: (Char, Maybe (Maybe Char))
        - type: Bool
      - - - expr: ('0', Just (Just '7'))
          - Right:
              expr: 'False'
        - - expr: ('8', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('6', Just (Just '7'))
          - Right:
              expr: 'False'
        - - expr: ('7', Just (Just '7'))
          - Right:
              expr: 'True'
        - - expr: ('5', Nothing)
          - Right:
              expr: 'False'
        - - expr: ('8', Just (Just '7'))
          - Right:
              expr: 'False'
        - - expr: ('2', Just (Just '7'))
          - Right:
              expr: 'False'
        - - expr: ('5', Just (Just '7'))
          - Right:
              expr: 'False'
    - - - type: (Char, [] (Maybe Char))
        - type: Bool
      - - - expr: ('4', [])
          - Right:
              expr: 'False'
        - - expr: ('5', [])
          - Right:
              expr: 'False'
        - - expr: ('0', [Just '7'])
          - Right:
              expr: 'False'
        - - expr: ('8', [])
          - Right:
              expr: 'False'
        - - expr: ('5', [Just '7'])
          - Right:
              expr: 'False'
        - - expr: ('5', [Just '7', Nothing])
          - Right:
              expr: 'False'
        - - expr: ('6', [Just '7'])
          - Right:
              expr: 'False'
        - - expr: ('7', [])
          - Right:
              expr: 'False'
    - - - type: (Int, Maybe (Maybe Int))
        - type: Bool
      - - - expr: ((0), Just (Just (7)))
          - Right:
              expr: 'False'
        - - expr: ((7), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((0), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((-10), Just (Just (7)))
          - Right:
              expr: 'False'
        - - expr: ((7), Just (Just (7)))
          - Right:
              expr: 'True'
        - - expr: ((12), Nothing)
          - Right:
              expr: 'False'
        - - expr: ((13), Just (Just (7)))
          - Right:
              expr: 'False'
        - - expr: ((14), Just (Just (7)))
          - Right:
              expr: 'False'
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero)
  - - - - type: ((Char -> Int), Char)
        - type: (Int, Int)
      - - - expr: (fromEnum, '6')
          - Right:
              expr: (0, 54)
        - - expr: (fromEnum, '0')
          - Right:
              expr: (0, 48)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (0, 48)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (0, 55)
        - - expr: (fromEnum, '5')
          - Right:
              expr: (0, 53)
        - - expr: (fromEnum, '4')
          - Right:
              expr: (0, 52)
        - - expr: (fromEnum, '2')
          - Right:
              expr: (0, 50)
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (0, 53)
    - - - type: ((Int -> Int), Int)
        - type: (Int, Int)
      - - - expr: (let compose = (.) in compose toEnum toEnum, (-10))
          - Right:
              expr: (0, -10)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (0))
          - Right:
              expr: (0, 0)
        - - expr: (fromEnum, (20))
          - Right:
              expr: (0, 20)
        - - expr: (fromEnum, (13))
          - Right:
              expr: (0, 13)
        - - expr: (let compose = (.) in compose toEnum fromEnum, (12))
          - Right:
              expr: (0, 12)
        - - expr: (let compose = (.) in compose toEnum toEnum, (20))
          - Right:
              expr: (0, 20)
        - - expr: (toEnum, (0))
          - Right:
              expr: (0, 0)
        - - expr: (fromEnum, (14))
          - Right:
              expr: (0, 14)
    - - - type: ((Char -> Char), Char)
        - type: (Int, Char)
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '0')
          - Right:
              expr: (0, '0')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4')
          - Right:
              expr: (0, '4')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '2')
          - Right:
              expr: (0, '2')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5')
          - Right:
              expr: (0, '5')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6')
          - Right:
              expr: (0, '6')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8')
          - Right:
              expr: (0, '8')
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7')
          - Right:
              expr: (0, '7')
    - - - type: ((Int -> Char), Int)
        - type: (Int, Char)
      - - - expr: (let compose = (.) in compose toEnum toEnum, (14))
          - Right:
              expr: (0, '\SO')
        - - expr: (toEnum, (19))
          - Right:
              expr: (0, '\DC3')
        - - expr: (let compose = (.) in compose toEnum toEnum, (0))
          - Right:
              expr: (0, '\NUL')
        - - expr: (let compose = (.) in compose toEnum fromEnum, (13))
          - Right:
              expr: (0, '\r')
        - - expr: (toEnum, (20))
          - Right:
              expr: (0, '\DC4')
        - - expr: (let compose = (.) in compose toEnum toEnum, (20))
          - Right:
              expr: (0, '\DC4')
        - - expr: (let compose = (.) in compose toEnum toEnum, (7))
          - Right:
              expr: (0, '\a')
        - - expr: (toEnum, (0))
          - Right:
              expr: (0, '\NUL')
- - expr: let prepend = (:) in maybe sequenceA prepend
  - - - - type: (Maybe [Char], [[Char]])
        - type: '[[Char]]'
      - - - expr: (Nothing, [['7', '4', '6']])
          - Right:
              expr: '["7", "4", "6"]'
        - - expr: (Nothing, [['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '[]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[""]'
        - - expr: (Just ['7', '4', '6'], [['7', '4', '6'], []])
          - Right:
              expr: '["746", "746", ""]'
        - - expr: (Nothing, [['7', '4', '6'], []])
          - Right:
              expr: '[]'
        - - expr: (Just ['7', '4', '6'], [['7', '4', '6']])
          - Right:
              expr: '["746", "746"]'
        - - expr: (Just ['7', '4', '6'], [['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '["746", "746", "", "74"]'
        - - expr: (Just ['7', '4', '6'], [])
          - Right:
              expr: '["746"]'
    - - - type: (Maybe [Int], [[Int]])
        - type: '[[Int]]'
      - - - expr: (Just [(7), (13), (-10)], [[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[[7, 13, -10], [7, 13, -10], [], [7, 13]]'
        - - expr: (Nothing, [])
          - Right:
              expr: '[[]]'
        - - expr: (Nothing, [[(7), (13), (-10)], [], [(7), (13)]])
          - Right:
              expr: '[]'
        - - expr: (Just [(7), (13), (-10)], [])
          - Right:
              expr: '[[7, 13, -10]]'
        - - expr: (Nothing, [[(7), (13), (-10)]])
          - Right:
              expr: '[[7], [13], [-10]]'
        - - expr: (Just [(7), (13), (-10)], [[(7), (13), (-10)]])
          - Right:
              expr: '[[7, 13, -10], [7, 13, -10]]'
        - - expr: (Nothing, [[(7), (13), (-10)], []])
          - Right:
              expr: '[]'
        - - expr: (Just [(7), (13), (-10)], [[(7), (13), (-10)], []])
          - Right:
              expr: '[[7, 13, -10], [7, 13, -10], []]'
- - expr: maybe unzip
  - - - - type: |-
            ((Int -> [(Int, Char)] -> ([Int], [Char])), Maybe Int,
             [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Nothing, [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([7, 13, -10], "746")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (0), [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (0), [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just (7),
               [((7), '7'), ((13), '4')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (0), [((7), '7'), ((13), '4')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just (7), [((7), '7'), ((13), '4')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7), [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Nothing,
               [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([7, 13, -10], "746")
    - - - type: ((Int -> [(Int, Int)] -> ([Int], [Int])), Maybe Int, [(Int, Int)])
        - type: ([Int], [Int])
      - - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7), [((7), (7))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (19), [((7), (7)), ((13), (13))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just (7), [])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just (7),
               [((7), (7)), ((13), (13))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just (7),
               [((7), (7)), ((13), (13)), ((-10), (-10))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Nothing,
               [((7), (7))])
          - Right:
              expr: ([7], [7])
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just (19),
               [((7), (7)), ((13), (13))])
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just (7), [((7), (7)), ((13), (13))])
          - Right:
              expr: ([], [])
    - - - type: |-
            ((Char -> [(Char, Int)] -> ([Char], [Int])), Maybe Char,
             [(Char, Int)])
        - type: ([Char], [Int])
      - - - expr: (let compose = (.) in compose mempty fromEnum, Nothing, [])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Nothing,
               [('7', (7)), ('4', (13))])
          - Right:
              expr: ("74", [7, 13])
        - - expr: |-
              (let compose = (.) in compose foldMap mempty, Just '7',
               [('7', (7)), ('4', (13))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '0', [('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5', [('7', (7))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               Just '5', [('7', (7)), ('4', (13))])
          - Right:
              expr: ("", [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [('7', (7))])
          - Right:
              expr: ("7", [7])
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just '0',
               [('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: ("", [])
    - - - type: |-
            ((Char -> [(Int, Char)] -> ([Int], [Char])), Maybe Char,
             [(Int, Char)])
        - type: ([Int], [Char])
      - - - expr: (let compose = (.) in compose mempty maybe, Just '7', [((7), '7')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '0', [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe, Just '0',
               [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               Just '0', [])
          - Right:
              expr: ([], "")
        - - expr: (let compose = (.) in compose mempty maybe, Just '0', [])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let compose = (.) in compose mempty fromEnum, Just '7',
               [((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Just '7', [((7), '7')])
          - Right:
              expr: ([], "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               Nothing, [((7), '7'), ((13), '4')])
          - Right:
              expr: ([7, 13], "74")
- - expr: let compose = (.) in compose fmap zip
  - - - - type: ([Int], Maybe [Int])
        - type: Maybe [(Int, Int)]
      - - - expr: ([(7), (13), (-10)], Nothing)
          - Right:
              expr: Nothing
        - - expr: ([(7), (13)], Just [(7), (13), (-10)])
          - Right:
              expr: (Just [(7, 7), (13, 13)])
        - - expr: ([], Just [(7), (13), (-10)])
          - Right:
              expr: (Just [])
        - - expr: ([(7), (13), (-10)], Just [(7), (13), (-10)])
          - Right:
              expr: (Just [(7, 7), (13, 13), (-10, -10)])
        - - expr: ([], Nothing)
          - Right:
              expr: Nothing
        - - expr: ([(7), (13)], Nothing)
          - Right:
              expr: Nothing
        - - expr: ([(7)], Just [(7), (13), (-10)])
          - Right:
              expr: (Just [(7, 7)])
        - - expr: ([(7)], Nothing)
          - Right:
              expr: Nothing
    - - - type: ([Char], [] [Char])
        - type: '[] [(Char, Char)]'
      - - - expr: ([], [])
          - Right:
              expr: '[]'
        - - expr: ([], [['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: '[[], [], []]'
        - - expr: (['7', '4'], [['7', '4', '6']])
          - Right:
              expr: '[[(''7'', ''7''), (''4'', ''4'')]]'
        - - expr: (['7'], [['7', '4', '6'], []])
          - Right:
              expr: '[[(''7'', ''7'')], []]'
        - - expr: ([], [['7', '4', '6']])
          - Right:
              expr: '[[]]'
        - - expr: (['7'], [['7', '4', '6']])
          - Right:
              expr: '[[(''7'', ''7'')]]'
        - - expr: ([], [['7', '4', '6'], []])
          - Right:
              expr: '[[], []]'
        - - expr: (['7', '4', '6'], [['7', '4', '6'], [], ['7', '4']])
          - Right:
              expr: |-
                [[('7', '7'), ('4', '4'), ('6', '6')], [],
                 [('7', '7'), ('4', '4')]]
    - - - type: ([Char], Maybe [Char])
        - type: Maybe [(Char, Char)]
      - - - expr: (['7', '4'], Just ['7', '4', '6'])
          - Right:
              expr: (Just [('7', '7'), ('4', '4')])
        - - expr: (['7', '4', '6'], Just ['7', '4', '6'])
          - Right:
              expr: (Just [('7', '7'), ('4', '4'), ('6', '6')])
        - - expr: (['7'], Nothing)
          - Right:
              expr: Nothing
        - - expr: (['7'], Just ['7', '4', '6'])
          - Right:
              expr: (Just [('7', '7')])
        - - expr: (['7', '4', '6'], Nothing)
          - Right:
              expr: Nothing
        - - expr: ([], Nothing)
          - Right:
              expr: Nothing
        - - expr: (['7', '4'], Nothing)
          - Right:
              expr: Nothing
        - - expr: ([], Just ['7', '4', '6'])
          - Right:
              expr: (Just [])
    - - - type: ([Char], Maybe [Int])
        - type: Maybe [(Char, Int)]
      - - - expr: (['7', '4'], Just [(7), (13), (-10)])
          - Right:
              expr: (Just [('7', 7), ('4', 13)])
        - - expr: ([], Just [(7), (13), (-10)])
          - Right:
              expr: (Just [])
        - - expr: (['7', '4', '6'], Nothing)
          - Right:
              expr: Nothing
        - - expr: (['7'], Just [(7), (13), (-10)])
          - Right:
              expr: (Just [('7', 7)])
        - - expr: (['7', '4'], Nothing)
          - Right:
              expr: Nothing
        - - expr: ([], Nothing)
          - Right:
              expr: Nothing
        - - expr: (['7', '4', '6'], Just [(7), (13), (-10)])
          - Right:
              expr: (Just [('7', 7), ('4', 13), ('6', -10)])
        - - expr: (['7'], Nothing)
          - Right:
              expr: Nothing
- - expr: zip mempty
  - - - - type: '[Char]'
        - type: '[(Int, Char)]'
      - - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: (['7'])
          - Right:
              expr: '[]'
        - - expr: (['7', '4'])
          - Right:
              expr: '[]'
    - - - type: '[Int]'
        - type: '[(Char, Int)]'
      - - - expr: ([(7), (13)])
          - Right:
              expr: '[]'
        - - expr: ([(7)])
          - Right:
              expr: '[]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([(7), (13), (-10)])
          - Right:
              expr: '[]'
    - - - type: '[Int]'
        - type: '[(Int, Int)]'
      - - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([(7), (13), (-10)])
          - Right:
              expr: '[]'
        - - expr: ([(7)])
          - Right:
              expr: '[]'
        - - expr: ([(7), (13)])
          - Right:
              expr: '[]'
    - - - type: '[Char]'
        - type: '[(Char, Char)]'
      - - - expr: (['7'])
          - Right:
              expr: '[]'
        - - expr: (['7', '4', '6'])
          - Right:
              expr: '[]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: (['7', '4'])
          - Right:
              expr: '[]'
- - expr: let compose = (.) in compose unzip sequence
  - - - - type: (Char, [Int])
        - type: ([Char], [Int])
      - - - expr: (('6', [(7), (13)]))
          - Right:
              expr: ("66", [7, 13])
        - - expr: (('8', [(7)]))
          - Right:
              expr: ("8", [7])
        - - expr: (('4', []))
          - Right:
              expr: ("", [])
        - - expr: (('7', [(7), (13), (-10)]))
          - Right:
              expr: ("777", [7, 13, -10])
    - - - type: (Int, [Int])
        - type: ([Int], [Int])
      - - - expr: (((13), []))
          - Right:
              expr: ([], [])
        - - expr: (((14), [(7)]))
          - Right:
              expr: ([14], [7])
        - - expr: (((7), [(7), (13), (-10)]))
          - Right:
              expr: ([7, 7, 7], [7, 13, -10])
        - - expr: (((-10), [(7), (13)]))
          - Right:
              expr: ([-10, -10], [7, 13])
    - - - type: (Int, [Char])
        - type: ([Int], [Char])
      - - - expr: (((7), ['7', '4', '6']))
          - Right:
              expr: ([7, 7, 7], "746")
        - - expr: (((-10), ['7', '4']))
          - Right:
              expr: ([-10, -10], "74")
        - - expr: (((13), []))
          - Right:
              expr: ([], "")
        - - expr: (((14), ['7']))
          - Right:
              expr: ([14], "7")
    - - - type: (Char, [Char])
        - type: ([Char], [Char])
      - - - expr: (('8', ['7']))
          - Right:
              expr: ("8", "7")
        - - expr: (('6', ['7', '4']))
          - Right:
              expr: ("66", "74")
        - - expr: (('4', []))
          - Right:
              expr: ("", "")
        - - expr: (('7', ['7', '4', '6']))
          - Right:
              expr: ("777", "746")
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose unzip)
  - - - - type: |-
            (((Char -> [(Int, Int)]) -> Char -> ([Int], [Int])),
             (Char -> [(Int, Int)]), Char)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose mempty maybe, '4')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '7')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty compose,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '2')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '6')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty compose,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '0')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose unzip,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '5')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5')
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose unzip,
               let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: ([], [])
    - - - type: |-
            (((Int -> [(Int, Int)]) -> Int -> ([Int], [Int])),
             (Int -> [(Int, Int)]), Int)
        - type: ([Int], [Int])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.) in compose mempty maybe, (7))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               (20))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (0))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (20))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose mempty maybe, (20))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose mempty fromEnum, (13))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty compose,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               (7))
          - Right:
              expr: ([], [])
        - - expr: |-
              (let compose = (.) in compose mempty,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (0))
          - Right:
              expr: ([], [])
    - - - type: |-
            (((Int -> [(Char, Char)]) -> Int -> ([Char], [Char])),
             (Int -> [(Char, Char)]), Int)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.) in compose mempty fromEnum, (19))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose mempty fromEnum, (7))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               (19))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let conc = (<>)
                   compose = (.)
                 in compose mempty conc,
               let compose = (.) in compose mempty maybe, (19))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty maybe,
               let compose = (.) in compose mempty fromEnum, (14))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose mempty fromEnum, (13))
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty compose,
               let compose = (.) in compose mempty fromEnum, (-10))
          - Right:
              expr: ("", "")
    - - - type: |-
            (((Char -> [(Char, Char)]) -> Char -> ([Char], [Char])),
             (Char -> [(Char, Char)]), Char)
        - type: ([Char], [Char])
      - - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty compose,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '8')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               '4')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty compose,
               let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               '5')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let just = Just
                   compose = (.)
                 in compose mempty just,
               let compose = (.) in compose mempty fromEnum, '0')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.) in compose mempty,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '4')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   prepend = (:)
                 in compose mempty prepend,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '4')
          - Right:
              expr: ("", "")
        - - expr: |-
              (let compose = (.)
                   tpl = (,)
                 in compose mempty tpl,
               let just = Just
                   compose = (.)
                 in compose mempty just,
               '2')
          - Right:
              expr: ("", "")
- - expr: let compose = (.) in compose sequence unzip
  - - - - type: '[(Char, Int)]'
        - type: '[([Char], Int)]'
      - - - expr: ([('7', (7))])
          - Right:
              expr: '[("7", 7)]'
        - - expr: ([('7', (7)), ('4', (13)), ('6', (-10))])
          - Right:
              expr: '[("746", 7), ("746", 13), ("746", -10)]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([('7', (7)), ('4', (13))])
          - Right:
              expr: '[("74", 7), ("74", 13)]'
    - - - type: '[(Int, Char)]'
        - type: '[([Int], Char)]'
      - - - expr: ([((7), '7')])
          - Right:
              expr: '[([7], ''7'')]'
        - - expr: ([((7), '7'), ((13), '4')])
          - Right:
              expr: '[([7, 13], ''7''), ([7, 13], ''4'')]'
        - - expr: ([((7), '7'), ((13), '4'), ((-10), '6')])
          - Right:
              expr: '[([7, 13, -10], ''7''), ([7, 13, -10], ''4''), ([7, 13, -10],
                ''6'')]'
        - - expr: ([])
          - Right:
              expr: '[]'
    - - - type: '[(Int, Int)]'
        - type: '[([Int], Int)]'
      - - - expr: ([((7), (7)), ((13), (13))])
          - Right:
              expr: '[([7, 13], 7), ([7, 13], 13)]'
        - - expr: ([((7), (7))])
          - Right:
              expr: '[([7], 7)]'
        - - expr: ([((7), (7)), ((13), (13)), ((-10), (-10))])
          - Right:
              expr: '[([7, 13, -10], 7), ([7, 13, -10], 13), ([7, 13, -10], -10)]'
        - - expr: ([])
          - Right:
              expr: '[]'
    - - - type: '[(Char, Char)]'
        - type: '[([Char], Char)]'
      - - - expr: ([('7', '7'), ('4', '4'), ('6', '6')])
          - Right:
              expr: '[("746", ''7''), ("746", ''4''), ("746", ''6'')]'
        - - expr: ([('7', '7'), ('4', '4')])
          - Right:
              expr: '[("74", ''7''), ("74", ''4'')]'
        - - expr: ([])
          - Right:
              expr: '[]'
        - - expr: ([('7', '7')])
          - Right:
              expr: '[("7", ''7'')]'
- - expr: let compose = (.) in compose elem
  - - - - type: ((Char -> Char), Char, Maybe Char)
        - type: Bool
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '2', Just '5')
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '5', Just '5')
          - Right:
              expr: 'True'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', Just '0')
          - Right:
              expr: 'True'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '8', Just '0')
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', Just '5')
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '7', Nothing)
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', Just '7')
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', Nothing)
          - Right:
              expr: 'False'
    - - - type: ((Char -> Int), Char, Maybe Int)
        - type: Bool
      - - - expr: (let compose = (.) in compose toEnum fromEnum, '0', Just (7))
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '6', Just (19))
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '0', Just (19))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '8', Just (7))
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, '4', Just (7))
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '8', Nothing)
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '2', Nothing)
          - Right:
              expr: 'False'
        - - expr: (fromEnum, '4', Just (19))
          - Right:
              expr: 'False'
    - - - type: ((Int -> Char), Int, [] Char)
        - type: Bool
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (12), [])
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-10), ['7', '4'])
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (14), [])
          - Right:
              expr: 'False'
        - - expr: (toEnum, (-10), ['7'])
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (12), [])
          - Right:
              expr: 'False'
        - - expr: |-
              (let compose = (.) in compose toEnum toEnum, (-10),
               ['7', '4', '6'])
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (let compose = (.) in compose toEnum toEnum, (14), ['7'])
          - Right:
              expr: 'False'
        - - expr: (toEnum, (0), ['7', '4'])
          - Right:
              expr: 'False'
    - - - type: ((Int -> Char), Int, Maybe Char)
        - type: Bool
      - - - expr: (let compose = (.) in compose toEnum fromEnum, (-10), Nothing)
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (12), Just '7')
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-10), Just '5')
          - Left: '"Prelude.chr: bad argument: (-10)"'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (12), Nothing)
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum toEnum, (7), Nothing)
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum toEnum, (-10), Nothing)
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum toEnum, (14), Just '5')
          - Right:
              expr: 'False'
        - - expr: (let compose = (.) in compose toEnum fromEnum, (20), Just '5')
          - Right:
              expr: 'False'
generationCfg:
  numMin: -20
  seed: 1312
  charMin: '0'
  crashOnError: true
  jsonLinesPath: ./run-results/ios.jsonl
  verbosity: warning
  test: 0.3
  maxInstances: 5
  maxHoles: 3
  nestLimit: 1
  charMax: '9'
  resultFolder: ./run-results
  numMax: 20
  training: 0.35
  maxParams: 3
  maxInstantiations: 4
  listMin: 0
  numInputs: 10
  validation: 0.35
  taskFile: datasets-3.yml
  listMax: 3
  maxDataset: 1000
variantTypes:
- type: '[a] -> [b] -> [(a, b)]'
- type: '[b] -> [(a, b)]'
- type: '[(a, b)]'
- type: a -> [a] -> [a]
- type: '[a] -> [a]'
- type: '[a]'
- type: '[(a, b)] -> ([a], [b])'
- type: ([a], [b])
- type: '  (Foldable t, Eq a) => a -> t a -> Bool'
- type: '  (Foldable t, Eq a) => t a -> Bool'
- type: Bool
- type: '  Num p => p'
- type: a -> Maybe a
- type: Maybe a
- type: '  Monoid a => a'
- type: '  Enum a => Int -> a'
- type: '  Enum a => a'
- type: '  Foldable t => t a -> Int'
- type: Int
- type: a -> b -> (a, b)
- type: b -> (a, b)
- type: (a, b)
- type: '  (Traversable t, Monad m) => t (m a) -> m (t a)'
- type: '  (Traversable t, Monad m) => m (t a)'
- type: '  (Traversable t, Applicative f) => t (f a) -> f (t a)'
- type: '  (Traversable t, Applicative f) => f (t a)'
- type: '  Enum a => a -> Int'
- type: Int
- type: '  (Foldable t, Monoid m) => (a -> m) -> t a -> m'
- type: '  (Foldable t, Monoid m) => t a -> m'
- type: 'Monoid m => m'
- type: '  Functor f => (a -> b) -> f a -> f b'
- type: '  Functor f => f a -> f b'
- type: '  Functor f => f b'
- type: '  Semigroup a => a -> a -> a'
- type: '  Semigroup a => a -> a'
- type: '  Semigroup a => a'
- type: b -> (a -> b) -> Maybe a -> b
- type: (a -> b) -> Maybe a -> b
- type: Maybe a -> b
- type: b
- type: (b -> c) -> (a -> b) -> a -> c
- type: (a -> b) -> a -> c
- type: a -> c
- type: c
ruleCharMap:
  ',': 6
  \: 30
  l: 40
  g: 38
  '7': 15
  '*': 5
  ? |2+

  : 0
  m: 41
  '-': 7
  M: 25
  =: 18
  ']': 31
  '0': 8
  p: 44
  ' ': 1
  '[': 29
  'N': 26
  '>': 19
  'n': 42
  a: 32
  q: 45
  A: 20
  '1': 9
  d: 35
  t: 48
  '4': 12
  T: 28
  o: 43
  '"': 2
  B: 21
  '2': 10
  b: 33
  r: 46
  u: 49
  E: 22
  '5': 13
  e: 36
  (: 3
  '8': 16
  c: 34
  s: 47
  '3': 11
  S: 27
  f: 37
  v: 50
  F: 23
  '6': 14
  '9': 17
  i: 39
  'y': 51
  ): 4
  I: 24
bothCharMap:
  ',': 6
  L: 31
  <: 20
  \: 42
  l: 54
  g: 50
  '''': 3
  '7': 16
  j: 53
  z: 64
  J: 30
  ':': 19
  ? |2+

  : 0
  m: 55
  '-': 7
  M: 32
  =: 21
  ']': 43
  '0': 9
  P: 35
  p: 58
  ' ': 1
  '[': 41
  .: 8
  'N': 33
  '>': 22
  'n': 56
  a: 44
  '1': 10
  d: 47
  t: 61
  D: 25
  '4': 13
  T: 38
  o: 57
  O: 34
  '"': 2
  B: 23
  '2': 11
  R: 36
  b: 45
  r: 59
  u: 62
  E: 26
  '5': 14
  U: 39
  e: 48
  h: 51
  (: 4
  H: 28
  '8': 17
  X: 40
  c: 46
  s: 60
  C: 24
  '3': 12
  S: 37
  f: 49
  F: 27
  '6': 15
  '9': 18
  i: 52
  'y': 63
  ): 5
  I: 29
dsl:
  length:
    expr: length
  maybe:
    expr: maybe
  foldMap:
    expr: foldMap
  fromEnum:
    expr: fromEnum
  unzip:
    expr: unzip
  just:
    expr: Just
  zip:
    expr: zip
  elem:
    expr: elem
  sequence:
    expr: sequence
  zero:
    expr: '0'
  fmap:
    expr: fmap
  toEnum:
    expr: toEnum
  mempty:
    expr: mempty
  compose:
    expr: (.)
  tpl:
    expr: (,)
  prepend:
    expr: (:)
  sequenceA:
    expr: sequenceA
  conc:
    expr: (<>)
fnTypes:
- - expr: let compose = (.) in compose unzip
  - type: (a1 -> [(a2, b)]) -> a1 -> ([a2], [b])
- - expr: toEnum
  - type: '  Enum a => Int -> a'
- - expr: |-
      let compose = (.)
          zero = 0
          prepend = (:)
        in compose (prepend zero)
  - type: '  Num a1 => (a2 -> [a1]) -> a2 -> [a1]'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl unzip
  - type: '[(a, b1)] -> b2 -> (([a], [b1]), b2)'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose compose prepend
  - type: a1 -> (a2 -> [a1]) -> a2 -> [a1]
- - expr: sequenceA
  - type: '  (Traversable t, Applicative f) => t (f a) -> f (t a)'
- - expr: |-
      let zero = 0
          prepend = (:)
        in maybe (prepend zero)
  - type: '  Num a1 => (a2 -> [a1] -> [a1]) -> Maybe a2 -> [a1] -> [a1]'
- - expr: length
  - type: '  Foldable t => t a -> Int'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend length
  - type: '  Foldable t => t a -> [Int] -> [Int]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend sequenceA
  - type: '  (Traversable t, Applicative f) => t (f a) -> [f (t a)] -> [f (t a)]'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just length
  - type: '  Foldable t => t a -> Maybe Int'
- - expr: let compose = (.) in compose (compose unzip)
  - type: (a1 -> a2 -> [(a3, b)]) -> a1 -> a2 -> ([a3], [b])
- - expr: zip
  - type: '[a] -> [b] -> [(a, b)]'
- - expr: let zero = 0 in maybe zero length
  - type: '  Foldable t => Maybe (t a) -> Int'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl sequence
  - type: '  (Traversable t, Monad m) => t (m a) -> b -> (m (t a), b)'
- - expr: let compose = (.) in compose elem toEnum
  - type: '  (Foldable t, Eq a, Enum a) => Int -> t a -> Bool'
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose (conc unzip)
  - type: (a1 -> [(a2, b)] -> ([a2], [b])) -> a1 -> [(a2, b)] -> ([a2], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc zip
  - type: '[a] -> ([b] -> [(a, b)]) -> [b] -> [(a, b)]'
- - expr: let compose = (.) in compose sequence
  - type: '  (Traversable t, Monad m) => (a1 -> t (m a2)) -> a1 -> m (t a2)'
- - expr: let conc = (<>) in conc (unzip mempty)
  - type: ([a], [b]) -> ([a], [b])
- - expr: |-
      let just = Just
          compose = (.)
        in compose just unzip
  - type: '[(a, b)] -> Maybe ([a], [b])'
- - expr: unzip
  - type: '[(a, b)] -> ([a], [b])'
- - expr: let compose = (.) in compose foldMap zip
  - type: '  Foldable t => [a] -> t [b] -> [(a, b)]'
- - expr: let compose = (.) in compose sequenceA
  - type: |2-
        (Traversable t, Applicative f) =>
        (a1 -> t (f a2)) -> a1 -> f (t a2)
- - expr: let compose = (.) in compose maybe length
  - type: '  Foldable t => t a1 -> (a2 -> Int) -> Maybe a2 -> Int'
- - expr: let compose = (.) in compose toEnum
  - type: '  Enum c => (a -> Int) -> a -> c'
- - expr: let compose = (.) in compose toEnum length
  - type: '  (Enum c, Foldable t) => t a -> c'
- - expr: let compose = (.) in compose (compose sequence)
  - type: |2-
        (Traversable t, Monad m) =>
        (a1 -> a2 -> t (m a3)) -> a1 -> a2 -> m (t a3)
- - expr: |-
      let conc = (<>)
          compose = (.)
        in compose conc unzip
  - type: '[(a, b)] -> ([a], [b]) -> ([a], [b])'
- - expr: let compose = (.) in compose compose fmap
  - type: '  Functor f => (a1 -> b) -> (a2 -> f a1) -> a2 -> f b'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl sequenceA
  - type: '  (Traversable t, Applicative f) => t (f a) -> b -> (f (t a), b)'
- - expr: let compose = (.) in compose (zip mempty)
  - type: (a1 -> [b]) -> a1 -> [(a2, b)]
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl toEnum
  - type: '  Enum a => Int -> b -> (a, b)'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend unzip
  - type: '[(a, b)] -> [([a], [b])] -> [([a], [b])]'
- - expr: maybe (unzip mempty)
  - type: (a1 -> ([a2], [b])) -> Maybe a1 -> ([a2], [b])
- - expr: |-
      let just = Just
          zero = 0
          tpl = (,)
        in tpl (just zero)
  - type: '  Num a => b -> (Maybe a, b)'
- - expr: |-
      let just = Just
          compose = (.)
        in compose maybe just
  - type: a1 -> (a2 -> Maybe a1) -> Maybe a2 -> Maybe a1
- - expr: let conc = (<>) in conc zip
  - type: ([a] -> [b] -> [(a, b)]) -> [a] -> [b] -> [(a, b)]
- - expr: |-
      let just = Just
          compose = (.)
        in compose sequenceA just
  - type: '  Applicative f => f a -> f (Maybe a)'
- - expr: maybe zip mempty
  - type: Maybe a1 -> [a2] -> [b] -> [(a2, b)]
- - expr: let tpl = (,) in tpl (unzip mempty)
  - type: b1 -> (([a], [b2]), b1)
- - expr: let compose = (.) in compose compose elem
  - type: '  (Foldable t, Eq a1) => a1 -> (a2 -> t a1) -> a2 -> Bool'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just
  - type: (a1 -> a2) -> a1 -> Maybe a2
- - expr: let zero = 0 in maybe zero
  - type: '  Num b => (a -> b) -> Maybe a -> b'
- - expr: let compose = (.) in compose zip sequenceA
  - type: '  Traversable t => t [a] -> [b] -> [(t a, b)]'
- - expr: let compose = (.) in compose zip mempty
  - type: a1 -> [b] -> [(a2, b)]
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl fromEnum
  - type: '  Enum a => a -> b -> (Int, b)'
- - expr: let compose = (.) in compose sequence sequenceA
  - type: |2-
        (Monad m, Traversable t, Traversable m, Applicative t) =>
        m (t a) -> m (t a)
- - expr: let compose = (.) in compose fromEnum
  - type: '  Enum a1 => (a2 -> a1) -> a2 -> Int'
- - expr: let prepend = (:) in maybe mempty prepend
  - type: Maybe a -> [a] -> [a]
- - expr: let prepend = (:) in prepend
  - type: a -> [a] -> [a]
- - expr: maybe unzip mempty
  - type: Maybe a1 -> [(a2, b)] -> ([a2], [b])
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose compose tpl
  - type: a1 -> (a2 -> b) -> a2 -> (a1, b)
- - expr: let compose = (.) in compose elem fromEnum
  - type: '  (Foldable t, Enum a) => a -> t Int -> Bool'
- - expr: let compose = (.) in compose zip sequence
  - type: '  Traversable t => t [a] -> [b] -> [(t a, b)]'
- - expr: let prepend = (:) in maybe prepend mempty
  - type: Maybe a1 -> a2 -> [a2] -> [a2]
- - expr: |-
      let just = Just
          compose = (.)
        in compose just just
  - type: a -> Maybe (Maybe a)
- - expr: maybe sequence
  - type: |2-
        (Traversable t, Monad m) =>
        (a1 -> t (m a2) -> m (t a2)) -> Maybe a1 -> t (m a2) -> m (t a2)
- - expr: let compose = (.) in compose compose zip
  - type: '[a1] -> (a2 -> [b]) -> a2 -> [(a1, b)]'
- - expr: maybe (zip mempty)
  - type: (a1 -> [b] -> [(a2, b)]) -> Maybe a1 -> [b] -> [(a2, b)]
- - expr: let compose = (.) in compose sequenceA unzip
  - type: '[(a1, a2)] -> [([a1], a2)]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose fmap prepend
  - type: '  Functor f => a -> f [a] -> f [a]'
- - expr: let tpl = (,) in tpl
  - type: a -> b -> (a, b)
- - expr: fmap
  - type: '  Functor f => (a -> b) -> f a -> f b'
- - expr: |-
      let just = Just
          compose = (.)
        in compose sequence just
  - type: '  Monad m => m a -> m (Maybe a)'
- - expr: |-
      let conc = (<>)
          prepend = (:)
        in conc prepend
  - type: (a -> [a] -> [a]) -> a -> [a] -> [a]
- - expr: let compose = (.) in compose maybe unzip
  - type: '[(a1, b)] -> (a2 -> ([a1], [b])) -> Maybe a2 -> ([a1], [b])'
- - expr: maybe
  - type: b -> (a -> b) -> Maybe a -> b
- - expr: let conc = (<>) in conc unzip
  - type: ([(a, b)] -> ([a], [b])) -> [(a, b)] -> ([a], [b])
- - expr: |-
      let just = Just
          zero = 0
          prepend = (:)
        in prepend (just zero)
  - type: '  Num a => [Maybe a] -> [Maybe a]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose foldMap prepend
  - type: '  Foldable t => a -> t [a] -> [a]'
- - expr: |-
      let just = Just
          compose = (.)
          tpl = (,)
        in compose tpl just
  - type: a -> b -> (Maybe a, b)
- - expr: let compose = (.) in compose sequenceA sequence
  - type: |2-
        (Traversable t, Traversable f, Monad t, Applicative f) =>
        f (t a) -> f (t a)
- - expr: maybe mempty zip
  - type: Maybe [a] -> [b] -> [(a, b)]
- - expr: let compose = (.) in compose maybe sequence
  - type: |2-
        (Traversable t, Monad m) =>
        t (m a1) -> (a2 -> m (t a1)) -> Maybe a2 -> m (t a1)
- - expr: let compose = (.) in compose maybe toEnum
  - type: '  Enum b => Int -> (a -> b) -> Maybe a -> b'
- - expr: let compose = (.) in compose toEnum toEnum
  - type: '  Enum c => Int -> c'
- - expr: let compose = (.) in compose length
  - type: '  Foldable t => (a1 -> t a2) -> a1 -> Int'
- - expr: maybe mempty unzip
  - type: Maybe [(a, b)] -> ([a], [b])
- - expr: let compose = (.) in compose sequenceA sequenceA
  - type: |2-
        (Traversable t, Traversable f, Applicative f, Applicative t) =>
        f (t a) -> f (t a)
- - expr: let zero = 0 in maybe zero fromEnum
  - type: '  Enum a => Maybe a -> Int'
- - expr: |-
      let zero = 0
          tpl = (,)
        in maybe (tpl zero)
  - type: '  Num a1 => (a2 -> b -> (a1, b)) -> Maybe a2 -> b -> (a1, b)'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just fromEnum
  - type: '  Enum a => a -> Maybe Int'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl length
  - type: '  Foldable t => t a -> b -> (Int, b)'
- - expr: let compose = (.) in compose fmap fmap
  - type: '  (Functor f1, Functor f2) => (a -> b) -> f1 (f2 a) -> f1 (f2 b)'
- - expr: let compose = (.) in compose
  - type: (b -> c) -> (a -> b) -> a -> c
- - expr: let conc = (<>) in conc (zip mempty)
  - type: ([b] -> [(a, b)]) -> [b] -> [(a, b)]
- - expr: let compose = (.) in compose maybe sequenceA
  - type: |2-
        (Traversable t, Applicative f) =>
        t (f a1) -> (a2 -> f (t a1)) -> Maybe a2 -> f (t a1)
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose tpl
  - type: (a1 -> a2) -> a1 -> b -> (a2, b)
- - expr: fromEnum
  - type: '  Enum a => a -> Int'
- - expr: |-
      let zero = 0
          tpl = (,)
        in tpl zero
  - type: '  Num a => b -> (a, b)'
- - expr: sequence
  - type: '  (Traversable t, Monad m) => t (m a) -> m (t a)'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just sequenceA
  - type: '  (Traversable t, Applicative f) => t (f a) -> Maybe (f (t a))'
- - expr: |-
      let just = Just
          compose = (.)
          prepend = (:)
        in compose prepend just
  - type: a -> [Maybe a] -> [Maybe a]
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend sequence
  - type: '  (Traversable t, Monad m) => t (m a) -> [m (t a)] -> [m (t a)]'
- - expr: let compose = (.) in compose zip
  - type: (a1 -> [a2]) -> a1 -> [b] -> [(a2, b)]
- - expr: let compose = (.) in compose fmap elem
  - type: '  (Functor f, Foldable t, Eq a) => a -> f (t a) -> f Bool'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend fromEnum
  - type: '  Enum a => a -> [Int] -> [Int]'
- - expr: |-
      let compose = (.)
          prepend = (:)
        in compose prepend
  - type: (a1 -> a2) -> a1 -> [a2] -> [a2]
- - expr: let compose = (.) in compose unzip sequenceA
  - type: (a, [b]) -> ([a], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
          prepend = (:)
        in compose conc prepend
  - type: a -> ([a] -> [a]) -> [a] -> [a]
- - expr: let compose = (.) in compose sequence sequence
  - type: |2-
        (Traversable t, Traversable m, Monad m, Monad t) =>
        m (t a) -> m (t a)
- - expr: let compose = (.) in compose unzip mempty
  - type: a1 -> ([a2], [b])
- - expr: |-
      let conc = (<>)
          zero = 0
          prepend = (:)
        in conc (prepend zero)
  - type: '  Num a => ([a] -> [a]) -> [a] -> [a]'
- - expr: let prepend = (:) in prepend (unzip mempty)
  - type: '[([a], [b])] -> [([a], [b])]'
- - expr: let just = Just in just
  - type: a -> Maybe a
- - expr: |-
      let just = Just
          zero = 0
        in maybe (just zero)
  - type: '  Num a1 => (a2 -> Maybe a1) -> Maybe a2 -> Maybe a1'
- - expr: let prepend = (:) in maybe sequence prepend
  - type: Maybe [a] -> [[a]] -> [[a]]
- - expr: let compose = (.) in compose elem unzip
  - type: '  (Foldable t, Eq a, Eq b) => [(a, b)] -> t ([a], [b]) -> Bool'
- - expr: let compose = (.) in compose toEnum fromEnum
  - type: '  (Enum c, Enum a) => a -> c'
- - expr: let compose = (.) in compose maybe fromEnum
  - type: '  Enum a1 => a1 -> (a2 -> Int) -> Maybe a2 -> Int'
- - expr: |-
      let zero = 0
          prepend = (:)
        in prepend zero
  - type: '  Num a => [a] -> [a]'
- - expr: elem
  - type: '  (Foldable t, Eq a) => a -> t a -> Bool'
- - expr: let compose = (.) in compose elem length
  - type: '  (Foldable t1, Foldable t2) => t2 a -> t1 Int -> Bool'
- - expr: let zero = 0 in maybe zero toEnum
  - type: '  (Enum b, Num b) => Maybe Int -> b'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just toEnum
  - type: '  Enum a => Int -> Maybe a'
- - expr: |-
      let compose = (.)
          tpl = (,)
        in compose fmap tpl
  - type: '  Functor f => a1 -> f a2 -> f (a1, a2)'
- - expr: |-
      let just = Just
          compose = (.)
        in compose just sequence
  - type: '  (Traversable t, Monad m) => t (m a) -> Maybe (m (t a))'
- - expr: |-
      let just = Just
          compose = (.)
        in compose elem just
  - type: '  (Foldable t, Eq a) => a -> t (Maybe a) -> Bool'
- - expr: |-
      let compose = (.)
          zero = 0
          tpl = (,)
        in compose (tpl zero)
  - type: '  Num a1 => (a2 -> b) -> a2 -> (a1, b)'
- - expr: let prepend = (:) in maybe sequenceA prepend
  - type: Maybe [a] -> [[a]] -> [[a]]
- - expr: maybe unzip
  - type: |-
      (a1 -> [(a2, b)] -> ([a2], [b])) ->
        Maybe a1 -> [(a2, b)] -> ([a2], [b])
- - expr: let compose = (.) in compose fmap zip
  - type: '  Functor f => [a] -> f [b] -> f [(a, b)]'
- - expr: zip mempty
  - type: '[b] -> [(a, b)]'
- - expr: let compose = (.) in compose unzip sequence
  - type: (a, [b]) -> ([a], [b])
- - expr: |-
      let conc = (<>)
          compose = (.)
        in conc (compose unzip)
  - type: |-
      ((a1 -> [(a2, b)]) -> a1 -> ([a2], [b])) ->
        (a1 -> [(a2, b)]) -> a1 -> ([a2], [b])
- - expr: let compose = (.) in compose sequence unzip
  - type: '[(a1, a2)] -> [([a1], a2)]'
- - expr: let compose = (.) in compose elem
  - type: '  (Foldable t, Eq a1) => (a2 -> a1) -> a2 -> t a1 -> Bool'
exprCharMap:
  ',': 6
  L: 29
  <: 20
  \: 40
  l: 52
  g: 48
  '''': 3
  '7': 16
  j: 51
  z: 62
  J: 28
  ':': 19
  ? |2+

  : 0
  m: 53
  '-': 7
  M: 30
  =: 21
  ']': 41
  '0': 9
  P: 33
  p: 56
  ' ': 1
  '[': 39
  .: 8
  'N': 31
  '>': 22
  'n': 54
  a: 42
  '1': 10
  d: 45
  t: 59
  D: 24
  '4': 13
  T: 36
  o: 55
  O: 32
  '"': 2
  '2': 11
  R: 34
  b: 43
  r: 57
  u: 60
  E: 25
  '5': 14
  U: 37
  e: 46
  h: 49
  (: 4
  H: 27
  '8': 17
  X: 38
  c: 44
  s: 58
  C: 23
  '3': 12
  S: 35
  f: 47
  F: 26
  '6': 15
  '9': 18
  i: 50
  'y': 61
  ): 5
datasets:
- - - expr: let compose = (.) in compose unzip
    - - - type: ((Char -> [(Char, Char)]), Char)
        - type: ([Char], [Char])
      - - type: ((Int -> [(Int, Char)]), Int)
        - type: ([Int], [Char])
      - - type: ((Int -> [(Int, Int)]), Int)
        - type: ([Int], [Int])
  - - expr: toEnum
    - - - type: Int
        - type: Char
  - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
          in compose (prepend zero)
    - - - type: ((Char -> [Int]), Char)
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl unzip
    - - - type: ([(Char, Int)], Int)
        - type: (([Char], [Int]), Int)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose compose prepend
    - - - type: (Int, (Int -> [Int]), Int)
        - type: '[Int]'
      - - type: (Char, (Int -> [Char]), Int)
        - type: '[Char]'
  - - expr: sequenceA
    - - - type: '[] ([] Char)'
        - type: '[] ([] Char)'
  - - expr: length
    - - - type: Maybe Int
        - type: Int
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend length
    - - - type: ([] Char, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend sequenceA
    - - - type: ([] ([] Char), [[] ([] Char)])
        - type: '[[] ([] Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just length
    - - - type: '[] Char'
        - type: Maybe Int
      - - type: '[] Int'
        - type: Maybe Int
      - - type: Maybe Char
        - type: Maybe Int
  - - expr: let compose = (.) in compose (compose unzip)
    - - - type: ((Int -> Char -> [(Char, Char)]), Int, Char)
        - type: ([Char], [Char])
      - - type: ((Char -> Char -> [(Char, Char)]), Char, Char)
        - type: ([Char], [Char])
      - - type: ((Int -> Int -> [(Char, Int)]), Int, Int)
        - type: ([Char], [Int])
      - - type: ((Int -> Int -> [(Char, Char)]), Int, Int)
        - type: ([Char], [Char])
  - - expr: let compose = (.) in compose elem toEnum
    - - - type: (Int, [] Char)
        - type: Bool
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip)
    - - - type: ((Char -> [(Char, Int)] -> ([Char], [Int])), Char, [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc zip
    - - - type: ([Char], ([Char] -> [(Char, Char)]), [Char])
        - type: '[(Char, Char)]'
      - - type: ([Int], ([Char] -> [(Int, Char)]), [Char])
        - type: '[(Int, Char)]'
  - - expr: let compose = (.) in compose sequence
    - - - type: ((Char -> Maybe ([] Char)), Char)
        - type: '[] (Maybe Char)'
  - - expr: let conc = (<>) in conc (unzip mempty)
    - - - type: ([Char], [Char])
        - type: ([Char], [Char])
      - - type: ([Int], [Int])
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just unzip
    - - - type: '[(Int, Char)]'
        - type: Maybe ([Int], [Char])
      - - type: '[(Char, Char)]'
        - type: Maybe ([Char], [Char])
  - - expr: let compose = (.) in compose sequenceA
    - - - type: ((Int -> [] ([] Char)), Int)
        - type: '[] ([] Char)'
  - - expr: let compose = (.) in compose maybe length
    - - - type: ([] Int, (Char -> Int), Maybe Char)
        - type: Int
  - - expr: let compose = (.) in compose toEnum
    - - - type: ((Char -> Int), Char)
        - type: Char
  - - expr: let compose = (.) in compose toEnum length
    - - - type: '[] Int'
        - type: Char
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc unzip
    - - - type: ([(Int, Char)], ([Int], [Char]))
        - type: ([Int], [Char])
      - - type: ([(Int, Int)], ([Int], [Int]))
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose compose fmap
    - - - type: ((Int -> Char), (Char -> [] Int), Char)
        - type: '[] Char'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl sequenceA
    - - - type: (Maybe ([] Char), Int)
        - type: ([] (Maybe Char), Int)
      - - type: ([] (Maybe Char), Char)
        - type: (Maybe ([] Char), Char)
  - - expr: maybe (unzip mempty)
    - - - type: ((Char -> ([Int], [Char])), Maybe Char)
        - type: ([Int], [Char])
  - - expr: |-
        let just = Just
            zero = 0
            tpl = (,)
          in tpl (just zero)
    - - - type: Int
        - type: (Maybe Int, Int)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose maybe just
    - - - type: (Int, (Int -> Maybe Int), Maybe Int)
        - type: Maybe Int
      - - type: (Char, (Char -> Maybe Char), Maybe Char)
        - type: Maybe Char
  - - expr: let conc = (<>) in conc zip
    - - - type: (([Int] -> [Char] -> [(Int, Char)]), [Int], [Char])
        - type: '[(Int, Char)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose sequenceA just
    - - - type: '[] Char'
        - type: '[] (Maybe Char)'
      - - type: Maybe Int
        - type: Maybe (Maybe Int)
      - - type: Maybe Char
        - type: Maybe (Maybe Char)
  - - expr: maybe zip mempty
    - - - type: (Maybe Int, [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: let tpl = (,) in tpl (unzip mempty)
    - - - type: Char
        - type: (([Int], [Char]), Char)
  - - expr: let compose = (.) in compose compose elem
    - - - type: (Int, (Char -> Maybe Int), Char)
        - type: Bool
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just
    - - - type: ((Int -> Int), Int)
        - type: Maybe Int
  - - expr: let compose = (.) in compose zip sequenceA
    - - - type: ([] [Char], [Int])
        - type: '[([] Char, Int)]'
  - - expr: let compose = (.) in compose zip mempty
    - - - type: (Int, [Int])
        - type: '[(Int, Int)]'
      - - type: (Char, [Char])
        - type: '[(Char, Char)]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl fromEnum
    - - - type: (Int, Char)
        - type: (Int, Char)
  - - expr: let compose = (.) in compose sequence sequenceA
    - - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
      - - type: Maybe ([] Int)
        - type: Maybe ([] Int)
  - - expr: let compose = (.) in compose fromEnum
    - - - type: ((Int -> Char), Int)
        - type: Int
      - - type: ((Char -> Char), Char)
        - type: Int
      - - type: ((Char -> Int), Char)
        - type: Int
      - - type: ((Int -> Int), Int)
        - type: Int
  - - expr: let prepend = (:) in maybe mempty prepend
    - - - type: (Maybe Int, [Int])
        - type: '[Int]'
  - - expr: let prepend = (:) in prepend
    - - - type: (Int, [Int])
        - type: '[Int]'
      - - type: (Char, [Char])
        - type: '[Char]'
  - - expr: maybe unzip mempty
    - - - type: (Maybe Int, [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose compose tpl
    - - - type: (Int, (Char -> Int), Char)
        - type: (Int, Int)
  - - expr: let compose = (.) in compose elem fromEnum
    - - - type: (Char, Maybe Int)
        - type: Bool
      - - type: (Int, Maybe Int)
        - type: Bool
      - - type: (Int, [] Int)
        - type: Bool
  - - expr: let compose = (.) in compose zip sequence
    - - - type: ([] [Int], [Char])
        - type: '[([] Int, Char)]'
      - - type: (Maybe [Char], [Char])
        - type: '[(Maybe Char, Char)]'
  - - expr: maybe sequence
    - - - type: |-
            ((Int -> Maybe ([] Char) -> [] (Maybe Char)), Maybe Int,
             Maybe ([] Char))
        - type: '[] (Maybe Char)'
      - - type: |-
            ((Char -> Maybe ([] Int) -> [] (Maybe Int)), Maybe Char,
             Maybe ([] Int))
        - type: '[] (Maybe Int)'
  - - expr: let compose = (.) in compose compose zip
    - - - type: ([Char], (Int -> [Char]), Int)
        - type: '[(Char, Char)]'
  - - expr: maybe (zip mempty)
    - - - type: ((Int -> [Char] -> [(Char, Char)]), Maybe Int, [Char])
        - type: '[(Char, Char)]'
      - - type: ((Char -> [Int] -> [(Int, Int)]), Maybe Char, [Int])
        - type: '[(Int, Int)]'
  - - expr: let compose = (.) in compose sequenceA unzip
    - - - type: '[(Char, Char)]'
        - type: '[([Char], Char)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose fmap prepend
    - - - type: (Int, [] [Int])
        - type: '[] [Int]'
  - - expr: let tpl = (,) in tpl
    - - - type: (Int, Char)
        - type: (Int, Char)
  - - expr: fmap
    - - - type: ((Int -> Int), Maybe Int)
        - type: Maybe Int
      - - type: ((Char -> Int), [] Char)
        - type: '[] Int'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose sequence just
    - - - type: Maybe Int
        - type: Maybe (Maybe Int)
  - - expr: let compose = (.) in compose maybe unzip
    - - - type: ([(Char, Int)], (Int -> ([Char], [Int])), Maybe Int)
        - type: ([Char], [Int])
  - - expr: maybe
    - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
      - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
      - - type: (Char, (Char -> Char), Maybe Char)
        - type: Char
  - - expr: let conc = (<>) in conc unzip
    - - - type: (([(Char, Char)] -> ([Char], [Char])), [(Char, Char)])
        - type: ([Char], [Char])
      - - type: (([(Int, Int)] -> ([Int], [Int])), [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            zero = 0
            prepend = (:)
          in prepend (just zero)
    - - - type: '[Maybe Int]'
        - type: '[Maybe Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose foldMap prepend
    - - - type: (Int, [] [Int])
        - type: '[Int]'
      - - type: (Char, [] [Char])
        - type: '[Char]'
  - - expr: |-
        let just = Just
            compose = (.)
            tpl = (,)
          in compose tpl just
    - - - type: (Char, Char)
        - type: (Maybe Char, Char)
      - - type: (Char, Int)
        - type: (Maybe Char, Int)
  - - expr: let compose = (.) in compose sequenceA sequence
    - - - type: Maybe ([] Int)
        - type: Maybe ([] Int)
      - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
  - - expr: maybe mempty zip
    - - - type: (Maybe [Int], [Char])
        - type: '[(Int, Char)]'
  - - expr: let compose = (.) in compose maybe sequence
    - - - type: (Maybe ([] Int), (Int -> [] (Maybe Int)), Maybe Int)
        - type: '[] (Maybe Int)'
  - - expr: let compose = (.) in compose maybe toEnum
    - - - type: (Int, (Char -> Char), Maybe Char)
        - type: Char
      - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
  - - expr: let compose = (.) in compose toEnum toEnum
    - - - type: Int
        - type: Char
  - - expr: let compose = (.) in compose length
    - - - type: ((Char -> Maybe Char), Char)
        - type: Int
  - - expr: maybe mempty unzip
    - - - type: Maybe [(Int, Char)]
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose sequenceA sequenceA
    - - - type: '[] ([] Int)'
        - type: '[] ([] Int)'
  - - expr: |-
        let zero = 0
            tpl = (,)
          in maybe (tpl zero)
    - - - type: ((Int -> Char -> (Int, Char)), Maybe Int, Char)
        - type: (Int, Char)
      - - type: ((Char -> Char -> (Int, Char)), Maybe Char, Char)
        - type: (Int, Char)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just fromEnum
    - - - type: Char
        - type: Maybe Int
      - - type: Int
        - type: Maybe Int
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl length
    - - - type: (Maybe Int, Int)
        - type: (Int, Int)
  - - expr: let compose = (.) in compose fmap fmap
    - - - type: ((Char -> Int), [] (Maybe Char))
        - type: '[] (Maybe Int)'
  - - expr: let compose = (.) in compose
    - - - type: ((Int -> Char), (Char -> Int), Char)
        - type: Char
      - - type: ((Int -> Char), (Int -> Int), Int)
        - type: Char
  - - expr: let compose = (.) in compose maybe sequenceA
    - - - type: (Maybe ([] Char), (Char -> [] (Maybe Char)), Maybe Char)
        - type: '[] (Maybe Char)'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl
    - - - type: ((Char -> Int), Char, Int)
        - type: (Int, Int)
      - - type: ((Int -> Char), Int, Char)
        - type: (Char, Char)
      - - type: ((Char -> Char), Char, Char)
        - type: (Char, Char)
  - - expr: |-
        let zero = 0
            tpl = (,)
          in tpl zero
    - - - type: Char
        - type: (Int, Char)
      - - type: Int
        - type: (Int, Int)
  - - expr: sequence
    - - - type: Maybe (Maybe Int)
        - type: Maybe (Maybe Int)
  - - expr: |-
        let just = Just
            compose = (.)
            prepend = (:)
          in compose prepend just
    - - - type: (Char, [Maybe Char])
        - type: '[Maybe Char]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend sequence
    - - - type: (Maybe (Maybe Char), [Maybe (Maybe Char)])
        - type: '[Maybe (Maybe Char)]'
      - - type: (Maybe ([] Char), [[] (Maybe Char)])
        - type: '[[] (Maybe Char)]'
      - - type: (Maybe (Maybe Int), [Maybe (Maybe Int)])
        - type: '[Maybe (Maybe Int)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend
    - - - type: ((Char -> Int), Char, [Int])
        - type: '[Int]'
      - - type: ((Int -> Char), Int, [Char])
        - type: '[Char]'
      - - type: ((Int -> Int), Int, [Int])
        - type: '[Int]'
  - - expr: let compose = (.) in compose unzip sequenceA
    - - - type: (Char, [Int])
        - type: ([Char], [Int])
      - - type: (Int, [Char])
        - type: ([Int], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
            prepend = (:)
          in compose conc prepend
    - - - type: (Char, ([Char] -> [Char]), [Char])
        - type: '[Char]'
      - - type: (Int, ([Int] -> [Int]), [Int])
        - type: '[Int]'
  - - expr: let compose = (.) in compose unzip mempty
    - - - type: Int
        - type: ([Int], [Char])
  - - expr: let prepend = (:) in prepend (unzip mempty)
    - - - type: '[([Char], [Char])]'
        - type: '[([Char], [Char])]'
  - - expr: let just = Just in just
    - - - type: Int
        - type: Maybe Int
  - - expr: let compose = (.) in compose elem unzip
    - - - type: ([(Int, Int)], Maybe ([Int], [Int]))
        - type: Bool
  - - expr: let compose = (.) in compose toEnum fromEnum
    - - - type: Int
        - type: Int
      - - type: Char
        - type: Int
  - - expr: elem
    - - - type: (Int, [] Int)
        - type: Bool
      - - type: (Char, [] Char)
        - type: Bool
  - - expr: let compose = (.) in compose elem length
    - - - type: (Maybe Int, [] Int)
        - type: Bool
  - - expr: let zero = 0 in maybe zero toEnum
    - - - type: Maybe Int
        - type: Int
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose fmap tpl
    - - - type: (Int, Maybe Int)
        - type: Maybe (Int, Int)
      - - type: (Int, Maybe Char)
        - type: Maybe (Int, Char)
      - - type: (Char, Maybe Char)
        - type: Maybe (Char, Char)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just sequence
    - - - type: '[] (Maybe Int)'
        - type: Maybe (Maybe ([] Int))
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl zero)
    - - - type: ((Char -> Char), Char)
        - type: (Int, Char)
  - - expr: let prepend = (:) in maybe sequenceA prepend
    - - - type: (Maybe [Char], [[Char]])
        - type: '[[Char]]'
  - - expr: maybe unzip
    - - - type: |-
            ((Char -> [(Char, Int)] -> ([Char], [Int])), Maybe Char,
             [(Char, Int)])
        - type: ([Char], [Int])
      - - type: |-
            ((Int -> [(Int, Char)] -> ([Int], [Char])), Maybe Int,
             [(Int, Char)])
        - type: ([Int], [Char])
      - - type: |-
            ((Char -> [(Int, Char)] -> ([Int], [Char])), Maybe Char,
             [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose fmap zip
    - - - type: ([Char], Maybe [Char])
        - type: Maybe [(Char, Char)]
  - - expr: zip mempty
    - - - type: '[Int]'
        - type: '[(Char, Int)]'
      - - type: '[Char]'
        - type: '[(Char, Char)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose unzip)
    - - - type: |-
            (((Char -> [(Int, Int)]) -> Char -> ([Int], [Int])),
             (Char -> [(Int, Int)]), Char)
        - type: ([Int], [Int])
      - - type: |-
            (((Int -> [(Int, Int)]) -> Int -> ([Int], [Int])),
             (Int -> [(Int, Int)]), Int)
        - type: ([Int], [Int])
      - - type: |-
            (((Int -> [(Char, Char)]) -> Int -> ([Char], [Char])),
             (Int -> [(Char, Char)]), Int)
        - type: ([Char], [Char])
  - - expr: let compose = (.) in compose sequence unzip
    - - - type: '[(Int, Int)]'
        - type: '[([Int], Int)]'
      - - type: '[(Char, Int)]'
        - type: '[([Char], Int)]'
      - - type: '[(Int, Char)]'
        - type: '[([Int], Char)]'
  - - expr: let compose = (.) in compose elem
    - - - type: ((Char -> Char), Char, Maybe Char)
        - type: Bool
      - - type: ((Int -> Char), Int, [] Char)
        - type: Bool
      - - type: ((Char -> Int), Char, Maybe Int)
        - type: Bool
- - - expr: let compose = (.) in compose unzip
    - - - type: ((Int -> [(Char, Char)]), Int)
        - type: ([Char], [Char])
  - - expr: toEnum
    - - - type: Int
        - type: Int
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl unzip
    - - - type: ([(Int, Char)], Int)
        - type: (([Int], [Char]), Int)
      - - type: ([(Int, Int)], Int)
        - type: (([Int], [Int]), Int)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose compose prepend
    - - - type: (Char, (Char -> [Char]), Char)
        - type: '[Char]'
  - - expr: sequenceA
    - - - type: '[] (Maybe Int)'
        - type: Maybe ([] Int)
      - - type: Maybe (Maybe Int)
        - type: Maybe (Maybe Int)
  - - expr: |-
        let zero = 0
            prepend = (:)
          in maybe (prepend zero)
    - - - type: ((Int -> [Int] -> [Int]), Maybe Int, [Int])
        - type: '[Int]'
      - - type: ((Char -> [Int] -> [Int]), Maybe Char, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend length
    - - - type: (Maybe Int, [Int])
        - type: '[Int]'
      - - type: (Maybe Char, [Int])
        - type: '[Int]'
      - - type: ([] Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just length
    - - - type: Maybe Int
        - type: Maybe Int
  - - expr: zip
    - - - type: ([Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: let zero = 0 in maybe zero length
    - - - type: Maybe (Maybe Char)
        - type: Int
      - - type: Maybe ([] Char)
        - type: Int
      - - type: Maybe ([] Int)
        - type: Int
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl sequence
    - - - type: ([] (Maybe Char), Char)
        - type: (Maybe ([] Char), Char)
  - - expr: let compose = (.) in compose elem toEnum
    - - - type: (Int, Maybe Int)
        - type: Bool
      - - type: (Int, Maybe Char)
        - type: Bool
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip)
    - - - type: ((Int -> [(Char, Int)] -> ([Char], [Int])), Int, [(Char, Int)])
        - type: ([Char], [Int])
      - - type: ((Char -> [(Int, Char)] -> ([Int], [Char])), Char, [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc zip
    - - - type: ([Int], ([Int] -> [(Int, Int)]), [Int])
        - type: '[(Int, Int)]'
  - - expr: let compose = (.) in compose sequence
    - - - type: ((Char -> [] (Maybe Char)), Char)
        - type: Maybe ([] Char)
      - - type: ((Char -> Maybe (Maybe Char)), Char)
        - type: Maybe (Maybe Char)
  - - expr: let conc = (<>) in conc (unzip mempty)
    - - - type: ([Char], [Int])
        - type: ([Char], [Int])
  - - expr: unzip
    - - - type: '[(Char, Char)]'
        - type: ([Char], [Char])
      - - type: '[(Int, Int)]'
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose sequenceA
    - - - type: ((Char -> [] (Maybe Char)), Char)
        - type: Maybe ([] Char)
  - - expr: let compose = (.) in compose maybe length
    - - - type: (Maybe Char, (Int -> Int), Maybe Int)
        - type: Int
      - - type: ([] Char, (Char -> Int), Maybe Char)
        - type: Int
  - - expr: let compose = (.) in compose toEnum
    - - - type: ((Char -> Int), Char)
        - type: Int
      - - type: ((Int -> Int), Int)
        - type: Char
  - - expr: let compose = (.) in compose toEnum length
    - - - type: Maybe Char
        - type: Int
      - - type: Maybe Char
        - type: Char
  - - expr: let compose = (.) in compose (compose sequence)
    - - - type: ((Char -> Char -> [] ([] Int)), Char, Char)
        - type: '[] ([] Int)'
      - - type: ((Char -> Char -> [] (Maybe Char)), Char, Char)
        - type: Maybe ([] Char)
  - - expr: let compose = (.) in compose compose fmap
    - - - type: ((Int -> Int), (Char -> Maybe Int), Char)
        - type: Maybe Int
  - - expr: let compose = (.) in compose (zip mempty)
    - - - type: ((Char -> [Int]), Char)
        - type: '[(Int, Int)]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl toEnum
    - - - type: (Int, Char)
        - type: (Char, Char)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend unzip
    - - - type: ([(Int, Int)], [([Int], [Int])])
        - type: '[([Int], [Int])]'
      - - type: ([(Char, Int)], [([Char], [Int])])
        - type: '[([Char], [Int])]'
      - - type: ([(Char, Char)], [([Char], [Char])])
        - type: '[([Char], [Char])]'
      - - type: ([(Int, Char)], [([Int], [Char])])
        - type: '[([Int], [Char])]'
  - - expr: maybe (unzip mempty)
    - - - type: ((Int -> ([Char], [Char])), Maybe Int)
        - type: ([Char], [Char])
      - - type: ((Int -> ([Int], [Int])), Maybe Int)
        - type: ([Int], [Int])
      - - type: ((Char -> ([Int], [Int])), Maybe Char)
        - type: ([Int], [Int])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose maybe just
    - - - type: (Char, (Int -> Maybe Char), Maybe Int)
        - type: Maybe Char
  - - expr: let conc = (<>) in conc zip
    - - - type: (([Char] -> [Int] -> [(Char, Int)]), [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: maybe zip mempty
    - - - type: (Maybe Char, [Int], [Char])
        - type: '[(Int, Char)]'
      - - type: (Maybe Char, [Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: let tpl = (,) in tpl (unzip mempty)
    - - - type: Int
        - type: (([Int], [Int]), Int)
  - - expr: let compose = (.) in compose compose elem
    - - - type: (Char, (Char -> [] Char), Char)
        - type: Bool
      - - type: (Char, (Char -> Maybe Char), Char)
        - type: Bool
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just
    - - - type: ((Int -> Char), Int)
        - type: Maybe Char
  - - expr: let zero = 0 in maybe zero
    - - - type: ((Char -> Int), Maybe Char)
        - type: Int
      - - type: ((Int -> Int), Maybe Int)
        - type: Int
  - - expr: let compose = (.) in compose zip mempty
    - - - type: (Int, [Int])
        - type: '[(Char, Int)]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl fromEnum
    - - - type: (Int, Int)
        - type: (Int, Int)
  - - expr: let compose = (.) in compose sequence sequenceA
    - - - type: '[] ([] Int)'
        - type: '[] ([] Int)'
  - - expr: let prepend = (:) in maybe mempty prepend
    - - - type: (Maybe Char, [Char])
        - type: '[Char]'
  - - expr: maybe unzip mempty
    - - - type: (Maybe Int, [(Char, Char)])
        - type: ([Char], [Char])
      - - type: (Maybe Int, [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose compose tpl
    - - - type: (Int, (Int -> Int), Int)
        - type: (Int, Int)
      - - type: (Char, (Int -> Int), Int)
        - type: (Char, Int)
  - - expr: let compose = (.) in compose zip sequence
    - - - type: (Maybe [Int], [Char])
        - type: '[(Maybe Int, Char)]'
      - - type: (Maybe [Int], [Int])
        - type: '[(Maybe Int, Int)]'
  - - expr: let prepend = (:) in maybe prepend mempty
    - - - type: (Maybe Char, Char, [Char])
        - type: '[Char]'
      - - type: (Maybe Int, Int, [Int])
        - type: '[Int]'
      - - type: (Maybe Char, Int, [Int])
        - type: '[Int]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just just
    - - - type: Int
        - type: Maybe (Maybe Int)
      - - type: Char
        - type: Maybe (Maybe Char)
  - - expr: maybe sequence
    - - - type: ((Char -> [] ([] Int) -> [] ([] Int)), Maybe Char, [] ([] Int))
        - type: '[] ([] Int)'
  - - expr: let compose = (.) in compose compose zip
    - - - type: ([Int], (Int -> [Int]), Int)
        - type: '[(Int, Int)]'
      - - type: ([Int], (Char -> [Char]), Char)
        - type: '[(Int, Char)]'
  - - expr: maybe (zip mempty)
    - - - type: ((Char -> [Char] -> [(Int, Char)]), Maybe Char, [Char])
        - type: '[(Int, Char)]'
      - - type: ((Char -> [Int] -> [(Char, Int)]), Maybe Char, [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose sequenceA unzip
    - - - type: '[(Int, Char)]'
        - type: '[([Int], Char)]'
      - - type: '[(Int, Int)]'
        - type: '[([Int], Int)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose fmap prepend
    - - - type: (Char, [] [Char])
        - type: '[] [Char]'
      - - type: (Char, Maybe [Char])
        - type: Maybe [Char]
  - - expr: let tpl = (,) in tpl
    - - - type: (Char, Int)
        - type: (Char, Int)
      - - type: (Char, Char)
        - type: (Char, Char)
  - - expr: fmap
    - - - type: ((Int -> Char), Maybe Int)
        - type: Maybe Char
      - - type: ((Char -> Int), Maybe Char)
        - type: Maybe Int
  - - expr: |-
        let just = Just
            compose = (.)
          in compose sequence just
    - - - type: '[] Char'
        - type: '[] (Maybe Char)'
      - - type: '[] Int'
        - type: '[] (Maybe Int)'
      - - type: Maybe Char
        - type: Maybe (Maybe Char)
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc prepend
    - - - type: ((Int -> [Int] -> [Int]), Int, [Int])
        - type: '[Int]'
  - - expr: let compose = (.) in compose maybe unzip
    - - - type: ([(Int, Int)], (Char -> ([Int], [Int])), Maybe Char)
        - type: ([Int], [Int])
      - - type: ([(Int, Int)], (Int -> ([Int], [Int])), Maybe Int)
        - type: ([Int], [Int])
  - - expr: let conc = (<>) in conc unzip
    - - - type: (([(Int, Char)] -> ([Int], [Char])), [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose foldMap prepend
    - - - type: (Char, Maybe [Char])
        - type: '[Char]'
  - - expr: |-
        let just = Just
            compose = (.)
            tpl = (,)
          in compose tpl just
    - - - type: (Int, Char)
        - type: (Maybe Int, Char)
      - - type: (Int, Int)
        - type: (Maybe Int, Int)
  - - expr: maybe mempty zip
    - - - type: (Maybe [Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: let compose = (.) in compose maybe sequence
    - - - type: ([] ([] Int), (Char -> [] ([] Int)), Maybe Char)
        - type: '[] ([] Int)'
  - - expr: let compose = (.) in compose maybe toEnum
    - - - type: (Int, (Int -> Char), Maybe Int)
        - type: Char
  - - expr: let compose = (.) in compose toEnum toEnum
    - - - type: Int
        - type: Int
  - - expr: let compose = (.) in compose length
    - - - type: ((Int -> Maybe Char), Int)
        - type: Int
      - - type: ((Char -> Maybe Int), Char)
        - type: Int
  - - expr: maybe mempty unzip
    - - - type: Maybe [(Char, Char)]
        - type: ([Char], [Char])
      - - type: Maybe [(Char, Int)]
        - type: ([Char], [Int])
  - - expr: let compose = (.) in compose sequenceA sequenceA
    - - - type: '[] (Maybe Char)'
        - type: '[] (Maybe Char)'
  - - expr: |-
        let zero = 0
            tpl = (,)
          in maybe (tpl zero)
    - - - type: ((Int -> Int -> (Int, Int)), Maybe Int, Int)
        - type: (Int, Int)
      - - type: ((Char -> Int -> (Int, Int)), Maybe Char, Int)
        - type: (Int, Int)
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl length
    - - - type: (Maybe Int, Char)
        - type: (Int, Char)
      - - type: ([] Char, Int)
        - type: (Int, Int)
      - - type: ([] Int, Char)
        - type: (Int, Char)
  - - expr: let conc = (<>) in conc (zip mempty)
    - - - type: (([Int] -> [(Int, Int)]), [Int])
        - type: '[(Int, Int)]'
      - - type: (([Char] -> [(Char, Char)]), [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose maybe sequenceA
    - - - type: ([] (Maybe Char), (Char -> Maybe ([] Char)), Maybe Char)
        - type: Maybe ([] Char)
      - - type: ([] ([] Int), (Char -> [] ([] Int)), Maybe Char)
        - type: '[] ([] Int)'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl
    - - - type: ((Char -> Char), Char, Int)
        - type: (Char, Int)
  - - expr: fromEnum
    - - - type: Int
        - type: Int
  - - expr: sequence
    - - - type: '[] (Maybe Char)'
        - type: Maybe ([] Char)
      - - type: Maybe ([] Char)
        - type: '[] (Maybe Char)'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just sequenceA
    - - - type: '[] (Maybe Char)'
        - type: Maybe (Maybe ([] Char))
  - - expr: let compose = (.) in compose zip
    - - - type: ((Int -> [Int]), Int, [Int])
        - type: '[(Int, Int)]'
      - - type: ((Char -> [Char]), Char, [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose fmap elem
    - - - type: (Int, [] (Maybe Int))
        - type: '[] Bool'
      - - type: (Char, Maybe ([] Char))
        - type: Maybe Bool
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend fromEnum
    - - - type: (Char, [Int])
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend
    - - - type: ((Char -> Char), Char, [Char])
        - type: '[Char]'
  - - expr: let compose = (.) in compose unzip sequenceA
    - - - type: (Int, [Int])
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose sequence sequence
    - - - type: Maybe ([] Int)
        - type: Maybe ([] Int)
      - - type: '[] ([] Char)'
        - type: '[] ([] Char)'
  - - expr: let compose = (.) in compose unzip mempty
    - - - type: Char
        - type: ([Char], [Int])
      - - type: Char
        - type: ([Int], [Int])
  - - expr: |-
        let conc = (<>)
            zero = 0
            prepend = (:)
          in conc (prepend zero)
    - - - type: (([Int] -> [Int]), [Int])
        - type: '[Int]'
  - - expr: let prepend = (:) in prepend (unzip mempty)
    - - - type: '[([Char], [Int])]'
        - type: '[([Char], [Int])]'
  - - expr: let just = Just in just
    - - - type: Char
        - type: Maybe Char
  - - expr: |-
        let just = Just
            zero = 0
          in maybe (just zero)
    - - - type: ((Char -> Maybe Int), Maybe Char)
        - type: Maybe Int
  - - expr: let prepend = (:) in maybe sequence prepend
    - - - type: (Maybe [Int], [[Int]])
        - type: '[[Int]]'
  - - expr: let compose = (.) in compose elem unzip
    - - - type: ([(Int, Char)], Maybe ([Int], [Char]))
        - type: Bool
      - - type: ([(Char, Char)], Maybe ([Char], [Char]))
        - type: Bool
  - - expr: let compose = (.) in compose toEnum fromEnum
    - - - type: Char
        - type: Char
      - - type: Int
        - type: Char
  - - expr: let compose = (.) in compose maybe fromEnum
    - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
      - - type: (Int, (Char -> Int), Maybe Char)
        - type: Int
  - - expr: elem
    - - - type: (Int, Maybe Int)
        - type: Bool
      - - type: (Char, Maybe Char)
        - type: Bool
  - - expr: let compose = (.) in compose elem length
    - - - type: ([] Char, Maybe Int)
        - type: Bool
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just toEnum
    - - - type: Int
        - type: Maybe Char
      - - type: Int
        - type: Maybe Int
  - - expr: |-
        let just = Just
            compose = (.)
          in compose elem just
    - - - type: (Int, [] (Maybe Int))
        - type: Bool
      - - type: (Int, Maybe (Maybe Int))
        - type: Bool
      - - type: (Char, Maybe (Maybe Char))
        - type: Bool
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl zero)
    - - - type: ((Int -> Char), Int)
        - type: (Int, Char)
      - - type: ((Char -> Int), Char)
        - type: (Int, Int)
  - - expr: let compose = (.) in compose fmap zip
    - - - type: ([Char], [] [Char])
        - type: '[] [(Char, Char)]'
      - - type: ([Int], Maybe [Int])
        - type: Maybe [(Int, Int)]
  - - expr: zip mempty
    - - - type: '[Char]'
        - type: '[(Int, Char)]'
  - - expr: let compose = (.) in compose unzip sequence
    - - - type: (Char, [Char])
        - type: ([Char], [Char])
      - - type: (Int, [Char])
        - type: ([Int], [Char])
      - - type: (Char, [Int])
        - type: ([Char], [Int])
      - - type: (Int, [Int])
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose sequence unzip
    - - - type: '[(Char, Char)]'
        - type: '[([Char], Char)]'
- - - expr: |-
        let compose = (.)
            zero = 0
            prepend = (:)
          in compose (prepend zero)
    - - - type: ((Int -> [Int]), Int)
        - type: '[Int]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl unzip
    - - - type: ([(Char, Char)], Int)
        - type: (([Char], [Char]), Int)
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose compose prepend
    - - - type: (Int, (Char -> [Int]), Char)
        - type: '[Int]'
  - - expr: sequenceA
    - - - type: '[] (Maybe Char)'
        - type: Maybe ([] Char)
  - - expr: length
    - - - type: '[] Int'
        - type: Int
      - - type: '[] Char'
        - type: Int
      - - type: Maybe Char
        - type: Int
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend sequenceA
    - - - type: ([] ([] Int), [[] ([] Int)])
        - type: '[[] ([] Int)]'
      - - type: (Maybe (Maybe Int), [Maybe (Maybe Int)])
        - type: '[Maybe (Maybe Int)]'
      - - type: ([] (Maybe Int), [Maybe ([] Int)])
        - type: '[Maybe ([] Int)]'
  - - expr: zip
    - - - type: ([Int], [Int])
        - type: '[(Int, Int)]'
      - - type: ([Char], [Char])
        - type: '[(Char, Char)]'
      - - type: ([Int], [Char])
        - type: '[(Int, Char)]'
  - - expr: let zero = 0 in maybe zero length
    - - - type: Maybe (Maybe Int)
        - type: Int
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl sequence
    - - - type: ([] ([] Char), Int)
        - type: ([] ([] Char), Int)
      - - type: (Maybe (Maybe Char), Int)
        - type: (Maybe (Maybe Char), Int)
      - - type: (Maybe (Maybe Int), Int)
        - type: (Maybe (Maybe Int), Int)
  - - expr: let compose = (.) in compose elem toEnum
    - - - type: (Int, [] Int)
        - type: Bool
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose (conc unzip)
    - - - type: ((Int -> [(Char, Char)] -> ([Char], [Char])), Int, [(Char, Char)])
        - type: ([Char], [Char])
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc zip
    - - - type: ([Char], ([Int] -> [(Char, Int)]), [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose sequence
    - - - type: ((Int -> Maybe ([] Int)), Int)
        - type: '[] (Maybe Int)'
  - - expr: let conc = (<>) in conc (unzip mempty)
    - - - type: ([Int], [Char])
        - type: ([Int], [Char])
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just unzip
    - - - type: '[(Char, Int)]'
        - type: Maybe ([Char], [Int])
      - - type: '[(Int, Int)]'
        - type: Maybe ([Int], [Int])
  - - expr: unzip
    - - - type: '[(Char, Int)]'
        - type: ([Char], [Int])
      - - type: '[(Int, Char)]'
        - type: ([Int], [Char])
  - - expr: let compose = (.) in compose foldMap zip
    - - - type: ([Char], Maybe [Char])
        - type: '[(Char, Char)]'
      - - type: ([Int], Maybe [Int])
        - type: '[(Int, Int)]'
      - - type: ([Char], Maybe [Int])
        - type: '[(Char, Int)]'
      - - type: ([Char], [] [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose sequenceA
    - - - type: ((Int -> Maybe (Maybe Int)), Int)
        - type: Maybe (Maybe Int)
      - - type: ((Int -> Maybe ([] Int)), Int)
        - type: '[] (Maybe Int)'
  - - expr: let compose = (.) in compose maybe length
    - - - type: (Maybe Int, (Int -> Int), Maybe Int)
        - type: Int
  - - expr: let compose = (.) in compose toEnum
    - - - type: ((Int -> Int), Int)
        - type: Int
  - - expr: let compose = (.) in compose toEnum length
    - - - type: '[] Char'
        - type: Char
  - - expr: let compose = (.) in compose (compose sequence)
    - - - type: ((Char -> Int -> Maybe ([] Int)), Char, Int)
        - type: '[] (Maybe Int)'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in compose conc unzip
    - - - type: ([(Char, Char)], ([Char], [Char]))
        - type: ([Char], [Char])
      - - type: ([(Char, Int)], ([Char], [Int]))
        - type: ([Char], [Int])
  - - expr: let compose = (.) in compose compose fmap
    - - - type: ((Int -> Int), (Int -> [] Int), Int)
        - type: '[] Int'
      - - type: ((Char -> Char), (Char -> Maybe Char), Char)
        - type: Maybe Char
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl sequenceA
    - - - type: ([] ([] Char), Int)
        - type: ([] ([] Char), Int)
      - - type: ([] (Maybe Int), Char)
        - type: (Maybe ([] Int), Char)
  - - expr: let compose = (.) in compose (zip mempty)
    - - - type: ((Char -> [Char]), Char)
        - type: '[(Int, Char)]'
      - - type: ((Char -> [Char]), Char)
        - type: '[(Char, Char)]'
      - - type: ((Int -> [Int]), Int)
        - type: '[(Int, Int)]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl toEnum
    - - - type: (Int, Char)
        - type: (Int, Char)
      - - type: (Int, Int)
        - type: (Char, Int)
      - - type: (Int, Int)
        - type: (Int, Int)
  - - expr: |-
        let just = Just
            zero = 0
            tpl = (,)
          in tpl (just zero)
    - - - type: Char
        - type: (Maybe Int, Char)
  - - expr: |-
        let just = Just
            compose = (.)
          in compose maybe just
    - - - type: (Int, (Char -> Maybe Int), Maybe Char)
        - type: Maybe Int
  - - expr: let conc = (<>) in conc zip
    - - - type: (([Char] -> [Char] -> [(Char, Char)]), [Char], [Char])
        - type: '[(Char, Char)]'
      - - type: (([Int] -> [Int] -> [(Int, Int)]), [Int], [Int])
        - type: '[(Int, Int)]'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose sequenceA just
    - - - type: '[] Int'
        - type: '[] (Maybe Int)'
  - - expr: maybe zip mempty
    - - - type: (Maybe Int, [Char], [Char])
        - type: '[(Char, Char)]'
  - - expr: let tpl = (,) in tpl (unzip mempty)
    - - - type: Char
        - type: (([Int], [Int]), Char)
      - - type: Int
        - type: (([Int], [Char]), Int)
  - - expr: let compose = (.) in compose compose elem
    - - - type: (Int, (Int -> [] Int), Int)
        - type: Bool
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just
    - - - type: ((Char -> Char), Char)
        - type: Maybe Char
      - - type: ((Char -> Int), Char)
        - type: Maybe Int
  - - expr: let compose = (.) in compose zip sequenceA
    - - - type: ([] [Char], [Char])
        - type: '[([] Char, Char)]'
      - - type: (Maybe [Char], [Char])
        - type: '[(Maybe Char, Char)]'
      - - type: (Maybe [Int], [Int])
        - type: '[(Maybe Int, Int)]'
  - - expr: let compose = (.) in compose zip mempty
    - - - type: (Char, [Int])
        - type: '[(Char, Int)]'
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose tpl fromEnum
    - - - type: (Char, Int)
        - type: (Int, Int)
      - - type: (Char, Char)
        - type: (Int, Char)
  - - expr: let compose = (.) in compose sequence sequenceA
    - - - type: '[] ([] Char)'
        - type: '[] ([] Char)'
  - - expr: maybe unzip mempty
    - - - type: (Maybe Char, [(Int, Char)])
        - type: ([Int], [Char])
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose compose tpl
    - - - type: (Int, (Int -> Char), Int)
        - type: (Int, Char)
  - - expr: let compose = (.) in compose elem fromEnum
    - - - type: (Char, [] Int)
        - type: Bool
  - - expr: let prepend = (:) in maybe prepend mempty
    - - - type: (Maybe Int, Char, [Char])
        - type: '[Char]'
  - - expr: let compose = (.) in compose compose zip
    - - - type: ([Char], (Int -> [Int]), Int)
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose sequenceA unzip
    - - - type: '[(Char, Int)]'
        - type: '[([Char], Int)]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose fmap prepend
    - - - type: (Int, Maybe [Int])
        - type: Maybe [Int]
  - - expr: let tpl = (,) in tpl
    - - - type: (Int, Int)
        - type: (Int, Int)
  - - expr: |-
        let conc = (<>)
            prepend = (:)
          in conc prepend
    - - - type: ((Char -> [Char] -> [Char]), Char, [Char])
        - type: '[Char]'
  - - expr: let compose = (.) in compose maybe unzip
    - - - type: ([(Char, Char)], (Int -> ([Char], [Char])), Maybe Int)
        - type: ([Char], [Char])
  - - expr: maybe
    - - - type: (Char, (Int -> Char), Maybe Int)
        - type: Char
  - - expr: let conc = (<>) in conc unzip
    - - - type: (([(Char, Int)] -> ([Char], [Int])), [(Char, Int)])
        - type: ([Char], [Int])
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose foldMap prepend
    - - - type: (Int, Maybe [Int])
        - type: '[Int]'
  - - expr: let compose = (.) in compose sequenceA sequence
    - - - type: '[] ([] Char)'
        - type: '[] ([] Char)'
      - - type: Maybe ([] Char)
        - type: Maybe ([] Char)
  - - expr: maybe mempty zip
    - - - type: (Maybe [Char], [Char])
        - type: '[(Char, Char)]'
      - - type: (Maybe [Char], [Int])
        - type: '[(Char, Int)]'
  - - expr: let compose = (.) in compose maybe sequence
    - - - type: (Maybe ([] Int), (Char -> [] (Maybe Int)), Maybe Char)
        - type: '[] (Maybe Int)'
  - - expr: let compose = (.) in compose maybe toEnum
    - - - type: (Int, (Int -> Int), Maybe Int)
        - type: Int
  - - expr: let compose = (.) in compose length
    - - - type: ((Int -> Maybe Int), Int)
        - type: Int
  - - expr: maybe mempty unzip
    - - - type: Maybe [(Int, Int)]
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose sequenceA sequenceA
    - - - type: '[] ([] Char)'
        - type: '[] ([] Char)'
      - - type: Maybe (Maybe Int)
        - type: Maybe (Maybe Int)
  - - expr: let zero = 0 in maybe zero fromEnum
    - - - type: Maybe Int
        - type: Int
      - - type: Maybe Char
        - type: Int
  - - expr: let compose = (.) in compose fmap fmap
    - - - type: ((Int -> Int), Maybe ([] Int))
        - type: Maybe ([] Int)
      - - type: ((Char -> Char), [] ([] Char))
        - type: '[] ([] Char)'
      - - type: ((Char -> Char), [] (Maybe Char))
        - type: '[] (Maybe Char)'
  - - expr: let compose = (.) in compose
    - - - type: ((Char -> Int), (Char -> Char), Char)
        - type: Int
      - - type: ((Char -> Int), (Int -> Char), Int)
        - type: Int
  - - expr: let conc = (<>) in conc (zip mempty)
    - - - type: (([Int] -> [(Char, Int)]), [Int])
        - type: '[(Char, Int)]'
      - - type: (([Char] -> [(Int, Char)]), [Char])
        - type: '[(Int, Char)]'
  - - expr: fromEnum
    - - - type: Char
        - type: Int
  - - expr: sequence
    - - - type: '[] ([] Int)'
        - type: '[] ([] Int)'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just sequenceA
    - - - type: '[] ([] Char)'
        - type: Maybe ([] ([] Char))
      - - type: '[] ([] Int)'
        - type: Maybe ([] ([] Int))
      - - type: Maybe ([] Char)
        - type: Maybe ([] (Maybe Char))
  - - expr: |-
        let just = Just
            compose = (.)
            prepend = (:)
          in compose prepend just
    - - - type: (Int, [Maybe Int])
        - type: '[Maybe Int]'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend sequence
    - - - type: (Maybe ([] Int), [[] (Maybe Int)])
        - type: '[[] (Maybe Int)]'
  - - expr: let compose = (.) in compose zip
    - - - type: ((Int -> [Char]), Int, [Int])
        - type: '[(Char, Int)]'
      - - type: ((Char -> [Char]), Char, [Char])
        - type: '[(Char, Char)]'
  - - expr: let compose = (.) in compose fmap elem
    - - - type: (Int, Maybe (Maybe Int))
        - type: Maybe Bool
      - - type: (Char, [] (Maybe Char))
        - type: '[] Bool'
  - - expr: |-
        let compose = (.)
            prepend = (:)
          in compose prepend fromEnum
    - - - type: (Int, [Int])
        - type: '[Int]'
  - - expr: let compose = (.) in compose unzip sequenceA
    - - - type: (Char, [Char])
        - type: ([Char], [Char])
  - - expr: let compose = (.) in compose sequence sequence
    - - - type: '[] (Maybe Char)'
        - type: '[] (Maybe Char)'
      - - type: Maybe (Maybe Char)
        - type: Maybe (Maybe Char)
  - - expr: let compose = (.) in compose unzip mempty
    - - - type: Int
        - type: ([Char], [Char])
  - - expr: let prepend = (:) in prepend (unzip mempty)
    - - - type: '[([Int], [Int])]'
        - type: '[([Int], [Int])]'
      - - type: '[([Int], [Char])]'
        - type: '[([Int], [Char])]'
  - - expr: |-
        let just = Just
            zero = 0
          in maybe (just zero)
    - - - type: ((Int -> Maybe Int), Maybe Int)
        - type: Maybe Int
  - - expr: let prepend = (:) in maybe sequence prepend
    - - - type: (Maybe [Char], [[Char]])
        - type: '[[Char]]'
  - - expr: let compose = (.) in compose elem unzip
    - - - type: ([(Int, Int)], [] ([Int], [Int]))
        - type: Bool
  - - expr: let compose = (.) in compose maybe fromEnum
    - - - type: (Char, (Int -> Int), Maybe Int)
        - type: Int
      - - type: (Char, (Char -> Int), Maybe Char)
        - type: Int
  - - expr: |-
        let zero = 0
            prepend = (:)
          in prepend zero
    - - - type: '[Int]'
        - type: '[Int]'
  - - expr: let compose = (.) in compose elem length
    - - - type: ([] Int, [] Int)
        - type: Bool
      - - type: ([] Int, Maybe Int)
        - type: Bool
  - - expr: |-
        let compose = (.)
            tpl = (,)
          in compose fmap tpl
    - - - type: (Int, [] Int)
        - type: '[] (Int, Int)'
  - - expr: |-
        let just = Just
            compose = (.)
          in compose just sequence
    - - - type: '[] ([] Char)'
        - type: Maybe ([] ([] Char))
      - - type: Maybe ([] Int)
        - type: Maybe ([] (Maybe Int))
      - - type: '[] (Maybe Char)'
        - type: Maybe (Maybe ([] Char))
  - - expr: |-
        let just = Just
            compose = (.)
          in compose elem just
    - - - type: (Char, [] (Maybe Char))
        - type: Bool
  - - expr: |-
        let compose = (.)
            zero = 0
            tpl = (,)
          in compose (tpl zero)
    - - - type: ((Int -> Int), Int)
        - type: (Int, Int)
  - - expr: let prepend = (:) in maybe sequenceA prepend
    - - - type: (Maybe [Int], [[Int]])
        - type: '[[Int]]'
  - - expr: maybe unzip
    - - - type: ((Int -> [(Int, Int)] -> ([Int], [Int])), Maybe Int, [(Int, Int)])
        - type: ([Int], [Int])
  - - expr: let compose = (.) in compose fmap zip
    - - - type: ([Char], Maybe [Int])
        - type: Maybe [(Char, Int)]
  - - expr: zip mempty
    - - - type: '[Int]'
        - type: '[(Int, Int)]'
  - - expr: |-
        let conc = (<>)
            compose = (.)
          in conc (compose unzip)
    - - - type: |-
            (((Char -> [(Char, Char)]) -> Char -> ([Char], [Char])),
             (Char -> [(Char, Char)]), Char)
        - type: ([Char], [Char])
  - - expr: let compose = (.) in compose elem
    - - - type: ((Int -> Char), Int, Maybe Char)
        - type: Bool
